
practice_SimpleProject_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007980  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08007a90  08007a90  00008a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e40  08007e40  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007e40  08007e40  00008e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e48  08007e48  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e48  08007e48  00008e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e4c  08007e4c  00008e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007e50  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200001d4  08008024  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08008024  00009584  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bca  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9d  00000000  00000000  0001bdc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0001ec68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3e  00000000  00000000  0001fe98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af78  00000000  00000000  00020cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189c5  00000000  00000000  0003bc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009401e  00000000  00000000  00054613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8631  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d10  00000000  00000000  000e8674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ee384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a78 	.word	0x08007a78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007a78 	.word	0x08007a78

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f000 fe48 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f814 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f000 fa68 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b78:	f000 fa40 	bl	8000ffc <MX_DMA_Init>
  MX_ADC1_Init();
 8000b7c:	f000 f86a 	bl	8000c54 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b80:	f000 f9e8 	bl	8000f54 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b84:	f000 f8d0 	bl	8000d28 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000b88:	f000 f8fc 	bl	8000d84 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b8c:	f000 f96e 	bl	8000e6c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000b90:	f000 fa0a 	bl	8000fa8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  user_main();
 8000b94:	f004 f8ee 	bl	8004d74 <user_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <main+0x30>

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	@ 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba6:	2228      	movs	r2, #40	@ 0x28
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 fe94 	bl	80058d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000bd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be0:	2302      	movs	r3, #2
 8000be2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fedb 	bl	80029b0 <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c00:	f000 fa84 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c04:	230f      	movs	r3, #15
 8000c06:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c14:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	2102      	movs	r1, #2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 f947 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c2c:	f000 fa6e 	bl	800110c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c30:	2302      	movs	r3, #2
 8000c32:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c38:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 fac9 	bl	80031d4 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c48:	f000 fa60 	bl	800110c <Error_Handler>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3750      	adds	r7, #80	@ 0x50
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c64:	4b2e      	ldr	r3, [pc, #184]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000c66:	4a2f      	ldr	r2, [pc, #188]	@ (8000d24 <MX_ADC1_Init+0xd0>)
 8000c68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000c6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c72:	4b2b      	ldr	r3, [pc, #172]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c78:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c7e:	4b28      	ldr	r3, [pc, #160]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000c80:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c86:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c92:	4823      	ldr	r0, [pc, #140]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000c94:	f000 fe3a 	bl	800190c <HAL_ADC_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c9e:	f000 fa35 	bl	800110c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000caa:	2305      	movs	r3, #5
 8000cac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	481b      	ldr	r0, [pc, #108]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000cb4:	f000 ffd4 	bl	8001c60 <HAL_ADC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f000 fa25 	bl	800110c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4814      	ldr	r0, [pc, #80]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000cd0:	f000 ffc6 	bl	8001c60 <HAL_ADC_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000cda:	f000 fa17 	bl	800110c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000cec:	f000 ffb8 	bl	8001c60 <HAL_ADC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cf6:	f000 fa09 	bl	800110c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	@ (8000d20 <MX_ADC1_Init+0xcc>)
 8000d08:	f000 ffaa 	bl	8001c60 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000d12:	f000 f9fb 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001f0 	.word	0x200001f0
 8000d24:	40012400 	.word	0x40012400

08000d28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d2e:	4a13      	ldr	r2, [pc, #76]	@ (8000d7c <MX_I2C1_Init+0x54>)
 8000d30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d34:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <MX_I2C1_Init+0x58>)
 8000d36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d58:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d66:	f001 fcdf 	bl	8002728 <HAL_I2C_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d70:	f000 f9cc 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000264 	.word	0x20000264
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	000186a0 	.word	0x000186a0

08000d84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0318 	add.w	r3, r7, #24
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dae:	4b2d      	ldr	r3, [pc, #180]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000db0:	4a2d      	ldr	r2, [pc, #180]	@ (8000e68 <MX_TIM1_Init+0xe4>)
 8000db2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000db4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000db6:	2247      	movs	r2, #71	@ 0x47
 8000db8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000dc0:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000dc2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000dc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b26      	ldr	r3, [pc, #152]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dce:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b23      	ldr	r3, [pc, #140]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dda:	4822      	ldr	r0, [pc, #136]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000ddc:	f002 fab0 	bl	8003340 <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000de6:	f000 f991 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dee:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	4619      	mov	r1, r3
 8000df6:	481b      	ldr	r0, [pc, #108]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000df8:	f002 fe3a 	bl	8003a70 <HAL_TIM_ConfigClockSource>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000e02:	f000 f983 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000e06:	4817      	ldr	r0, [pc, #92]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000e08:	f002 fb8c 	bl	8003524 <HAL_TIM_IC_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000e12:	f000 f97b 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	480f      	ldr	r0, [pc, #60]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000e26:	f003 faed 	bl	8004404 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000e30:	f000 f96c 	bl	800110c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	@ (8000e64 <MX_TIM1_Init+0xe0>)
 8000e4c:	f002 fcb2 	bl	80037b4 <HAL_TIM_IC_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000e56:	f000 f959 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	@ 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200002b8 	.word	0x200002b8
 8000e68:	40012c00 	.word	0x40012c00

08000e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08e      	sub	sp, #56	@ 0x38
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
 8000e98:	615a      	str	r2, [r3, #20]
 8000e9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000e9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000eb2:	2259      	movs	r2, #89	@ 0x59
 8000eb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec2:	4823      	ldr	r0, [pc, #140]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000ec4:	f002 fa3c 	bl	8003340 <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000ece:	f000 f91d 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000edc:	4619      	mov	r1, r3
 8000ede:	481c      	ldr	r0, [pc, #112]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000ee0:	f002 fdc6 	bl	8003a70 <HAL_TIM_ConfigClockSource>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000eea:	f000 f90f 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eee:	4818      	ldr	r0, [pc, #96]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000ef0:	f002 fac0 	bl	8003474 <HAL_TIM_PWM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000efa:	f000 f907 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4810      	ldr	r0, [pc, #64]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000f0e:	f003 fa79 	bl	8004404 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000f18:	f000 f8f8 	bl	800110c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1c:	2360      	movs	r3, #96	@ 0x60
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 45;
 8000f20:	232d      	movs	r3, #45	@ 0x2d
 8000f22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4619      	mov	r1, r3
 8000f32:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000f34:	f002 fcda 	bl	80038ec <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000f3e:	f000 f8e5 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f42:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <MX_TIM2_Init+0xe4>)
 8000f44:	f000 fa4c 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8000f48:	bf00      	nop
 8000f4a:	3738      	adds	r7, #56	@ 0x38
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000300 	.word	0x20000300

08000f54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <MX_USART1_UART_Init+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f60:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f8c:	f003 faaa 	bl	80044e4 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f96:	f000 f8b9 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000038c 	.word	0x2000038c
 8000fa4:	40013800 	.word	0x40013800

08000fa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <MX_USART3_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fb4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	f003 fa80 	bl	80044e4 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fea:	f000 f88f 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200003d4 	.word	0x200003d4
 8000ff8:	40004800 	.word	0x40004800

08000ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <MX_DMA_Init+0x48>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <MX_DMA_Init+0x48>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <MX_DMA_Init+0x48>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	200b      	movs	r0, #11
 8001020:	f001 f837 	bl	8002092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001024:	200b      	movs	r0, #11
 8001026:	f001 f850 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	200f      	movs	r0, #15
 8001030:	f001 f82f 	bl	8002092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001034:	200f      	movs	r0, #15
 8001036:	f001 f848 	bl	80020ca <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105c:	4b28      	ldr	r3, [pc, #160]	@ (8001100 <MX_GPIO_Init+0xb8>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <MX_GPIO_Init+0xb8>)
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <MX_GPIO_Init+0xb8>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <MX_GPIO_Init+0xb8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <MX_GPIO_Init+0xb8>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <MX_GPIO_Init+0xb8>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <MX_GPIO_Init+0xb8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a1b      	ldr	r2, [pc, #108]	@ (8001100 <MX_GPIO_Init+0xb8>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <MX_GPIO_Init+0xb8>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010aa:	4816      	ldr	r0, [pc, #88]	@ (8001104 <MX_GPIO_Init+0xbc>)
 80010ac:	f001 fb23 	bl	80026f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010b6:	4814      	ldr	r0, [pc, #80]	@ (8001108 <MX_GPIO_Init+0xc0>)
 80010b8:	f001 fb1d 	bl	80026f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 80010bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4619      	mov	r1, r3
 80010d4:	480b      	ldr	r0, [pc, #44]	@ (8001104 <MX_GPIO_Init+0xbc>)
 80010d6:	f001 f973 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80010da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_GPIO_Init+0xc0>)
 80010f4:	f001 f964 	bl	80023c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	40010c00 	.word	0x40010c00
 8001108:	40010800 	.word	0x40010800

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <Error_Handler+0x8>

08001118 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <HAL_MspInit+0x5c>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <HAL_MspInit+0x5c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_MspInit+0x5c>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <HAL_MspInit+0x5c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a0e      	ldr	r2, [pc, #56]	@ (8001174 <HAL_MspInit+0x5c>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <HAL_MspInit+0x5c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_MspInit+0x60>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <HAL_MspInit+0x60>)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000

0800117c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a2c      	ldr	r2, [pc, #176]	@ (8001248 <HAL_ADC_MspInit+0xcc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d151      	bne.n	8001240 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800119c:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <HAL_ADC_MspInit+0xd0>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a2a      	ldr	r2, [pc, #168]	@ (800124c <HAL_ADC_MspInit+0xd0>)
 80011a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b28      	ldr	r3, [pc, #160]	@ (800124c <HAL_ADC_MspInit+0xd0>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <HAL_ADC_MspInit+0xd0>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a24      	ldr	r2, [pc, #144]	@ (800124c <HAL_ADC_MspInit+0xd0>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <HAL_ADC_MspInit+0xd0>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80011cc:	2307      	movs	r3, #7
 80011ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d0:	2303      	movs	r3, #3
 80011d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	481d      	ldr	r0, [pc, #116]	@ (8001250 <HAL_ADC_MspInit+0xd4>)
 80011dc:	f001 f8f0 	bl	80023c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <HAL_ADC_MspInit+0xd8>)
 80011e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <HAL_ADC_MspInit+0xdc>)
 80011e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001254 <HAL_ADC_MspInit+0xd8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ec:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <HAL_ADC_MspInit+0xd8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_ADC_MspInit+0xd8>)
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <HAL_ADC_MspInit+0xd8>)
 80011fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <HAL_ADC_MspInit+0xd8>)
 8001202:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001206:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_ADC_MspInit+0xd8>)
 800120a:	2220      	movs	r2, #32
 800120c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <HAL_ADC_MspInit+0xd8>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001214:	480f      	ldr	r0, [pc, #60]	@ (8001254 <HAL_ADC_MspInit+0xd8>)
 8001216:	f000 ff73 	bl	8002100 <HAL_DMA_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001220:	f7ff ff74 	bl	800110c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <HAL_ADC_MspInit+0xd8>)
 8001228:	621a      	str	r2, [r3, #32]
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <HAL_ADC_MspInit+0xd8>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2012      	movs	r0, #18
 8001236:	f000 ff2c 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800123a:	2012      	movs	r0, #18
 800123c:	f000 ff45 	bl	80020ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40012400 	.word	0x40012400
 800124c:	40021000 	.word	0x40021000
 8001250:	40010800 	.word	0x40010800
 8001254:	20000220 	.word	0x20000220
 8001258:	40020008 	.word	0x40020008

0800125c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a15      	ldr	r2, [pc, #84]	@ (80012cc <HAL_I2C_MspInit+0x70>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d123      	bne.n	80012c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <HAL_I2C_MspInit+0x74>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a13      	ldr	r2, [pc, #76]	@ (80012d0 <HAL_I2C_MspInit+0x74>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <HAL_I2C_MspInit+0x74>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001294:	23c0      	movs	r3, #192	@ 0xc0
 8001296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001298:	2312      	movs	r3, #18
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4619      	mov	r1, r3
 80012a6:	480b      	ldr	r0, [pc, #44]	@ (80012d4 <HAL_I2C_MspInit+0x78>)
 80012a8:	f001 f88a 	bl	80023c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <HAL_I2C_MspInit+0x74>)
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	4a07      	ldr	r2, [pc, #28]	@ (80012d0 <HAL_I2C_MspInit+0x74>)
 80012b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012b6:	61d3      	str	r3, [r2, #28]
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_I2C_MspInit+0x74>)
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40005400 	.word	0x40005400
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010c00 	.word	0x40010c00

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a36      	ldr	r2, [pc, #216]	@ (80013cc <HAL_TIM_Base_MspInit+0xf4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d12d      	bne.n	8001354 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012f8:	4b35      	ldr	r3, [pc, #212]	@ (80013d0 <HAL_TIM_Base_MspInit+0xf8>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a34      	ldr	r2, [pc, #208]	@ (80013d0 <HAL_TIM_Base_MspInit+0xf8>)
 80012fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b32      	ldr	r3, [pc, #200]	@ (80013d0 <HAL_TIM_Base_MspInit+0xf8>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b2f      	ldr	r3, [pc, #188]	@ (80013d0 <HAL_TIM_Base_MspInit+0xf8>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a2e      	ldr	r2, [pc, #184]	@ (80013d0 <HAL_TIM_Base_MspInit+0xf8>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <HAL_TIM_Base_MspInit+0xf8>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0318 	add.w	r3, r7, #24
 800133a:	4619      	mov	r1, r3
 800133c:	4825      	ldr	r0, [pc, #148]	@ (80013d4 <HAL_TIM_Base_MspInit+0xfc>)
 800133e:	f001 f83f 	bl	80023c0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	201b      	movs	r0, #27
 8001348:	f000 fea3 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800134c:	201b      	movs	r0, #27
 800134e:	f000 febc 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001352:	e037      	b.n	80013c4 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800135c:	d132      	bne.n	80013c4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135e:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <HAL_TIM_Base_MspInit+0xf8>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a1b      	ldr	r2, [pc, #108]	@ (80013d0 <HAL_TIM_Base_MspInit+0xf8>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <HAL_TIM_Base_MspInit+0xf8>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <HAL_TIM_Base_MspInit+0x100>)
 8001378:	4a18      	ldr	r2, [pc, #96]	@ (80013dc <HAL_TIM_Base_MspInit+0x104>)
 800137a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <HAL_TIM_Base_MspInit+0x100>)
 800137e:	2210      	movs	r2, #16
 8001380:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <HAL_TIM_Base_MspInit+0x100>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <HAL_TIM_Base_MspInit+0x100>)
 800138a:	2280      	movs	r2, #128	@ 0x80
 800138c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800138e:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <HAL_TIM_Base_MspInit+0x100>)
 8001390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001394:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_TIM_Base_MspInit+0x100>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800139c:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <HAL_TIM_Base_MspInit+0x100>)
 800139e:	2220      	movs	r2, #32
 80013a0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_TIM_Base_MspInit+0x100>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80013a8:	480b      	ldr	r0, [pc, #44]	@ (80013d8 <HAL_TIM_Base_MspInit+0x100>)
 80013aa:	f000 fea9 	bl	8002100 <HAL_DMA_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_TIM_Base_MspInit+0xe0>
      Error_Handler();
 80013b4:	f7ff feaa 	bl	800110c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a07      	ldr	r2, [pc, #28]	@ (80013d8 <HAL_TIM_Base_MspInit+0x100>)
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80013be:	4a06      	ldr	r2, [pc, #24]	@ (80013d8 <HAL_TIM_Base_MspInit+0x100>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	@ 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40012c00 	.word	0x40012c00
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010800 	.word	0x40010800
 80013d8:	20000348 	.word	0x20000348
 80013dc:	40020058 	.word	0x40020058

080013e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013fe:	d12a      	bne.n	8001456 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <HAL_TIM_MspPostInit+0x80>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a16      	ldr	r2, [pc, #88]	@ (8001460 <HAL_TIM_MspPostInit+0x80>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <HAL_TIM_MspPostInit+0x80>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800141c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	4619      	mov	r1, r3
 800142c:	480d      	ldr	r0, [pc, #52]	@ (8001464 <HAL_TIM_MspPostInit+0x84>)
 800142e:	f000 ffc7 	bl	80023c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001432:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <HAL_TIM_MspPostInit+0x88>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <HAL_TIM_MspPostInit+0x88>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000
 8001464:	40010800 	.word	0x40010800
 8001468:	40010000 	.word	0x40010000

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0318 	add.w	r3, r7, #24
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a38      	ldr	r2, [pc, #224]	@ (8001568 <HAL_UART_MspInit+0xfc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d132      	bne.n	80014f2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800148c:	4b37      	ldr	r3, [pc, #220]	@ (800156c <HAL_UART_MspInit+0x100>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a36      	ldr	r2, [pc, #216]	@ (800156c <HAL_UART_MspInit+0x100>)
 8001492:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b34      	ldr	r3, [pc, #208]	@ (800156c <HAL_UART_MspInit+0x100>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b31      	ldr	r3, [pc, #196]	@ (800156c <HAL_UART_MspInit+0x100>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a30      	ldr	r2, [pc, #192]	@ (800156c <HAL_UART_MspInit+0x100>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <HAL_UART_MspInit+0x100>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0318 	add.w	r3, r7, #24
 80014ce:	4619      	mov	r1, r3
 80014d0:	4827      	ldr	r0, [pc, #156]	@ (8001570 <HAL_UART_MspInit+0x104>)
 80014d2:	f000 ff75 	bl	80023c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	4619      	mov	r1, r3
 80014ea:	4821      	ldr	r0, [pc, #132]	@ (8001570 <HAL_UART_MspInit+0x104>)
 80014ec:	f000 ff68 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014f0:	e036      	b.n	8001560 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001574 <HAL_UART_MspInit+0x108>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d131      	bne.n	8001560 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_UART_MspInit+0x100>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	4a1a      	ldr	r2, [pc, #104]	@ (800156c <HAL_UART_MspInit+0x100>)
 8001502:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001506:	61d3      	str	r3, [r2, #28]
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <HAL_UART_MspInit+0x100>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_UART_MspInit+0x100>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a14      	ldr	r2, [pc, #80]	@ (800156c <HAL_UART_MspInit+0x100>)
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_UART_MspInit+0x100>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800152c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 0318 	add.w	r3, r7, #24
 800153e:	4619      	mov	r1, r3
 8001540:	480d      	ldr	r0, [pc, #52]	@ (8001578 <HAL_UART_MspInit+0x10c>)
 8001542:	f000 ff3d 	bl	80023c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001546:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	4619      	mov	r1, r3
 800155a:	4807      	ldr	r0, [pc, #28]	@ (8001578 <HAL_UART_MspInit+0x10c>)
 800155c:	f000 ff30 	bl	80023c0 <HAL_GPIO_Init>
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	@ 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40013800 	.word	0x40013800
 800156c:	40021000 	.word	0x40021000
 8001570:	40010800 	.word	0x40010800
 8001574:	40004800 	.word	0x40004800
 8001578:	40010c00 	.word	0x40010c00

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <NMI_Handler+0x4>

08001584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <MemManage_Handler+0x4>

08001594 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015cc:	f000 f95e 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015d8:	4802      	ldr	r0, [pc, #8]	@ (80015e4 <DMA1_Channel1_IRQHandler+0x10>)
 80015da:	f000 fdeb 	bl	80021b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000220 	.word	0x20000220

080015e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <DMA1_Channel5_IRQHandler+0x10>)
 80015ee:	f000 fde1 	bl	80021b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000348 	.word	0x20000348

080015fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <ADC1_2_IRQHandler+0x10>)
 8001602:	f000 fa5b 	bl	8001abc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200001f0 	.word	0x200001f0

08001610 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <TIM1_CC_IRQHandler+0x10>)
 8001616:	f001 ffdd 	bl	80035d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200002b8 	.word	0x200002b8

08001624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return 1;
 8001628:	2301      	movs	r3, #1
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <_kill>:

int _kill(int pid, int sig)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800163c:	f004 f99e 	bl	800597c <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	2216      	movs	r2, #22
 8001644:	601a      	str	r2, [r3, #0]
  return -1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_exit>:

void _exit (int status)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800165a:	f04f 31ff 	mov.w	r1, #4294967295
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffe7 	bl	8001632 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <_exit+0x12>

08001668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e00a      	b.n	8001690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800167a:	f3af 8000 	nop.w
 800167e:	4601      	mov	r1, r0
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	60ba      	str	r2, [r7, #8]
 8001686:	b2ca      	uxtb	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	dbf0      	blt.n	800167a <_read+0x12>
  }

  return len;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	e009      	b.n	80016c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	60ba      	str	r2, [r7, #8]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbf1      	blt.n	80016b4 <_write+0x12>
  }
  return len;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_close>:

int _close(int file)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001700:	605a      	str	r2, [r3, #4]
  return 0;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <_isatty>:

int _isatty(int file)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f004 f906 	bl	800597c <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20005000 	.word	0x20005000
 800179c:	00000400 	.word	0x00000400
 80017a0:	2000041c 	.word	0x2000041c
 80017a4:	20000588 	.word	0x20000588

080017a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 80017b4:	f7ff fff8 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b8:	480b      	ldr	r0, [pc, #44]	@ (80017e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ba:	490c      	ldr	r1, [pc, #48]	@ (80017ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017bc:	4a0c      	ldr	r2, [pc, #48]	@ (80017f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017d0:	4c09      	ldr	r4, [pc, #36]	@ (80017f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017de:	f004 f8d3 	bl	8005988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017e2:	f7ff f9c1 	bl	8000b68 <main>
  bx lr
 80017e6:	4770      	bx	lr
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017f0:	08007e50 	.word	0x08007e50
  ldr r2, =_sbss
 80017f4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017f8:	20000584 	.word	0x20000584

080017fc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <CAN1_RX1_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <HAL_Init+0x28>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <HAL_Init+0x28>)
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 fc33 	bl	800207c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001816:	200f      	movs	r0, #15
 8001818:	f000 f808 	bl	800182c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800181c:	f7ff fc7c 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_InitTick+0x54>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_InitTick+0x58>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001842:	fbb3 f3f1 	udiv	r3, r3, r1
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fc4b 	bl	80020e6 <HAL_SYSTICK_Config>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00e      	b.n	8001878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d80a      	bhi.n	8001876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f000 fc13 	bl	8002092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800186c:	4a06      	ldr	r2, [pc, #24]	@ (8001888 <HAL_InitTick+0x5c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000000 	.word	0x20000000
 8001884:	20000008 	.word	0x20000008
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_IncTick+0x1c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_IncTick+0x20>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a03      	ldr	r2, [pc, #12]	@ (80018ac <HAL_IncTick+0x20>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000420 	.word	0x20000420

080018b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b02      	ldr	r3, [pc, #8]	@ (80018c0 <HAL_GetTick+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	20000420 	.word	0x20000420

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff fff0 	bl	80018b0 <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d005      	beq.n	80018ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018de:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <HAL_Delay+0x44>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ea:	bf00      	nop
 80018ec:	f7ff ffe0 	bl	80018b0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f7      	bhi.n	80018ec <HAL_Delay+0x28>
  {
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008

0800190c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0be      	b.n	8001aac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fc16 	bl	800117c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fa7d 	bl	8001e50 <ADC_ConversionStop_Disable>
 8001956:	4603      	mov	r3, r0
 8001958:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 8099 	bne.w	8001a9a <HAL_ADC_Init+0x18e>
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 8095 	bne.w	8001a9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001974:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001978:	f023 0302 	bic.w	r3, r3, #2
 800197c:	f043 0202 	orr.w	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800198c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7b1b      	ldrb	r3, [r3, #12]
 8001992:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001994:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	4313      	orrs	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019a4:	d003      	beq.n	80019ae <HAL_ADC_Init+0xa2>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d102      	bne.n	80019b4 <HAL_ADC_Init+0xa8>
 80019ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019b2:	e000      	b.n	80019b6 <HAL_ADC_Init+0xaa>
 80019b4:	2300      	movs	r3, #0
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7d1b      	ldrb	r3, [r3, #20]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d119      	bne.n	80019f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7b1b      	ldrb	r3, [r3, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	035a      	lsls	r2, r3, #13
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	e00b      	b.n	80019f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	f043 0220 	orr.w	r2, r3, #32
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	4b28      	ldr	r3, [pc, #160]	@ (8001ab4 <HAL_ADC_Init+0x1a8>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a28:	d003      	beq.n	8001a32 <HAL_ADC_Init+0x126>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d104      	bne.n	8001a3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	051b      	lsls	r3, r3, #20
 8001a3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a42:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <HAL_ADC_Init+0x1ac>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d10b      	bne.n	8001a78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6a:	f023 0303 	bic.w	r3, r3, #3
 8001a6e:	f043 0201 	orr.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a76:	e018      	b.n	8001aaa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7c:	f023 0312 	bic.w	r3, r3, #18
 8001a80:	f043 0210 	orr.w	r2, r3, #16
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a98:	e007      	b.n	8001aaa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	f043 0210 	orr.w	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ab8:	ff1f0efe 	.word	0xff1f0efe

08001abc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d03e      	beq.n	8001b5c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d039      	beq.n	8001b5c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b0a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b0e:	d11d      	bne.n	8001b4c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d119      	bne.n	8001b4c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0220 	bic.w	r2, r2, #32
 8001b26:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d105      	bne.n	8001b4c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f874 	bl	8001c3a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f06f 0212 	mvn.w	r2, #18
 8001b5a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d04d      	beq.n	8001c02 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d048      	beq.n	8001c02 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d105      	bne.n	8001b88 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b80:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001b92:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001b96:	d012      	beq.n	8001bbe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d125      	bne.n	8001bf2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001bb0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001bb4:	d11d      	bne.n	8001bf2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d119      	bne.n	8001bf2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bcc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f96d 	bl	8001ed2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 020c 	mvn.w	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d012      	beq.n	8001c32 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00d      	beq.n	8001c32 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f812 	bl	8001c4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0201 	mvn.w	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x20>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e0dc      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x1da>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d81c      	bhi.n	8001cca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b05      	subs	r3, #5
 8001ca2:	221f      	movs	r2, #31
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4019      	ands	r1, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b05      	subs	r3, #5
 8001cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cc8:	e03c      	b.n	8001d44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d81c      	bhi.n	8001d0c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3b23      	subs	r3, #35	@ 0x23
 8001ce4:	221f      	movs	r2, #31
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	4019      	ands	r1, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b23      	subs	r3, #35	@ 0x23
 8001cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d0a:	e01b      	b.n	8001d44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3b41      	subs	r3, #65	@ 0x41
 8001d1e:	221f      	movs	r2, #31
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	4019      	ands	r1, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	3b41      	subs	r3, #65	@ 0x41
 8001d38:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d91c      	bls.n	8001d86 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68d9      	ldr	r1, [r3, #12]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3b1e      	subs	r3, #30
 8001d5e:	2207      	movs	r2, #7
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4019      	ands	r1, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6898      	ldr	r0, [r3, #8]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	3b1e      	subs	r3, #30
 8001d78:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	e019      	b.n	8001dba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6919      	ldr	r1, [r3, #16]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	2207      	movs	r2, #7
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4019      	ands	r1, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6898      	ldr	r0, [r3, #8]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	fa00 f203 	lsl.w	r2, r0, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	d003      	beq.n	8001dca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dc6:	2b11      	cmp	r3, #17
 8001dc8:	d132      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1d      	ldr	r2, [pc, #116]	@ (8001e44 <HAL_ADC_ConfigChannel+0x1e4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d125      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d126      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001df0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d11a      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dfa:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <HAL_ADC_ConfigChannel+0x1e8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a13      	ldr	r2, [pc, #76]	@ (8001e4c <HAL_ADC_ConfigChannel+0x1ec>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	0c9a      	lsrs	r2, r3, #18
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f9      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x1b2>
 8001e1e:	e007      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	f043 0220 	orr.w	r2, r3, #32
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	40012400 	.word	0x40012400
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	431bde83 	.word	0x431bde83

08001e50 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d12e      	bne.n	8001ec8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e7a:	f7ff fd19 	bl	80018b0 <HAL_GetTick>
 8001e7e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e80:	e01b      	b.n	8001eba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e82:	f7ff fd15 	bl	80018b0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d914      	bls.n	8001eba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d10d      	bne.n	8001eba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	f043 0210 	orr.w	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e007      	b.n	8001eca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d0dc      	beq.n	8001e82 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4906      	ldr	r1, [pc, #24]	@ (8001f7c <__NVIC_EnableIRQ+0x34>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db0a      	blt.n	8001faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	490c      	ldr	r1, [pc, #48]	@ (8001fcc <__NVIC_SetPriority+0x4c>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa8:	e00a      	b.n	8001fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4908      	ldr	r1, [pc, #32]	@ (8001fd0 <__NVIC_SetPriority+0x50>)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	3b04      	subs	r3, #4
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	761a      	strb	r2, [r3, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	@ 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f1c3 0307 	rsb	r3, r3, #7
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	bf28      	it	cs
 8001ff2:	2304      	movcs	r3, #4
 8001ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d902      	bls.n	8002004 <NVIC_EncodePriority+0x30>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b03      	subs	r3, #3
 8002002:	e000      	b.n	8002006 <NVIC_EncodePriority+0x32>
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43d9      	mvns	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	4313      	orrs	r3, r2
         );
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002048:	d301      	bcc.n	800204e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204a:	2301      	movs	r3, #1
 800204c:	e00f      	b.n	800206e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204e:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <SysTick_Config+0x40>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002056:	210f      	movs	r1, #15
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f7ff ff90 	bl	8001f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002060:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <SysTick_Config+0x40>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002066:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <SysTick_Config+0x40>)
 8002068:	2207      	movs	r2, #7
 800206a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	e000e010 	.word	0xe000e010

0800207c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff2d 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a4:	f7ff ff42 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 80020a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f7ff ff90 	bl	8001fd4 <NVIC_EncodePriority>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff5f 	bl	8001f80 <__NVIC_SetPriority>
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff35 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffa2 	bl	8002038 <SysTick_Config>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e043      	b.n	800219e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	4b22      	ldr	r3, [pc, #136]	@ (80021a8 <HAL_DMA_Init+0xa8>)
 800211e:	4413      	add	r3, r2
 8002120:	4a22      	ldr	r2, [pc, #136]	@ (80021ac <HAL_DMA_Init+0xac>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	009a      	lsls	r2, r3, #2
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a1f      	ldr	r2, [pc, #124]	@ (80021b0 <HAL_DMA_Init+0xb0>)
 8002132:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800214a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800214e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	bffdfff8 	.word	0xbffdfff8
 80021ac:	cccccccd 	.word	0xcccccccd
 80021b0:	40020000 	.word	0x40020000

080021b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	2204      	movs	r2, #4
 80021d2:	409a      	lsls	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d04f      	beq.n	800227c <HAL_DMA_IRQHandler+0xc8>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d04a      	beq.n	800227c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0204 	bic.w	r2, r2, #4
 8002202:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a66      	ldr	r2, [pc, #408]	@ (80023a4 <HAL_DMA_IRQHandler+0x1f0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d029      	beq.n	8002262 <HAL_DMA_IRQHandler+0xae>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a65      	ldr	r2, [pc, #404]	@ (80023a8 <HAL_DMA_IRQHandler+0x1f4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d022      	beq.n	800225e <HAL_DMA_IRQHandler+0xaa>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a63      	ldr	r2, [pc, #396]	@ (80023ac <HAL_DMA_IRQHandler+0x1f8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01a      	beq.n	8002258 <HAL_DMA_IRQHandler+0xa4>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a62      	ldr	r2, [pc, #392]	@ (80023b0 <HAL_DMA_IRQHandler+0x1fc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d012      	beq.n	8002252 <HAL_DMA_IRQHandler+0x9e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a60      	ldr	r2, [pc, #384]	@ (80023b4 <HAL_DMA_IRQHandler+0x200>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00a      	beq.n	800224c <HAL_DMA_IRQHandler+0x98>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a5f      	ldr	r2, [pc, #380]	@ (80023b8 <HAL_DMA_IRQHandler+0x204>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d102      	bne.n	8002246 <HAL_DMA_IRQHandler+0x92>
 8002240:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002244:	e00e      	b.n	8002264 <HAL_DMA_IRQHandler+0xb0>
 8002246:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800224a:	e00b      	b.n	8002264 <HAL_DMA_IRQHandler+0xb0>
 800224c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002250:	e008      	b.n	8002264 <HAL_DMA_IRQHandler+0xb0>
 8002252:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002256:	e005      	b.n	8002264 <HAL_DMA_IRQHandler+0xb0>
 8002258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800225c:	e002      	b.n	8002264 <HAL_DMA_IRQHandler+0xb0>
 800225e:	2340      	movs	r3, #64	@ 0x40
 8002260:	e000      	b.n	8002264 <HAL_DMA_IRQHandler+0xb0>
 8002262:	2304      	movs	r3, #4
 8002264:	4a55      	ldr	r2, [pc, #340]	@ (80023bc <HAL_DMA_IRQHandler+0x208>)
 8002266:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8094 	beq.w	800239a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800227a:	e08e      	b.n	800239a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	2202      	movs	r2, #2
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d056      	beq.n	800233a <HAL_DMA_IRQHandler+0x186>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d051      	beq.n	800233a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10b      	bne.n	80022bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 020a 	bic.w	r2, r2, #10
 80022b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a38      	ldr	r2, [pc, #224]	@ (80023a4 <HAL_DMA_IRQHandler+0x1f0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d029      	beq.n	800231a <HAL_DMA_IRQHandler+0x166>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a37      	ldr	r2, [pc, #220]	@ (80023a8 <HAL_DMA_IRQHandler+0x1f4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <HAL_DMA_IRQHandler+0x162>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a35      	ldr	r2, [pc, #212]	@ (80023ac <HAL_DMA_IRQHandler+0x1f8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01a      	beq.n	8002310 <HAL_DMA_IRQHandler+0x15c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a34      	ldr	r2, [pc, #208]	@ (80023b0 <HAL_DMA_IRQHandler+0x1fc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d012      	beq.n	800230a <HAL_DMA_IRQHandler+0x156>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a32      	ldr	r2, [pc, #200]	@ (80023b4 <HAL_DMA_IRQHandler+0x200>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00a      	beq.n	8002304 <HAL_DMA_IRQHandler+0x150>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a31      	ldr	r2, [pc, #196]	@ (80023b8 <HAL_DMA_IRQHandler+0x204>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d102      	bne.n	80022fe <HAL_DMA_IRQHandler+0x14a>
 80022f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80022fc:	e00e      	b.n	800231c <HAL_DMA_IRQHandler+0x168>
 80022fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002302:	e00b      	b.n	800231c <HAL_DMA_IRQHandler+0x168>
 8002304:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002308:	e008      	b.n	800231c <HAL_DMA_IRQHandler+0x168>
 800230a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800230e:	e005      	b.n	800231c <HAL_DMA_IRQHandler+0x168>
 8002310:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002314:	e002      	b.n	800231c <HAL_DMA_IRQHandler+0x168>
 8002316:	2320      	movs	r3, #32
 8002318:	e000      	b.n	800231c <HAL_DMA_IRQHandler+0x168>
 800231a:	2302      	movs	r3, #2
 800231c:	4a27      	ldr	r2, [pc, #156]	@ (80023bc <HAL_DMA_IRQHandler+0x208>)
 800231e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	d034      	beq.n	800239a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002338:	e02f      	b.n	800239a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	2208      	movs	r2, #8
 8002340:	409a      	lsls	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d028      	beq.n	800239c <HAL_DMA_IRQHandler+0x1e8>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d023      	beq.n	800239c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 020e 	bic.w	r2, r2, #14
 8002362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236c:	2101      	movs	r1, #1
 800236e:	fa01 f202 	lsl.w	r2, r1, r2
 8002372:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	2b00      	cmp	r3, #0
 8002390:	d004      	beq.n	800239c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4798      	blx	r3
    }
  }
  return;
 800239a:	bf00      	nop
 800239c:	bf00      	nop
}
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40020008 	.word	0x40020008
 80023a8:	4002001c 	.word	0x4002001c
 80023ac:	40020030 	.word	0x40020030
 80023b0:	40020044 	.word	0x40020044
 80023b4:	40020058 	.word	0x40020058
 80023b8:	4002006c 	.word	0x4002006c
 80023bc:	40020000 	.word	0x40020000

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b08b      	sub	sp, #44	@ 0x2c
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023ce:	2300      	movs	r3, #0
 80023d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d2:	e169      	b.n	80026a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023d4:	2201      	movs	r2, #1
 80023d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	f040 8158 	bne.w	80026a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4a9a      	ldr	r2, [pc, #616]	@ (8002660 <HAL_GPIO_Init+0x2a0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d05e      	beq.n	80024ba <HAL_GPIO_Init+0xfa>
 80023fc:	4a98      	ldr	r2, [pc, #608]	@ (8002660 <HAL_GPIO_Init+0x2a0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d875      	bhi.n	80024ee <HAL_GPIO_Init+0x12e>
 8002402:	4a98      	ldr	r2, [pc, #608]	@ (8002664 <HAL_GPIO_Init+0x2a4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d058      	beq.n	80024ba <HAL_GPIO_Init+0xfa>
 8002408:	4a96      	ldr	r2, [pc, #600]	@ (8002664 <HAL_GPIO_Init+0x2a4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d86f      	bhi.n	80024ee <HAL_GPIO_Init+0x12e>
 800240e:	4a96      	ldr	r2, [pc, #600]	@ (8002668 <HAL_GPIO_Init+0x2a8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d052      	beq.n	80024ba <HAL_GPIO_Init+0xfa>
 8002414:	4a94      	ldr	r2, [pc, #592]	@ (8002668 <HAL_GPIO_Init+0x2a8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d869      	bhi.n	80024ee <HAL_GPIO_Init+0x12e>
 800241a:	4a94      	ldr	r2, [pc, #592]	@ (800266c <HAL_GPIO_Init+0x2ac>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d04c      	beq.n	80024ba <HAL_GPIO_Init+0xfa>
 8002420:	4a92      	ldr	r2, [pc, #584]	@ (800266c <HAL_GPIO_Init+0x2ac>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d863      	bhi.n	80024ee <HAL_GPIO_Init+0x12e>
 8002426:	4a92      	ldr	r2, [pc, #584]	@ (8002670 <HAL_GPIO_Init+0x2b0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d046      	beq.n	80024ba <HAL_GPIO_Init+0xfa>
 800242c:	4a90      	ldr	r2, [pc, #576]	@ (8002670 <HAL_GPIO_Init+0x2b0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d85d      	bhi.n	80024ee <HAL_GPIO_Init+0x12e>
 8002432:	2b12      	cmp	r3, #18
 8002434:	d82a      	bhi.n	800248c <HAL_GPIO_Init+0xcc>
 8002436:	2b12      	cmp	r3, #18
 8002438:	d859      	bhi.n	80024ee <HAL_GPIO_Init+0x12e>
 800243a:	a201      	add	r2, pc, #4	@ (adr r2, 8002440 <HAL_GPIO_Init+0x80>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	080024bb 	.word	0x080024bb
 8002444:	08002495 	.word	0x08002495
 8002448:	080024a7 	.word	0x080024a7
 800244c:	080024e9 	.word	0x080024e9
 8002450:	080024ef 	.word	0x080024ef
 8002454:	080024ef 	.word	0x080024ef
 8002458:	080024ef 	.word	0x080024ef
 800245c:	080024ef 	.word	0x080024ef
 8002460:	080024ef 	.word	0x080024ef
 8002464:	080024ef 	.word	0x080024ef
 8002468:	080024ef 	.word	0x080024ef
 800246c:	080024ef 	.word	0x080024ef
 8002470:	080024ef 	.word	0x080024ef
 8002474:	080024ef 	.word	0x080024ef
 8002478:	080024ef 	.word	0x080024ef
 800247c:	080024ef 	.word	0x080024ef
 8002480:	080024ef 	.word	0x080024ef
 8002484:	0800249d 	.word	0x0800249d
 8002488:	080024b1 	.word	0x080024b1
 800248c:	4a79      	ldr	r2, [pc, #484]	@ (8002674 <HAL_GPIO_Init+0x2b4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002492:	e02c      	b.n	80024ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	623b      	str	r3, [r7, #32]
          break;
 800249a:	e029      	b.n	80024f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	3304      	adds	r3, #4
 80024a2:	623b      	str	r3, [r7, #32]
          break;
 80024a4:	e024      	b.n	80024f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	3308      	adds	r3, #8
 80024ac:	623b      	str	r3, [r7, #32]
          break;
 80024ae:	e01f      	b.n	80024f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	330c      	adds	r3, #12
 80024b6:	623b      	str	r3, [r7, #32]
          break;
 80024b8:	e01a      	b.n	80024f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024c2:	2304      	movs	r3, #4
 80024c4:	623b      	str	r3, [r7, #32]
          break;
 80024c6:	e013      	b.n	80024f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d105      	bne.n	80024dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024d0:	2308      	movs	r3, #8
 80024d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	611a      	str	r2, [r3, #16]
          break;
 80024da:	e009      	b.n	80024f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024dc:	2308      	movs	r3, #8
 80024de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	615a      	str	r2, [r3, #20]
          break;
 80024e6:	e003      	b.n	80024f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
          break;
 80024ec:	e000      	b.n	80024f0 <HAL_GPIO_Init+0x130>
          break;
 80024ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2bff      	cmp	r3, #255	@ 0xff
 80024f4:	d801      	bhi.n	80024fa <HAL_GPIO_Init+0x13a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	e001      	b.n	80024fe <HAL_GPIO_Init+0x13e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3304      	adds	r3, #4
 80024fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2bff      	cmp	r3, #255	@ 0xff
 8002504:	d802      	bhi.n	800250c <HAL_GPIO_Init+0x14c>
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	e002      	b.n	8002512 <HAL_GPIO_Init+0x152>
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	3b08      	subs	r3, #8
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	210f      	movs	r1, #15
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	fa01 f303 	lsl.w	r3, r1, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	401a      	ands	r2, r3
 8002524:	6a39      	ldr	r1, [r7, #32]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	fa01 f303 	lsl.w	r3, r1, r3
 800252c:	431a      	orrs	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80b1 	beq.w	80026a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002540:	4b4d      	ldr	r3, [pc, #308]	@ (8002678 <HAL_GPIO_Init+0x2b8>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4a4c      	ldr	r2, [pc, #304]	@ (8002678 <HAL_GPIO_Init+0x2b8>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6193      	str	r3, [r2, #24]
 800254c:	4b4a      	ldr	r3, [pc, #296]	@ (8002678 <HAL_GPIO_Init+0x2b8>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002558:	4a48      	ldr	r2, [pc, #288]	@ (800267c <HAL_GPIO_Init+0x2bc>)
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	3302      	adds	r3, #2
 8002560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002564:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a40      	ldr	r2, [pc, #256]	@ (8002680 <HAL_GPIO_Init+0x2c0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d013      	beq.n	80025ac <HAL_GPIO_Init+0x1ec>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a3f      	ldr	r2, [pc, #252]	@ (8002684 <HAL_GPIO_Init+0x2c4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00d      	beq.n	80025a8 <HAL_GPIO_Init+0x1e8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a3e      	ldr	r2, [pc, #248]	@ (8002688 <HAL_GPIO_Init+0x2c8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d007      	beq.n	80025a4 <HAL_GPIO_Init+0x1e4>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a3d      	ldr	r2, [pc, #244]	@ (800268c <HAL_GPIO_Init+0x2cc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d101      	bne.n	80025a0 <HAL_GPIO_Init+0x1e0>
 800259c:	2303      	movs	r3, #3
 800259e:	e006      	b.n	80025ae <HAL_GPIO_Init+0x1ee>
 80025a0:	2304      	movs	r3, #4
 80025a2:	e004      	b.n	80025ae <HAL_GPIO_Init+0x1ee>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e002      	b.n	80025ae <HAL_GPIO_Init+0x1ee>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_GPIO_Init+0x1ee>
 80025ac:	2300      	movs	r3, #0
 80025ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b0:	f002 0203 	and.w	r2, r2, #3
 80025b4:	0092      	lsls	r2, r2, #2
 80025b6:	4093      	lsls	r3, r2
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025be:	492f      	ldr	r1, [pc, #188]	@ (800267c <HAL_GPIO_Init+0x2bc>)
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	492c      	ldr	r1, [pc, #176]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	608b      	str	r3, [r1, #8]
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	4928      	ldr	r1, [pc, #160]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002600:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	4922      	ldr	r1, [pc, #136]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	60cb      	str	r3, [r1, #12]
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800260e:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	43db      	mvns	r3, r3
 8002616:	491e      	ldr	r1, [pc, #120]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 8002618:	4013      	ands	r3, r2
 800261a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d006      	beq.n	8002636 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4918      	ldr	r1, [pc, #96]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
 8002634:	e006      	b.n	8002644 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002636:	4b16      	ldr	r3, [pc, #88]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	43db      	mvns	r3, r3
 800263e:	4914      	ldr	r1, [pc, #80]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 8002640:	4013      	ands	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d021      	beq.n	8002694 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002650:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	490e      	ldr	r1, [pc, #56]	@ (8002690 <HAL_GPIO_Init+0x2d0>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
 800265c:	e021      	b.n	80026a2 <HAL_GPIO_Init+0x2e2>
 800265e:	bf00      	nop
 8002660:	10320000 	.word	0x10320000
 8002664:	10310000 	.word	0x10310000
 8002668:	10220000 	.word	0x10220000
 800266c:	10210000 	.word	0x10210000
 8002670:	10120000 	.word	0x10120000
 8002674:	10110000 	.word	0x10110000
 8002678:	40021000 	.word	0x40021000
 800267c:	40010000 	.word	0x40010000
 8002680:	40010800 	.word	0x40010800
 8002684:	40010c00 	.word	0x40010c00
 8002688:	40011000 	.word	0x40011000
 800268c:	40011400 	.word	0x40011400
 8002690:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002694:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	43db      	mvns	r3, r3
 800269c:	4909      	ldr	r1, [pc, #36]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 800269e:	4013      	ands	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	3301      	adds	r3, #1
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	fa22 f303 	lsr.w	r3, r2, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f47f ae8e 	bne.w	80023d4 <HAL_GPIO_Init+0x14>
  }
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	372c      	adds	r7, #44	@ 0x2c
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40010400 	.word	0x40010400

080026c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	887b      	ldrh	r3, [r7, #2]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e001      	b.n	80026ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	807b      	strh	r3, [r7, #2]
 8002702:	4613      	mov	r3, r2
 8002704:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002706:	787b      	ldrb	r3, [r7, #1]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800270c:	887a      	ldrh	r2, [r7, #2]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002712:	e003      	b.n	800271c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002714:	887b      	ldrh	r3, [r7, #2]
 8002716:	041a      	lsls	r2, r3, #16
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	611a      	str	r2, [r3, #16]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
	...

08002728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e12b      	b.n	8002992 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe fd84 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2224      	movs	r2, #36	@ 0x24
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800277a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800278a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800278c:	f000 fcdc 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 8002790:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4a81      	ldr	r2, [pc, #516]	@ (800299c <HAL_I2C_Init+0x274>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d807      	bhi.n	80027ac <HAL_I2C_Init+0x84>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4a80      	ldr	r2, [pc, #512]	@ (80029a0 <HAL_I2C_Init+0x278>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	bf94      	ite	ls
 80027a4:	2301      	movls	r3, #1
 80027a6:	2300      	movhi	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	e006      	b.n	80027ba <HAL_I2C_Init+0x92>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4a7d      	ldr	r2, [pc, #500]	@ (80029a4 <HAL_I2C_Init+0x27c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	bf94      	ite	ls
 80027b4:	2301      	movls	r3, #1
 80027b6:	2300      	movhi	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e0e7      	b.n	8002992 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a78      	ldr	r2, [pc, #480]	@ (80029a8 <HAL_I2C_Init+0x280>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	0c9b      	lsrs	r3, r3, #18
 80027cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a6a      	ldr	r2, [pc, #424]	@ (800299c <HAL_I2C_Init+0x274>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d802      	bhi.n	80027fc <HAL_I2C_Init+0xd4>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	3301      	adds	r3, #1
 80027fa:	e009      	b.n	8002810 <HAL_I2C_Init+0xe8>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	4a69      	ldr	r2, [pc, #420]	@ (80029ac <HAL_I2C_Init+0x284>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	099b      	lsrs	r3, r3, #6
 800280e:	3301      	adds	r3, #1
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	430b      	orrs	r3, r1
 8002816:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002822:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	495c      	ldr	r1, [pc, #368]	@ (800299c <HAL_I2C_Init+0x274>)
 800282c:	428b      	cmp	r3, r1
 800282e:	d819      	bhi.n	8002864 <HAL_I2C_Init+0x13c>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1e59      	subs	r1, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fbb1 f3f3 	udiv	r3, r1, r3
 800283e:	1c59      	adds	r1, r3, #1
 8002840:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002844:	400b      	ands	r3, r1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_I2C_Init+0x138>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1e59      	subs	r1, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fbb1 f3f3 	udiv	r3, r1, r3
 8002858:	3301      	adds	r3, #1
 800285a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285e:	e051      	b.n	8002904 <HAL_I2C_Init+0x1dc>
 8002860:	2304      	movs	r3, #4
 8002862:	e04f      	b.n	8002904 <HAL_I2C_Init+0x1dc>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d111      	bne.n	8002890 <HAL_I2C_Init+0x168>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e58      	subs	r0, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	440b      	add	r3, r1
 800287a:	fbb0 f3f3 	udiv	r3, r0, r3
 800287e:	3301      	adds	r3, #1
 8002880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	e012      	b.n	80028b6 <HAL_I2C_Init+0x18e>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e58      	subs	r0, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	0099      	lsls	r1, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Init+0x196>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e022      	b.n	8002904 <HAL_I2C_Init+0x1dc>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10e      	bne.n	80028e4 <HAL_I2C_Init+0x1bc>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1e58      	subs	r0, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	460b      	mov	r3, r1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	440b      	add	r3, r1
 80028d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028e2:	e00f      	b.n	8002904 <HAL_I2C_Init+0x1dc>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e58      	subs	r0, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	0099      	lsls	r1, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002900:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	6809      	ldr	r1, [r1, #0]
 8002908:	4313      	orrs	r3, r2
 800290a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69da      	ldr	r2, [r3, #28]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002932:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6911      	ldr	r1, [r2, #16]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68d2      	ldr	r2, [r2, #12]
 800293e:	4311      	orrs	r1, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	430b      	orrs	r3, r1
 8002946:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	000186a0 	.word	0x000186a0
 80029a0:	001e847f 	.word	0x001e847f
 80029a4:	003d08ff 	.word	0x003d08ff
 80029a8:	431bde83 	.word	0x431bde83
 80029ac:	10624dd3 	.word	0x10624dd3

080029b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e272      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8087 	beq.w	8002ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d0:	4b92      	ldr	r3, [pc, #584]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d00c      	beq.n	80029f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029dc:	4b8f      	ldr	r3, [pc, #572]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d112      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5e>
 80029e8:	4b8c      	ldr	r3, [pc, #560]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f4:	d10b      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f6:	4b89      	ldr	r3, [pc, #548]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d06c      	beq.n	8002adc <HAL_RCC_OscConfig+0x12c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d168      	bne.n	8002adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e24c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a16:	d106      	bne.n	8002a26 <HAL_RCC_OscConfig+0x76>
 8002a18:	4b80      	ldr	r3, [pc, #512]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	e02e      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x98>
 8002a2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a7a      	ldr	r2, [pc, #488]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b78      	ldr	r3, [pc, #480]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a77      	ldr	r2, [pc, #476]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e01d      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0xbc>
 8002a52:	4b72      	ldr	r3, [pc, #456]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a71      	ldr	r2, [pc, #452]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6e      	ldr	r2, [pc, #440]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a6c:	4b6b      	ldr	r3, [pc, #428]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a6a      	ldr	r2, [pc, #424]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b68      	ldr	r3, [pc, #416]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a67      	ldr	r2, [pc, #412]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe ff10 	bl	80018b0 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe ff0c 	bl	80018b0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	@ 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e200      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0xe4>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fefc 	bl	80018b0 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe fef8 	bl	80018b0 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	@ 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1ec      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	4b53      	ldr	r3, [pc, #332]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x10c>
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d063      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aea:	4b4c      	ldr	r3, [pc, #304]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002af6:	4b49      	ldr	r3, [pc, #292]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d11c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x18c>
 8002b02:	4b46      	ldr	r3, [pc, #280]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d116      	bne.n	8002b3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	4b43      	ldr	r3, [pc, #268]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x176>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e1c0      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b3d      	ldr	r3, [pc, #244]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4939      	ldr	r1, [pc, #228]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	e03a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b44:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe feb1 	bl	80018b0 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b52:	f7fe fead 	bl	80018b0 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1a1      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4b2a      	ldr	r3, [pc, #168]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4927      	ldr	r1, [pc, #156]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b86:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fe90 	bl	80018b0 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fe fe8c 	bl	80018b0 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e180      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d03a      	beq.n	8002c34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d019      	beq.n	8002bfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fe70 	bl	80018b0 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fe6c 	bl	80018b0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e160      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f000 fad0 	bl	8003198 <RCC_Delay>
 8002bf8:	e01c      	b.n	8002c34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c00:	f7fe fe56 	bl	80018b0 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c06:	e00f      	b.n	8002c28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c08:	f7fe fe52 	bl	80018b0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d908      	bls.n	8002c28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e146      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	42420000 	.word	0x42420000
 8002c24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c28:	4b92      	ldr	r3, [pc, #584]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e9      	bne.n	8002c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80a6 	beq.w	8002d8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c46:	4b8b      	ldr	r3, [pc, #556]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	4b88      	ldr	r3, [pc, #544]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a87      	ldr	r2, [pc, #540]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	61d3      	str	r3, [r2, #28]
 8002c5e:	4b85      	ldr	r3, [pc, #532]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6e:	4b82      	ldr	r3, [pc, #520]	@ (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d118      	bne.n	8002cac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c86:	f7fe fe13 	bl	80018b0 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8e:	f7fe fe0f 	bl	80018b0 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b64      	cmp	r3, #100	@ 0x64
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e103      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	4b75      	ldr	r3, [pc, #468]	@ (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x312>
 8002cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6213      	str	r3, [r2, #32]
 8002cc0:	e02d      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x334>
 8002cca:	4b6a      	ldr	r3, [pc, #424]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a69      	ldr	r2, [pc, #420]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6213      	str	r3, [r2, #32]
 8002cd6:	4b67      	ldr	r3, [pc, #412]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4a66      	ldr	r2, [pc, #408]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6213      	str	r3, [r2, #32]
 8002ce2:	e01c      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d10c      	bne.n	8002d06 <HAL_RCC_OscConfig+0x356>
 8002cec:	4b61      	ldr	r3, [pc, #388]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4a60      	ldr	r2, [pc, #384]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	6213      	str	r3, [r2, #32]
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4a5d      	ldr	r2, [pc, #372]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6213      	str	r3, [r2, #32]
 8002d04:	e00b      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002d06:	4b5b      	ldr	r3, [pc, #364]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6213      	str	r3, [r2, #32]
 8002d12:	4b58      	ldr	r3, [pc, #352]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a57      	ldr	r2, [pc, #348]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d015      	beq.n	8002d52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7fe fdc3 	bl	80018b0 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fdbf 	bl	80018b0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0b1      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	4b4b      	ldr	r3, [pc, #300]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ee      	beq.n	8002d2e <HAL_RCC_OscConfig+0x37e>
 8002d50:	e014      	b.n	8002d7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d52:	f7fe fdad 	bl	80018b0 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fe fda9 	bl	80018b0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e09b      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d70:	4b40      	ldr	r3, [pc, #256]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ee      	bne.n	8002d5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d105      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d82:	4b3c      	ldr	r3, [pc, #240]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4a3b      	ldr	r2, [pc, #236]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8087 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d98:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d061      	beq.n	8002e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d146      	bne.n	8002e3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dac:	4b33      	ldr	r3, [pc, #204]	@ (8002e7c <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fd7d 	bl	80018b0 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fe fd79 	bl	80018b0 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e06d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dcc:	4b29      	ldr	r3, [pc, #164]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de0:	d108      	bne.n	8002df4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002de2:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4921      	ldr	r1, [pc, #132]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a19      	ldr	r1, [r3, #32]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	430b      	orrs	r3, r1
 8002e06:	491b      	ldr	r1, [pc, #108]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <HAL_RCC_OscConfig+0x4cc>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe fd4d 	bl	80018b0 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe fd49 	bl	80018b0 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e03d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x46a>
 8002e38:	e035      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <HAL_RCC_OscConfig+0x4cc>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe fd36 	bl	80018b0 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe fd32 	bl	80018b0 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e026      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x498>
 8002e66:	e01e      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e019      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e80:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCC_OscConfig+0x500>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0d0      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d910      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b67      	ldr	r3, [pc, #412]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 0207 	bic.w	r2, r3, #7
 8002ede:	4965      	ldr	r1, [pc, #404]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b63      	ldr	r3, [pc, #396]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0b8      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f10:	4b59      	ldr	r3, [pc, #356]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a58      	ldr	r2, [pc, #352]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f28:	4b53      	ldr	r3, [pc, #332]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a52      	ldr	r2, [pc, #328]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b50      	ldr	r3, [pc, #320]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	494d      	ldr	r1, [pc, #308]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d040      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d115      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e07f      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b41      	ldr	r3, [pc, #260]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e073      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3d      	ldr	r3, [pc, #244]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e06b      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b39      	ldr	r3, [pc, #228]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4936      	ldr	r1, [pc, #216]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fc84 	bl	80018b0 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fe fc80 	bl	80018b0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e053      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b27      	ldr	r3, [pc, #156]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d210      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b24      	ldr	r3, [pc, #144]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 0207 	bic.w	r2, r3, #7
 8002fea:	4922      	ldr	r1, [pc, #136]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e032      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003010:	4b19      	ldr	r3, [pc, #100]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4916      	ldr	r1, [pc, #88]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800302e:	4b12      	ldr	r3, [pc, #72]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	490e      	ldr	r1, [pc, #56]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003042:	f000 f821 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003046:	4602      	mov	r2, r0
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	490a      	ldr	r1, [pc, #40]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	5ccb      	ldrb	r3, [r1, r3]
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	4a09      	ldr	r2, [pc, #36]	@ (8003080 <HAL_RCC_ClockConfig+0x1cc>)
 800305c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <HAL_RCC_ClockConfig+0x1d0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fbe2 	bl	800182c <HAL_InitTick>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000
 8003078:	40021000 	.word	0x40021000
 800307c:	08007aa4 	.word	0x08007aa4
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030a2:	4b1e      	ldr	r3, [pc, #120]	@ (800311c <HAL_RCC_GetSysClockFreq+0x94>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d002      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x30>
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d003      	beq.n	80030be <HAL_RCC_GetSysClockFreq+0x36>
 80030b6:	e027      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b8:	4b19      	ldr	r3, [pc, #100]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ba:	613b      	str	r3, [r7, #16]
      break;
 80030bc:	e027      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	0c9b      	lsrs	r3, r3, #18
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	4a17      	ldr	r2, [pc, #92]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030c8:	5cd3      	ldrb	r3, [r2, r3]
 80030ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d010      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030d6:	4b11      	ldr	r3, [pc, #68]	@ (800311c <HAL_RCC_GetSysClockFreq+0x94>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	0c5b      	lsrs	r3, r3, #17
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	4a11      	ldr	r2, [pc, #68]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ea:	fb03 f202 	mul.w	r2, r3, r2
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e004      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a0c      	ldr	r2, [pc, #48]	@ (800312c <HAL_RCC_GetSysClockFreq+0xa4>)
 80030fc:	fb02 f303 	mul.w	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	613b      	str	r3, [r7, #16]
      break;
 8003106:	e002      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003108:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_RCC_GetSysClockFreq+0xa8>)
 800310a:	613b      	str	r3, [r7, #16]
      break;
 800310c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310e:	693b      	ldr	r3, [r7, #16]
}
 8003110:	4618      	mov	r0, r3
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	00f42400 	.word	0x00f42400
 8003124:	08007abc 	.word	0x08007abc
 8003128:	08007acc 	.word	0x08007acc
 800312c:	003d0900 	.word	0x003d0900
 8003130:	007a1200 	.word	0x007a1200

08003134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003138:	4b02      	ldr	r3, [pc, #8]	@ (8003144 <HAL_RCC_GetHCLKFreq+0x10>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	20000000 	.word	0x20000000

08003148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800314c:	f7ff fff2 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8003150:	4602      	mov	r2, r0
 8003152:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	4903      	ldr	r1, [pc, #12]	@ (800316c <HAL_RCC_GetPCLK1Freq+0x24>)
 800315e:	5ccb      	ldrb	r3, [r1, r3]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40021000 	.word	0x40021000
 800316c:	08007ab4 	.word	0x08007ab4

08003170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003174:	f7ff ffde 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	0adb      	lsrs	r3, r3, #11
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	@ (8003194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	08007ab4 	.word	0x08007ab4

08003198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031a0:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <RCC_Delay+0x34>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	@ (80031d0 <RCC_Delay+0x38>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	0a5b      	lsrs	r3, r3, #9
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031b4:	bf00      	nop
  }
  while (Delay --);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1e5a      	subs	r2, r3, #1
 80031ba:	60fa      	str	r2, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f9      	bne.n	80031b4 <RCC_Delay+0x1c>
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	20000000 	.word	0x20000000
 80031d0:	10624dd3 	.word	0x10624dd3

080031d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d07d      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031f0:	2300      	movs	r3, #0
 80031f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10d      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	4b4c      	ldr	r3, [pc, #304]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4a4b      	ldr	r2, [pc, #300]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320a:	61d3      	str	r3, [r2, #28]
 800320c:	4b49      	ldr	r3, [pc, #292]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	4b46      	ldr	r3, [pc, #280]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d118      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003228:	4b43      	ldr	r3, [pc, #268]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a42      	ldr	r2, [pc, #264]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003234:	f7fe fb3c 	bl	80018b0 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323a:	e008      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323c:	f7fe fb38 	bl	80018b0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	@ 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e06d      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324e:	4b3a      	ldr	r3, [pc, #232]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800325a:	4b36      	ldr	r3, [pc, #216]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003262:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d02e      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	429a      	cmp	r2, r3
 8003276:	d027      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003278:	4b2e      	ldr	r3, [pc, #184]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003280:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003282:	4b2e      	ldr	r3, [pc, #184]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003288:	4b2c      	ldr	r3, [pc, #176]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800328e:	4a29      	ldr	r2, [pc, #164]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d014      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe fb07 	bl	80018b0 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fe fb03 	bl	80018b0 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e036      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ee      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4917      	ldr	r1, [pc, #92]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d105      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e0:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	4a13      	ldr	r2, [pc, #76]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	490b      	ldr	r1, [pc, #44]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003316:	4b07      	ldr	r3, [pc, #28]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	4904      	ldr	r1, [pc, #16]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	40007000 	.word	0x40007000
 800333c:	42420440 	.word	0x42420440

08003340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e041      	b.n	80033d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd ffb6 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	4619      	mov	r1, r3
 800337e:	4610      	mov	r0, r2
 8003380:	f000 fca6 	bl	8003cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d001      	beq.n	80033f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e032      	b.n	800345e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a18      	ldr	r2, [pc, #96]	@ (8003468 <HAL_TIM_Base_Start+0x88>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00e      	beq.n	8003428 <HAL_TIM_Base_Start+0x48>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003412:	d009      	beq.n	8003428 <HAL_TIM_Base_Start+0x48>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a14      	ldr	r2, [pc, #80]	@ (800346c <HAL_TIM_Base_Start+0x8c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_TIM_Base_Start+0x48>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a13      	ldr	r2, [pc, #76]	@ (8003470 <HAL_TIM_Base_Start+0x90>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d111      	bne.n	800344c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b06      	cmp	r3, #6
 8003438:	d010      	beq.n	800345c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0201 	orr.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344a:	e007      	b.n	800345c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800

08003474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e041      	b.n	800350a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f839 	bl	8003512 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 fc0c 	bl	8003cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e041      	b.n	80035ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f839 	bl	80035c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 fbb4 	bl	8003cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d020      	beq.n	8003638 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01b      	beq.n	8003638 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0202 	mvn.w	r2, #2
 8003608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f001 fb0e 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fb37 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fb3d 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d020      	beq.n	8003684 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01b      	beq.n	8003684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0204 	mvn.w	r2, #4
 8003654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f001 fae8 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 8003670:	e005      	b.n	800367e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fb11 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fb17 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d020      	beq.n	80036d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01b      	beq.n	80036d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0208 	mvn.w	r2, #8
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2204      	movs	r2, #4
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f001 fac2 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 faeb 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 faf1 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d020      	beq.n	800371c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01b      	beq.n	800371c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0210 	mvn.w	r2, #16
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2208      	movs	r2, #8
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f001 fa9c 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fac5 	bl	8003c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 facb 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0201 	mvn.w	r2, #1
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 faa4 	bl	8003c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 feb7 	bl	80044d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fa9b 	bl	8003cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00c      	beq.n	80037ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0220 	mvn.w	r2, #32
 80037a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fe8a 	bl	80044c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e088      	b.n	80038e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80037f0:	f000 fc64 	bl	80040bc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 020c 	bic.w	r2, r2, #12
 8003802:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6999      	ldr	r1, [r3, #24]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	619a      	str	r2, [r3, #24]
 8003816:	e060      	b.n	80038da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b04      	cmp	r3, #4
 800381c:	d11c      	bne.n	8003858 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800382e:	f000 fccd 	bl	80041cc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003840:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6999      	ldr	r1, [r3, #24]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	021a      	lsls	r2, r3, #8
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	619a      	str	r2, [r3, #24]
 8003856:	e040      	b.n	80038da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b08      	cmp	r3, #8
 800385c:	d11b      	bne.n	8003896 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800386e:	f000 fd18 	bl	80042a2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 020c 	bic.w	r2, r2, #12
 8003880:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69d9      	ldr	r1, [r3, #28]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	61da      	str	r2, [r3, #28]
 8003894:	e021      	b.n	80038da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d11c      	bne.n	80038d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80038ac:	f000 fd34 	bl	8004318 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80038be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69d9      	ldr	r1, [r3, #28]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	021a      	lsls	r2, r3, #8
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	61da      	str	r2, [r3, #28]
 80038d4:	e001      	b.n	80038da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003906:	2302      	movs	r3, #2
 8003908:	e0ae      	b.n	8003a68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b0c      	cmp	r3, #12
 8003916:	f200 809f 	bhi.w	8003a58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800391a:	a201      	add	r2, pc, #4	@ (adr r2, 8003920 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	08003955 	.word	0x08003955
 8003924:	08003a59 	.word	0x08003a59
 8003928:	08003a59 	.word	0x08003a59
 800392c:	08003a59 	.word	0x08003a59
 8003930:	08003995 	.word	0x08003995
 8003934:	08003a59 	.word	0x08003a59
 8003938:	08003a59 	.word	0x08003a59
 800393c:	08003a59 	.word	0x08003a59
 8003940:	080039d7 	.word	0x080039d7
 8003944:	08003a59 	.word	0x08003a59
 8003948:	08003a59 	.word	0x08003a59
 800394c:	08003a59 	.word	0x08003a59
 8003950:	08003a17 	.word	0x08003a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fa26 	bl	8003dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0208 	orr.w	r2, r2, #8
 800396e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0204 	bic.w	r2, r2, #4
 800397e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6999      	ldr	r1, [r3, #24]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	619a      	str	r2, [r3, #24]
      break;
 8003992:	e064      	b.n	8003a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fa6c 	bl	8003e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6999      	ldr	r1, [r3, #24]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	021a      	lsls	r2, r3, #8
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	619a      	str	r2, [r3, #24]
      break;
 80039d4:	e043      	b.n	8003a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fab5 	bl	8003f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0208 	orr.w	r2, r2, #8
 80039f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0204 	bic.w	r2, r2, #4
 8003a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69d9      	ldr	r1, [r3, #28]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	61da      	str	r2, [r3, #28]
      break;
 8003a14:	e023      	b.n	8003a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 faff 	bl	8004020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69d9      	ldr	r1, [r3, #28]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	021a      	lsls	r2, r3, #8
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	61da      	str	r2, [r3, #28]
      break;
 8003a56:	e002      	b.n	8003a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_TIM_ConfigClockSource+0x1c>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e0b4      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x186>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac4:	d03e      	beq.n	8003b44 <HAL_TIM_ConfigClockSource+0xd4>
 8003ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aca:	f200 8087 	bhi.w	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad2:	f000 8086 	beq.w	8003be2 <HAL_TIM_ConfigClockSource+0x172>
 8003ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ada:	d87f      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b70      	cmp	r3, #112	@ 0x70
 8003ade:	d01a      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0xa6>
 8003ae0:	2b70      	cmp	r3, #112	@ 0x70
 8003ae2:	d87b      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ae4:	2b60      	cmp	r3, #96	@ 0x60
 8003ae6:	d050      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x11a>
 8003ae8:	2b60      	cmp	r3, #96	@ 0x60
 8003aea:	d877      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b50      	cmp	r3, #80	@ 0x50
 8003aee:	d03c      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0xfa>
 8003af0:	2b50      	cmp	r3, #80	@ 0x50
 8003af2:	d873      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b40      	cmp	r3, #64	@ 0x40
 8003af6:	d058      	beq.n	8003baa <HAL_TIM_ConfigClockSource+0x13a>
 8003af8:	2b40      	cmp	r3, #64	@ 0x40
 8003afa:	d86f      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b30      	cmp	r3, #48	@ 0x30
 8003afe:	d064      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b00:	2b30      	cmp	r3, #48	@ 0x30
 8003b02:	d86b      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d060      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d867      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d05c      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d05a      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b14:	e062      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b26:	f000 fc4d 	bl	80043c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	609a      	str	r2, [r3, #8]
      break;
 8003b42:	e04f      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b54:	f000 fc36 	bl	80043c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b66:	609a      	str	r2, [r3, #8]
      break;
 8003b68:	e03c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b76:	461a      	mov	r2, r3
 8003b78:	f000 fafa 	bl	8004170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2150      	movs	r1, #80	@ 0x50
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fc04 	bl	8004390 <TIM_ITRx_SetConfig>
      break;
 8003b88:	e02c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b96:	461a      	mov	r2, r3
 8003b98:	f000 fb54 	bl	8004244 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2160      	movs	r1, #96	@ 0x60
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fbf4 	bl	8004390 <TIM_ITRx_SetConfig>
      break;
 8003ba8:	e01c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f000 fada 	bl	8004170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2140      	movs	r1, #64	@ 0x40
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fbe4 	bl	8004390 <TIM_ITRx_SetConfig>
      break;
 8003bc8:	e00c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f000 fbdb 	bl	8004390 <TIM_ITRx_SetConfig>
      break;
 8003bda:	e003      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e000      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b0c      	cmp	r3, #12
 8003c12:	d831      	bhi.n	8003c78 <HAL_TIM_ReadCapturedValue+0x78>
 8003c14:	a201      	add	r2, pc, #4	@ (adr r2, 8003c1c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c79 	.word	0x08003c79
 8003c24:	08003c79 	.word	0x08003c79
 8003c28:	08003c79 	.word	0x08003c79
 8003c2c:	08003c5b 	.word	0x08003c5b
 8003c30:	08003c79 	.word	0x08003c79
 8003c34:	08003c79 	.word	0x08003c79
 8003c38:	08003c79 	.word	0x08003c79
 8003c3c:	08003c65 	.word	0x08003c65
 8003c40:	08003c79 	.word	0x08003c79
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003c79 	.word	0x08003c79
 8003c4c:	08003c6f 	.word	0x08003c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c56:	60fb      	str	r3, [r7, #12]

      break;
 8003c58:	e00f      	b.n	8003c7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c60:	60fb      	str	r3, [r7, #12]

      break;
 8003c62:	e00a      	b.n	8003c7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6a:	60fb      	str	r3, [r7, #12]

      break;
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	60fb      	str	r3, [r7, #12]

      break;
 8003c76:	e000      	b.n	8003c7a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c78:	bf00      	nop
  }

  return tmpreg;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop

08003c88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8003da0 <TIM_Base_SetConfig+0xd0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00b      	beq.n	8003d00 <TIM_Base_SetConfig+0x30>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cee:	d007      	beq.n	8003d00 <TIM_Base_SetConfig+0x30>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a2c      	ldr	r2, [pc, #176]	@ (8003da4 <TIM_Base_SetConfig+0xd4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_Base_SetConfig+0x30>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a2b      	ldr	r2, [pc, #172]	@ (8003da8 <TIM_Base_SetConfig+0xd8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d108      	bne.n	8003d12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a22      	ldr	r2, [pc, #136]	@ (8003da0 <TIM_Base_SetConfig+0xd0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00b      	beq.n	8003d32 <TIM_Base_SetConfig+0x62>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d20:	d007      	beq.n	8003d32 <TIM_Base_SetConfig+0x62>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a1f      	ldr	r2, [pc, #124]	@ (8003da4 <TIM_Base_SetConfig+0xd4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d003      	beq.n	8003d32 <TIM_Base_SetConfig+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003da8 <TIM_Base_SetConfig+0xd8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d108      	bne.n	8003d44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003da0 <TIM_Base_SetConfig+0xd0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d103      	bne.n	8003d78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f023 0201 	bic.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	611a      	str	r2, [r3, #16]
  }
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800

08003dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f023 0201 	bic.w	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 0302 	bic.w	r3, r3, #2
 8003df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a1c      	ldr	r2, [pc, #112]	@ (8003e74 <TIM_OC1_SetConfig+0xc8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d10c      	bne.n	8003e22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f023 0308 	bic.w	r3, r3, #8
 8003e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f023 0304 	bic.w	r3, r3, #4
 8003e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a13      	ldr	r2, [pc, #76]	@ (8003e74 <TIM_OC1_SetConfig+0xc8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d111      	bne.n	8003e4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	621a      	str	r2, [r3, #32]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40012c00 	.word	0x40012c00

08003e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f023 0210 	bic.w	r2, r3, #16
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0320 	bic.w	r3, r3, #32
 8003ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f48 <TIM_OC2_SetConfig+0xd0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d10d      	bne.n	8003ef4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ef2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a14      	ldr	r2, [pc, #80]	@ (8003f48 <TIM_OC2_SetConfig+0xd0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d113      	bne.n	8003f24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr
 8003f48:	40012c00 	.word	0x40012c00

08003f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0303 	bic.w	r3, r3, #3
 8003f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800401c <TIM_OC3_SetConfig+0xd0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10d      	bne.n	8003fc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a14      	ldr	r2, [pc, #80]	@ (800401c <TIM_OC3_SetConfig+0xd0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d113      	bne.n	8003ff6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40012c00 	.word	0x40012c00

08004020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800404e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800406a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	031b      	lsls	r3, r3, #12
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a0f      	ldr	r2, [pc, #60]	@ (80040b8 <TIM_OC4_SetConfig+0x98>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d109      	bne.n	8004094 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	019b      	lsls	r3, r3, #6
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	40012c00 	.word	0x40012c00

080040bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f023 0201 	bic.w	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004164 <TIM_TI1_SetConfig+0xa8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_TI1_SetConfig+0x46>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f0:	d007      	beq.n	8004102 <TIM_TI1_SetConfig+0x46>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004168 <TIM_TI1_SetConfig+0xac>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_TI1_SetConfig+0x46>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4a1b      	ldr	r2, [pc, #108]	@ (800416c <TIM_TI1_SetConfig+0xb0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <TIM_TI1_SetConfig+0x4a>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <TIM_TI1_SetConfig+0x4c>
 8004106:	2300      	movs	r3, #0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	e003      	b.n	8004126 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800412c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	b2db      	uxtb	r3, r3
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f023 030a 	bic.w	r3, r3, #10
 8004140:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f003 030a 	and.w	r3, r3, #10
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	621a      	str	r2, [r3, #32]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800

08004170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f023 0201 	bic.w	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800419a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f023 030a 	bic.w	r3, r3, #10
 80041ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 0210 	bic.w	r2, r3, #16
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800420a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	031b      	lsls	r3, r3, #12
 8004210:	b29b      	uxth	r3, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800421e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f023 0210 	bic.w	r2, r3, #16
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800426e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	031b      	lsls	r3, r3, #12
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004280:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	621a      	str	r2, [r3, #32]
}
 8004298:	bf00      	nop
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr

080042a2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b087      	sub	sp, #28
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 0303 	bic.w	r3, r3, #3
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004344:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004356:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	031b      	lsls	r3, r3, #12
 800435c:	b29b      	uxth	r3, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800436a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	031b      	lsls	r3, r3, #12
 8004370:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f043 0307 	orr.w	r3, r3, #7
 80043b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	609a      	str	r2, [r3, #8]
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	021a      	lsls	r2, r3, #8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	609a      	str	r2, [r3, #8]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
	...

08004404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004418:	2302      	movs	r3, #2
 800441a:	e046      	b.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a16      	ldr	r2, [pc, #88]	@ (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004468:	d009      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a12      	ldr	r2, [pc, #72]	@ (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a10      	ldr	r2, [pc, #64]	@ (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10c      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4313      	orrs	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800

080044c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr

080044d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e042      	b.n	800457c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fc ffae 	bl	800146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	@ 0x24
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f971 	bl	8004810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800453c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800454c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800455c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	@ 0x28
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d175      	bne.n	8004690 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_UART_Transmit+0x2c>
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e06e      	b.n	8004692 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2221      	movs	r2, #33	@ 0x21
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045c2:	f7fd f975 	bl	80018b0 <HAL_GetTick>
 80045c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	88fa      	ldrh	r2, [r7, #6]
 80045cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	88fa      	ldrh	r2, [r7, #6]
 80045d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045dc:	d108      	bne.n	80045f0 <HAL_UART_Transmit+0x6c>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d104      	bne.n	80045f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	61bb      	str	r3, [r7, #24]
 80045ee:	e003      	b.n	80045f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045f8:	e02e      	b.n	8004658 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2200      	movs	r2, #0
 8004602:	2180      	movs	r1, #128	@ 0x80
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f848 	bl	800469a <UART_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e03a      	b.n	8004692 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10b      	bne.n	800463a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004630:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	3302      	adds	r3, #2
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	e007      	b.n	800464a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	781a      	ldrb	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	3301      	adds	r3, #1
 8004648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1cb      	bne.n	80045fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2200      	movs	r2, #0
 800466a:	2140      	movs	r1, #64	@ 0x40
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f814 	bl	800469a <UART_WaitOnFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e006      	b.n	8004692 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	e000      	b.n	8004692 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004690:	2302      	movs	r3, #2
  }
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	4613      	mov	r3, r2
 80046a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046aa:	e03b      	b.n	8004724 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d037      	beq.n	8004724 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	f7fd f8fc 	bl	80018b0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	6a3a      	ldr	r2, [r7, #32]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <UART_WaitOnFlagUntilTimeout+0x30>
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e03a      	b.n	8004744 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d023      	beq.n	8004724 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b80      	cmp	r3, #128	@ 0x80
 80046e0:	d020      	beq.n	8004724 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b40      	cmp	r3, #64	@ 0x40
 80046e6:	d01d      	beq.n	8004724 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d116      	bne.n	8004724 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f81d 	bl	800474c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2208      	movs	r2, #8
 8004716:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e00f      	b.n	8004744 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4013      	ands	r3, r2
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	429a      	cmp	r2, r3
 8004732:	bf0c      	ite	eq
 8004734:	2301      	moveq	r3, #1
 8004736:	2300      	movne	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	79fb      	ldrb	r3, [r7, #7]
 800473e:	429a      	cmp	r2, r3
 8004740:	d0b4      	beq.n	80046ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b095      	sub	sp, #84	@ 0x54
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004766:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800476a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004774:	643a      	str	r2, [r7, #64]	@ 0x40
 8004776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800477a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e5      	bne.n	8004754 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3314      	adds	r3, #20
 800478e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	61fb      	str	r3, [r7, #28]
   return(result);
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3314      	adds	r3, #20
 80047a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e5      	bne.n	8004788 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d119      	bne.n	80047f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	330c      	adds	r3, #12
 80047ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	e853 3f00 	ldrex	r3, [r3]
 80047d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f023 0310 	bic.w	r3, r3, #16
 80047da:	647b      	str	r3, [r7, #68]	@ 0x44
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047e4:	61ba      	str	r2, [r7, #24]
 80047e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	6979      	ldr	r1, [r7, #20]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	613b      	str	r3, [r7, #16]
   return(result);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e5      	bne.n	80047c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004806:	bf00      	nop
 8004808:	3754      	adds	r7, #84	@ 0x54
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800484a:	f023 030c 	bic.w	r3, r3, #12
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	430b      	orrs	r3, r1
 8004856:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2c      	ldr	r2, [pc, #176]	@ (8004924 <UART_SetConfig+0x114>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d103      	bne.n	8004880 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004878:	f7fe fc7a 	bl	8003170 <HAL_RCC_GetPCLK2Freq>
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	e002      	b.n	8004886 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004880:	f7fe fc62 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 8004884:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009a      	lsls	r2, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	4a22      	ldr	r2, [pc, #136]	@ (8004928 <UART_SetConfig+0x118>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	0119      	lsls	r1, r3, #4
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009a      	lsls	r2, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004928 <UART_SetConfig+0x118>)
 80048be:	fba3 0302 	umull	r0, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2064      	movs	r0, #100	@ 0x64
 80048c6:	fb00 f303 	mul.w	r3, r0, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	3332      	adds	r3, #50	@ 0x32
 80048d0:	4a15      	ldr	r2, [pc, #84]	@ (8004928 <UART_SetConfig+0x118>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048dc:	4419      	add	r1, r3
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009a      	lsls	r2, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <UART_SetConfig+0x118>)
 80048f6:	fba3 0302 	umull	r0, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2064      	movs	r0, #100	@ 0x64
 80048fe:	fb00 f303 	mul.w	r3, r0, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	3332      	adds	r3, #50	@ 0x32
 8004908:	4a07      	ldr	r2, [pc, #28]	@ (8004928 <UART_SetConfig+0x118>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	f003 020f 	and.w	r2, r3, #15
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	440a      	add	r2, r1
 800491a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40013800 	.word	0x40013800
 8004928:	51eb851f 	.word	0x51eb851f

0800492c <delay_us_Init>:
* @details	HC_SR04 모듈의 트리거를 위해서 사용
* @param	딜레이할 정수값 입력 ex) 10이면 10us딜레이
* @return	viod
*/
#ifdef USE_DELAY_US_TIMER
void delay_us_Init(){
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&DELAY_US_TIMER_HANDLE);
 8004930:	4802      	ldr	r0, [pc, #8]	@ (800493c <delay_us_Init+0x10>)
 8004932:	f7fe fd55 	bl	80033e0 <HAL_TIM_Base_Start>
}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	200002b8 	.word	0x200002b8

08004940 <delay_us>:

void delay_us(uint16_t time){
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&DELAY_US_TIMER_HANDLE, 0);
 800494a:	4b08      	ldr	r3, [pc, #32]	@ (800496c <delay_us+0x2c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&DELAY_US_TIMER_HANDLE) < time);
 8004952:	bf00      	nop
 8004954:	4b05      	ldr	r3, [pc, #20]	@ (800496c <delay_us+0x2c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	429a      	cmp	r2, r3
 800495e:	d3f9      	bcc.n	8004954 <delay_us+0x14>
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr
 800496c:	200002b8 	.word	0x200002b8

08004970 <DS18B20_Reset>:
* @brief	MCU가 DS18B20로 시작신호를 보내는 함수
* @details
* @param	void
* @return	1 0
*/
uint8_t DS18B20_Reset(void) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
    uint8_t presence = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	71fb      	strb	r3, [r7, #7]

    DS18B20_Pin_Output();
 800497a:	f000 f827 	bl	80049cc <DS18B20_Pin_Output>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 800497e:	2200      	movs	r2, #0
 8004980:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004984:	4810      	ldr	r0, [pc, #64]	@ (80049c8 <DS18B20_Reset+0x58>)
 8004986:	f7fd feb6 	bl	80026f6 <HAL_GPIO_WritePin>
    delay_us(480);
 800498a:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800498e:	f7ff ffd7 	bl	8004940 <delay_us>

    DS18B20_Pin_Input();
 8004992:	f000 f837 	bl	8004a04 <DS18B20_Pin_Input>
    delay_us(70);
 8004996:	2046      	movs	r0, #70	@ 0x46
 8004998:	f7ff ffd2 	bl	8004940 <delay_us>

    presence = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN);
 800499c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80049a0:	4809      	ldr	r0, [pc, #36]	@ (80049c8 <DS18B20_Reset+0x58>)
 80049a2:	f7fd fe91 	bl	80026c8 <HAL_GPIO_ReadPin>
 80049a6:	4603      	mov	r3, r0
 80049a8:	71fb      	strb	r3, [r7, #7]
    delay_us(410);
 80049aa:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 80049ae:	f7ff ffc7 	bl	8004940 <delay_us>

    return (presence == 0) ? 1 : 0;
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf0c      	ite	eq
 80049b8:	2301      	moveq	r3, #1
 80049ba:	2300      	movne	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40010800 	.word	0x40010800

080049cc <DS18B20_Pin_Output>:

void DS18B20_Pin_Output(void) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d2:	463b      	mov	r3, r7
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DS18B20_PIN;
 80049de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049e2:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049e4:	2301      	movs	r3, #1
 80049e6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e8:	2302      	movs	r3, #2
 80049ea:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80049ec:	463b      	mov	r3, r7
 80049ee:	4619      	mov	r1, r3
 80049f0:	4803      	ldr	r0, [pc, #12]	@ (8004a00 <DS18B20_Pin_Output+0x34>)
 80049f2:	f7fd fce5 	bl	80023c0 <HAL_GPIO_Init>
}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40010800 	.word	0x40010800

08004a04 <DS18B20_Pin_Input>:

// Setting GPIO input mode (Pull-up)
void DS18B20_Pin_Input(void) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DS18B20_PIN;
 8004a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a1a:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; // 내부 풀업 저항 활성화
 8004a20:	2301      	movs	r3, #1
 8004a22:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 8004a24:	463b      	mov	r3, r7
 8004a26:	4619      	mov	r1, r3
 8004a28:	4803      	ldr	r0, [pc, #12]	@ (8004a38 <DS18B20_Pin_Input+0x34>)
 8004a2a:	f7fd fcc9 	bl	80023c0 <HAL_GPIO_Init>
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40010800 	.word	0x40010800

08004a3c <DS18B20_WriteBit>:

void DS18B20_WriteBit(uint8_t bit) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
	DS18B20_Pin_Output();
 8004a46:	f7ff ffc1 	bl	80049cc <DS18B20_Pin_Output>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004a50:	480b      	ldr	r0, [pc, #44]	@ (8004a80 <DS18B20_WriteBit+0x44>)
 8004a52:	f7fd fe50 	bl	80026f6 <HAL_GPIO_WritePin>
    // 버스를 LOW로 설정(비트 슬롯 시작)

    if (bit) {
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <DS18B20_WriteBit+0x32>
        delay_us(1);
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f7ff ff6f 	bl	8004940 <delay_us>
        DS18B20_Pin_Input(); // GPIO를 입력 모드로 변경하여 풀업 상태로 복귀
 8004a62:	f7ff ffcf 	bl	8004a04 <DS18B20_Pin_Input>
        delay_us(59);         // 59µs 동안 풀업 유지
 8004a66:	203b      	movs	r0, #59	@ 0x3b
 8004a68:	f7ff ff6a 	bl	8004940 <delay_us>
    } else {
        delay_us(60);
        DS18B20_Pin_Input();
    }
}
 8004a6c:	e004      	b.n	8004a78 <DS18B20_WriteBit+0x3c>
        delay_us(60);
 8004a6e:	203c      	movs	r0, #60	@ 0x3c
 8004a70:	f7ff ff66 	bl	8004940 <delay_us>
        DS18B20_Pin_Input();
 8004a74:	f7ff ffc6 	bl	8004a04 <DS18B20_Pin_Input>
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40010800 	.word	0x40010800

08004a84 <DS18B20_WriteByte>:

void DS18B20_WriteByte(uint8_t byte) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]
 8004a92:	e00c      	b.n	8004aae <DS18B20_WriteByte+0x2a>
        DS18B20_WriteBit(byte & 0x01); // 현재 비트(LSB부터)를 추출 후 전송
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff ffcd 	bl	8004a3c <DS18B20_WriteBit>
        byte >>= 1;                    // 오른쪽 시프트하여 다음 비트 준비
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	2b07      	cmp	r3, #7
 8004ab2:	d9ef      	bls.n	8004a94 <DS18B20_WriteByte+0x10>
    }
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <DS18B20_ReadBit>:

uint8_t DS18B20_ReadBit(void) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
    uint8_t bit = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	71fb      	strb	r3, [r7, #7]

    DS18B20_Pin_Output();
 8004aca:	f7ff ff7f 	bl	80049cc <DS18B20_Pin_Output>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004ad4:	480c      	ldr	r0, [pc, #48]	@ (8004b08 <DS18B20_ReadBit+0x48>)
 8004ad6:	f7fd fe0e 	bl	80026f6 <HAL_GPIO_WritePin>
    delay_us(1); // MCU에서 버스를 LOW로 1us 동안 유지
 8004ada:	2001      	movs	r0, #1
 8004adc:	f7ff ff30 	bl	8004940 <delay_us>

    DS18B20_Pin_Input(); // GPIO를 입력 모드로 변경하여 풀업 유지
 8004ae0:	f7ff ff90 	bl	8004a04 <DS18B20_Pin_Input>
    delay_us(14);  // DS18B20이 15µs 내에 LOW(0) 또는 HIGH(1) 값을 보냄
 8004ae4:	200e      	movs	r0, #14
 8004ae6:	f7ff ff2b 	bl	8004940 <delay_us>

		// 약 15µs 후에 GPIO 핀을 읽어 비트 값 결정
    bit = HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN);
 8004aea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004aee:	4806      	ldr	r0, [pc, #24]	@ (8004b08 <DS18B20_ReadBit+0x48>)
 8004af0:	f7fd fdea 	bl	80026c8 <HAL_GPIO_ReadPin>
 8004af4:	4603      	mov	r3, r0
 8004af6:	71fb      	strb	r3, [r7, #7]
    delay_us(45); // 60µs 동안 (1+14+45) 비트 슬롯을 유지
 8004af8:	202d      	movs	r0, #45	@ 0x2d
 8004afa:	f7ff ff21 	bl	8004940 <delay_us>

    return bit;
 8004afe:	79fb      	ldrb	r3, [r7, #7]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40010800 	.word	0x40010800

08004b0c <DS18B20_ReadByte>:

uint8_t DS18B20_ReadByte(void) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8004b16:	2300      	movs	r3, #0
 8004b18:	71bb      	strb	r3, [r7, #6]
 8004b1a:	e011      	b.n	8004b40 <DS18B20_ReadByte+0x34>
        if (DS18B20_ReadBit()) {  // 1바이트(8비트) 데이터를 LSB부터 읽음
 8004b1c:	f7ff ffd0 	bl	8004ac0 <DS18B20_ReadBit>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d009      	beq.n	8004b3a <DS18B20_ReadByte+0x2e>
            byte |= (1 << i);
 8004b26:	79bb      	ldrb	r3, [r7, #6]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	b25a      	sxtb	r2, r3
 8004b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	b25b      	sxtb	r3, r3
 8004b38:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8004b3a:	79bb      	ldrb	r3, [r7, #6]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	71bb      	strb	r3, [r7, #6]
 8004b40:	79bb      	ldrb	r3, [r7, #6]
 8004b42:	2b07      	cmp	r3, #7
 8004b44:	d9ea      	bls.n	8004b1c <DS18B20_ReadByte+0x10>
        }
    }
    return byte;
 8004b46:	79fb      	ldrb	r3, [r7, #7]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <DS18B20_GetTemperature>:

float DS18B20_GetTemperature(void) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
    uint8_t temp_lsb, temp_msb;
    int16_t temp_raw;

    if (!DS18B20_Reset()) return -1000; // DS18B20이 없으면 오류값 반환
 8004b56:	f7ff ff0b 	bl	8004970 <DS18B20_Reset>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <DS18B20_GetTemperature+0x14>
 8004b60:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd0 <DS18B20_GetTemperature+0x80>)
 8004b62:	e031      	b.n	8004bc8 <DS18B20_GetTemperature+0x78>

    DS18B20_WriteByte(0xCC); // ROM 코드 정보 전송 중지
 8004b64:	20cc      	movs	r0, #204	@ 0xcc
 8004b66:	f7ff ff8d 	bl	8004a84 <DS18B20_WriteByte>
    DS18B20_WriteByte(0x44); // 온도 변환 시작
 8004b6a:	2044      	movs	r0, #68	@ 0x44
 8004b6c:	f7ff ff8a 	bl	8004a84 <DS18B20_WriteByte>

    HAL_Delay(750);  // // DS18B20은 온도 변환이 끝날 때까지 응답 없음
 8004b70:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8004b74:	f7fc fea6 	bl	80018c4 <HAL_Delay>

    DS18B20_Reset();
 8004b78:	f7ff fefa 	bl	8004970 <DS18B20_Reset>

    DS18B20_WriteByte(0xCC); // ROM 코드 정보 전송 중지
 8004b7c:	20cc      	movs	r0, #204	@ 0xcc
 8004b7e:	f7ff ff81 	bl	8004a84 <DS18B20_WriteByte>
    DS18B20_WriteByte(0xBE); // RAM에서 데이터 읽기 시작
 8004b82:	20be      	movs	r0, #190	@ 0xbe
 8004b84:	f7ff ff7e 	bl	8004a84 <DS18B20_WriteByte>

    temp_lsb = DS18B20_ReadByte(); // LSB (최하위 8비트)
 8004b88:	f7ff ffc0 	bl	8004b0c <DS18B20_ReadByte>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	71fb      	strb	r3, [r7, #7]
    temp_msb = DS18B20_ReadByte(); // MSB (최상위 8비트)
 8004b90:	f7ff ffbc 	bl	8004b0c <DS18B20_ReadByte>
 8004b94:	4603      	mov	r3, r0
 8004b96:	71bb      	strb	r3, [r7, #6]

    temp_raw = (temp_msb << 8) | temp_lsb;
 8004b98:	79bb      	ldrb	r3, [r7, #6]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	b21a      	sxth	r2, r3
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	b21b      	sxth	r3, r3
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	80bb      	strh	r3, [r7, #4]

    return temp_raw / 16.0;
 8004ba6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fb fc2a 	bl	8000404 <__aeabi_i2d>
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	4b07      	ldr	r3, [pc, #28]	@ (8004bd4 <DS18B20_GetTemperature+0x84>)
 8004bb6:	f7fb fdb9 	bl	800072c <__aeabi_ddiv>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	f7fb ff81 	bl	8000ac8 <__aeabi_d2f>
 8004bc6:	4603      	mov	r3, r0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	c47a0000 	.word	0xc47a0000
 8004bd4:	40300000 	.word	0x40300000

08004bd8 <HC_06_print>:
 */


#include "HC_06.h"

int HC_06_print(char *format, ...){
 8004bd8:	b40f      	push	{r0, r1, r2, r3}
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b0c2      	sub	sp, #264	@ 0x108
 8004bde:	af00      	add	r7, sp, #0
	  char buffer[256];

	    va_list args;
	    va_start(args, format);
 8004be0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8004be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bec:	601a      	str	r2, [r3, #0]
	    vsnprintf(buffer, sizeof(buffer), format, args);
 8004bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bf6:	f107 0008 	add.w	r0, r7, #8
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004c00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c04:	f000 fe5a 	bl	80058bc <vsniprintf>
	    va_end(args);

	    HAL_UART_Transmit(&HC_06, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8004c08:	f107 0308 	add.w	r3, r7, #8
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fb fa9f 	bl	8000150 <strlen>
 8004c12:	4603      	mov	r3, r0
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	f107 0108 	add.w	r1, r7, #8
 8004c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1e:	4806      	ldr	r0, [pc, #24]	@ (8004c38 <HC_06_print+0x60>)
 8004c20:	f7ff fcb0 	bl	8004584 <HAL_UART_Transmit>
	    return 0;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c32:	b004      	add	sp, #16
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	200003d4 	.word	0x200003d4
 8004c3c:	00000000 	.word	0x00000000

08004c40 <HAL_TIM_IC_CaptureCallback>:
* @details	입력 캡처 인터럽트가 발생했을 때 자동으로 호출되는 콜백 함수
* @param	htim
* @return	void
*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	7f1b      	ldrb	r3, [r3, #28]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	f040 8085 	bne.w	8004d5c <HAL_TIM_IC_CaptureCallback+0x11c>
	{
		if (HC_SR04.Is_First_Captured==0) // if the first value is not captured
 8004c52:	4b47      	ldr	r3, [pc, #284]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004c54:	7b1b      	ldrb	r3, [r3, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d11a      	bne.n	8004c90 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			HC_SR04.IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fe ffcf 	bl	8003c00 <HAL_TIM_ReadCapturedValue>
 8004c62:	4603      	mov	r3, r0
 8004c64:	4a42      	ldr	r2, [pc, #264]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004c66:	6013      	str	r3, [r2, #0]
			HC_SR04.Is_First_Captured = 1;  // set the first captured as true
 8004c68:	4b41      	ldr	r3, [pc, #260]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6a1a      	ldr	r2, [r3, #32]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 020a 	bic.w	r2, r2, #10
 8004c7c:	621a      	str	r2, [r3, #32]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6a1a      	ldr	r2, [r3, #32]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0202 	orr.w	r2, r2, #2
 8004c8c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(HC_SR04.HC_SR04_timer, TIM_IT_CC1);
		}
	}
}
 8004c8e:	e065      	b.n	8004d5c <HAL_TIM_IC_CaptureCallback+0x11c>
		else if (HC_SR04.Is_First_Captured==1)   // if the first is already captured
 8004c90:	4b37      	ldr	r3, [pc, #220]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004c92:	7b1b      	ldrb	r3, [r3, #12]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d161      	bne.n	8004d5c <HAL_TIM_IC_CaptureCallback+0x11c>
			HC_SR04.IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8004c98:	2100      	movs	r1, #0
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fe ffb0 	bl	8003c00 <HAL_TIM_ReadCapturedValue>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4a33      	ldr	r2, [pc, #204]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004ca4:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	625a      	str	r2, [r3, #36]	@ 0x24
			if (HC_SR04.IC_Val2 > HC_SR04.IC_Val1)
 8004cae:	4b30      	ldr	r3, [pc, #192]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d907      	bls.n	8004cca <HAL_TIM_IC_CaptureCallback+0x8a>
				HC_SR04.Difference = HC_SR04.IC_Val2 - HC_SR04.IC_Val1;
 8004cba:	4b2d      	ldr	r3, [pc, #180]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004cc6:	6093      	str	r3, [r2, #8]
 8004cc8:	e00f      	b.n	8004cea <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (HC_SR04.IC_Val1 > HC_SR04.IC_Val2)
 8004cca:	4b29      	ldr	r3, [pc, #164]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b28      	ldr	r3, [pc, #160]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d909      	bls.n	8004cea <HAL_TIM_IC_CaptureCallback+0xaa>
				HC_SR04.Difference = (0xffff - HC_SR04.IC_Val1) + HC_SR04.IC_Val2;
 8004cd6:	4b26      	ldr	r3, [pc, #152]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	4b25      	ldr	r3, [pc, #148]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8004ce4:	33ff      	adds	r3, #255	@ 0xff
 8004ce6:	4a22      	ldr	r2, [pc, #136]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004ce8:	6093      	str	r3, [r2, #8]
			HC_SR04.Distance = HC_SR04.Difference * .034/2;
 8004cea:	4b21      	ldr	r3, [pc, #132]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb fb78 	bl	80003e4 <__aeabi_ui2d>
 8004cf4:	a31c      	add	r3, pc, #112	@ (adr r3, 8004d68 <HAL_TIM_IC_CaptureCallback+0x128>)
 8004cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfa:	f7fb fbed 	bl	80004d8 <__aeabi_dmul>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4610      	mov	r0, r2
 8004d04:	4619      	mov	r1, r3
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004d0e:	f7fb fd0d 	bl	800072c <__aeabi_ddiv>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f7fb feb5 	bl	8000a88 <__aeabi_d2uiz>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	4b13      	ldr	r3, [pc, #76]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004d24:	735a      	strb	r2, [r3, #13]
			HC_SR04.Is_First_Captured = 0; // set it back to false
 8004d26:	4b12      	ldr	r3, [pc, #72]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 020a 	bic.w	r2, r2, #10
 8004d3a:	621a      	str	r2, [r3, #32]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6a12      	ldr	r2, [r2, #32]
 8004d46:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(HC_SR04.HC_SR04_timer, TIM_IT_CC1);
 8004d48:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	4b07      	ldr	r3, [pc, #28]	@ (8004d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0202 	bic.w	r2, r2, #2
 8004d5a:	60da      	str	r2, [r3, #12]
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	f3af 8000 	nop.w
 8004d68:	b020c49c 	.word	0xb020c49c
 8004d6c:	3fa16872 	.word	0x3fa16872
 8004d70:	20000424 	.word	0x20000424

08004d74 <user_main>:

#include "user_main.h"



void user_main() {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
	float temperature;
	delay_us_Init();
 8004d7a:	f7ff fdd7 	bl	800492c <delay_us_Init>

	while (1) {

		temperature = DS18B20_GetTemperature();
 8004d7e:	f7ff fee7 	bl	8004b50 <DS18B20_GetTemperature>
 8004d82:	6078      	str	r0, [r7, #4]

		HC_06_print("Temperature %.2f\n",temperature);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fb fb4f 	bl	8000428 <__aeabi_f2d>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4804      	ldr	r0, [pc, #16]	@ (8004da0 <user_main+0x2c>)
 8004d90:	f7ff ff22 	bl	8004bd8 <HC_06_print>

		HAL_Delay(1000);
 8004d94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d98:	f7fc fd94 	bl	80018c4 <HAL_Delay>
		temperature = DS18B20_GetTemperature();
 8004d9c:	bf00      	nop
 8004d9e:	e7ee      	b.n	8004d7e <user_main+0xa>
 8004da0:	08007a90 	.word	0x08007a90

08004da4 <__cvt>:
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004daa:	461d      	mov	r5, r3
 8004dac:	bfbb      	ittet	lt
 8004dae:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004db2:	461d      	movlt	r5, r3
 8004db4:	2300      	movge	r3, #0
 8004db6:	232d      	movlt	r3, #45	@ 0x2d
 8004db8:	b088      	sub	sp, #32
 8004dba:	4614      	mov	r4, r2
 8004dbc:	bfb8      	it	lt
 8004dbe:	4614      	movlt	r4, r2
 8004dc0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004dc2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004dc4:	7013      	strb	r3, [r2, #0]
 8004dc6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004dc8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004dcc:	f023 0820 	bic.w	r8, r3, #32
 8004dd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dd4:	d005      	beq.n	8004de2 <__cvt+0x3e>
 8004dd6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004dda:	d100      	bne.n	8004dde <__cvt+0x3a>
 8004ddc:	3601      	adds	r6, #1
 8004dde:	2302      	movs	r3, #2
 8004de0:	e000      	b.n	8004de4 <__cvt+0x40>
 8004de2:	2303      	movs	r3, #3
 8004de4:	aa07      	add	r2, sp, #28
 8004de6:	9204      	str	r2, [sp, #16]
 8004de8:	aa06      	add	r2, sp, #24
 8004dea:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004dee:	e9cd 3600 	strd	r3, r6, [sp]
 8004df2:	4622      	mov	r2, r4
 8004df4:	462b      	mov	r3, r5
 8004df6:	f000 fe93 	bl	8005b20 <_dtoa_r>
 8004dfa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004dfe:	4607      	mov	r7, r0
 8004e00:	d119      	bne.n	8004e36 <__cvt+0x92>
 8004e02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004e04:	07db      	lsls	r3, r3, #31
 8004e06:	d50e      	bpl.n	8004e26 <__cvt+0x82>
 8004e08:	eb00 0906 	add.w	r9, r0, r6
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2300      	movs	r3, #0
 8004e10:	4620      	mov	r0, r4
 8004e12:	4629      	mov	r1, r5
 8004e14:	f7fb fdc8 	bl	80009a8 <__aeabi_dcmpeq>
 8004e18:	b108      	cbz	r0, 8004e1e <__cvt+0x7a>
 8004e1a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e1e:	2230      	movs	r2, #48	@ 0x30
 8004e20:	9b07      	ldr	r3, [sp, #28]
 8004e22:	454b      	cmp	r3, r9
 8004e24:	d31e      	bcc.n	8004e64 <__cvt+0xc0>
 8004e26:	4638      	mov	r0, r7
 8004e28:	9b07      	ldr	r3, [sp, #28]
 8004e2a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004e2c:	1bdb      	subs	r3, r3, r7
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	b008      	add	sp, #32
 8004e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e36:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e3a:	eb00 0906 	add.w	r9, r0, r6
 8004e3e:	d1e5      	bne.n	8004e0c <__cvt+0x68>
 8004e40:	7803      	ldrb	r3, [r0, #0]
 8004e42:	2b30      	cmp	r3, #48	@ 0x30
 8004e44:	d10a      	bne.n	8004e5c <__cvt+0xb8>
 8004e46:	2200      	movs	r2, #0
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	f7fb fdab 	bl	80009a8 <__aeabi_dcmpeq>
 8004e52:	b918      	cbnz	r0, 8004e5c <__cvt+0xb8>
 8004e54:	f1c6 0601 	rsb	r6, r6, #1
 8004e58:	f8ca 6000 	str.w	r6, [sl]
 8004e5c:	f8da 3000 	ldr.w	r3, [sl]
 8004e60:	4499      	add	r9, r3
 8004e62:	e7d3      	b.n	8004e0c <__cvt+0x68>
 8004e64:	1c59      	adds	r1, r3, #1
 8004e66:	9107      	str	r1, [sp, #28]
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e7d9      	b.n	8004e20 <__cvt+0x7c>

08004e6c <__exponent>:
 8004e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e6e:	2900      	cmp	r1, #0
 8004e70:	bfb6      	itet	lt
 8004e72:	232d      	movlt	r3, #45	@ 0x2d
 8004e74:	232b      	movge	r3, #43	@ 0x2b
 8004e76:	4249      	neglt	r1, r1
 8004e78:	2909      	cmp	r1, #9
 8004e7a:	7002      	strb	r2, [r0, #0]
 8004e7c:	7043      	strb	r3, [r0, #1]
 8004e7e:	dd29      	ble.n	8004ed4 <__exponent+0x68>
 8004e80:	f10d 0307 	add.w	r3, sp, #7
 8004e84:	461d      	mov	r5, r3
 8004e86:	270a      	movs	r7, #10
 8004e88:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	fb07 1416 	mls	r4, r7, r6, r1
 8004e92:	3430      	adds	r4, #48	@ 0x30
 8004e94:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e98:	460c      	mov	r4, r1
 8004e9a:	2c63      	cmp	r4, #99	@ 0x63
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ea2:	dcf1      	bgt.n	8004e88 <__exponent+0x1c>
 8004ea4:	3130      	adds	r1, #48	@ 0x30
 8004ea6:	1e94      	subs	r4, r2, #2
 8004ea8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004eac:	4623      	mov	r3, r4
 8004eae:	1c41      	adds	r1, r0, #1
 8004eb0:	42ab      	cmp	r3, r5
 8004eb2:	d30a      	bcc.n	8004eca <__exponent+0x5e>
 8004eb4:	f10d 0309 	add.w	r3, sp, #9
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	42ac      	cmp	r4, r5
 8004ebc:	bf88      	it	hi
 8004ebe:	2300      	movhi	r3, #0
 8004ec0:	3302      	adds	r3, #2
 8004ec2:	4403      	add	r3, r0
 8004ec4:	1a18      	subs	r0, r3, r0
 8004ec6:	b003      	add	sp, #12
 8004ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eca:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ece:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ed2:	e7ed      	b.n	8004eb0 <__exponent+0x44>
 8004ed4:	2330      	movs	r3, #48	@ 0x30
 8004ed6:	3130      	adds	r1, #48	@ 0x30
 8004ed8:	7083      	strb	r3, [r0, #2]
 8004eda:	70c1      	strb	r1, [r0, #3]
 8004edc:	1d03      	adds	r3, r0, #4
 8004ede:	e7f1      	b.n	8004ec4 <__exponent+0x58>

08004ee0 <_printf_float>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	b091      	sub	sp, #68	@ 0x44
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004eec:	4616      	mov	r6, r2
 8004eee:	461f      	mov	r7, r3
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	f000 fcf9 	bl	80058e8 <_localeconv_r>
 8004ef6:	6803      	ldr	r3, [r0, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	9308      	str	r3, [sp, #32]
 8004efc:	f7fb f928 	bl	8000150 <strlen>
 8004f00:	2300      	movs	r3, #0
 8004f02:	930e      	str	r3, [sp, #56]	@ 0x38
 8004f04:	f8d8 3000 	ldr.w	r3, [r8]
 8004f08:	9009      	str	r0, [sp, #36]	@ 0x24
 8004f0a:	3307      	adds	r3, #7
 8004f0c:	f023 0307 	bic.w	r3, r3, #7
 8004f10:	f103 0208 	add.w	r2, r3, #8
 8004f14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f18:	f8d4 b000 	ldr.w	fp, [r4]
 8004f1c:	f8c8 2000 	str.w	r2, [r8]
 8004f20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f2a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f3a:	4b9c      	ldr	r3, [pc, #624]	@ (80051ac <_printf_float+0x2cc>)
 8004f3c:	f7fb fd66 	bl	8000a0c <__aeabi_dcmpun>
 8004f40:	bb70      	cbnz	r0, 8004fa0 <_printf_float+0xc0>
 8004f42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f46:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4a:	4b98      	ldr	r3, [pc, #608]	@ (80051ac <_printf_float+0x2cc>)
 8004f4c:	f7fb fd40 	bl	80009d0 <__aeabi_dcmple>
 8004f50:	bb30      	cbnz	r0, 8004fa0 <_printf_float+0xc0>
 8004f52:	2200      	movs	r2, #0
 8004f54:	2300      	movs	r3, #0
 8004f56:	4640      	mov	r0, r8
 8004f58:	4649      	mov	r1, r9
 8004f5a:	f7fb fd2f 	bl	80009bc <__aeabi_dcmplt>
 8004f5e:	b110      	cbz	r0, 8004f66 <_printf_float+0x86>
 8004f60:	232d      	movs	r3, #45	@ 0x2d
 8004f62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f66:	4a92      	ldr	r2, [pc, #584]	@ (80051b0 <_printf_float+0x2d0>)
 8004f68:	4b92      	ldr	r3, [pc, #584]	@ (80051b4 <_printf_float+0x2d4>)
 8004f6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f6e:	bf94      	ite	ls
 8004f70:	4690      	movls	r8, r2
 8004f72:	4698      	movhi	r8, r3
 8004f74:	2303      	movs	r3, #3
 8004f76:	f04f 0900 	mov.w	r9, #0
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	f02b 0304 	bic.w	r3, fp, #4
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	4633      	mov	r3, r6
 8004f84:	4621      	mov	r1, r4
 8004f86:	4628      	mov	r0, r5
 8004f88:	9700      	str	r7, [sp, #0]
 8004f8a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004f8c:	f000 f9d4 	bl	8005338 <_printf_common>
 8004f90:	3001      	adds	r0, #1
 8004f92:	f040 8090 	bne.w	80050b6 <_printf_float+0x1d6>
 8004f96:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9a:	b011      	add	sp, #68	@ 0x44
 8004f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	4640      	mov	r0, r8
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	f7fb fd30 	bl	8000a0c <__aeabi_dcmpun>
 8004fac:	b148      	cbz	r0, 8004fc2 <_printf_float+0xe2>
 8004fae:	464b      	mov	r3, r9
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bfb8      	it	lt
 8004fb4:	232d      	movlt	r3, #45	@ 0x2d
 8004fb6:	4a80      	ldr	r2, [pc, #512]	@ (80051b8 <_printf_float+0x2d8>)
 8004fb8:	bfb8      	it	lt
 8004fba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80051bc <_printf_float+0x2dc>)
 8004fc0:	e7d3      	b.n	8004f6a <_printf_float+0x8a>
 8004fc2:	6863      	ldr	r3, [r4, #4]
 8004fc4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	d13f      	bne.n	800504c <_printf_float+0x16c>
 8004fcc:	2306      	movs	r3, #6
 8004fce:	6063      	str	r3, [r4, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	9206      	str	r2, [sp, #24]
 8004fda:	aa0e      	add	r2, sp, #56	@ 0x38
 8004fdc:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004fe0:	aa0d      	add	r2, sp, #52	@ 0x34
 8004fe2:	9203      	str	r2, [sp, #12]
 8004fe4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004fe8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	4642      	mov	r2, r8
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	464b      	mov	r3, r9
 8004ff6:	910a      	str	r1, [sp, #40]	@ 0x28
 8004ff8:	f7ff fed4 	bl	8004da4 <__cvt>
 8004ffc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ffe:	4680      	mov	r8, r0
 8005000:	2947      	cmp	r1, #71	@ 0x47
 8005002:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005004:	d128      	bne.n	8005058 <_printf_float+0x178>
 8005006:	1cc8      	adds	r0, r1, #3
 8005008:	db02      	blt.n	8005010 <_printf_float+0x130>
 800500a:	6863      	ldr	r3, [r4, #4]
 800500c:	4299      	cmp	r1, r3
 800500e:	dd40      	ble.n	8005092 <_printf_float+0x1b2>
 8005010:	f1aa 0a02 	sub.w	sl, sl, #2
 8005014:	fa5f fa8a 	uxtb.w	sl, sl
 8005018:	4652      	mov	r2, sl
 800501a:	3901      	subs	r1, #1
 800501c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005020:	910d      	str	r1, [sp, #52]	@ 0x34
 8005022:	f7ff ff23 	bl	8004e6c <__exponent>
 8005026:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005028:	4681      	mov	r9, r0
 800502a:	1813      	adds	r3, r2, r0
 800502c:	2a01      	cmp	r2, #1
 800502e:	6123      	str	r3, [r4, #16]
 8005030:	dc02      	bgt.n	8005038 <_printf_float+0x158>
 8005032:	6822      	ldr	r2, [r4, #0]
 8005034:	07d2      	lsls	r2, r2, #31
 8005036:	d501      	bpl.n	800503c <_printf_float+0x15c>
 8005038:	3301      	adds	r3, #1
 800503a:	6123      	str	r3, [r4, #16]
 800503c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005040:	2b00      	cmp	r3, #0
 8005042:	d09e      	beq.n	8004f82 <_printf_float+0xa2>
 8005044:	232d      	movs	r3, #45	@ 0x2d
 8005046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800504a:	e79a      	b.n	8004f82 <_printf_float+0xa2>
 800504c:	2947      	cmp	r1, #71	@ 0x47
 800504e:	d1bf      	bne.n	8004fd0 <_printf_float+0xf0>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1bd      	bne.n	8004fd0 <_printf_float+0xf0>
 8005054:	2301      	movs	r3, #1
 8005056:	e7ba      	b.n	8004fce <_printf_float+0xee>
 8005058:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800505c:	d9dc      	bls.n	8005018 <_printf_float+0x138>
 800505e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005062:	d118      	bne.n	8005096 <_printf_float+0x1b6>
 8005064:	2900      	cmp	r1, #0
 8005066:	6863      	ldr	r3, [r4, #4]
 8005068:	dd0b      	ble.n	8005082 <_printf_float+0x1a2>
 800506a:	6121      	str	r1, [r4, #16]
 800506c:	b913      	cbnz	r3, 8005074 <_printf_float+0x194>
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	07d0      	lsls	r0, r2, #31
 8005072:	d502      	bpl.n	800507a <_printf_float+0x19a>
 8005074:	3301      	adds	r3, #1
 8005076:	440b      	add	r3, r1
 8005078:	6123      	str	r3, [r4, #16]
 800507a:	f04f 0900 	mov.w	r9, #0
 800507e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005080:	e7dc      	b.n	800503c <_printf_float+0x15c>
 8005082:	b913      	cbnz	r3, 800508a <_printf_float+0x1aa>
 8005084:	6822      	ldr	r2, [r4, #0]
 8005086:	07d2      	lsls	r2, r2, #31
 8005088:	d501      	bpl.n	800508e <_printf_float+0x1ae>
 800508a:	3302      	adds	r3, #2
 800508c:	e7f4      	b.n	8005078 <_printf_float+0x198>
 800508e:	2301      	movs	r3, #1
 8005090:	e7f2      	b.n	8005078 <_printf_float+0x198>
 8005092:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005098:	4299      	cmp	r1, r3
 800509a:	db05      	blt.n	80050a8 <_printf_float+0x1c8>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	6121      	str	r1, [r4, #16]
 80050a0:	07d8      	lsls	r0, r3, #31
 80050a2:	d5ea      	bpl.n	800507a <_printf_float+0x19a>
 80050a4:	1c4b      	adds	r3, r1, #1
 80050a6:	e7e7      	b.n	8005078 <_printf_float+0x198>
 80050a8:	2900      	cmp	r1, #0
 80050aa:	bfcc      	ite	gt
 80050ac:	2201      	movgt	r2, #1
 80050ae:	f1c1 0202 	rsble	r2, r1, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	e7e0      	b.n	8005078 <_printf_float+0x198>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	055a      	lsls	r2, r3, #21
 80050ba:	d407      	bmi.n	80050cc <_printf_float+0x1ec>
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	4642      	mov	r2, r8
 80050c0:	4631      	mov	r1, r6
 80050c2:	4628      	mov	r0, r5
 80050c4:	47b8      	blx	r7
 80050c6:	3001      	adds	r0, #1
 80050c8:	d12b      	bne.n	8005122 <_printf_float+0x242>
 80050ca:	e764      	b.n	8004f96 <_printf_float+0xb6>
 80050cc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050d0:	f240 80dc 	bls.w	800528c <_printf_float+0x3ac>
 80050d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050d8:	2200      	movs	r2, #0
 80050da:	2300      	movs	r3, #0
 80050dc:	f7fb fc64 	bl	80009a8 <__aeabi_dcmpeq>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d033      	beq.n	800514c <_printf_float+0x26c>
 80050e4:	2301      	movs	r3, #1
 80050e6:	4631      	mov	r1, r6
 80050e8:	4628      	mov	r0, r5
 80050ea:	4a35      	ldr	r2, [pc, #212]	@ (80051c0 <_printf_float+0x2e0>)
 80050ec:	47b8      	blx	r7
 80050ee:	3001      	adds	r0, #1
 80050f0:	f43f af51 	beq.w	8004f96 <_printf_float+0xb6>
 80050f4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80050f8:	4543      	cmp	r3, r8
 80050fa:	db02      	blt.n	8005102 <_printf_float+0x222>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	07d8      	lsls	r0, r3, #31
 8005100:	d50f      	bpl.n	8005122 <_printf_float+0x242>
 8005102:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005106:	4631      	mov	r1, r6
 8005108:	4628      	mov	r0, r5
 800510a:	47b8      	blx	r7
 800510c:	3001      	adds	r0, #1
 800510e:	f43f af42 	beq.w	8004f96 <_printf_float+0xb6>
 8005112:	f04f 0900 	mov.w	r9, #0
 8005116:	f108 38ff 	add.w	r8, r8, #4294967295
 800511a:	f104 0a1a 	add.w	sl, r4, #26
 800511e:	45c8      	cmp	r8, r9
 8005120:	dc09      	bgt.n	8005136 <_printf_float+0x256>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	079b      	lsls	r3, r3, #30
 8005126:	f100 8102 	bmi.w	800532e <_printf_float+0x44e>
 800512a:	68e0      	ldr	r0, [r4, #12]
 800512c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800512e:	4298      	cmp	r0, r3
 8005130:	bfb8      	it	lt
 8005132:	4618      	movlt	r0, r3
 8005134:	e731      	b.n	8004f9a <_printf_float+0xba>
 8005136:	2301      	movs	r3, #1
 8005138:	4652      	mov	r2, sl
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f af28 	beq.w	8004f96 <_printf_float+0xb6>
 8005146:	f109 0901 	add.w	r9, r9, #1
 800514a:	e7e8      	b.n	800511e <_printf_float+0x23e>
 800514c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800514e:	2b00      	cmp	r3, #0
 8005150:	dc38      	bgt.n	80051c4 <_printf_float+0x2e4>
 8005152:	2301      	movs	r3, #1
 8005154:	4631      	mov	r1, r6
 8005156:	4628      	mov	r0, r5
 8005158:	4a19      	ldr	r2, [pc, #100]	@ (80051c0 <_printf_float+0x2e0>)
 800515a:	47b8      	blx	r7
 800515c:	3001      	adds	r0, #1
 800515e:	f43f af1a 	beq.w	8004f96 <_printf_float+0xb6>
 8005162:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005166:	ea59 0303 	orrs.w	r3, r9, r3
 800516a:	d102      	bne.n	8005172 <_printf_float+0x292>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	07d9      	lsls	r1, r3, #31
 8005170:	d5d7      	bpl.n	8005122 <_printf_float+0x242>
 8005172:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005176:	4631      	mov	r1, r6
 8005178:	4628      	mov	r0, r5
 800517a:	47b8      	blx	r7
 800517c:	3001      	adds	r0, #1
 800517e:	f43f af0a 	beq.w	8004f96 <_printf_float+0xb6>
 8005182:	f04f 0a00 	mov.w	sl, #0
 8005186:	f104 0b1a 	add.w	fp, r4, #26
 800518a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800518c:	425b      	negs	r3, r3
 800518e:	4553      	cmp	r3, sl
 8005190:	dc01      	bgt.n	8005196 <_printf_float+0x2b6>
 8005192:	464b      	mov	r3, r9
 8005194:	e793      	b.n	80050be <_printf_float+0x1de>
 8005196:	2301      	movs	r3, #1
 8005198:	465a      	mov	r2, fp
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	47b8      	blx	r7
 80051a0:	3001      	adds	r0, #1
 80051a2:	f43f aef8 	beq.w	8004f96 <_printf_float+0xb6>
 80051a6:	f10a 0a01 	add.w	sl, sl, #1
 80051aa:	e7ee      	b.n	800518a <_printf_float+0x2aa>
 80051ac:	7fefffff 	.word	0x7fefffff
 80051b0:	08007ace 	.word	0x08007ace
 80051b4:	08007ad2 	.word	0x08007ad2
 80051b8:	08007ad6 	.word	0x08007ad6
 80051bc:	08007ada 	.word	0x08007ada
 80051c0:	08007ade 	.word	0x08007ade
 80051c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051c6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80051ca:	4553      	cmp	r3, sl
 80051cc:	bfa8      	it	ge
 80051ce:	4653      	movge	r3, sl
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	4699      	mov	r9, r3
 80051d4:	dc36      	bgt.n	8005244 <_printf_float+0x364>
 80051d6:	f04f 0b00 	mov.w	fp, #0
 80051da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051de:	f104 021a 	add.w	r2, r4, #26
 80051e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80051e6:	eba3 0309 	sub.w	r3, r3, r9
 80051ea:	455b      	cmp	r3, fp
 80051ec:	dc31      	bgt.n	8005252 <_printf_float+0x372>
 80051ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051f0:	459a      	cmp	sl, r3
 80051f2:	dc3a      	bgt.n	800526a <_printf_float+0x38a>
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	07da      	lsls	r2, r3, #31
 80051f8:	d437      	bmi.n	800526a <_printf_float+0x38a>
 80051fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051fc:	ebaa 0903 	sub.w	r9, sl, r3
 8005200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005202:	ebaa 0303 	sub.w	r3, sl, r3
 8005206:	4599      	cmp	r9, r3
 8005208:	bfa8      	it	ge
 800520a:	4699      	movge	r9, r3
 800520c:	f1b9 0f00 	cmp.w	r9, #0
 8005210:	dc33      	bgt.n	800527a <_printf_float+0x39a>
 8005212:	f04f 0800 	mov.w	r8, #0
 8005216:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800521a:	f104 0b1a 	add.w	fp, r4, #26
 800521e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005220:	ebaa 0303 	sub.w	r3, sl, r3
 8005224:	eba3 0309 	sub.w	r3, r3, r9
 8005228:	4543      	cmp	r3, r8
 800522a:	f77f af7a 	ble.w	8005122 <_printf_float+0x242>
 800522e:	2301      	movs	r3, #1
 8005230:	465a      	mov	r2, fp
 8005232:	4631      	mov	r1, r6
 8005234:	4628      	mov	r0, r5
 8005236:	47b8      	blx	r7
 8005238:	3001      	adds	r0, #1
 800523a:	f43f aeac 	beq.w	8004f96 <_printf_float+0xb6>
 800523e:	f108 0801 	add.w	r8, r8, #1
 8005242:	e7ec      	b.n	800521e <_printf_float+0x33e>
 8005244:	4642      	mov	r2, r8
 8005246:	4631      	mov	r1, r6
 8005248:	4628      	mov	r0, r5
 800524a:	47b8      	blx	r7
 800524c:	3001      	adds	r0, #1
 800524e:	d1c2      	bne.n	80051d6 <_printf_float+0x2f6>
 8005250:	e6a1      	b.n	8004f96 <_printf_float+0xb6>
 8005252:	2301      	movs	r3, #1
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	920a      	str	r2, [sp, #40]	@ 0x28
 800525a:	47b8      	blx	r7
 800525c:	3001      	adds	r0, #1
 800525e:	f43f ae9a 	beq.w	8004f96 <_printf_float+0xb6>
 8005262:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005264:	f10b 0b01 	add.w	fp, fp, #1
 8005268:	e7bb      	b.n	80051e2 <_printf_float+0x302>
 800526a:	4631      	mov	r1, r6
 800526c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005270:	4628      	mov	r0, r5
 8005272:	47b8      	blx	r7
 8005274:	3001      	adds	r0, #1
 8005276:	d1c0      	bne.n	80051fa <_printf_float+0x31a>
 8005278:	e68d      	b.n	8004f96 <_printf_float+0xb6>
 800527a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800527c:	464b      	mov	r3, r9
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	4442      	add	r2, r8
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	d1c3      	bne.n	8005212 <_printf_float+0x332>
 800528a:	e684      	b.n	8004f96 <_printf_float+0xb6>
 800528c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005290:	f1ba 0f01 	cmp.w	sl, #1
 8005294:	dc01      	bgt.n	800529a <_printf_float+0x3ba>
 8005296:	07db      	lsls	r3, r3, #31
 8005298:	d536      	bpl.n	8005308 <_printf_float+0x428>
 800529a:	2301      	movs	r3, #1
 800529c:	4642      	mov	r2, r8
 800529e:	4631      	mov	r1, r6
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	f43f ae76 	beq.w	8004f96 <_printf_float+0xb6>
 80052aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052ae:	4631      	mov	r1, r6
 80052b0:	4628      	mov	r0, r5
 80052b2:	47b8      	blx	r7
 80052b4:	3001      	adds	r0, #1
 80052b6:	f43f ae6e 	beq.w	8004f96 <_printf_float+0xb6>
 80052ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80052be:	2200      	movs	r2, #0
 80052c0:	2300      	movs	r3, #0
 80052c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052c6:	f7fb fb6f 	bl	80009a8 <__aeabi_dcmpeq>
 80052ca:	b9c0      	cbnz	r0, 80052fe <_printf_float+0x41e>
 80052cc:	4653      	mov	r3, sl
 80052ce:	f108 0201 	add.w	r2, r8, #1
 80052d2:	4631      	mov	r1, r6
 80052d4:	4628      	mov	r0, r5
 80052d6:	47b8      	blx	r7
 80052d8:	3001      	adds	r0, #1
 80052da:	d10c      	bne.n	80052f6 <_printf_float+0x416>
 80052dc:	e65b      	b.n	8004f96 <_printf_float+0xb6>
 80052de:	2301      	movs	r3, #1
 80052e0:	465a      	mov	r2, fp
 80052e2:	4631      	mov	r1, r6
 80052e4:	4628      	mov	r0, r5
 80052e6:	47b8      	blx	r7
 80052e8:	3001      	adds	r0, #1
 80052ea:	f43f ae54 	beq.w	8004f96 <_printf_float+0xb6>
 80052ee:	f108 0801 	add.w	r8, r8, #1
 80052f2:	45d0      	cmp	r8, sl
 80052f4:	dbf3      	blt.n	80052de <_printf_float+0x3fe>
 80052f6:	464b      	mov	r3, r9
 80052f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80052fc:	e6e0      	b.n	80050c0 <_printf_float+0x1e0>
 80052fe:	f04f 0800 	mov.w	r8, #0
 8005302:	f104 0b1a 	add.w	fp, r4, #26
 8005306:	e7f4      	b.n	80052f2 <_printf_float+0x412>
 8005308:	2301      	movs	r3, #1
 800530a:	4642      	mov	r2, r8
 800530c:	e7e1      	b.n	80052d2 <_printf_float+0x3f2>
 800530e:	2301      	movs	r3, #1
 8005310:	464a      	mov	r2, r9
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	47b8      	blx	r7
 8005318:	3001      	adds	r0, #1
 800531a:	f43f ae3c 	beq.w	8004f96 <_printf_float+0xb6>
 800531e:	f108 0801 	add.w	r8, r8, #1
 8005322:	68e3      	ldr	r3, [r4, #12]
 8005324:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005326:	1a5b      	subs	r3, r3, r1
 8005328:	4543      	cmp	r3, r8
 800532a:	dcf0      	bgt.n	800530e <_printf_float+0x42e>
 800532c:	e6fd      	b.n	800512a <_printf_float+0x24a>
 800532e:	f04f 0800 	mov.w	r8, #0
 8005332:	f104 0919 	add.w	r9, r4, #25
 8005336:	e7f4      	b.n	8005322 <_printf_float+0x442>

08005338 <_printf_common>:
 8005338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800533c:	4616      	mov	r6, r2
 800533e:	4698      	mov	r8, r3
 8005340:	688a      	ldr	r2, [r1, #8]
 8005342:	690b      	ldr	r3, [r1, #16]
 8005344:	4607      	mov	r7, r0
 8005346:	4293      	cmp	r3, r2
 8005348:	bfb8      	it	lt
 800534a:	4613      	movlt	r3, r2
 800534c:	6033      	str	r3, [r6, #0]
 800534e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005352:	460c      	mov	r4, r1
 8005354:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005358:	b10a      	cbz	r2, 800535e <_printf_common+0x26>
 800535a:	3301      	adds	r3, #1
 800535c:	6033      	str	r3, [r6, #0]
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	0699      	lsls	r1, r3, #26
 8005362:	bf42      	ittt	mi
 8005364:	6833      	ldrmi	r3, [r6, #0]
 8005366:	3302      	addmi	r3, #2
 8005368:	6033      	strmi	r3, [r6, #0]
 800536a:	6825      	ldr	r5, [r4, #0]
 800536c:	f015 0506 	ands.w	r5, r5, #6
 8005370:	d106      	bne.n	8005380 <_printf_common+0x48>
 8005372:	f104 0a19 	add.w	sl, r4, #25
 8005376:	68e3      	ldr	r3, [r4, #12]
 8005378:	6832      	ldr	r2, [r6, #0]
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	42ab      	cmp	r3, r5
 800537e:	dc2b      	bgt.n	80053d8 <_printf_common+0xa0>
 8005380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005384:	6822      	ldr	r2, [r4, #0]
 8005386:	3b00      	subs	r3, #0
 8005388:	bf18      	it	ne
 800538a:	2301      	movne	r3, #1
 800538c:	0692      	lsls	r2, r2, #26
 800538e:	d430      	bmi.n	80053f2 <_printf_common+0xba>
 8005390:	4641      	mov	r1, r8
 8005392:	4638      	mov	r0, r7
 8005394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005398:	47c8      	blx	r9
 800539a:	3001      	adds	r0, #1
 800539c:	d023      	beq.n	80053e6 <_printf_common+0xae>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	6922      	ldr	r2, [r4, #16]
 80053a2:	f003 0306 	and.w	r3, r3, #6
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	bf14      	ite	ne
 80053aa:	2500      	movne	r5, #0
 80053ac:	6833      	ldreq	r3, [r6, #0]
 80053ae:	f04f 0600 	mov.w	r6, #0
 80053b2:	bf08      	it	eq
 80053b4:	68e5      	ldreq	r5, [r4, #12]
 80053b6:	f104 041a 	add.w	r4, r4, #26
 80053ba:	bf08      	it	eq
 80053bc:	1aed      	subeq	r5, r5, r3
 80053be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80053c2:	bf08      	it	eq
 80053c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053c8:	4293      	cmp	r3, r2
 80053ca:	bfc4      	itt	gt
 80053cc:	1a9b      	subgt	r3, r3, r2
 80053ce:	18ed      	addgt	r5, r5, r3
 80053d0:	42b5      	cmp	r5, r6
 80053d2:	d11a      	bne.n	800540a <_printf_common+0xd2>
 80053d4:	2000      	movs	r0, #0
 80053d6:	e008      	b.n	80053ea <_printf_common+0xb2>
 80053d8:	2301      	movs	r3, #1
 80053da:	4652      	mov	r2, sl
 80053dc:	4641      	mov	r1, r8
 80053de:	4638      	mov	r0, r7
 80053e0:	47c8      	blx	r9
 80053e2:	3001      	adds	r0, #1
 80053e4:	d103      	bne.n	80053ee <_printf_common+0xb6>
 80053e6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ee:	3501      	adds	r5, #1
 80053f0:	e7c1      	b.n	8005376 <_printf_common+0x3e>
 80053f2:	2030      	movs	r0, #48	@ 0x30
 80053f4:	18e1      	adds	r1, r4, r3
 80053f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005400:	4422      	add	r2, r4
 8005402:	3302      	adds	r3, #2
 8005404:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005408:	e7c2      	b.n	8005390 <_printf_common+0x58>
 800540a:	2301      	movs	r3, #1
 800540c:	4622      	mov	r2, r4
 800540e:	4641      	mov	r1, r8
 8005410:	4638      	mov	r0, r7
 8005412:	47c8      	blx	r9
 8005414:	3001      	adds	r0, #1
 8005416:	d0e6      	beq.n	80053e6 <_printf_common+0xae>
 8005418:	3601      	adds	r6, #1
 800541a:	e7d9      	b.n	80053d0 <_printf_common+0x98>

0800541c <_printf_i>:
 800541c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005420:	7e0f      	ldrb	r7, [r1, #24]
 8005422:	4691      	mov	r9, r2
 8005424:	2f78      	cmp	r7, #120	@ 0x78
 8005426:	4680      	mov	r8, r0
 8005428:	460c      	mov	r4, r1
 800542a:	469a      	mov	sl, r3
 800542c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800542e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005432:	d807      	bhi.n	8005444 <_printf_i+0x28>
 8005434:	2f62      	cmp	r7, #98	@ 0x62
 8005436:	d80a      	bhi.n	800544e <_printf_i+0x32>
 8005438:	2f00      	cmp	r7, #0
 800543a:	f000 80d3 	beq.w	80055e4 <_printf_i+0x1c8>
 800543e:	2f58      	cmp	r7, #88	@ 0x58
 8005440:	f000 80ba 	beq.w	80055b8 <_printf_i+0x19c>
 8005444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005448:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800544c:	e03a      	b.n	80054c4 <_printf_i+0xa8>
 800544e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005452:	2b15      	cmp	r3, #21
 8005454:	d8f6      	bhi.n	8005444 <_printf_i+0x28>
 8005456:	a101      	add	r1, pc, #4	@ (adr r1, 800545c <_printf_i+0x40>)
 8005458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800545c:	080054b5 	.word	0x080054b5
 8005460:	080054c9 	.word	0x080054c9
 8005464:	08005445 	.word	0x08005445
 8005468:	08005445 	.word	0x08005445
 800546c:	08005445 	.word	0x08005445
 8005470:	08005445 	.word	0x08005445
 8005474:	080054c9 	.word	0x080054c9
 8005478:	08005445 	.word	0x08005445
 800547c:	08005445 	.word	0x08005445
 8005480:	08005445 	.word	0x08005445
 8005484:	08005445 	.word	0x08005445
 8005488:	080055cb 	.word	0x080055cb
 800548c:	080054f3 	.word	0x080054f3
 8005490:	08005585 	.word	0x08005585
 8005494:	08005445 	.word	0x08005445
 8005498:	08005445 	.word	0x08005445
 800549c:	080055ed 	.word	0x080055ed
 80054a0:	08005445 	.word	0x08005445
 80054a4:	080054f3 	.word	0x080054f3
 80054a8:	08005445 	.word	0x08005445
 80054ac:	08005445 	.word	0x08005445
 80054b0:	0800558d 	.word	0x0800558d
 80054b4:	6833      	ldr	r3, [r6, #0]
 80054b6:	1d1a      	adds	r2, r3, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6032      	str	r2, [r6, #0]
 80054bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054c4:	2301      	movs	r3, #1
 80054c6:	e09e      	b.n	8005606 <_printf_i+0x1ea>
 80054c8:	6833      	ldr	r3, [r6, #0]
 80054ca:	6820      	ldr	r0, [r4, #0]
 80054cc:	1d19      	adds	r1, r3, #4
 80054ce:	6031      	str	r1, [r6, #0]
 80054d0:	0606      	lsls	r6, r0, #24
 80054d2:	d501      	bpl.n	80054d8 <_printf_i+0xbc>
 80054d4:	681d      	ldr	r5, [r3, #0]
 80054d6:	e003      	b.n	80054e0 <_printf_i+0xc4>
 80054d8:	0645      	lsls	r5, r0, #25
 80054da:	d5fb      	bpl.n	80054d4 <_printf_i+0xb8>
 80054dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054e0:	2d00      	cmp	r5, #0
 80054e2:	da03      	bge.n	80054ec <_printf_i+0xd0>
 80054e4:	232d      	movs	r3, #45	@ 0x2d
 80054e6:	426d      	negs	r5, r5
 80054e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054ec:	230a      	movs	r3, #10
 80054ee:	4859      	ldr	r0, [pc, #356]	@ (8005654 <_printf_i+0x238>)
 80054f0:	e011      	b.n	8005516 <_printf_i+0xfa>
 80054f2:	6821      	ldr	r1, [r4, #0]
 80054f4:	6833      	ldr	r3, [r6, #0]
 80054f6:	0608      	lsls	r0, r1, #24
 80054f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80054fc:	d402      	bmi.n	8005504 <_printf_i+0xe8>
 80054fe:	0649      	lsls	r1, r1, #25
 8005500:	bf48      	it	mi
 8005502:	b2ad      	uxthmi	r5, r5
 8005504:	2f6f      	cmp	r7, #111	@ 0x6f
 8005506:	6033      	str	r3, [r6, #0]
 8005508:	bf14      	ite	ne
 800550a:	230a      	movne	r3, #10
 800550c:	2308      	moveq	r3, #8
 800550e:	4851      	ldr	r0, [pc, #324]	@ (8005654 <_printf_i+0x238>)
 8005510:	2100      	movs	r1, #0
 8005512:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005516:	6866      	ldr	r6, [r4, #4]
 8005518:	2e00      	cmp	r6, #0
 800551a:	bfa8      	it	ge
 800551c:	6821      	ldrge	r1, [r4, #0]
 800551e:	60a6      	str	r6, [r4, #8]
 8005520:	bfa4      	itt	ge
 8005522:	f021 0104 	bicge.w	r1, r1, #4
 8005526:	6021      	strge	r1, [r4, #0]
 8005528:	b90d      	cbnz	r5, 800552e <_printf_i+0x112>
 800552a:	2e00      	cmp	r6, #0
 800552c:	d04b      	beq.n	80055c6 <_printf_i+0x1aa>
 800552e:	4616      	mov	r6, r2
 8005530:	fbb5 f1f3 	udiv	r1, r5, r3
 8005534:	fb03 5711 	mls	r7, r3, r1, r5
 8005538:	5dc7      	ldrb	r7, [r0, r7]
 800553a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800553e:	462f      	mov	r7, r5
 8005540:	42bb      	cmp	r3, r7
 8005542:	460d      	mov	r5, r1
 8005544:	d9f4      	bls.n	8005530 <_printf_i+0x114>
 8005546:	2b08      	cmp	r3, #8
 8005548:	d10b      	bne.n	8005562 <_printf_i+0x146>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	07df      	lsls	r7, r3, #31
 800554e:	d508      	bpl.n	8005562 <_printf_i+0x146>
 8005550:	6923      	ldr	r3, [r4, #16]
 8005552:	6861      	ldr	r1, [r4, #4]
 8005554:	4299      	cmp	r1, r3
 8005556:	bfde      	ittt	le
 8005558:	2330      	movle	r3, #48	@ 0x30
 800555a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800555e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005562:	1b92      	subs	r2, r2, r6
 8005564:	6122      	str	r2, [r4, #16]
 8005566:	464b      	mov	r3, r9
 8005568:	4621      	mov	r1, r4
 800556a:	4640      	mov	r0, r8
 800556c:	f8cd a000 	str.w	sl, [sp]
 8005570:	aa03      	add	r2, sp, #12
 8005572:	f7ff fee1 	bl	8005338 <_printf_common>
 8005576:	3001      	adds	r0, #1
 8005578:	d14a      	bne.n	8005610 <_printf_i+0x1f4>
 800557a:	f04f 30ff 	mov.w	r0, #4294967295
 800557e:	b004      	add	sp, #16
 8005580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	f043 0320 	orr.w	r3, r3, #32
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	2778      	movs	r7, #120	@ 0x78
 800558e:	4832      	ldr	r0, [pc, #200]	@ (8005658 <_printf_i+0x23c>)
 8005590:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	6831      	ldr	r1, [r6, #0]
 8005598:	061f      	lsls	r7, r3, #24
 800559a:	f851 5b04 	ldr.w	r5, [r1], #4
 800559e:	d402      	bmi.n	80055a6 <_printf_i+0x18a>
 80055a0:	065f      	lsls	r7, r3, #25
 80055a2:	bf48      	it	mi
 80055a4:	b2ad      	uxthmi	r5, r5
 80055a6:	6031      	str	r1, [r6, #0]
 80055a8:	07d9      	lsls	r1, r3, #31
 80055aa:	bf44      	itt	mi
 80055ac:	f043 0320 	orrmi.w	r3, r3, #32
 80055b0:	6023      	strmi	r3, [r4, #0]
 80055b2:	b11d      	cbz	r5, 80055bc <_printf_i+0x1a0>
 80055b4:	2310      	movs	r3, #16
 80055b6:	e7ab      	b.n	8005510 <_printf_i+0xf4>
 80055b8:	4826      	ldr	r0, [pc, #152]	@ (8005654 <_printf_i+0x238>)
 80055ba:	e7e9      	b.n	8005590 <_printf_i+0x174>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	f023 0320 	bic.w	r3, r3, #32
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	e7f6      	b.n	80055b4 <_printf_i+0x198>
 80055c6:	4616      	mov	r6, r2
 80055c8:	e7bd      	b.n	8005546 <_printf_i+0x12a>
 80055ca:	6833      	ldr	r3, [r6, #0]
 80055cc:	6825      	ldr	r5, [r4, #0]
 80055ce:	1d18      	adds	r0, r3, #4
 80055d0:	6961      	ldr	r1, [r4, #20]
 80055d2:	6030      	str	r0, [r6, #0]
 80055d4:	062e      	lsls	r6, r5, #24
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	d501      	bpl.n	80055de <_printf_i+0x1c2>
 80055da:	6019      	str	r1, [r3, #0]
 80055dc:	e002      	b.n	80055e4 <_printf_i+0x1c8>
 80055de:	0668      	lsls	r0, r5, #25
 80055e0:	d5fb      	bpl.n	80055da <_printf_i+0x1be>
 80055e2:	8019      	strh	r1, [r3, #0]
 80055e4:	2300      	movs	r3, #0
 80055e6:	4616      	mov	r6, r2
 80055e8:	6123      	str	r3, [r4, #16]
 80055ea:	e7bc      	b.n	8005566 <_printf_i+0x14a>
 80055ec:	6833      	ldr	r3, [r6, #0]
 80055ee:	2100      	movs	r1, #0
 80055f0:	1d1a      	adds	r2, r3, #4
 80055f2:	6032      	str	r2, [r6, #0]
 80055f4:	681e      	ldr	r6, [r3, #0]
 80055f6:	6862      	ldr	r2, [r4, #4]
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 f9ec 	bl	80059d6 <memchr>
 80055fe:	b108      	cbz	r0, 8005604 <_printf_i+0x1e8>
 8005600:	1b80      	subs	r0, r0, r6
 8005602:	6060      	str	r0, [r4, #4]
 8005604:	6863      	ldr	r3, [r4, #4]
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	2300      	movs	r3, #0
 800560a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800560e:	e7aa      	b.n	8005566 <_printf_i+0x14a>
 8005610:	4632      	mov	r2, r6
 8005612:	4649      	mov	r1, r9
 8005614:	4640      	mov	r0, r8
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	47d0      	blx	sl
 800561a:	3001      	adds	r0, #1
 800561c:	d0ad      	beq.n	800557a <_printf_i+0x15e>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	079b      	lsls	r3, r3, #30
 8005622:	d413      	bmi.n	800564c <_printf_i+0x230>
 8005624:	68e0      	ldr	r0, [r4, #12]
 8005626:	9b03      	ldr	r3, [sp, #12]
 8005628:	4298      	cmp	r0, r3
 800562a:	bfb8      	it	lt
 800562c:	4618      	movlt	r0, r3
 800562e:	e7a6      	b.n	800557e <_printf_i+0x162>
 8005630:	2301      	movs	r3, #1
 8005632:	4632      	mov	r2, r6
 8005634:	4649      	mov	r1, r9
 8005636:	4640      	mov	r0, r8
 8005638:	47d0      	blx	sl
 800563a:	3001      	adds	r0, #1
 800563c:	d09d      	beq.n	800557a <_printf_i+0x15e>
 800563e:	3501      	adds	r5, #1
 8005640:	68e3      	ldr	r3, [r4, #12]
 8005642:	9903      	ldr	r1, [sp, #12]
 8005644:	1a5b      	subs	r3, r3, r1
 8005646:	42ab      	cmp	r3, r5
 8005648:	dcf2      	bgt.n	8005630 <_printf_i+0x214>
 800564a:	e7eb      	b.n	8005624 <_printf_i+0x208>
 800564c:	2500      	movs	r5, #0
 800564e:	f104 0619 	add.w	r6, r4, #25
 8005652:	e7f5      	b.n	8005640 <_printf_i+0x224>
 8005654:	08007ae0 	.word	0x08007ae0
 8005658:	08007af1 	.word	0x08007af1

0800565c <std>:
 800565c:	2300      	movs	r3, #0
 800565e:	b510      	push	{r4, lr}
 8005660:	4604      	mov	r4, r0
 8005662:	e9c0 3300 	strd	r3, r3, [r0]
 8005666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800566a:	6083      	str	r3, [r0, #8]
 800566c:	8181      	strh	r1, [r0, #12]
 800566e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005670:	81c2      	strh	r2, [r0, #14]
 8005672:	6183      	str	r3, [r0, #24]
 8005674:	4619      	mov	r1, r3
 8005676:	2208      	movs	r2, #8
 8005678:	305c      	adds	r0, #92	@ 0x5c
 800567a:	f000 f92d 	bl	80058d8 <memset>
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <std+0x58>)
 8005680:	6224      	str	r4, [r4, #32]
 8005682:	6263      	str	r3, [r4, #36]	@ 0x24
 8005684:	4b0c      	ldr	r3, [pc, #48]	@ (80056b8 <std+0x5c>)
 8005686:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005688:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <std+0x60>)
 800568a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800568c:	4b0c      	ldr	r3, [pc, #48]	@ (80056c0 <std+0x64>)
 800568e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005690:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <std+0x68>)
 8005692:	429c      	cmp	r4, r3
 8005694:	d006      	beq.n	80056a4 <std+0x48>
 8005696:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800569a:	4294      	cmp	r4, r2
 800569c:	d002      	beq.n	80056a4 <std+0x48>
 800569e:	33d0      	adds	r3, #208	@ 0xd0
 80056a0:	429c      	cmp	r4, r3
 80056a2:	d105      	bne.n	80056b0 <std+0x54>
 80056a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ac:	f000 b990 	b.w	80059d0 <__retarget_lock_init_recursive>
 80056b0:	bd10      	pop	{r4, pc}
 80056b2:	bf00      	nop
 80056b4:	080057e1 	.word	0x080057e1
 80056b8:	08005803 	.word	0x08005803
 80056bc:	0800583b 	.word	0x0800583b
 80056c0:	0800585f 	.word	0x0800585f
 80056c4:	20000438 	.word	0x20000438

080056c8 <stdio_exit_handler>:
 80056c8:	4a02      	ldr	r2, [pc, #8]	@ (80056d4 <stdio_exit_handler+0xc>)
 80056ca:	4903      	ldr	r1, [pc, #12]	@ (80056d8 <stdio_exit_handler+0x10>)
 80056cc:	4803      	ldr	r0, [pc, #12]	@ (80056dc <stdio_exit_handler+0x14>)
 80056ce:	f000 b869 	b.w	80057a4 <_fwalk_sglue>
 80056d2:	bf00      	nop
 80056d4:	2000000c 	.word	0x2000000c
 80056d8:	0800735d 	.word	0x0800735d
 80056dc:	2000001c 	.word	0x2000001c

080056e0 <cleanup_stdio>:
 80056e0:	6841      	ldr	r1, [r0, #4]
 80056e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005714 <cleanup_stdio+0x34>)
 80056e4:	b510      	push	{r4, lr}
 80056e6:	4299      	cmp	r1, r3
 80056e8:	4604      	mov	r4, r0
 80056ea:	d001      	beq.n	80056f0 <cleanup_stdio+0x10>
 80056ec:	f001 fe36 	bl	800735c <_fflush_r>
 80056f0:	68a1      	ldr	r1, [r4, #8]
 80056f2:	4b09      	ldr	r3, [pc, #36]	@ (8005718 <cleanup_stdio+0x38>)
 80056f4:	4299      	cmp	r1, r3
 80056f6:	d002      	beq.n	80056fe <cleanup_stdio+0x1e>
 80056f8:	4620      	mov	r0, r4
 80056fa:	f001 fe2f 	bl	800735c <_fflush_r>
 80056fe:	68e1      	ldr	r1, [r4, #12]
 8005700:	4b06      	ldr	r3, [pc, #24]	@ (800571c <cleanup_stdio+0x3c>)
 8005702:	4299      	cmp	r1, r3
 8005704:	d004      	beq.n	8005710 <cleanup_stdio+0x30>
 8005706:	4620      	mov	r0, r4
 8005708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800570c:	f001 be26 	b.w	800735c <_fflush_r>
 8005710:	bd10      	pop	{r4, pc}
 8005712:	bf00      	nop
 8005714:	20000438 	.word	0x20000438
 8005718:	200004a0 	.word	0x200004a0
 800571c:	20000508 	.word	0x20000508

08005720 <global_stdio_init.part.0>:
 8005720:	b510      	push	{r4, lr}
 8005722:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <global_stdio_init.part.0+0x30>)
 8005724:	4c0b      	ldr	r4, [pc, #44]	@ (8005754 <global_stdio_init.part.0+0x34>)
 8005726:	4a0c      	ldr	r2, [pc, #48]	@ (8005758 <global_stdio_init.part.0+0x38>)
 8005728:	4620      	mov	r0, r4
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	2104      	movs	r1, #4
 800572e:	2200      	movs	r2, #0
 8005730:	f7ff ff94 	bl	800565c <std>
 8005734:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005738:	2201      	movs	r2, #1
 800573a:	2109      	movs	r1, #9
 800573c:	f7ff ff8e 	bl	800565c <std>
 8005740:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005744:	2202      	movs	r2, #2
 8005746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800574a:	2112      	movs	r1, #18
 800574c:	f7ff bf86 	b.w	800565c <std>
 8005750:	20000570 	.word	0x20000570
 8005754:	20000438 	.word	0x20000438
 8005758:	080056c9 	.word	0x080056c9

0800575c <__sfp_lock_acquire>:
 800575c:	4801      	ldr	r0, [pc, #4]	@ (8005764 <__sfp_lock_acquire+0x8>)
 800575e:	f000 b938 	b.w	80059d2 <__retarget_lock_acquire_recursive>
 8005762:	bf00      	nop
 8005764:	20000579 	.word	0x20000579

08005768 <__sfp_lock_release>:
 8005768:	4801      	ldr	r0, [pc, #4]	@ (8005770 <__sfp_lock_release+0x8>)
 800576a:	f000 b933 	b.w	80059d4 <__retarget_lock_release_recursive>
 800576e:	bf00      	nop
 8005770:	20000579 	.word	0x20000579

08005774 <__sinit>:
 8005774:	b510      	push	{r4, lr}
 8005776:	4604      	mov	r4, r0
 8005778:	f7ff fff0 	bl	800575c <__sfp_lock_acquire>
 800577c:	6a23      	ldr	r3, [r4, #32]
 800577e:	b11b      	cbz	r3, 8005788 <__sinit+0x14>
 8005780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005784:	f7ff bff0 	b.w	8005768 <__sfp_lock_release>
 8005788:	4b04      	ldr	r3, [pc, #16]	@ (800579c <__sinit+0x28>)
 800578a:	6223      	str	r3, [r4, #32]
 800578c:	4b04      	ldr	r3, [pc, #16]	@ (80057a0 <__sinit+0x2c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f5      	bne.n	8005780 <__sinit+0xc>
 8005794:	f7ff ffc4 	bl	8005720 <global_stdio_init.part.0>
 8005798:	e7f2      	b.n	8005780 <__sinit+0xc>
 800579a:	bf00      	nop
 800579c:	080056e1 	.word	0x080056e1
 80057a0:	20000570 	.word	0x20000570

080057a4 <_fwalk_sglue>:
 80057a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a8:	4607      	mov	r7, r0
 80057aa:	4688      	mov	r8, r1
 80057ac:	4614      	mov	r4, r2
 80057ae:	2600      	movs	r6, #0
 80057b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057b4:	f1b9 0901 	subs.w	r9, r9, #1
 80057b8:	d505      	bpl.n	80057c6 <_fwalk_sglue+0x22>
 80057ba:	6824      	ldr	r4, [r4, #0]
 80057bc:	2c00      	cmp	r4, #0
 80057be:	d1f7      	bne.n	80057b0 <_fwalk_sglue+0xc>
 80057c0:	4630      	mov	r0, r6
 80057c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057c6:	89ab      	ldrh	r3, [r5, #12]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d907      	bls.n	80057dc <_fwalk_sglue+0x38>
 80057cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057d0:	3301      	adds	r3, #1
 80057d2:	d003      	beq.n	80057dc <_fwalk_sglue+0x38>
 80057d4:	4629      	mov	r1, r5
 80057d6:	4638      	mov	r0, r7
 80057d8:	47c0      	blx	r8
 80057da:	4306      	orrs	r6, r0
 80057dc:	3568      	adds	r5, #104	@ 0x68
 80057de:	e7e9      	b.n	80057b4 <_fwalk_sglue+0x10>

080057e0 <__sread>:
 80057e0:	b510      	push	{r4, lr}
 80057e2:	460c      	mov	r4, r1
 80057e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e8:	f000 f8a4 	bl	8005934 <_read_r>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	bfab      	itete	ge
 80057f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057f2:	89a3      	ldrhlt	r3, [r4, #12]
 80057f4:	181b      	addge	r3, r3, r0
 80057f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057fa:	bfac      	ite	ge
 80057fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057fe:	81a3      	strhlt	r3, [r4, #12]
 8005800:	bd10      	pop	{r4, pc}

08005802 <__swrite>:
 8005802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005806:	461f      	mov	r7, r3
 8005808:	898b      	ldrh	r3, [r1, #12]
 800580a:	4605      	mov	r5, r0
 800580c:	05db      	lsls	r3, r3, #23
 800580e:	460c      	mov	r4, r1
 8005810:	4616      	mov	r6, r2
 8005812:	d505      	bpl.n	8005820 <__swrite+0x1e>
 8005814:	2302      	movs	r3, #2
 8005816:	2200      	movs	r2, #0
 8005818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800581c:	f000 f878 	bl	8005910 <_lseek_r>
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	4632      	mov	r2, r6
 8005824:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005828:	81a3      	strh	r3, [r4, #12]
 800582a:	4628      	mov	r0, r5
 800582c:	463b      	mov	r3, r7
 800582e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	f000 b88f 	b.w	8005958 <_write_r>

0800583a <__sseek>:
 800583a:	b510      	push	{r4, lr}
 800583c:	460c      	mov	r4, r1
 800583e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005842:	f000 f865 	bl	8005910 <_lseek_r>
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	bf15      	itete	ne
 800584c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800584e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005852:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005856:	81a3      	strheq	r3, [r4, #12]
 8005858:	bf18      	it	ne
 800585a:	81a3      	strhne	r3, [r4, #12]
 800585c:	bd10      	pop	{r4, pc}

0800585e <__sclose>:
 800585e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005862:	f000 b845 	b.w	80058f0 <_close_r>

08005866 <_vsniprintf_r>:
 8005866:	b530      	push	{r4, r5, lr}
 8005868:	4614      	mov	r4, r2
 800586a:	2c00      	cmp	r4, #0
 800586c:	4605      	mov	r5, r0
 800586e:	461a      	mov	r2, r3
 8005870:	b09b      	sub	sp, #108	@ 0x6c
 8005872:	da05      	bge.n	8005880 <_vsniprintf_r+0x1a>
 8005874:	238b      	movs	r3, #139	@ 0x8b
 8005876:	6003      	str	r3, [r0, #0]
 8005878:	f04f 30ff 	mov.w	r0, #4294967295
 800587c:	b01b      	add	sp, #108	@ 0x6c
 800587e:	bd30      	pop	{r4, r5, pc}
 8005880:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005884:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005888:	bf0c      	ite	eq
 800588a:	4623      	moveq	r3, r4
 800588c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005890:	9302      	str	r3, [sp, #8]
 8005892:	9305      	str	r3, [sp, #20]
 8005894:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005898:	9100      	str	r1, [sp, #0]
 800589a:	9104      	str	r1, [sp, #16]
 800589c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80058a0:	4669      	mov	r1, sp
 80058a2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80058a4:	f001 fbde 	bl	8007064 <_svfiprintf_r>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	bfbc      	itt	lt
 80058ac:	238b      	movlt	r3, #139	@ 0x8b
 80058ae:	602b      	strlt	r3, [r5, #0]
 80058b0:	2c00      	cmp	r4, #0
 80058b2:	d0e3      	beq.n	800587c <_vsniprintf_r+0x16>
 80058b4:	2200      	movs	r2, #0
 80058b6:	9b00      	ldr	r3, [sp, #0]
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	e7df      	b.n	800587c <_vsniprintf_r+0x16>

080058bc <vsniprintf>:
 80058bc:	b507      	push	{r0, r1, r2, lr}
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	460a      	mov	r2, r1
 80058c4:	4601      	mov	r1, r0
 80058c6:	4803      	ldr	r0, [pc, #12]	@ (80058d4 <vsniprintf+0x18>)
 80058c8:	6800      	ldr	r0, [r0, #0]
 80058ca:	f7ff ffcc 	bl	8005866 <_vsniprintf_r>
 80058ce:	b003      	add	sp, #12
 80058d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80058d4:	20000018 	.word	0x20000018

080058d8 <memset>:
 80058d8:	4603      	mov	r3, r0
 80058da:	4402      	add	r2, r0
 80058dc:	4293      	cmp	r3, r2
 80058de:	d100      	bne.n	80058e2 <memset+0xa>
 80058e0:	4770      	bx	lr
 80058e2:	f803 1b01 	strb.w	r1, [r3], #1
 80058e6:	e7f9      	b.n	80058dc <memset+0x4>

080058e8 <_localeconv_r>:
 80058e8:	4800      	ldr	r0, [pc, #0]	@ (80058ec <_localeconv_r+0x4>)
 80058ea:	4770      	bx	lr
 80058ec:	20000158 	.word	0x20000158

080058f0 <_close_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	2300      	movs	r3, #0
 80058f4:	4d05      	ldr	r5, [pc, #20]	@ (800590c <_close_r+0x1c>)
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	602b      	str	r3, [r5, #0]
 80058fc:	f7fb feed 	bl	80016da <_close>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_close_r+0x1a>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	b103      	cbz	r3, 800590a <_close_r+0x1a>
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	20000574 	.word	0x20000574

08005910 <_lseek_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	2200      	movs	r2, #0
 800591a:	4d05      	ldr	r5, [pc, #20]	@ (8005930 <_lseek_r+0x20>)
 800591c:	602a      	str	r2, [r5, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7fb feff 	bl	8001722 <_lseek>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_lseek_r+0x1e>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_lseek_r+0x1e>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	20000574 	.word	0x20000574

08005934 <_read_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	2200      	movs	r2, #0
 800593e:	4d05      	ldr	r5, [pc, #20]	@ (8005954 <_read_r+0x20>)
 8005940:	602a      	str	r2, [r5, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	f7fb fe90 	bl	8001668 <_read>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_read_r+0x1e>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	b103      	cbz	r3, 8005952 <_read_r+0x1e>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	20000574 	.word	0x20000574

08005958 <_write_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	4611      	mov	r1, r2
 8005960:	2200      	movs	r2, #0
 8005962:	4d05      	ldr	r5, [pc, #20]	@ (8005978 <_write_r+0x20>)
 8005964:	602a      	str	r2, [r5, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	f7fb fe9b 	bl	80016a2 <_write>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_write_r+0x1e>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_write_r+0x1e>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	20000574 	.word	0x20000574

0800597c <__errno>:
 800597c:	4b01      	ldr	r3, [pc, #4]	@ (8005984 <__errno+0x8>)
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000018 	.word	0x20000018

08005988 <__libc_init_array>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	2600      	movs	r6, #0
 800598c:	4d0c      	ldr	r5, [pc, #48]	@ (80059c0 <__libc_init_array+0x38>)
 800598e:	4c0d      	ldr	r4, [pc, #52]	@ (80059c4 <__libc_init_array+0x3c>)
 8005990:	1b64      	subs	r4, r4, r5
 8005992:	10a4      	asrs	r4, r4, #2
 8005994:	42a6      	cmp	r6, r4
 8005996:	d109      	bne.n	80059ac <__libc_init_array+0x24>
 8005998:	f002 f86e 	bl	8007a78 <_init>
 800599c:	2600      	movs	r6, #0
 800599e:	4d0a      	ldr	r5, [pc, #40]	@ (80059c8 <__libc_init_array+0x40>)
 80059a0:	4c0a      	ldr	r4, [pc, #40]	@ (80059cc <__libc_init_array+0x44>)
 80059a2:	1b64      	subs	r4, r4, r5
 80059a4:	10a4      	asrs	r4, r4, #2
 80059a6:	42a6      	cmp	r6, r4
 80059a8:	d105      	bne.n	80059b6 <__libc_init_array+0x2e>
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b0:	4798      	blx	r3
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7ee      	b.n	8005994 <__libc_init_array+0xc>
 80059b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ba:	4798      	blx	r3
 80059bc:	3601      	adds	r6, #1
 80059be:	e7f2      	b.n	80059a6 <__libc_init_array+0x1e>
 80059c0:	08007e48 	.word	0x08007e48
 80059c4:	08007e48 	.word	0x08007e48
 80059c8:	08007e48 	.word	0x08007e48
 80059cc:	08007e4c 	.word	0x08007e4c

080059d0 <__retarget_lock_init_recursive>:
 80059d0:	4770      	bx	lr

080059d2 <__retarget_lock_acquire_recursive>:
 80059d2:	4770      	bx	lr

080059d4 <__retarget_lock_release_recursive>:
 80059d4:	4770      	bx	lr

080059d6 <memchr>:
 80059d6:	4603      	mov	r3, r0
 80059d8:	b510      	push	{r4, lr}
 80059da:	b2c9      	uxtb	r1, r1
 80059dc:	4402      	add	r2, r0
 80059de:	4293      	cmp	r3, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	d101      	bne.n	80059e8 <memchr+0x12>
 80059e4:	2000      	movs	r0, #0
 80059e6:	e003      	b.n	80059f0 <memchr+0x1a>
 80059e8:	7804      	ldrb	r4, [r0, #0]
 80059ea:	3301      	adds	r3, #1
 80059ec:	428c      	cmp	r4, r1
 80059ee:	d1f6      	bne.n	80059de <memchr+0x8>
 80059f0:	bd10      	pop	{r4, pc}

080059f2 <memcpy>:
 80059f2:	440a      	add	r2, r1
 80059f4:	4291      	cmp	r1, r2
 80059f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80059fa:	d100      	bne.n	80059fe <memcpy+0xc>
 80059fc:	4770      	bx	lr
 80059fe:	b510      	push	{r4, lr}
 8005a00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a04:	4291      	cmp	r1, r2
 8005a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a0a:	d1f9      	bne.n	8005a00 <memcpy+0xe>
 8005a0c:	bd10      	pop	{r4, pc}

08005a0e <quorem>:
 8005a0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a12:	6903      	ldr	r3, [r0, #16]
 8005a14:	690c      	ldr	r4, [r1, #16]
 8005a16:	4607      	mov	r7, r0
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	db7e      	blt.n	8005b1a <quorem+0x10c>
 8005a1c:	3c01      	subs	r4, #1
 8005a1e:	00a3      	lsls	r3, r4, #2
 8005a20:	f100 0514 	add.w	r5, r0, #20
 8005a24:	f101 0814 	add.w	r8, r1, #20
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a2e:	9301      	str	r3, [sp, #4]
 8005a30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a44:	d32e      	bcc.n	8005aa4 <quorem+0x96>
 8005a46:	f04f 0a00 	mov.w	sl, #0
 8005a4a:	46c4      	mov	ip, r8
 8005a4c:	46ae      	mov	lr, r5
 8005a4e:	46d3      	mov	fp, sl
 8005a50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a54:	b298      	uxth	r0, r3
 8005a56:	fb06 a000 	mla	r0, r6, r0, sl
 8005a5a:	0c1b      	lsrs	r3, r3, #16
 8005a5c:	0c02      	lsrs	r2, r0, #16
 8005a5e:	fb06 2303 	mla	r3, r6, r3, r2
 8005a62:	f8de 2000 	ldr.w	r2, [lr]
 8005a66:	b280      	uxth	r0, r0
 8005a68:	b292      	uxth	r2, r2
 8005a6a:	1a12      	subs	r2, r2, r0
 8005a6c:	445a      	add	r2, fp
 8005a6e:	f8de 0000 	ldr.w	r0, [lr]
 8005a72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a80:	b292      	uxth	r2, r2
 8005a82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a86:	45e1      	cmp	r9, ip
 8005a88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005a8c:	f84e 2b04 	str.w	r2, [lr], #4
 8005a90:	d2de      	bcs.n	8005a50 <quorem+0x42>
 8005a92:	9b00      	ldr	r3, [sp, #0]
 8005a94:	58eb      	ldr	r3, [r5, r3]
 8005a96:	b92b      	cbnz	r3, 8005aa4 <quorem+0x96>
 8005a98:	9b01      	ldr	r3, [sp, #4]
 8005a9a:	3b04      	subs	r3, #4
 8005a9c:	429d      	cmp	r5, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	d32f      	bcc.n	8005b02 <quorem+0xf4>
 8005aa2:	613c      	str	r4, [r7, #16]
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	f001 f979 	bl	8006d9c <__mcmp>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	db25      	blt.n	8005afa <quorem+0xec>
 8005aae:	4629      	mov	r1, r5
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ab6:	f8d1 c000 	ldr.w	ip, [r1]
 8005aba:	fa1f fe82 	uxth.w	lr, r2
 8005abe:	fa1f f38c 	uxth.w	r3, ip
 8005ac2:	eba3 030e 	sub.w	r3, r3, lr
 8005ac6:	4403      	add	r3, r0
 8005ac8:	0c12      	lsrs	r2, r2, #16
 8005aca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005ace:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ad8:	45c1      	cmp	r9, r8
 8005ada:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ade:	f841 3b04 	str.w	r3, [r1], #4
 8005ae2:	d2e6      	bcs.n	8005ab2 <quorem+0xa4>
 8005ae4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ae8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aec:	b922      	cbnz	r2, 8005af8 <quorem+0xea>
 8005aee:	3b04      	subs	r3, #4
 8005af0:	429d      	cmp	r5, r3
 8005af2:	461a      	mov	r2, r3
 8005af4:	d30b      	bcc.n	8005b0e <quorem+0x100>
 8005af6:	613c      	str	r4, [r7, #16]
 8005af8:	3601      	adds	r6, #1
 8005afa:	4630      	mov	r0, r6
 8005afc:	b003      	add	sp, #12
 8005afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	3b04      	subs	r3, #4
 8005b06:	2a00      	cmp	r2, #0
 8005b08:	d1cb      	bne.n	8005aa2 <quorem+0x94>
 8005b0a:	3c01      	subs	r4, #1
 8005b0c:	e7c6      	b.n	8005a9c <quorem+0x8e>
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	3b04      	subs	r3, #4
 8005b12:	2a00      	cmp	r2, #0
 8005b14:	d1ef      	bne.n	8005af6 <quorem+0xe8>
 8005b16:	3c01      	subs	r4, #1
 8005b18:	e7ea      	b.n	8005af0 <quorem+0xe2>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e7ee      	b.n	8005afc <quorem+0xee>
	...

08005b20 <_dtoa_r>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	4614      	mov	r4, r2
 8005b26:	461d      	mov	r5, r3
 8005b28:	69c7      	ldr	r7, [r0, #28]
 8005b2a:	b097      	sub	sp, #92	@ 0x5c
 8005b2c:	4683      	mov	fp, r0
 8005b2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005b32:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005b34:	b97f      	cbnz	r7, 8005b56 <_dtoa_r+0x36>
 8005b36:	2010      	movs	r0, #16
 8005b38:	f000 fe02 	bl	8006740 <malloc>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005b42:	b920      	cbnz	r0, 8005b4e <_dtoa_r+0x2e>
 8005b44:	21ef      	movs	r1, #239	@ 0xef
 8005b46:	4ba8      	ldr	r3, [pc, #672]	@ (8005de8 <_dtoa_r+0x2c8>)
 8005b48:	48a8      	ldr	r0, [pc, #672]	@ (8005dec <_dtoa_r+0x2cc>)
 8005b4a:	f001 fc59 	bl	8007400 <__assert_func>
 8005b4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005b52:	6007      	str	r7, [r0, #0]
 8005b54:	60c7      	str	r7, [r0, #12]
 8005b56:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b5a:	6819      	ldr	r1, [r3, #0]
 8005b5c:	b159      	cbz	r1, 8005b76 <_dtoa_r+0x56>
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	2301      	movs	r3, #1
 8005b62:	4093      	lsls	r3, r2
 8005b64:	604a      	str	r2, [r1, #4]
 8005b66:	608b      	str	r3, [r1, #8]
 8005b68:	4658      	mov	r0, fp
 8005b6a:	f000 fedf 	bl	800692c <_Bfree>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	1e2b      	subs	r3, r5, #0
 8005b78:	bfaf      	iteee	ge
 8005b7a:	2300      	movge	r3, #0
 8005b7c:	2201      	movlt	r2, #1
 8005b7e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b82:	9303      	strlt	r3, [sp, #12]
 8005b84:	bfa8      	it	ge
 8005b86:	6033      	strge	r3, [r6, #0]
 8005b88:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b8c:	4b98      	ldr	r3, [pc, #608]	@ (8005df0 <_dtoa_r+0x2d0>)
 8005b8e:	bfb8      	it	lt
 8005b90:	6032      	strlt	r2, [r6, #0]
 8005b92:	ea33 0308 	bics.w	r3, r3, r8
 8005b96:	d112      	bne.n	8005bbe <_dtoa_r+0x9e>
 8005b98:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005b9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005ba4:	4323      	orrs	r3, r4
 8005ba6:	f000 8550 	beq.w	800664a <_dtoa_r+0xb2a>
 8005baa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005bac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005df4 <_dtoa_r+0x2d4>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8552 	beq.w	800665a <_dtoa_r+0xb3a>
 8005bb6:	f10a 0303 	add.w	r3, sl, #3
 8005bba:	f000 bd4c 	b.w	8006656 <_dtoa_r+0xb36>
 8005bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bc2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005bc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f7fa feeb 	bl	80009a8 <__aeabi_dcmpeq>
 8005bd2:	4607      	mov	r7, r0
 8005bd4:	b158      	cbz	r0, 8005bee <_dtoa_r+0xce>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005bde:	b113      	cbz	r3, 8005be6 <_dtoa_r+0xc6>
 8005be0:	4b85      	ldr	r3, [pc, #532]	@ (8005df8 <_dtoa_r+0x2d8>)
 8005be2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005dfc <_dtoa_r+0x2dc>
 8005bea:	f000 bd36 	b.w	800665a <_dtoa_r+0xb3a>
 8005bee:	ab14      	add	r3, sp, #80	@ 0x50
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	ab15      	add	r3, sp, #84	@ 0x54
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	4658      	mov	r0, fp
 8005bf8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005bfc:	f001 f97e 	bl	8006efc <__d2b>
 8005c00:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005c04:	4681      	mov	r9, r0
 8005c06:	2e00      	cmp	r6, #0
 8005c08:	d077      	beq.n	8005cfa <_dtoa_r+0x1da>
 8005c0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c10:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c18:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005c1c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005c20:	9712      	str	r7, [sp, #72]	@ 0x48
 8005c22:	4619      	mov	r1, r3
 8005c24:	2200      	movs	r2, #0
 8005c26:	4b76      	ldr	r3, [pc, #472]	@ (8005e00 <_dtoa_r+0x2e0>)
 8005c28:	f7fa fa9e 	bl	8000168 <__aeabi_dsub>
 8005c2c:	a368      	add	r3, pc, #416	@ (adr r3, 8005dd0 <_dtoa_r+0x2b0>)
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	f7fa fc51 	bl	80004d8 <__aeabi_dmul>
 8005c36:	a368      	add	r3, pc, #416	@ (adr r3, 8005dd8 <_dtoa_r+0x2b8>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fa96 	bl	800016c <__adddf3>
 8005c40:	4604      	mov	r4, r0
 8005c42:	4630      	mov	r0, r6
 8005c44:	460d      	mov	r5, r1
 8005c46:	f7fa fbdd 	bl	8000404 <__aeabi_i2d>
 8005c4a:	a365      	add	r3, pc, #404	@ (adr r3, 8005de0 <_dtoa_r+0x2c0>)
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f7fa fc42 	bl	80004d8 <__aeabi_dmul>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4620      	mov	r0, r4
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	f7fa fa86 	bl	800016c <__adddf3>
 8005c60:	4604      	mov	r4, r0
 8005c62:	460d      	mov	r5, r1
 8005c64:	f7fa fee8 	bl	8000a38 <__aeabi_d2iz>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4620      	mov	r0, r4
 8005c70:	4629      	mov	r1, r5
 8005c72:	f7fa fea3 	bl	80009bc <__aeabi_dcmplt>
 8005c76:	b140      	cbz	r0, 8005c8a <_dtoa_r+0x16a>
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f7fa fbc3 	bl	8000404 <__aeabi_i2d>
 8005c7e:	4622      	mov	r2, r4
 8005c80:	462b      	mov	r3, r5
 8005c82:	f7fa fe91 	bl	80009a8 <__aeabi_dcmpeq>
 8005c86:	b900      	cbnz	r0, 8005c8a <_dtoa_r+0x16a>
 8005c88:	3f01      	subs	r7, #1
 8005c8a:	2f16      	cmp	r7, #22
 8005c8c:	d853      	bhi.n	8005d36 <_dtoa_r+0x216>
 8005c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c92:	4b5c      	ldr	r3, [pc, #368]	@ (8005e04 <_dtoa_r+0x2e4>)
 8005c94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f7fa fe8e 	bl	80009bc <__aeabi_dcmplt>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d04a      	beq.n	8005d3a <_dtoa_r+0x21a>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	3f01      	subs	r7, #1
 8005ca8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005caa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005cac:	1b9b      	subs	r3, r3, r6
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	bf46      	itte	mi
 8005cb2:	f1c3 0801 	rsbmi	r8, r3, #1
 8005cb6:	2300      	movmi	r3, #0
 8005cb8:	f04f 0800 	movpl.w	r8, #0
 8005cbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cbe:	bf48      	it	mi
 8005cc0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005cc2:	2f00      	cmp	r7, #0
 8005cc4:	db3b      	blt.n	8005d3e <_dtoa_r+0x21e>
 8005cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc8:	970e      	str	r7, [sp, #56]	@ 0x38
 8005cca:	443b      	add	r3, r7
 8005ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cce:	2300      	movs	r3, #0
 8005cd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cd4:	2b09      	cmp	r3, #9
 8005cd6:	d866      	bhi.n	8005da6 <_dtoa_r+0x286>
 8005cd8:	2b05      	cmp	r3, #5
 8005cda:	bfc4      	itt	gt
 8005cdc:	3b04      	subgt	r3, #4
 8005cde:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005ce0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ce2:	bfc8      	it	gt
 8005ce4:	2400      	movgt	r4, #0
 8005ce6:	f1a3 0302 	sub.w	r3, r3, #2
 8005cea:	bfd8      	it	le
 8005cec:	2401      	movle	r4, #1
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d864      	bhi.n	8005dbc <_dtoa_r+0x29c>
 8005cf2:	e8df f003 	tbb	[pc, r3]
 8005cf6:	382b      	.short	0x382b
 8005cf8:	5636      	.short	0x5636
 8005cfa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005cfe:	441e      	add	r6, r3
 8005d00:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	bfc1      	itttt	gt
 8005d08:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005d0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005d10:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005d14:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d18:	bfd6      	itet	le
 8005d1a:	f1c3 0320 	rsble	r3, r3, #32
 8005d1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005d22:	fa04 f003 	lslle.w	r0, r4, r3
 8005d26:	f7fa fb5d 	bl	80003e4 <__aeabi_ui2d>
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005d30:	3e01      	subs	r6, #1
 8005d32:	9212      	str	r2, [sp, #72]	@ 0x48
 8005d34:	e775      	b.n	8005c22 <_dtoa_r+0x102>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e7b6      	b.n	8005ca8 <_dtoa_r+0x188>
 8005d3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005d3c:	e7b5      	b.n	8005caa <_dtoa_r+0x18a>
 8005d3e:	427b      	negs	r3, r7
 8005d40:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d42:	2300      	movs	r3, #0
 8005d44:	eba8 0807 	sub.w	r8, r8, r7
 8005d48:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d4a:	e7c2      	b.n	8005cd2 <_dtoa_r+0x1b2>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	dc35      	bgt.n	8005dc2 <_dtoa_r+0x2a2>
 8005d56:	2301      	movs	r3, #1
 8005d58:	461a      	mov	r2, r3
 8005d5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005d5e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005d60:	e00b      	b.n	8005d7a <_dtoa_r+0x25a>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e7f3      	b.n	8005d4e <_dtoa_r+0x22e>
 8005d66:	2300      	movs	r3, #0
 8005d68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	9308      	str	r3, [sp, #32]
 8005d70:	3301      	adds	r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	9307      	str	r3, [sp, #28]
 8005d76:	bfb8      	it	lt
 8005d78:	2301      	movlt	r3, #1
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005d82:	f102 0514 	add.w	r5, r2, #20
 8005d86:	429d      	cmp	r5, r3
 8005d88:	d91f      	bls.n	8005dca <_dtoa_r+0x2aa>
 8005d8a:	6041      	str	r1, [r0, #4]
 8005d8c:	4658      	mov	r0, fp
 8005d8e:	f000 fd8d 	bl	80068ac <_Balloc>
 8005d92:	4682      	mov	sl, r0
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d139      	bne.n	8005e0c <_dtoa_r+0x2ec>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005e08 <_dtoa_r+0x2e8>)
 8005da0:	e6d2      	b.n	8005b48 <_dtoa_r+0x28>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e7e0      	b.n	8005d68 <_dtoa_r+0x248>
 8005da6:	2401      	movs	r4, #1
 8005da8:	2300      	movs	r3, #0
 8005daa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005dac:	9320      	str	r3, [sp, #128]	@ 0x80
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295
 8005db2:	2200      	movs	r2, #0
 8005db4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005db8:	2312      	movs	r3, #18
 8005dba:	e7d0      	b.n	8005d5e <_dtoa_r+0x23e>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dc0:	e7f5      	b.n	8005dae <_dtoa_r+0x28e>
 8005dc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005dc8:	e7d7      	b.n	8005d7a <_dtoa_r+0x25a>
 8005dca:	3101      	adds	r1, #1
 8005dcc:	0052      	lsls	r2, r2, #1
 8005dce:	e7d8      	b.n	8005d82 <_dtoa_r+0x262>
 8005dd0:	636f4361 	.word	0x636f4361
 8005dd4:	3fd287a7 	.word	0x3fd287a7
 8005dd8:	8b60c8b3 	.word	0x8b60c8b3
 8005ddc:	3fc68a28 	.word	0x3fc68a28
 8005de0:	509f79fb 	.word	0x509f79fb
 8005de4:	3fd34413 	.word	0x3fd34413
 8005de8:	08007b0f 	.word	0x08007b0f
 8005dec:	08007b26 	.word	0x08007b26
 8005df0:	7ff00000 	.word	0x7ff00000
 8005df4:	08007b0b 	.word	0x08007b0b
 8005df8:	08007adf 	.word	0x08007adf
 8005dfc:	08007ade 	.word	0x08007ade
 8005e00:	3ff80000 	.word	0x3ff80000
 8005e04:	08007c20 	.word	0x08007c20
 8005e08:	08007b7e 	.word	0x08007b7e
 8005e0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e10:	6018      	str	r0, [r3, #0]
 8005e12:	9b07      	ldr	r3, [sp, #28]
 8005e14:	2b0e      	cmp	r3, #14
 8005e16:	f200 80a4 	bhi.w	8005f62 <_dtoa_r+0x442>
 8005e1a:	2c00      	cmp	r4, #0
 8005e1c:	f000 80a1 	beq.w	8005f62 <_dtoa_r+0x442>
 8005e20:	2f00      	cmp	r7, #0
 8005e22:	dd33      	ble.n	8005e8c <_dtoa_r+0x36c>
 8005e24:	4b86      	ldr	r3, [pc, #536]	@ (8006040 <_dtoa_r+0x520>)
 8005e26:	f007 020f 	and.w	r2, r7, #15
 8005e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e2e:	05f8      	lsls	r0, r7, #23
 8005e30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005e3c:	d516      	bpl.n	8005e6c <_dtoa_r+0x34c>
 8005e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e42:	4b80      	ldr	r3, [pc, #512]	@ (8006044 <_dtoa_r+0x524>)
 8005e44:	2603      	movs	r6, #3
 8005e46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e4a:	f7fa fc6f 	bl	800072c <__aeabi_ddiv>
 8005e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e52:	f004 040f 	and.w	r4, r4, #15
 8005e56:	4d7b      	ldr	r5, [pc, #492]	@ (8006044 <_dtoa_r+0x524>)
 8005e58:	b954      	cbnz	r4, 8005e70 <_dtoa_r+0x350>
 8005e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e62:	f7fa fc63 	bl	800072c <__aeabi_ddiv>
 8005e66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e6a:	e028      	b.n	8005ebe <_dtoa_r+0x39e>
 8005e6c:	2602      	movs	r6, #2
 8005e6e:	e7f2      	b.n	8005e56 <_dtoa_r+0x336>
 8005e70:	07e1      	lsls	r1, r4, #31
 8005e72:	d508      	bpl.n	8005e86 <_dtoa_r+0x366>
 8005e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e7c:	f7fa fb2c 	bl	80004d8 <__aeabi_dmul>
 8005e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e84:	3601      	adds	r6, #1
 8005e86:	1064      	asrs	r4, r4, #1
 8005e88:	3508      	adds	r5, #8
 8005e8a:	e7e5      	b.n	8005e58 <_dtoa_r+0x338>
 8005e8c:	f000 80d2 	beq.w	8006034 <_dtoa_r+0x514>
 8005e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e94:	427c      	negs	r4, r7
 8005e96:	4b6a      	ldr	r3, [pc, #424]	@ (8006040 <_dtoa_r+0x520>)
 8005e98:	f004 020f 	and.w	r2, r4, #15
 8005e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f7fa fb18 	bl	80004d8 <__aeabi_dmul>
 8005ea8:	2602      	movs	r6, #2
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eb0:	4d64      	ldr	r5, [pc, #400]	@ (8006044 <_dtoa_r+0x524>)
 8005eb2:	1124      	asrs	r4, r4, #4
 8005eb4:	2c00      	cmp	r4, #0
 8005eb6:	f040 80b2 	bne.w	800601e <_dtoa_r+0x4fe>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1d3      	bne.n	8005e66 <_dtoa_r+0x346>
 8005ebe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ec2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80b7 	beq.w	8006038 <_dtoa_r+0x518>
 8005eca:	2200      	movs	r2, #0
 8005ecc:	4620      	mov	r0, r4
 8005ece:	4629      	mov	r1, r5
 8005ed0:	4b5d      	ldr	r3, [pc, #372]	@ (8006048 <_dtoa_r+0x528>)
 8005ed2:	f7fa fd73 	bl	80009bc <__aeabi_dcmplt>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	f000 80ae 	beq.w	8006038 <_dtoa_r+0x518>
 8005edc:	9b07      	ldr	r3, [sp, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80aa 	beq.w	8006038 <_dtoa_r+0x518>
 8005ee4:	9b08      	ldr	r3, [sp, #32]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	dd37      	ble.n	8005f5a <_dtoa_r+0x43a>
 8005eea:	1e7b      	subs	r3, r7, #1
 8005eec:	4620      	mov	r0, r4
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	4b55      	ldr	r3, [pc, #340]	@ (800604c <_dtoa_r+0x52c>)
 8005ef6:	f7fa faef 	bl	80004d8 <__aeabi_dmul>
 8005efa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005efe:	9c08      	ldr	r4, [sp, #32]
 8005f00:	3601      	adds	r6, #1
 8005f02:	4630      	mov	r0, r6
 8005f04:	f7fa fa7e 	bl	8000404 <__aeabi_i2d>
 8005f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f0c:	f7fa fae4 	bl	80004d8 <__aeabi_dmul>
 8005f10:	2200      	movs	r2, #0
 8005f12:	4b4f      	ldr	r3, [pc, #316]	@ (8006050 <_dtoa_r+0x530>)
 8005f14:	f7fa f92a 	bl	800016c <__adddf3>
 8005f18:	4605      	mov	r5, r0
 8005f1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005f1e:	2c00      	cmp	r4, #0
 8005f20:	f040 809a 	bne.w	8006058 <_dtoa_r+0x538>
 8005f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8006054 <_dtoa_r+0x534>)
 8005f2c:	f7fa f91c 	bl	8000168 <__aeabi_dsub>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f38:	462a      	mov	r2, r5
 8005f3a:	4633      	mov	r3, r6
 8005f3c:	f7fa fd5c 	bl	80009f8 <__aeabi_dcmpgt>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f040 828e 	bne.w	8006462 <_dtoa_r+0x942>
 8005f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f4a:	462a      	mov	r2, r5
 8005f4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f50:	f7fa fd34 	bl	80009bc <__aeabi_dcmplt>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	f040 8127 	bne.w	80061a8 <_dtoa_r+0x688>
 8005f5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005f5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005f62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f2c0 8163 	blt.w	8006230 <_dtoa_r+0x710>
 8005f6a:	2f0e      	cmp	r7, #14
 8005f6c:	f300 8160 	bgt.w	8006230 <_dtoa_r+0x710>
 8005f70:	4b33      	ldr	r3, [pc, #204]	@ (8006040 <_dtoa_r+0x520>)
 8005f72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da03      	bge.n	8005f8c <_dtoa_r+0x46c>
 8005f84:	9b07      	ldr	r3, [sp, #28]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f340 8100 	ble.w	800618c <_dtoa_r+0x66c>
 8005f8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f90:	4656      	mov	r6, sl
 8005f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f96:	4620      	mov	r0, r4
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f7fa fbc7 	bl	800072c <__aeabi_ddiv>
 8005f9e:	f7fa fd4b 	bl	8000a38 <__aeabi_d2iz>
 8005fa2:	4680      	mov	r8, r0
 8005fa4:	f7fa fa2e 	bl	8000404 <__aeabi_i2d>
 8005fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fac:	f7fa fa94 	bl	80004d8 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f7fa f8d6 	bl	8000168 <__aeabi_dsub>
 8005fbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005fc0:	9d07      	ldr	r5, [sp, #28]
 8005fc2:	f806 4b01 	strb.w	r4, [r6], #1
 8005fc6:	eba6 040a 	sub.w	r4, r6, sl
 8005fca:	42a5      	cmp	r5, r4
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	f040 8116 	bne.w	8006200 <_dtoa_r+0x6e0>
 8005fd4:	f7fa f8ca 	bl	800016c <__adddf3>
 8005fd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fdc:	4604      	mov	r4, r0
 8005fde:	460d      	mov	r5, r1
 8005fe0:	f7fa fd0a 	bl	80009f8 <__aeabi_dcmpgt>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	f040 80f8 	bne.w	80061da <_dtoa_r+0x6ba>
 8005fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	f7fa fcd9 	bl	80009a8 <__aeabi_dcmpeq>
 8005ff6:	b118      	cbz	r0, 8006000 <_dtoa_r+0x4e0>
 8005ff8:	f018 0f01 	tst.w	r8, #1
 8005ffc:	f040 80ed 	bne.w	80061da <_dtoa_r+0x6ba>
 8006000:	4649      	mov	r1, r9
 8006002:	4658      	mov	r0, fp
 8006004:	f000 fc92 	bl	800692c <_Bfree>
 8006008:	2300      	movs	r3, #0
 800600a:	7033      	strb	r3, [r6, #0]
 800600c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800600e:	3701      	adds	r7, #1
 8006010:	601f      	str	r7, [r3, #0]
 8006012:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8320 	beq.w	800665a <_dtoa_r+0xb3a>
 800601a:	601e      	str	r6, [r3, #0]
 800601c:	e31d      	b.n	800665a <_dtoa_r+0xb3a>
 800601e:	07e2      	lsls	r2, r4, #31
 8006020:	d505      	bpl.n	800602e <_dtoa_r+0x50e>
 8006022:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006026:	f7fa fa57 	bl	80004d8 <__aeabi_dmul>
 800602a:	2301      	movs	r3, #1
 800602c:	3601      	adds	r6, #1
 800602e:	1064      	asrs	r4, r4, #1
 8006030:	3508      	adds	r5, #8
 8006032:	e73f      	b.n	8005eb4 <_dtoa_r+0x394>
 8006034:	2602      	movs	r6, #2
 8006036:	e742      	b.n	8005ebe <_dtoa_r+0x39e>
 8006038:	9c07      	ldr	r4, [sp, #28]
 800603a:	9704      	str	r7, [sp, #16]
 800603c:	e761      	b.n	8005f02 <_dtoa_r+0x3e2>
 800603e:	bf00      	nop
 8006040:	08007c20 	.word	0x08007c20
 8006044:	08007bf8 	.word	0x08007bf8
 8006048:	3ff00000 	.word	0x3ff00000
 800604c:	40240000 	.word	0x40240000
 8006050:	401c0000 	.word	0x401c0000
 8006054:	40140000 	.word	0x40140000
 8006058:	4b70      	ldr	r3, [pc, #448]	@ (800621c <_dtoa_r+0x6fc>)
 800605a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800605c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006064:	4454      	add	r4, sl
 8006066:	2900      	cmp	r1, #0
 8006068:	d045      	beq.n	80060f6 <_dtoa_r+0x5d6>
 800606a:	2000      	movs	r0, #0
 800606c:	496c      	ldr	r1, [pc, #432]	@ (8006220 <_dtoa_r+0x700>)
 800606e:	f7fa fb5d 	bl	800072c <__aeabi_ddiv>
 8006072:	4633      	mov	r3, r6
 8006074:	462a      	mov	r2, r5
 8006076:	f7fa f877 	bl	8000168 <__aeabi_dsub>
 800607a:	4656      	mov	r6, sl
 800607c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006084:	f7fa fcd8 	bl	8000a38 <__aeabi_d2iz>
 8006088:	4605      	mov	r5, r0
 800608a:	f7fa f9bb 	bl	8000404 <__aeabi_i2d>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006096:	f7fa f867 	bl	8000168 <__aeabi_dsub>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	3530      	adds	r5, #48	@ 0x30
 80060a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060a8:	f806 5b01 	strb.w	r5, [r6], #1
 80060ac:	f7fa fc86 	bl	80009bc <__aeabi_dcmplt>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d163      	bne.n	800617c <_dtoa_r+0x65c>
 80060b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060b8:	2000      	movs	r0, #0
 80060ba:	495a      	ldr	r1, [pc, #360]	@ (8006224 <_dtoa_r+0x704>)
 80060bc:	f7fa f854 	bl	8000168 <__aeabi_dsub>
 80060c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060c4:	f7fa fc7a 	bl	80009bc <__aeabi_dcmplt>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f040 8087 	bne.w	80061dc <_dtoa_r+0x6bc>
 80060ce:	42a6      	cmp	r6, r4
 80060d0:	f43f af43 	beq.w	8005f5a <_dtoa_r+0x43a>
 80060d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80060d8:	2200      	movs	r2, #0
 80060da:	4b53      	ldr	r3, [pc, #332]	@ (8006228 <_dtoa_r+0x708>)
 80060dc:	f7fa f9fc 	bl	80004d8 <__aeabi_dmul>
 80060e0:	2200      	movs	r2, #0
 80060e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ea:	4b4f      	ldr	r3, [pc, #316]	@ (8006228 <_dtoa_r+0x708>)
 80060ec:	f7fa f9f4 	bl	80004d8 <__aeabi_dmul>
 80060f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060f4:	e7c4      	b.n	8006080 <_dtoa_r+0x560>
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	f7fa f9ed 	bl	80004d8 <__aeabi_dmul>
 80060fe:	4656      	mov	r6, sl
 8006100:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006104:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800610a:	f7fa fc95 	bl	8000a38 <__aeabi_d2iz>
 800610e:	4605      	mov	r5, r0
 8006110:	f7fa f978 	bl	8000404 <__aeabi_i2d>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800611c:	f7fa f824 	bl	8000168 <__aeabi_dsub>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	3530      	adds	r5, #48	@ 0x30
 8006126:	f806 5b01 	strb.w	r5, [r6], #1
 800612a:	42a6      	cmp	r6, r4
 800612c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	d124      	bne.n	8006180 <_dtoa_r+0x660>
 8006136:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800613a:	4b39      	ldr	r3, [pc, #228]	@ (8006220 <_dtoa_r+0x700>)
 800613c:	f7fa f816 	bl	800016c <__adddf3>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006148:	f7fa fc56 	bl	80009f8 <__aeabi_dcmpgt>
 800614c:	2800      	cmp	r0, #0
 800614e:	d145      	bne.n	80061dc <_dtoa_r+0x6bc>
 8006150:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006154:	2000      	movs	r0, #0
 8006156:	4932      	ldr	r1, [pc, #200]	@ (8006220 <_dtoa_r+0x700>)
 8006158:	f7fa f806 	bl	8000168 <__aeabi_dsub>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006164:	f7fa fc2a 	bl	80009bc <__aeabi_dcmplt>
 8006168:	2800      	cmp	r0, #0
 800616a:	f43f aef6 	beq.w	8005f5a <_dtoa_r+0x43a>
 800616e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006170:	1e73      	subs	r3, r6, #1
 8006172:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006174:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006178:	2b30      	cmp	r3, #48	@ 0x30
 800617a:	d0f8      	beq.n	800616e <_dtoa_r+0x64e>
 800617c:	9f04      	ldr	r7, [sp, #16]
 800617e:	e73f      	b.n	8006000 <_dtoa_r+0x4e0>
 8006180:	4b29      	ldr	r3, [pc, #164]	@ (8006228 <_dtoa_r+0x708>)
 8006182:	f7fa f9a9 	bl	80004d8 <__aeabi_dmul>
 8006186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800618a:	e7bc      	b.n	8006106 <_dtoa_r+0x5e6>
 800618c:	d10c      	bne.n	80061a8 <_dtoa_r+0x688>
 800618e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006192:	2200      	movs	r2, #0
 8006194:	4b25      	ldr	r3, [pc, #148]	@ (800622c <_dtoa_r+0x70c>)
 8006196:	f7fa f99f 	bl	80004d8 <__aeabi_dmul>
 800619a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800619e:	f7fa fc21 	bl	80009e4 <__aeabi_dcmpge>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	f000 815b 	beq.w	800645e <_dtoa_r+0x93e>
 80061a8:	2400      	movs	r4, #0
 80061aa:	4625      	mov	r5, r4
 80061ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061ae:	4656      	mov	r6, sl
 80061b0:	43db      	mvns	r3, r3
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	2700      	movs	r7, #0
 80061b6:	4621      	mov	r1, r4
 80061b8:	4658      	mov	r0, fp
 80061ba:	f000 fbb7 	bl	800692c <_Bfree>
 80061be:	2d00      	cmp	r5, #0
 80061c0:	d0dc      	beq.n	800617c <_dtoa_r+0x65c>
 80061c2:	b12f      	cbz	r7, 80061d0 <_dtoa_r+0x6b0>
 80061c4:	42af      	cmp	r7, r5
 80061c6:	d003      	beq.n	80061d0 <_dtoa_r+0x6b0>
 80061c8:	4639      	mov	r1, r7
 80061ca:	4658      	mov	r0, fp
 80061cc:	f000 fbae 	bl	800692c <_Bfree>
 80061d0:	4629      	mov	r1, r5
 80061d2:	4658      	mov	r0, fp
 80061d4:	f000 fbaa 	bl	800692c <_Bfree>
 80061d8:	e7d0      	b.n	800617c <_dtoa_r+0x65c>
 80061da:	9704      	str	r7, [sp, #16]
 80061dc:	4633      	mov	r3, r6
 80061de:	461e      	mov	r6, r3
 80061e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061e4:	2a39      	cmp	r2, #57	@ 0x39
 80061e6:	d107      	bne.n	80061f8 <_dtoa_r+0x6d8>
 80061e8:	459a      	cmp	sl, r3
 80061ea:	d1f8      	bne.n	80061de <_dtoa_r+0x6be>
 80061ec:	9a04      	ldr	r2, [sp, #16]
 80061ee:	3201      	adds	r2, #1
 80061f0:	9204      	str	r2, [sp, #16]
 80061f2:	2230      	movs	r2, #48	@ 0x30
 80061f4:	f88a 2000 	strb.w	r2, [sl]
 80061f8:	781a      	ldrb	r2, [r3, #0]
 80061fa:	3201      	adds	r2, #1
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e7bd      	b.n	800617c <_dtoa_r+0x65c>
 8006200:	2200      	movs	r2, #0
 8006202:	4b09      	ldr	r3, [pc, #36]	@ (8006228 <_dtoa_r+0x708>)
 8006204:	f7fa f968 	bl	80004d8 <__aeabi_dmul>
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	4604      	mov	r4, r0
 800620e:	460d      	mov	r5, r1
 8006210:	f7fa fbca 	bl	80009a8 <__aeabi_dcmpeq>
 8006214:	2800      	cmp	r0, #0
 8006216:	f43f aebc 	beq.w	8005f92 <_dtoa_r+0x472>
 800621a:	e6f1      	b.n	8006000 <_dtoa_r+0x4e0>
 800621c:	08007c20 	.word	0x08007c20
 8006220:	3fe00000 	.word	0x3fe00000
 8006224:	3ff00000 	.word	0x3ff00000
 8006228:	40240000 	.word	0x40240000
 800622c:	40140000 	.word	0x40140000
 8006230:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006232:	2a00      	cmp	r2, #0
 8006234:	f000 80db 	beq.w	80063ee <_dtoa_r+0x8ce>
 8006238:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800623a:	2a01      	cmp	r2, #1
 800623c:	f300 80bf 	bgt.w	80063be <_dtoa_r+0x89e>
 8006240:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006242:	2a00      	cmp	r2, #0
 8006244:	f000 80b7 	beq.w	80063b6 <_dtoa_r+0x896>
 8006248:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800624c:	4646      	mov	r6, r8
 800624e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006252:	2101      	movs	r1, #1
 8006254:	441a      	add	r2, r3
 8006256:	4658      	mov	r0, fp
 8006258:	4498      	add	r8, r3
 800625a:	9209      	str	r2, [sp, #36]	@ 0x24
 800625c:	f000 fc1a 	bl	8006a94 <__i2b>
 8006260:	4605      	mov	r5, r0
 8006262:	b15e      	cbz	r6, 800627c <_dtoa_r+0x75c>
 8006264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	dd08      	ble.n	800627c <_dtoa_r+0x75c>
 800626a:	42b3      	cmp	r3, r6
 800626c:	bfa8      	it	ge
 800626e:	4633      	movge	r3, r6
 8006270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006272:	eba8 0803 	sub.w	r8, r8, r3
 8006276:	1af6      	subs	r6, r6, r3
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	9309      	str	r3, [sp, #36]	@ 0x24
 800627c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800627e:	b1f3      	cbz	r3, 80062be <_dtoa_r+0x79e>
 8006280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80b7 	beq.w	80063f6 <_dtoa_r+0x8d6>
 8006288:	b18c      	cbz	r4, 80062ae <_dtoa_r+0x78e>
 800628a:	4629      	mov	r1, r5
 800628c:	4622      	mov	r2, r4
 800628e:	4658      	mov	r0, fp
 8006290:	f000 fcbe 	bl	8006c10 <__pow5mult>
 8006294:	464a      	mov	r2, r9
 8006296:	4601      	mov	r1, r0
 8006298:	4605      	mov	r5, r0
 800629a:	4658      	mov	r0, fp
 800629c:	f000 fc10 	bl	8006ac0 <__multiply>
 80062a0:	4649      	mov	r1, r9
 80062a2:	9004      	str	r0, [sp, #16]
 80062a4:	4658      	mov	r0, fp
 80062a6:	f000 fb41 	bl	800692c <_Bfree>
 80062aa:	9b04      	ldr	r3, [sp, #16]
 80062ac:	4699      	mov	r9, r3
 80062ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062b0:	1b1a      	subs	r2, r3, r4
 80062b2:	d004      	beq.n	80062be <_dtoa_r+0x79e>
 80062b4:	4649      	mov	r1, r9
 80062b6:	4658      	mov	r0, fp
 80062b8:	f000 fcaa 	bl	8006c10 <__pow5mult>
 80062bc:	4681      	mov	r9, r0
 80062be:	2101      	movs	r1, #1
 80062c0:	4658      	mov	r0, fp
 80062c2:	f000 fbe7 	bl	8006a94 <__i2b>
 80062c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062c8:	4604      	mov	r4, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 81c9 	beq.w	8006662 <_dtoa_r+0xb42>
 80062d0:	461a      	mov	r2, r3
 80062d2:	4601      	mov	r1, r0
 80062d4:	4658      	mov	r0, fp
 80062d6:	f000 fc9b 	bl	8006c10 <__pow5mult>
 80062da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062dc:	4604      	mov	r4, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	f300 808f 	bgt.w	8006402 <_dtoa_r+0x8e2>
 80062e4:	9b02      	ldr	r3, [sp, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f040 8087 	bne.w	80063fa <_dtoa_r+0x8da>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 8083 	bne.w	80063fe <_dtoa_r+0x8de>
 80062f8:	9b03      	ldr	r3, [sp, #12]
 80062fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062fe:	0d1b      	lsrs	r3, r3, #20
 8006300:	051b      	lsls	r3, r3, #20
 8006302:	b12b      	cbz	r3, 8006310 <_dtoa_r+0x7f0>
 8006304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006306:	f108 0801 	add.w	r8, r8, #1
 800630a:	3301      	adds	r3, #1
 800630c:	9309      	str	r3, [sp, #36]	@ 0x24
 800630e:	2301      	movs	r3, #1
 8006310:	930a      	str	r3, [sp, #40]	@ 0x28
 8006312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 81aa 	beq.w	800666e <_dtoa_r+0xb4e>
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006320:	6918      	ldr	r0, [r3, #16]
 8006322:	f000 fb6b 	bl	80069fc <__hi0bits>
 8006326:	f1c0 0020 	rsb	r0, r0, #32
 800632a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632c:	4418      	add	r0, r3
 800632e:	f010 001f 	ands.w	r0, r0, #31
 8006332:	d071      	beq.n	8006418 <_dtoa_r+0x8f8>
 8006334:	f1c0 0320 	rsb	r3, r0, #32
 8006338:	2b04      	cmp	r3, #4
 800633a:	dd65      	ble.n	8006408 <_dtoa_r+0x8e8>
 800633c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800633e:	f1c0 001c 	rsb	r0, r0, #28
 8006342:	4403      	add	r3, r0
 8006344:	4480      	add	r8, r0
 8006346:	4406      	add	r6, r0
 8006348:	9309      	str	r3, [sp, #36]	@ 0x24
 800634a:	f1b8 0f00 	cmp.w	r8, #0
 800634e:	dd05      	ble.n	800635c <_dtoa_r+0x83c>
 8006350:	4649      	mov	r1, r9
 8006352:	4642      	mov	r2, r8
 8006354:	4658      	mov	r0, fp
 8006356:	f000 fcb5 	bl	8006cc4 <__lshift>
 800635a:	4681      	mov	r9, r0
 800635c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	dd05      	ble.n	800636e <_dtoa_r+0x84e>
 8006362:	4621      	mov	r1, r4
 8006364:	461a      	mov	r2, r3
 8006366:	4658      	mov	r0, fp
 8006368:	f000 fcac 	bl	8006cc4 <__lshift>
 800636c:	4604      	mov	r4, r0
 800636e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d053      	beq.n	800641c <_dtoa_r+0x8fc>
 8006374:	4621      	mov	r1, r4
 8006376:	4648      	mov	r0, r9
 8006378:	f000 fd10 	bl	8006d9c <__mcmp>
 800637c:	2800      	cmp	r0, #0
 800637e:	da4d      	bge.n	800641c <_dtoa_r+0x8fc>
 8006380:	1e7b      	subs	r3, r7, #1
 8006382:	4649      	mov	r1, r9
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	220a      	movs	r2, #10
 8006388:	2300      	movs	r3, #0
 800638a:	4658      	mov	r0, fp
 800638c:	f000 faf0 	bl	8006970 <__multadd>
 8006390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006392:	4681      	mov	r9, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 816c 	beq.w	8006672 <_dtoa_r+0xb52>
 800639a:	2300      	movs	r3, #0
 800639c:	4629      	mov	r1, r5
 800639e:	220a      	movs	r2, #10
 80063a0:	4658      	mov	r0, fp
 80063a2:	f000 fae5 	bl	8006970 <__multadd>
 80063a6:	9b08      	ldr	r3, [sp, #32]
 80063a8:	4605      	mov	r5, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dc61      	bgt.n	8006472 <_dtoa_r+0x952>
 80063ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	dc3b      	bgt.n	800642c <_dtoa_r+0x90c>
 80063b4:	e05d      	b.n	8006472 <_dtoa_r+0x952>
 80063b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80063b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80063bc:	e746      	b.n	800624c <_dtoa_r+0x72c>
 80063be:	9b07      	ldr	r3, [sp, #28]
 80063c0:	1e5c      	subs	r4, r3, #1
 80063c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	bfbf      	itttt	lt
 80063c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80063ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80063cc:	1ae3      	sublt	r3, r4, r3
 80063ce:	18d2      	addlt	r2, r2, r3
 80063d0:	bfa8      	it	ge
 80063d2:	1b1c      	subge	r4, r3, r4
 80063d4:	9b07      	ldr	r3, [sp, #28]
 80063d6:	bfbe      	ittt	lt
 80063d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80063da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80063dc:	2400      	movlt	r4, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bfb5      	itete	lt
 80063e2:	eba8 0603 	sublt.w	r6, r8, r3
 80063e6:	4646      	movge	r6, r8
 80063e8:	2300      	movlt	r3, #0
 80063ea:	9b07      	ldrge	r3, [sp, #28]
 80063ec:	e730      	b.n	8006250 <_dtoa_r+0x730>
 80063ee:	4646      	mov	r6, r8
 80063f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80063f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80063f4:	e735      	b.n	8006262 <_dtoa_r+0x742>
 80063f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063f8:	e75c      	b.n	80062b4 <_dtoa_r+0x794>
 80063fa:	2300      	movs	r3, #0
 80063fc:	e788      	b.n	8006310 <_dtoa_r+0x7f0>
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	e786      	b.n	8006310 <_dtoa_r+0x7f0>
 8006402:	2300      	movs	r3, #0
 8006404:	930a      	str	r3, [sp, #40]	@ 0x28
 8006406:	e788      	b.n	800631a <_dtoa_r+0x7fa>
 8006408:	d09f      	beq.n	800634a <_dtoa_r+0x82a>
 800640a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800640c:	331c      	adds	r3, #28
 800640e:	441a      	add	r2, r3
 8006410:	4498      	add	r8, r3
 8006412:	441e      	add	r6, r3
 8006414:	9209      	str	r2, [sp, #36]	@ 0x24
 8006416:	e798      	b.n	800634a <_dtoa_r+0x82a>
 8006418:	4603      	mov	r3, r0
 800641a:	e7f6      	b.n	800640a <_dtoa_r+0x8ea>
 800641c:	9b07      	ldr	r3, [sp, #28]
 800641e:	9704      	str	r7, [sp, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	dc20      	bgt.n	8006466 <_dtoa_r+0x946>
 8006424:	9308      	str	r3, [sp, #32]
 8006426:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006428:	2b02      	cmp	r3, #2
 800642a:	dd1e      	ble.n	800646a <_dtoa_r+0x94a>
 800642c:	9b08      	ldr	r3, [sp, #32]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f47f aebc 	bne.w	80061ac <_dtoa_r+0x68c>
 8006434:	4621      	mov	r1, r4
 8006436:	2205      	movs	r2, #5
 8006438:	4658      	mov	r0, fp
 800643a:	f000 fa99 	bl	8006970 <__multadd>
 800643e:	4601      	mov	r1, r0
 8006440:	4604      	mov	r4, r0
 8006442:	4648      	mov	r0, r9
 8006444:	f000 fcaa 	bl	8006d9c <__mcmp>
 8006448:	2800      	cmp	r0, #0
 800644a:	f77f aeaf 	ble.w	80061ac <_dtoa_r+0x68c>
 800644e:	2331      	movs	r3, #49	@ 0x31
 8006450:	4656      	mov	r6, sl
 8006452:	f806 3b01 	strb.w	r3, [r6], #1
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	3301      	adds	r3, #1
 800645a:	9304      	str	r3, [sp, #16]
 800645c:	e6aa      	b.n	80061b4 <_dtoa_r+0x694>
 800645e:	9c07      	ldr	r4, [sp, #28]
 8006460:	9704      	str	r7, [sp, #16]
 8006462:	4625      	mov	r5, r4
 8006464:	e7f3      	b.n	800644e <_dtoa_r+0x92e>
 8006466:	9b07      	ldr	r3, [sp, #28]
 8006468:	9308      	str	r3, [sp, #32]
 800646a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8104 	beq.w	800667a <_dtoa_r+0xb5a>
 8006472:	2e00      	cmp	r6, #0
 8006474:	dd05      	ble.n	8006482 <_dtoa_r+0x962>
 8006476:	4629      	mov	r1, r5
 8006478:	4632      	mov	r2, r6
 800647a:	4658      	mov	r0, fp
 800647c:	f000 fc22 	bl	8006cc4 <__lshift>
 8006480:	4605      	mov	r5, r0
 8006482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05a      	beq.n	800653e <_dtoa_r+0xa1e>
 8006488:	4658      	mov	r0, fp
 800648a:	6869      	ldr	r1, [r5, #4]
 800648c:	f000 fa0e 	bl	80068ac <_Balloc>
 8006490:	4606      	mov	r6, r0
 8006492:	b928      	cbnz	r0, 80064a0 <_dtoa_r+0x980>
 8006494:	4602      	mov	r2, r0
 8006496:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800649a:	4b83      	ldr	r3, [pc, #524]	@ (80066a8 <_dtoa_r+0xb88>)
 800649c:	f7ff bb54 	b.w	8005b48 <_dtoa_r+0x28>
 80064a0:	692a      	ldr	r2, [r5, #16]
 80064a2:	f105 010c 	add.w	r1, r5, #12
 80064a6:	3202      	adds	r2, #2
 80064a8:	0092      	lsls	r2, r2, #2
 80064aa:	300c      	adds	r0, #12
 80064ac:	f7ff faa1 	bl	80059f2 <memcpy>
 80064b0:	2201      	movs	r2, #1
 80064b2:	4631      	mov	r1, r6
 80064b4:	4658      	mov	r0, fp
 80064b6:	f000 fc05 	bl	8006cc4 <__lshift>
 80064ba:	462f      	mov	r7, r5
 80064bc:	4605      	mov	r5, r0
 80064be:	f10a 0301 	add.w	r3, sl, #1
 80064c2:	9307      	str	r3, [sp, #28]
 80064c4:	9b08      	ldr	r3, [sp, #32]
 80064c6:	4453      	add	r3, sl
 80064c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064ca:	9b02      	ldr	r3, [sp, #8]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80064d2:	9b07      	ldr	r3, [sp, #28]
 80064d4:	4621      	mov	r1, r4
 80064d6:	3b01      	subs	r3, #1
 80064d8:	4648      	mov	r0, r9
 80064da:	9302      	str	r3, [sp, #8]
 80064dc:	f7ff fa97 	bl	8005a0e <quorem>
 80064e0:	4639      	mov	r1, r7
 80064e2:	9008      	str	r0, [sp, #32]
 80064e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80064e8:	4648      	mov	r0, r9
 80064ea:	f000 fc57 	bl	8006d9c <__mcmp>
 80064ee:	462a      	mov	r2, r5
 80064f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80064f2:	4621      	mov	r1, r4
 80064f4:	4658      	mov	r0, fp
 80064f6:	f000 fc6d 	bl	8006dd4 <__mdiff>
 80064fa:	68c2      	ldr	r2, [r0, #12]
 80064fc:	4606      	mov	r6, r0
 80064fe:	bb02      	cbnz	r2, 8006542 <_dtoa_r+0xa22>
 8006500:	4601      	mov	r1, r0
 8006502:	4648      	mov	r0, r9
 8006504:	f000 fc4a 	bl	8006d9c <__mcmp>
 8006508:	4602      	mov	r2, r0
 800650a:	4631      	mov	r1, r6
 800650c:	4658      	mov	r0, fp
 800650e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006510:	f000 fa0c 	bl	800692c <_Bfree>
 8006514:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006516:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006518:	9e07      	ldr	r6, [sp, #28]
 800651a:	ea43 0102 	orr.w	r1, r3, r2
 800651e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006520:	4319      	orrs	r1, r3
 8006522:	d110      	bne.n	8006546 <_dtoa_r+0xa26>
 8006524:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006528:	d029      	beq.n	800657e <_dtoa_r+0xa5e>
 800652a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800652c:	2b00      	cmp	r3, #0
 800652e:	dd02      	ble.n	8006536 <_dtoa_r+0xa16>
 8006530:	9b08      	ldr	r3, [sp, #32]
 8006532:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006536:	9b02      	ldr	r3, [sp, #8]
 8006538:	f883 8000 	strb.w	r8, [r3]
 800653c:	e63b      	b.n	80061b6 <_dtoa_r+0x696>
 800653e:	4628      	mov	r0, r5
 8006540:	e7bb      	b.n	80064ba <_dtoa_r+0x99a>
 8006542:	2201      	movs	r2, #1
 8006544:	e7e1      	b.n	800650a <_dtoa_r+0x9ea>
 8006546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	db04      	blt.n	8006556 <_dtoa_r+0xa36>
 800654c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800654e:	430b      	orrs	r3, r1
 8006550:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006552:	430b      	orrs	r3, r1
 8006554:	d120      	bne.n	8006598 <_dtoa_r+0xa78>
 8006556:	2a00      	cmp	r2, #0
 8006558:	dded      	ble.n	8006536 <_dtoa_r+0xa16>
 800655a:	4649      	mov	r1, r9
 800655c:	2201      	movs	r2, #1
 800655e:	4658      	mov	r0, fp
 8006560:	f000 fbb0 	bl	8006cc4 <__lshift>
 8006564:	4621      	mov	r1, r4
 8006566:	4681      	mov	r9, r0
 8006568:	f000 fc18 	bl	8006d9c <__mcmp>
 800656c:	2800      	cmp	r0, #0
 800656e:	dc03      	bgt.n	8006578 <_dtoa_r+0xa58>
 8006570:	d1e1      	bne.n	8006536 <_dtoa_r+0xa16>
 8006572:	f018 0f01 	tst.w	r8, #1
 8006576:	d0de      	beq.n	8006536 <_dtoa_r+0xa16>
 8006578:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800657c:	d1d8      	bne.n	8006530 <_dtoa_r+0xa10>
 800657e:	2339      	movs	r3, #57	@ 0x39
 8006580:	9a02      	ldr	r2, [sp, #8]
 8006582:	7013      	strb	r3, [r2, #0]
 8006584:	4633      	mov	r3, r6
 8006586:	461e      	mov	r6, r3
 8006588:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800658c:	3b01      	subs	r3, #1
 800658e:	2a39      	cmp	r2, #57	@ 0x39
 8006590:	d052      	beq.n	8006638 <_dtoa_r+0xb18>
 8006592:	3201      	adds	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e60e      	b.n	80061b6 <_dtoa_r+0x696>
 8006598:	2a00      	cmp	r2, #0
 800659a:	dd07      	ble.n	80065ac <_dtoa_r+0xa8c>
 800659c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065a0:	d0ed      	beq.n	800657e <_dtoa_r+0xa5e>
 80065a2:	9a02      	ldr	r2, [sp, #8]
 80065a4:	f108 0301 	add.w	r3, r8, #1
 80065a8:	7013      	strb	r3, [r2, #0]
 80065aa:	e604      	b.n	80061b6 <_dtoa_r+0x696>
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	9a07      	ldr	r2, [sp, #28]
 80065b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80065b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d028      	beq.n	800660c <_dtoa_r+0xaec>
 80065ba:	4649      	mov	r1, r9
 80065bc:	2300      	movs	r3, #0
 80065be:	220a      	movs	r2, #10
 80065c0:	4658      	mov	r0, fp
 80065c2:	f000 f9d5 	bl	8006970 <__multadd>
 80065c6:	42af      	cmp	r7, r5
 80065c8:	4681      	mov	r9, r0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	f04f 020a 	mov.w	r2, #10
 80065d2:	4639      	mov	r1, r7
 80065d4:	4658      	mov	r0, fp
 80065d6:	d107      	bne.n	80065e8 <_dtoa_r+0xac8>
 80065d8:	f000 f9ca 	bl	8006970 <__multadd>
 80065dc:	4607      	mov	r7, r0
 80065de:	4605      	mov	r5, r0
 80065e0:	9b07      	ldr	r3, [sp, #28]
 80065e2:	3301      	adds	r3, #1
 80065e4:	9307      	str	r3, [sp, #28]
 80065e6:	e774      	b.n	80064d2 <_dtoa_r+0x9b2>
 80065e8:	f000 f9c2 	bl	8006970 <__multadd>
 80065ec:	4629      	mov	r1, r5
 80065ee:	4607      	mov	r7, r0
 80065f0:	2300      	movs	r3, #0
 80065f2:	220a      	movs	r2, #10
 80065f4:	4658      	mov	r0, fp
 80065f6:	f000 f9bb 	bl	8006970 <__multadd>
 80065fa:	4605      	mov	r5, r0
 80065fc:	e7f0      	b.n	80065e0 <_dtoa_r+0xac0>
 80065fe:	9b08      	ldr	r3, [sp, #32]
 8006600:	2700      	movs	r7, #0
 8006602:	2b00      	cmp	r3, #0
 8006604:	bfcc      	ite	gt
 8006606:	461e      	movgt	r6, r3
 8006608:	2601      	movle	r6, #1
 800660a:	4456      	add	r6, sl
 800660c:	4649      	mov	r1, r9
 800660e:	2201      	movs	r2, #1
 8006610:	4658      	mov	r0, fp
 8006612:	f000 fb57 	bl	8006cc4 <__lshift>
 8006616:	4621      	mov	r1, r4
 8006618:	4681      	mov	r9, r0
 800661a:	f000 fbbf 	bl	8006d9c <__mcmp>
 800661e:	2800      	cmp	r0, #0
 8006620:	dcb0      	bgt.n	8006584 <_dtoa_r+0xa64>
 8006622:	d102      	bne.n	800662a <_dtoa_r+0xb0a>
 8006624:	f018 0f01 	tst.w	r8, #1
 8006628:	d1ac      	bne.n	8006584 <_dtoa_r+0xa64>
 800662a:	4633      	mov	r3, r6
 800662c:	461e      	mov	r6, r3
 800662e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006632:	2a30      	cmp	r2, #48	@ 0x30
 8006634:	d0fa      	beq.n	800662c <_dtoa_r+0xb0c>
 8006636:	e5be      	b.n	80061b6 <_dtoa_r+0x696>
 8006638:	459a      	cmp	sl, r3
 800663a:	d1a4      	bne.n	8006586 <_dtoa_r+0xa66>
 800663c:	9b04      	ldr	r3, [sp, #16]
 800663e:	3301      	adds	r3, #1
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	2331      	movs	r3, #49	@ 0x31
 8006644:	f88a 3000 	strb.w	r3, [sl]
 8006648:	e5b5      	b.n	80061b6 <_dtoa_r+0x696>
 800664a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800664c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80066ac <_dtoa_r+0xb8c>
 8006650:	b11b      	cbz	r3, 800665a <_dtoa_r+0xb3a>
 8006652:	f10a 0308 	add.w	r3, sl, #8
 8006656:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	4650      	mov	r0, sl
 800665c:	b017      	add	sp, #92	@ 0x5c
 800665e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006662:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006664:	2b01      	cmp	r3, #1
 8006666:	f77f ae3d 	ble.w	80062e4 <_dtoa_r+0x7c4>
 800666a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800666c:	930a      	str	r3, [sp, #40]	@ 0x28
 800666e:	2001      	movs	r0, #1
 8006670:	e65b      	b.n	800632a <_dtoa_r+0x80a>
 8006672:	9b08      	ldr	r3, [sp, #32]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f77f aed6 	ble.w	8006426 <_dtoa_r+0x906>
 800667a:	4656      	mov	r6, sl
 800667c:	4621      	mov	r1, r4
 800667e:	4648      	mov	r0, r9
 8006680:	f7ff f9c5 	bl	8005a0e <quorem>
 8006684:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006688:	9b08      	ldr	r3, [sp, #32]
 800668a:	f806 8b01 	strb.w	r8, [r6], #1
 800668e:	eba6 020a 	sub.w	r2, r6, sl
 8006692:	4293      	cmp	r3, r2
 8006694:	ddb3      	ble.n	80065fe <_dtoa_r+0xade>
 8006696:	4649      	mov	r1, r9
 8006698:	2300      	movs	r3, #0
 800669a:	220a      	movs	r2, #10
 800669c:	4658      	mov	r0, fp
 800669e:	f000 f967 	bl	8006970 <__multadd>
 80066a2:	4681      	mov	r9, r0
 80066a4:	e7ea      	b.n	800667c <_dtoa_r+0xb5c>
 80066a6:	bf00      	nop
 80066a8:	08007b7e 	.word	0x08007b7e
 80066ac:	08007b02 	.word	0x08007b02

080066b0 <_free_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4605      	mov	r5, r0
 80066b4:	2900      	cmp	r1, #0
 80066b6:	d040      	beq.n	800673a <_free_r+0x8a>
 80066b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066bc:	1f0c      	subs	r4, r1, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfb8      	it	lt
 80066c2:	18e4      	addlt	r4, r4, r3
 80066c4:	f000 f8e6 	bl	8006894 <__malloc_lock>
 80066c8:	4a1c      	ldr	r2, [pc, #112]	@ (800673c <_free_r+0x8c>)
 80066ca:	6813      	ldr	r3, [r2, #0]
 80066cc:	b933      	cbnz	r3, 80066dc <_free_r+0x2c>
 80066ce:	6063      	str	r3, [r4, #4]
 80066d0:	6014      	str	r4, [r2, #0]
 80066d2:	4628      	mov	r0, r5
 80066d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d8:	f000 b8e2 	b.w	80068a0 <__malloc_unlock>
 80066dc:	42a3      	cmp	r3, r4
 80066de:	d908      	bls.n	80066f2 <_free_r+0x42>
 80066e0:	6820      	ldr	r0, [r4, #0]
 80066e2:	1821      	adds	r1, r4, r0
 80066e4:	428b      	cmp	r3, r1
 80066e6:	bf01      	itttt	eq
 80066e8:	6819      	ldreq	r1, [r3, #0]
 80066ea:	685b      	ldreq	r3, [r3, #4]
 80066ec:	1809      	addeq	r1, r1, r0
 80066ee:	6021      	streq	r1, [r4, #0]
 80066f0:	e7ed      	b.n	80066ce <_free_r+0x1e>
 80066f2:	461a      	mov	r2, r3
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	b10b      	cbz	r3, 80066fc <_free_r+0x4c>
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	d9fa      	bls.n	80066f2 <_free_r+0x42>
 80066fc:	6811      	ldr	r1, [r2, #0]
 80066fe:	1850      	adds	r0, r2, r1
 8006700:	42a0      	cmp	r0, r4
 8006702:	d10b      	bne.n	800671c <_free_r+0x6c>
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	4401      	add	r1, r0
 8006708:	1850      	adds	r0, r2, r1
 800670a:	4283      	cmp	r3, r0
 800670c:	6011      	str	r1, [r2, #0]
 800670e:	d1e0      	bne.n	80066d2 <_free_r+0x22>
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4408      	add	r0, r1
 8006716:	6010      	str	r0, [r2, #0]
 8006718:	6053      	str	r3, [r2, #4]
 800671a:	e7da      	b.n	80066d2 <_free_r+0x22>
 800671c:	d902      	bls.n	8006724 <_free_r+0x74>
 800671e:	230c      	movs	r3, #12
 8006720:	602b      	str	r3, [r5, #0]
 8006722:	e7d6      	b.n	80066d2 <_free_r+0x22>
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	1821      	adds	r1, r4, r0
 8006728:	428b      	cmp	r3, r1
 800672a:	bf01      	itttt	eq
 800672c:	6819      	ldreq	r1, [r3, #0]
 800672e:	685b      	ldreq	r3, [r3, #4]
 8006730:	1809      	addeq	r1, r1, r0
 8006732:	6021      	streq	r1, [r4, #0]
 8006734:	6063      	str	r3, [r4, #4]
 8006736:	6054      	str	r4, [r2, #4]
 8006738:	e7cb      	b.n	80066d2 <_free_r+0x22>
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	20000580 	.word	0x20000580

08006740 <malloc>:
 8006740:	4b02      	ldr	r3, [pc, #8]	@ (800674c <malloc+0xc>)
 8006742:	4601      	mov	r1, r0
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	f000 b825 	b.w	8006794 <_malloc_r>
 800674a:	bf00      	nop
 800674c:	20000018 	.word	0x20000018

08006750 <sbrk_aligned>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4e0f      	ldr	r6, [pc, #60]	@ (8006790 <sbrk_aligned+0x40>)
 8006754:	460c      	mov	r4, r1
 8006756:	6831      	ldr	r1, [r6, #0]
 8006758:	4605      	mov	r5, r0
 800675a:	b911      	cbnz	r1, 8006762 <sbrk_aligned+0x12>
 800675c:	f000 fe40 	bl	80073e0 <_sbrk_r>
 8006760:	6030      	str	r0, [r6, #0]
 8006762:	4621      	mov	r1, r4
 8006764:	4628      	mov	r0, r5
 8006766:	f000 fe3b 	bl	80073e0 <_sbrk_r>
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	d103      	bne.n	8006776 <sbrk_aligned+0x26>
 800676e:	f04f 34ff 	mov.w	r4, #4294967295
 8006772:	4620      	mov	r0, r4
 8006774:	bd70      	pop	{r4, r5, r6, pc}
 8006776:	1cc4      	adds	r4, r0, #3
 8006778:	f024 0403 	bic.w	r4, r4, #3
 800677c:	42a0      	cmp	r0, r4
 800677e:	d0f8      	beq.n	8006772 <sbrk_aligned+0x22>
 8006780:	1a21      	subs	r1, r4, r0
 8006782:	4628      	mov	r0, r5
 8006784:	f000 fe2c 	bl	80073e0 <_sbrk_r>
 8006788:	3001      	adds	r0, #1
 800678a:	d1f2      	bne.n	8006772 <sbrk_aligned+0x22>
 800678c:	e7ef      	b.n	800676e <sbrk_aligned+0x1e>
 800678e:	bf00      	nop
 8006790:	2000057c 	.word	0x2000057c

08006794 <_malloc_r>:
 8006794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006798:	1ccd      	adds	r5, r1, #3
 800679a:	f025 0503 	bic.w	r5, r5, #3
 800679e:	3508      	adds	r5, #8
 80067a0:	2d0c      	cmp	r5, #12
 80067a2:	bf38      	it	cc
 80067a4:	250c      	movcc	r5, #12
 80067a6:	2d00      	cmp	r5, #0
 80067a8:	4606      	mov	r6, r0
 80067aa:	db01      	blt.n	80067b0 <_malloc_r+0x1c>
 80067ac:	42a9      	cmp	r1, r5
 80067ae:	d904      	bls.n	80067ba <_malloc_r+0x26>
 80067b0:	230c      	movs	r3, #12
 80067b2:	6033      	str	r3, [r6, #0]
 80067b4:	2000      	movs	r0, #0
 80067b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006890 <_malloc_r+0xfc>
 80067be:	f000 f869 	bl	8006894 <__malloc_lock>
 80067c2:	f8d8 3000 	ldr.w	r3, [r8]
 80067c6:	461c      	mov	r4, r3
 80067c8:	bb44      	cbnz	r4, 800681c <_malloc_r+0x88>
 80067ca:	4629      	mov	r1, r5
 80067cc:	4630      	mov	r0, r6
 80067ce:	f7ff ffbf 	bl	8006750 <sbrk_aligned>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	4604      	mov	r4, r0
 80067d6:	d158      	bne.n	800688a <_malloc_r+0xf6>
 80067d8:	f8d8 4000 	ldr.w	r4, [r8]
 80067dc:	4627      	mov	r7, r4
 80067de:	2f00      	cmp	r7, #0
 80067e0:	d143      	bne.n	800686a <_malloc_r+0xd6>
 80067e2:	2c00      	cmp	r4, #0
 80067e4:	d04b      	beq.n	800687e <_malloc_r+0xea>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	4639      	mov	r1, r7
 80067ea:	4630      	mov	r0, r6
 80067ec:	eb04 0903 	add.w	r9, r4, r3
 80067f0:	f000 fdf6 	bl	80073e0 <_sbrk_r>
 80067f4:	4581      	cmp	r9, r0
 80067f6:	d142      	bne.n	800687e <_malloc_r+0xea>
 80067f8:	6821      	ldr	r1, [r4, #0]
 80067fa:	4630      	mov	r0, r6
 80067fc:	1a6d      	subs	r5, r5, r1
 80067fe:	4629      	mov	r1, r5
 8006800:	f7ff ffa6 	bl	8006750 <sbrk_aligned>
 8006804:	3001      	adds	r0, #1
 8006806:	d03a      	beq.n	800687e <_malloc_r+0xea>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	442b      	add	r3, r5
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	f8d8 3000 	ldr.w	r3, [r8]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	bb62      	cbnz	r2, 8006870 <_malloc_r+0xdc>
 8006816:	f8c8 7000 	str.w	r7, [r8]
 800681a:	e00f      	b.n	800683c <_malloc_r+0xa8>
 800681c:	6822      	ldr	r2, [r4, #0]
 800681e:	1b52      	subs	r2, r2, r5
 8006820:	d420      	bmi.n	8006864 <_malloc_r+0xd0>
 8006822:	2a0b      	cmp	r2, #11
 8006824:	d917      	bls.n	8006856 <_malloc_r+0xc2>
 8006826:	1961      	adds	r1, r4, r5
 8006828:	42a3      	cmp	r3, r4
 800682a:	6025      	str	r5, [r4, #0]
 800682c:	bf18      	it	ne
 800682e:	6059      	strne	r1, [r3, #4]
 8006830:	6863      	ldr	r3, [r4, #4]
 8006832:	bf08      	it	eq
 8006834:	f8c8 1000 	streq.w	r1, [r8]
 8006838:	5162      	str	r2, [r4, r5]
 800683a:	604b      	str	r3, [r1, #4]
 800683c:	4630      	mov	r0, r6
 800683e:	f000 f82f 	bl	80068a0 <__malloc_unlock>
 8006842:	f104 000b 	add.w	r0, r4, #11
 8006846:	1d23      	adds	r3, r4, #4
 8006848:	f020 0007 	bic.w	r0, r0, #7
 800684c:	1ac2      	subs	r2, r0, r3
 800684e:	bf1c      	itt	ne
 8006850:	1a1b      	subne	r3, r3, r0
 8006852:	50a3      	strne	r3, [r4, r2]
 8006854:	e7af      	b.n	80067b6 <_malloc_r+0x22>
 8006856:	6862      	ldr	r2, [r4, #4]
 8006858:	42a3      	cmp	r3, r4
 800685a:	bf0c      	ite	eq
 800685c:	f8c8 2000 	streq.w	r2, [r8]
 8006860:	605a      	strne	r2, [r3, #4]
 8006862:	e7eb      	b.n	800683c <_malloc_r+0xa8>
 8006864:	4623      	mov	r3, r4
 8006866:	6864      	ldr	r4, [r4, #4]
 8006868:	e7ae      	b.n	80067c8 <_malloc_r+0x34>
 800686a:	463c      	mov	r4, r7
 800686c:	687f      	ldr	r7, [r7, #4]
 800686e:	e7b6      	b.n	80067de <_malloc_r+0x4a>
 8006870:	461a      	mov	r2, r3
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	42a3      	cmp	r3, r4
 8006876:	d1fb      	bne.n	8006870 <_malloc_r+0xdc>
 8006878:	2300      	movs	r3, #0
 800687a:	6053      	str	r3, [r2, #4]
 800687c:	e7de      	b.n	800683c <_malloc_r+0xa8>
 800687e:	230c      	movs	r3, #12
 8006880:	4630      	mov	r0, r6
 8006882:	6033      	str	r3, [r6, #0]
 8006884:	f000 f80c 	bl	80068a0 <__malloc_unlock>
 8006888:	e794      	b.n	80067b4 <_malloc_r+0x20>
 800688a:	6005      	str	r5, [r0, #0]
 800688c:	e7d6      	b.n	800683c <_malloc_r+0xa8>
 800688e:	bf00      	nop
 8006890:	20000580 	.word	0x20000580

08006894 <__malloc_lock>:
 8006894:	4801      	ldr	r0, [pc, #4]	@ (800689c <__malloc_lock+0x8>)
 8006896:	f7ff b89c 	b.w	80059d2 <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	20000578 	.word	0x20000578

080068a0 <__malloc_unlock>:
 80068a0:	4801      	ldr	r0, [pc, #4]	@ (80068a8 <__malloc_unlock+0x8>)
 80068a2:	f7ff b897 	b.w	80059d4 <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	20000578 	.word	0x20000578

080068ac <_Balloc>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	69c6      	ldr	r6, [r0, #28]
 80068b0:	4604      	mov	r4, r0
 80068b2:	460d      	mov	r5, r1
 80068b4:	b976      	cbnz	r6, 80068d4 <_Balloc+0x28>
 80068b6:	2010      	movs	r0, #16
 80068b8:	f7ff ff42 	bl	8006740 <malloc>
 80068bc:	4602      	mov	r2, r0
 80068be:	61e0      	str	r0, [r4, #28]
 80068c0:	b920      	cbnz	r0, 80068cc <_Balloc+0x20>
 80068c2:	216b      	movs	r1, #107	@ 0x6b
 80068c4:	4b17      	ldr	r3, [pc, #92]	@ (8006924 <_Balloc+0x78>)
 80068c6:	4818      	ldr	r0, [pc, #96]	@ (8006928 <_Balloc+0x7c>)
 80068c8:	f000 fd9a 	bl	8007400 <__assert_func>
 80068cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068d0:	6006      	str	r6, [r0, #0]
 80068d2:	60c6      	str	r6, [r0, #12]
 80068d4:	69e6      	ldr	r6, [r4, #28]
 80068d6:	68f3      	ldr	r3, [r6, #12]
 80068d8:	b183      	cbz	r3, 80068fc <_Balloc+0x50>
 80068da:	69e3      	ldr	r3, [r4, #28]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068e2:	b9b8      	cbnz	r0, 8006914 <_Balloc+0x68>
 80068e4:	2101      	movs	r1, #1
 80068e6:	fa01 f605 	lsl.w	r6, r1, r5
 80068ea:	1d72      	adds	r2, r6, #5
 80068ec:	4620      	mov	r0, r4
 80068ee:	0092      	lsls	r2, r2, #2
 80068f0:	f000 fda4 	bl	800743c <_calloc_r>
 80068f4:	b160      	cbz	r0, 8006910 <_Balloc+0x64>
 80068f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068fa:	e00e      	b.n	800691a <_Balloc+0x6e>
 80068fc:	2221      	movs	r2, #33	@ 0x21
 80068fe:	2104      	movs	r1, #4
 8006900:	4620      	mov	r0, r4
 8006902:	f000 fd9b 	bl	800743c <_calloc_r>
 8006906:	69e3      	ldr	r3, [r4, #28]
 8006908:	60f0      	str	r0, [r6, #12]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e4      	bne.n	80068da <_Balloc+0x2e>
 8006910:	2000      	movs	r0, #0
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	6802      	ldr	r2, [r0, #0]
 8006916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800691a:	2300      	movs	r3, #0
 800691c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006920:	e7f7      	b.n	8006912 <_Balloc+0x66>
 8006922:	bf00      	nop
 8006924:	08007b0f 	.word	0x08007b0f
 8006928:	08007b8f 	.word	0x08007b8f

0800692c <_Bfree>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	69c6      	ldr	r6, [r0, #28]
 8006930:	4605      	mov	r5, r0
 8006932:	460c      	mov	r4, r1
 8006934:	b976      	cbnz	r6, 8006954 <_Bfree+0x28>
 8006936:	2010      	movs	r0, #16
 8006938:	f7ff ff02 	bl	8006740 <malloc>
 800693c:	4602      	mov	r2, r0
 800693e:	61e8      	str	r0, [r5, #28]
 8006940:	b920      	cbnz	r0, 800694c <_Bfree+0x20>
 8006942:	218f      	movs	r1, #143	@ 0x8f
 8006944:	4b08      	ldr	r3, [pc, #32]	@ (8006968 <_Bfree+0x3c>)
 8006946:	4809      	ldr	r0, [pc, #36]	@ (800696c <_Bfree+0x40>)
 8006948:	f000 fd5a 	bl	8007400 <__assert_func>
 800694c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006950:	6006      	str	r6, [r0, #0]
 8006952:	60c6      	str	r6, [r0, #12]
 8006954:	b13c      	cbz	r4, 8006966 <_Bfree+0x3a>
 8006956:	69eb      	ldr	r3, [r5, #28]
 8006958:	6862      	ldr	r2, [r4, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006960:	6021      	str	r1, [r4, #0]
 8006962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	08007b0f 	.word	0x08007b0f
 800696c:	08007b8f 	.word	0x08007b8f

08006970 <__multadd>:
 8006970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	4607      	mov	r7, r0
 8006976:	460c      	mov	r4, r1
 8006978:	461e      	mov	r6, r3
 800697a:	2000      	movs	r0, #0
 800697c:	690d      	ldr	r5, [r1, #16]
 800697e:	f101 0c14 	add.w	ip, r1, #20
 8006982:	f8dc 3000 	ldr.w	r3, [ip]
 8006986:	3001      	adds	r0, #1
 8006988:	b299      	uxth	r1, r3
 800698a:	fb02 6101 	mla	r1, r2, r1, r6
 800698e:	0c1e      	lsrs	r6, r3, #16
 8006990:	0c0b      	lsrs	r3, r1, #16
 8006992:	fb02 3306 	mla	r3, r2, r6, r3
 8006996:	b289      	uxth	r1, r1
 8006998:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800699c:	4285      	cmp	r5, r0
 800699e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069a2:	f84c 1b04 	str.w	r1, [ip], #4
 80069a6:	dcec      	bgt.n	8006982 <__multadd+0x12>
 80069a8:	b30e      	cbz	r6, 80069ee <__multadd+0x7e>
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	42ab      	cmp	r3, r5
 80069ae:	dc19      	bgt.n	80069e4 <__multadd+0x74>
 80069b0:	6861      	ldr	r1, [r4, #4]
 80069b2:	4638      	mov	r0, r7
 80069b4:	3101      	adds	r1, #1
 80069b6:	f7ff ff79 	bl	80068ac <_Balloc>
 80069ba:	4680      	mov	r8, r0
 80069bc:	b928      	cbnz	r0, 80069ca <__multadd+0x5a>
 80069be:	4602      	mov	r2, r0
 80069c0:	21ba      	movs	r1, #186	@ 0xba
 80069c2:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <__multadd+0x84>)
 80069c4:	480c      	ldr	r0, [pc, #48]	@ (80069f8 <__multadd+0x88>)
 80069c6:	f000 fd1b 	bl	8007400 <__assert_func>
 80069ca:	6922      	ldr	r2, [r4, #16]
 80069cc:	f104 010c 	add.w	r1, r4, #12
 80069d0:	3202      	adds	r2, #2
 80069d2:	0092      	lsls	r2, r2, #2
 80069d4:	300c      	adds	r0, #12
 80069d6:	f7ff f80c 	bl	80059f2 <memcpy>
 80069da:	4621      	mov	r1, r4
 80069dc:	4638      	mov	r0, r7
 80069de:	f7ff ffa5 	bl	800692c <_Bfree>
 80069e2:	4644      	mov	r4, r8
 80069e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069e8:	3501      	adds	r5, #1
 80069ea:	615e      	str	r6, [r3, #20]
 80069ec:	6125      	str	r5, [r4, #16]
 80069ee:	4620      	mov	r0, r4
 80069f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f4:	08007b7e 	.word	0x08007b7e
 80069f8:	08007b8f 	.word	0x08007b8f

080069fc <__hi0bits>:
 80069fc:	4603      	mov	r3, r0
 80069fe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006a02:	bf3a      	itte	cc
 8006a04:	0403      	lslcc	r3, r0, #16
 8006a06:	2010      	movcc	r0, #16
 8006a08:	2000      	movcs	r0, #0
 8006a0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a0e:	bf3c      	itt	cc
 8006a10:	021b      	lslcc	r3, r3, #8
 8006a12:	3008      	addcc	r0, #8
 8006a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a18:	bf3c      	itt	cc
 8006a1a:	011b      	lslcc	r3, r3, #4
 8006a1c:	3004      	addcc	r0, #4
 8006a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a22:	bf3c      	itt	cc
 8006a24:	009b      	lslcc	r3, r3, #2
 8006a26:	3002      	addcc	r0, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	db05      	blt.n	8006a38 <__hi0bits+0x3c>
 8006a2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006a30:	f100 0001 	add.w	r0, r0, #1
 8006a34:	bf08      	it	eq
 8006a36:	2020      	moveq	r0, #32
 8006a38:	4770      	bx	lr

08006a3a <__lo0bits>:
 8006a3a:	6803      	ldr	r3, [r0, #0]
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	f013 0007 	ands.w	r0, r3, #7
 8006a42:	d00b      	beq.n	8006a5c <__lo0bits+0x22>
 8006a44:	07d9      	lsls	r1, r3, #31
 8006a46:	d421      	bmi.n	8006a8c <__lo0bits+0x52>
 8006a48:	0798      	lsls	r0, r3, #30
 8006a4a:	bf49      	itett	mi
 8006a4c:	085b      	lsrmi	r3, r3, #1
 8006a4e:	089b      	lsrpl	r3, r3, #2
 8006a50:	2001      	movmi	r0, #1
 8006a52:	6013      	strmi	r3, [r2, #0]
 8006a54:	bf5c      	itt	pl
 8006a56:	2002      	movpl	r0, #2
 8006a58:	6013      	strpl	r3, [r2, #0]
 8006a5a:	4770      	bx	lr
 8006a5c:	b299      	uxth	r1, r3
 8006a5e:	b909      	cbnz	r1, 8006a64 <__lo0bits+0x2a>
 8006a60:	2010      	movs	r0, #16
 8006a62:	0c1b      	lsrs	r3, r3, #16
 8006a64:	b2d9      	uxtb	r1, r3
 8006a66:	b909      	cbnz	r1, 8006a6c <__lo0bits+0x32>
 8006a68:	3008      	adds	r0, #8
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	0719      	lsls	r1, r3, #28
 8006a6e:	bf04      	itt	eq
 8006a70:	091b      	lsreq	r3, r3, #4
 8006a72:	3004      	addeq	r0, #4
 8006a74:	0799      	lsls	r1, r3, #30
 8006a76:	bf04      	itt	eq
 8006a78:	089b      	lsreq	r3, r3, #2
 8006a7a:	3002      	addeq	r0, #2
 8006a7c:	07d9      	lsls	r1, r3, #31
 8006a7e:	d403      	bmi.n	8006a88 <__lo0bits+0x4e>
 8006a80:	085b      	lsrs	r3, r3, #1
 8006a82:	f100 0001 	add.w	r0, r0, #1
 8006a86:	d003      	beq.n	8006a90 <__lo0bits+0x56>
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	4770      	bx	lr
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	4770      	bx	lr
 8006a90:	2020      	movs	r0, #32
 8006a92:	4770      	bx	lr

08006a94 <__i2b>:
 8006a94:	b510      	push	{r4, lr}
 8006a96:	460c      	mov	r4, r1
 8006a98:	2101      	movs	r1, #1
 8006a9a:	f7ff ff07 	bl	80068ac <_Balloc>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	b928      	cbnz	r0, 8006aae <__i2b+0x1a>
 8006aa2:	f240 1145 	movw	r1, #325	@ 0x145
 8006aa6:	4b04      	ldr	r3, [pc, #16]	@ (8006ab8 <__i2b+0x24>)
 8006aa8:	4804      	ldr	r0, [pc, #16]	@ (8006abc <__i2b+0x28>)
 8006aaa:	f000 fca9 	bl	8007400 <__assert_func>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	6144      	str	r4, [r0, #20]
 8006ab2:	6103      	str	r3, [r0, #16]
 8006ab4:	bd10      	pop	{r4, pc}
 8006ab6:	bf00      	nop
 8006ab8:	08007b7e 	.word	0x08007b7e
 8006abc:	08007b8f 	.word	0x08007b8f

08006ac0 <__multiply>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	690a      	ldr	r2, [r1, #16]
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	460f      	mov	r7, r1
 8006acc:	429a      	cmp	r2, r3
 8006ace:	bfa2      	ittt	ge
 8006ad0:	4623      	movge	r3, r4
 8006ad2:	460c      	movge	r4, r1
 8006ad4:	461f      	movge	r7, r3
 8006ad6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006ada:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	6861      	ldr	r1, [r4, #4]
 8006ae2:	eb0a 0609 	add.w	r6, sl, r9
 8006ae6:	42b3      	cmp	r3, r6
 8006ae8:	b085      	sub	sp, #20
 8006aea:	bfb8      	it	lt
 8006aec:	3101      	addlt	r1, #1
 8006aee:	f7ff fedd 	bl	80068ac <_Balloc>
 8006af2:	b930      	cbnz	r0, 8006b02 <__multiply+0x42>
 8006af4:	4602      	mov	r2, r0
 8006af6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006afa:	4b43      	ldr	r3, [pc, #268]	@ (8006c08 <__multiply+0x148>)
 8006afc:	4843      	ldr	r0, [pc, #268]	@ (8006c0c <__multiply+0x14c>)
 8006afe:	f000 fc7f 	bl	8007400 <__assert_func>
 8006b02:	f100 0514 	add.w	r5, r0, #20
 8006b06:	462b      	mov	r3, r5
 8006b08:	2200      	movs	r2, #0
 8006b0a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b0e:	4543      	cmp	r3, r8
 8006b10:	d321      	bcc.n	8006b56 <__multiply+0x96>
 8006b12:	f107 0114 	add.w	r1, r7, #20
 8006b16:	f104 0214 	add.w	r2, r4, #20
 8006b1a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006b1e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006b22:	9302      	str	r3, [sp, #8]
 8006b24:	1b13      	subs	r3, r2, r4
 8006b26:	3b15      	subs	r3, #21
 8006b28:	f023 0303 	bic.w	r3, r3, #3
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	f104 0715 	add.w	r7, r4, #21
 8006b32:	42ba      	cmp	r2, r7
 8006b34:	bf38      	it	cc
 8006b36:	2304      	movcc	r3, #4
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	9b02      	ldr	r3, [sp, #8]
 8006b3c:	9103      	str	r1, [sp, #12]
 8006b3e:	428b      	cmp	r3, r1
 8006b40:	d80c      	bhi.n	8006b5c <__multiply+0x9c>
 8006b42:	2e00      	cmp	r6, #0
 8006b44:	dd03      	ble.n	8006b4e <__multiply+0x8e>
 8006b46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d05a      	beq.n	8006c04 <__multiply+0x144>
 8006b4e:	6106      	str	r6, [r0, #16]
 8006b50:	b005      	add	sp, #20
 8006b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b56:	f843 2b04 	str.w	r2, [r3], #4
 8006b5a:	e7d8      	b.n	8006b0e <__multiply+0x4e>
 8006b5c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006b60:	f1ba 0f00 	cmp.w	sl, #0
 8006b64:	d023      	beq.n	8006bae <__multiply+0xee>
 8006b66:	46a9      	mov	r9, r5
 8006b68:	f04f 0c00 	mov.w	ip, #0
 8006b6c:	f104 0e14 	add.w	lr, r4, #20
 8006b70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b74:	f8d9 3000 	ldr.w	r3, [r9]
 8006b78:	fa1f fb87 	uxth.w	fp, r7
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b82:	4463      	add	r3, ip
 8006b84:	f8d9 c000 	ldr.w	ip, [r9]
 8006b88:	0c3f      	lsrs	r7, r7, #16
 8006b8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b8e:	fb0a c707 	mla	r7, sl, r7, ip
 8006b92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b9c:	4572      	cmp	r2, lr
 8006b9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ba2:	f849 3b04 	str.w	r3, [r9], #4
 8006ba6:	d8e3      	bhi.n	8006b70 <__multiply+0xb0>
 8006ba8:	9b01      	ldr	r3, [sp, #4]
 8006baa:	f845 c003 	str.w	ip, [r5, r3]
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	3104      	adds	r1, #4
 8006bb2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006bb6:	f1b9 0f00 	cmp.w	r9, #0
 8006bba:	d021      	beq.n	8006c00 <__multiply+0x140>
 8006bbc:	46ae      	mov	lr, r5
 8006bbe:	f04f 0a00 	mov.w	sl, #0
 8006bc2:	682b      	ldr	r3, [r5, #0]
 8006bc4:	f104 0c14 	add.w	ip, r4, #20
 8006bc8:	f8bc b000 	ldrh.w	fp, [ip]
 8006bcc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	fb09 770b 	mla	r7, r9, fp, r7
 8006bd6:	4457      	add	r7, sl
 8006bd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006bdc:	f84e 3b04 	str.w	r3, [lr], #4
 8006be0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006be4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006be8:	f8be 3000 	ldrh.w	r3, [lr]
 8006bec:	4562      	cmp	r2, ip
 8006bee:	fb09 330a 	mla	r3, r9, sl, r3
 8006bf2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006bf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bfa:	d8e5      	bhi.n	8006bc8 <__multiply+0x108>
 8006bfc:	9f01      	ldr	r7, [sp, #4]
 8006bfe:	51eb      	str	r3, [r5, r7]
 8006c00:	3504      	adds	r5, #4
 8006c02:	e79a      	b.n	8006b3a <__multiply+0x7a>
 8006c04:	3e01      	subs	r6, #1
 8006c06:	e79c      	b.n	8006b42 <__multiply+0x82>
 8006c08:	08007b7e 	.word	0x08007b7e
 8006c0c:	08007b8f 	.word	0x08007b8f

08006c10 <__pow5mult>:
 8006c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c14:	4615      	mov	r5, r2
 8006c16:	f012 0203 	ands.w	r2, r2, #3
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	460e      	mov	r6, r1
 8006c1e:	d007      	beq.n	8006c30 <__pow5mult+0x20>
 8006c20:	4c25      	ldr	r4, [pc, #148]	@ (8006cb8 <__pow5mult+0xa8>)
 8006c22:	3a01      	subs	r2, #1
 8006c24:	2300      	movs	r3, #0
 8006c26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c2a:	f7ff fea1 	bl	8006970 <__multadd>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	10ad      	asrs	r5, r5, #2
 8006c32:	d03d      	beq.n	8006cb0 <__pow5mult+0xa0>
 8006c34:	69fc      	ldr	r4, [r7, #28]
 8006c36:	b97c      	cbnz	r4, 8006c58 <__pow5mult+0x48>
 8006c38:	2010      	movs	r0, #16
 8006c3a:	f7ff fd81 	bl	8006740 <malloc>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	61f8      	str	r0, [r7, #28]
 8006c42:	b928      	cbnz	r0, 8006c50 <__pow5mult+0x40>
 8006c44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006c48:	4b1c      	ldr	r3, [pc, #112]	@ (8006cbc <__pow5mult+0xac>)
 8006c4a:	481d      	ldr	r0, [pc, #116]	@ (8006cc0 <__pow5mult+0xb0>)
 8006c4c:	f000 fbd8 	bl	8007400 <__assert_func>
 8006c50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c54:	6004      	str	r4, [r0, #0]
 8006c56:	60c4      	str	r4, [r0, #12]
 8006c58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006c5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c60:	b94c      	cbnz	r4, 8006c76 <__pow5mult+0x66>
 8006c62:	f240 2171 	movw	r1, #625	@ 0x271
 8006c66:	4638      	mov	r0, r7
 8006c68:	f7ff ff14 	bl	8006a94 <__i2b>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4604      	mov	r4, r0
 8006c70:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c74:	6003      	str	r3, [r0, #0]
 8006c76:	f04f 0900 	mov.w	r9, #0
 8006c7a:	07eb      	lsls	r3, r5, #31
 8006c7c:	d50a      	bpl.n	8006c94 <__pow5mult+0x84>
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4622      	mov	r2, r4
 8006c82:	4638      	mov	r0, r7
 8006c84:	f7ff ff1c 	bl	8006ac0 <__multiply>
 8006c88:	4680      	mov	r8, r0
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	f7ff fe4d 	bl	800692c <_Bfree>
 8006c92:	4646      	mov	r6, r8
 8006c94:	106d      	asrs	r5, r5, #1
 8006c96:	d00b      	beq.n	8006cb0 <__pow5mult+0xa0>
 8006c98:	6820      	ldr	r0, [r4, #0]
 8006c9a:	b938      	cbnz	r0, 8006cac <__pow5mult+0x9c>
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f7ff ff0d 	bl	8006ac0 <__multiply>
 8006ca6:	6020      	str	r0, [r4, #0]
 8006ca8:	f8c0 9000 	str.w	r9, [r0]
 8006cac:	4604      	mov	r4, r0
 8006cae:	e7e4      	b.n	8006c7a <__pow5mult+0x6a>
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cb6:	bf00      	nop
 8006cb8:	08007be8 	.word	0x08007be8
 8006cbc:	08007b0f 	.word	0x08007b0f
 8006cc0:	08007b8f 	.word	0x08007b8f

08006cc4 <__lshift>:
 8006cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	460c      	mov	r4, r1
 8006cca:	4607      	mov	r7, r0
 8006ccc:	4691      	mov	r9, r2
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	6849      	ldr	r1, [r1, #4]
 8006cd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cd6:	68a3      	ldr	r3, [r4, #8]
 8006cd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cdc:	f108 0601 	add.w	r6, r8, #1
 8006ce0:	42b3      	cmp	r3, r6
 8006ce2:	db0b      	blt.n	8006cfc <__lshift+0x38>
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	f7ff fde1 	bl	80068ac <_Balloc>
 8006cea:	4605      	mov	r5, r0
 8006cec:	b948      	cbnz	r0, 8006d02 <__lshift+0x3e>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006cf4:	4b27      	ldr	r3, [pc, #156]	@ (8006d94 <__lshift+0xd0>)
 8006cf6:	4828      	ldr	r0, [pc, #160]	@ (8006d98 <__lshift+0xd4>)
 8006cf8:	f000 fb82 	bl	8007400 <__assert_func>
 8006cfc:	3101      	adds	r1, #1
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	e7ee      	b.n	8006ce0 <__lshift+0x1c>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f100 0114 	add.w	r1, r0, #20
 8006d08:	f100 0210 	add.w	r2, r0, #16
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	4553      	cmp	r3, sl
 8006d10:	db33      	blt.n	8006d7a <__lshift+0xb6>
 8006d12:	6920      	ldr	r0, [r4, #16]
 8006d14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d18:	f104 0314 	add.w	r3, r4, #20
 8006d1c:	f019 091f 	ands.w	r9, r9, #31
 8006d20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d28:	d02b      	beq.n	8006d82 <__lshift+0xbe>
 8006d2a:	468a      	mov	sl, r1
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f1c9 0e20 	rsb	lr, r9, #32
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	fa00 f009 	lsl.w	r0, r0, r9
 8006d38:	4310      	orrs	r0, r2
 8006d3a:	f84a 0b04 	str.w	r0, [sl], #4
 8006d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d42:	459c      	cmp	ip, r3
 8006d44:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d48:	d8f3      	bhi.n	8006d32 <__lshift+0x6e>
 8006d4a:	ebac 0304 	sub.w	r3, ip, r4
 8006d4e:	3b15      	subs	r3, #21
 8006d50:	f023 0303 	bic.w	r3, r3, #3
 8006d54:	3304      	adds	r3, #4
 8006d56:	f104 0015 	add.w	r0, r4, #21
 8006d5a:	4584      	cmp	ip, r0
 8006d5c:	bf38      	it	cc
 8006d5e:	2304      	movcc	r3, #4
 8006d60:	50ca      	str	r2, [r1, r3]
 8006d62:	b10a      	cbz	r2, 8006d68 <__lshift+0xa4>
 8006d64:	f108 0602 	add.w	r6, r8, #2
 8006d68:	3e01      	subs	r6, #1
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	612e      	str	r6, [r5, #16]
 8006d70:	f7ff fddc 	bl	800692c <_Bfree>
 8006d74:	4628      	mov	r0, r5
 8006d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d7e:	3301      	adds	r3, #1
 8006d80:	e7c5      	b.n	8006d0e <__lshift+0x4a>
 8006d82:	3904      	subs	r1, #4
 8006d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d88:	459c      	cmp	ip, r3
 8006d8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d8e:	d8f9      	bhi.n	8006d84 <__lshift+0xc0>
 8006d90:	e7ea      	b.n	8006d68 <__lshift+0xa4>
 8006d92:	bf00      	nop
 8006d94:	08007b7e 	.word	0x08007b7e
 8006d98:	08007b8f 	.word	0x08007b8f

08006d9c <__mcmp>:
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	690a      	ldr	r2, [r1, #16]
 8006da0:	6900      	ldr	r0, [r0, #16]
 8006da2:	b530      	push	{r4, r5, lr}
 8006da4:	1a80      	subs	r0, r0, r2
 8006da6:	d10e      	bne.n	8006dc6 <__mcmp+0x2a>
 8006da8:	3314      	adds	r3, #20
 8006daa:	3114      	adds	r1, #20
 8006dac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006db0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006db4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006db8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006dbc:	4295      	cmp	r5, r2
 8006dbe:	d003      	beq.n	8006dc8 <__mcmp+0x2c>
 8006dc0:	d205      	bcs.n	8006dce <__mcmp+0x32>
 8006dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc6:	bd30      	pop	{r4, r5, pc}
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d3f3      	bcc.n	8006db4 <__mcmp+0x18>
 8006dcc:	e7fb      	b.n	8006dc6 <__mcmp+0x2a>
 8006dce:	2001      	movs	r0, #1
 8006dd0:	e7f9      	b.n	8006dc6 <__mcmp+0x2a>
	...

08006dd4 <__mdiff>:
 8006dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd8:	4689      	mov	r9, r1
 8006dda:	4606      	mov	r6, r0
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4648      	mov	r0, r9
 8006de0:	4614      	mov	r4, r2
 8006de2:	f7ff ffdb 	bl	8006d9c <__mcmp>
 8006de6:	1e05      	subs	r5, r0, #0
 8006de8:	d112      	bne.n	8006e10 <__mdiff+0x3c>
 8006dea:	4629      	mov	r1, r5
 8006dec:	4630      	mov	r0, r6
 8006dee:	f7ff fd5d 	bl	80068ac <_Balloc>
 8006df2:	4602      	mov	r2, r0
 8006df4:	b928      	cbnz	r0, 8006e02 <__mdiff+0x2e>
 8006df6:	f240 2137 	movw	r1, #567	@ 0x237
 8006dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef4 <__mdiff+0x120>)
 8006dfc:	483e      	ldr	r0, [pc, #248]	@ (8006ef8 <__mdiff+0x124>)
 8006dfe:	f000 faff 	bl	8007400 <__assert_func>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e08:	4610      	mov	r0, r2
 8006e0a:	b003      	add	sp, #12
 8006e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e10:	bfbc      	itt	lt
 8006e12:	464b      	movlt	r3, r9
 8006e14:	46a1      	movlt	r9, r4
 8006e16:	4630      	mov	r0, r6
 8006e18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006e1c:	bfba      	itte	lt
 8006e1e:	461c      	movlt	r4, r3
 8006e20:	2501      	movlt	r5, #1
 8006e22:	2500      	movge	r5, #0
 8006e24:	f7ff fd42 	bl	80068ac <_Balloc>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	b918      	cbnz	r0, 8006e34 <__mdiff+0x60>
 8006e2c:	f240 2145 	movw	r1, #581	@ 0x245
 8006e30:	4b30      	ldr	r3, [pc, #192]	@ (8006ef4 <__mdiff+0x120>)
 8006e32:	e7e3      	b.n	8006dfc <__mdiff+0x28>
 8006e34:	f100 0b14 	add.w	fp, r0, #20
 8006e38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006e3c:	f109 0310 	add.w	r3, r9, #16
 8006e40:	60c5      	str	r5, [r0, #12]
 8006e42:	f04f 0c00 	mov.w	ip, #0
 8006e46:	f109 0514 	add.w	r5, r9, #20
 8006e4a:	46d9      	mov	r9, fp
 8006e4c:	6926      	ldr	r6, [r4, #16]
 8006e4e:	f104 0e14 	add.w	lr, r4, #20
 8006e52:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006e56:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	9b01      	ldr	r3, [sp, #4]
 8006e5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006e62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006e66:	b281      	uxth	r1, r0
 8006e68:	9301      	str	r3, [sp, #4]
 8006e6a:	fa1f f38a 	uxth.w	r3, sl
 8006e6e:	1a5b      	subs	r3, r3, r1
 8006e70:	0c00      	lsrs	r0, r0, #16
 8006e72:	4463      	add	r3, ip
 8006e74:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e78:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e82:	4576      	cmp	r6, lr
 8006e84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e88:	f849 3b04 	str.w	r3, [r9], #4
 8006e8c:	d8e6      	bhi.n	8006e5c <__mdiff+0x88>
 8006e8e:	1b33      	subs	r3, r6, r4
 8006e90:	3b15      	subs	r3, #21
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	3415      	adds	r4, #21
 8006e98:	3304      	adds	r3, #4
 8006e9a:	42a6      	cmp	r6, r4
 8006e9c:	bf38      	it	cc
 8006e9e:	2304      	movcc	r3, #4
 8006ea0:	441d      	add	r5, r3
 8006ea2:	445b      	add	r3, fp
 8006ea4:	461e      	mov	r6, r3
 8006ea6:	462c      	mov	r4, r5
 8006ea8:	4544      	cmp	r4, r8
 8006eaa:	d30e      	bcc.n	8006eca <__mdiff+0xf6>
 8006eac:	f108 0103 	add.w	r1, r8, #3
 8006eb0:	1b49      	subs	r1, r1, r5
 8006eb2:	f021 0103 	bic.w	r1, r1, #3
 8006eb6:	3d03      	subs	r5, #3
 8006eb8:	45a8      	cmp	r8, r5
 8006eba:	bf38      	it	cc
 8006ebc:	2100      	movcc	r1, #0
 8006ebe:	440b      	add	r3, r1
 8006ec0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ec4:	b199      	cbz	r1, 8006eee <__mdiff+0x11a>
 8006ec6:	6117      	str	r7, [r2, #16]
 8006ec8:	e79e      	b.n	8006e08 <__mdiff+0x34>
 8006eca:	46e6      	mov	lr, ip
 8006ecc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ed0:	fa1f fc81 	uxth.w	ip, r1
 8006ed4:	44f4      	add	ip, lr
 8006ed6:	0c08      	lsrs	r0, r1, #16
 8006ed8:	4471      	add	r1, lr
 8006eda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ede:	b289      	uxth	r1, r1
 8006ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ee4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ee8:	f846 1b04 	str.w	r1, [r6], #4
 8006eec:	e7dc      	b.n	8006ea8 <__mdiff+0xd4>
 8006eee:	3f01      	subs	r7, #1
 8006ef0:	e7e6      	b.n	8006ec0 <__mdiff+0xec>
 8006ef2:	bf00      	nop
 8006ef4:	08007b7e 	.word	0x08007b7e
 8006ef8:	08007b8f 	.word	0x08007b8f

08006efc <__d2b>:
 8006efc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006f00:	2101      	movs	r1, #1
 8006f02:	4690      	mov	r8, r2
 8006f04:	4699      	mov	r9, r3
 8006f06:	9e08      	ldr	r6, [sp, #32]
 8006f08:	f7ff fcd0 	bl	80068ac <_Balloc>
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	b930      	cbnz	r0, 8006f1e <__d2b+0x22>
 8006f10:	4602      	mov	r2, r0
 8006f12:	f240 310f 	movw	r1, #783	@ 0x30f
 8006f16:	4b23      	ldr	r3, [pc, #140]	@ (8006fa4 <__d2b+0xa8>)
 8006f18:	4823      	ldr	r0, [pc, #140]	@ (8006fa8 <__d2b+0xac>)
 8006f1a:	f000 fa71 	bl	8007400 <__assert_func>
 8006f1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f26:	b10d      	cbz	r5, 8006f2c <__d2b+0x30>
 8006f28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	f1b8 0300 	subs.w	r3, r8, #0
 8006f32:	d024      	beq.n	8006f7e <__d2b+0x82>
 8006f34:	4668      	mov	r0, sp
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	f7ff fd7f 	bl	8006a3a <__lo0bits>
 8006f3c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f40:	b1d8      	cbz	r0, 8006f7a <__d2b+0x7e>
 8006f42:	f1c0 0320 	rsb	r3, r0, #32
 8006f46:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4a:	430b      	orrs	r3, r1
 8006f4c:	40c2      	lsrs	r2, r0
 8006f4e:	6163      	str	r3, [r4, #20]
 8006f50:	9201      	str	r2, [sp, #4]
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	bf0c      	ite	eq
 8006f58:	2201      	moveq	r2, #1
 8006f5a:	2202      	movne	r2, #2
 8006f5c:	61a3      	str	r3, [r4, #24]
 8006f5e:	6122      	str	r2, [r4, #16]
 8006f60:	b1ad      	cbz	r5, 8006f8e <__d2b+0x92>
 8006f62:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f66:	4405      	add	r5, r0
 8006f68:	6035      	str	r5, [r6, #0]
 8006f6a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f70:	6018      	str	r0, [r3, #0]
 8006f72:	4620      	mov	r0, r4
 8006f74:	b002      	add	sp, #8
 8006f76:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006f7a:	6161      	str	r1, [r4, #20]
 8006f7c:	e7e9      	b.n	8006f52 <__d2b+0x56>
 8006f7e:	a801      	add	r0, sp, #4
 8006f80:	f7ff fd5b 	bl	8006a3a <__lo0bits>
 8006f84:	9b01      	ldr	r3, [sp, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	6163      	str	r3, [r4, #20]
 8006f8a:	3020      	adds	r0, #32
 8006f8c:	e7e7      	b.n	8006f5e <__d2b+0x62>
 8006f8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f96:	6030      	str	r0, [r6, #0]
 8006f98:	6918      	ldr	r0, [r3, #16]
 8006f9a:	f7ff fd2f 	bl	80069fc <__hi0bits>
 8006f9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fa2:	e7e4      	b.n	8006f6e <__d2b+0x72>
 8006fa4:	08007b7e 	.word	0x08007b7e
 8006fa8:	08007b8f 	.word	0x08007b8f

08006fac <__ssputs_r>:
 8006fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb0:	461f      	mov	r7, r3
 8006fb2:	688e      	ldr	r6, [r1, #8]
 8006fb4:	4682      	mov	sl, r0
 8006fb6:	42be      	cmp	r6, r7
 8006fb8:	460c      	mov	r4, r1
 8006fba:	4690      	mov	r8, r2
 8006fbc:	680b      	ldr	r3, [r1, #0]
 8006fbe:	d82d      	bhi.n	800701c <__ssputs_r+0x70>
 8006fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fc8:	d026      	beq.n	8007018 <__ssputs_r+0x6c>
 8006fca:	6965      	ldr	r5, [r4, #20]
 8006fcc:	6909      	ldr	r1, [r1, #16]
 8006fce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fd2:	eba3 0901 	sub.w	r9, r3, r1
 8006fd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fda:	1c7b      	adds	r3, r7, #1
 8006fdc:	444b      	add	r3, r9
 8006fde:	106d      	asrs	r5, r5, #1
 8006fe0:	429d      	cmp	r5, r3
 8006fe2:	bf38      	it	cc
 8006fe4:	461d      	movcc	r5, r3
 8006fe6:	0553      	lsls	r3, r2, #21
 8006fe8:	d527      	bpl.n	800703a <__ssputs_r+0x8e>
 8006fea:	4629      	mov	r1, r5
 8006fec:	f7ff fbd2 	bl	8006794 <_malloc_r>
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	b360      	cbz	r0, 800704e <__ssputs_r+0xa2>
 8006ff4:	464a      	mov	r2, r9
 8006ff6:	6921      	ldr	r1, [r4, #16]
 8006ff8:	f7fe fcfb 	bl	80059f2 <memcpy>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	6126      	str	r6, [r4, #16]
 800700a:	444e      	add	r6, r9
 800700c:	6026      	str	r6, [r4, #0]
 800700e:	463e      	mov	r6, r7
 8007010:	6165      	str	r5, [r4, #20]
 8007012:	eba5 0509 	sub.w	r5, r5, r9
 8007016:	60a5      	str	r5, [r4, #8]
 8007018:	42be      	cmp	r6, r7
 800701a:	d900      	bls.n	800701e <__ssputs_r+0x72>
 800701c:	463e      	mov	r6, r7
 800701e:	4632      	mov	r2, r6
 8007020:	4641      	mov	r1, r8
 8007022:	6820      	ldr	r0, [r4, #0]
 8007024:	f000 f9c2 	bl	80073ac <memmove>
 8007028:	2000      	movs	r0, #0
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	1b9b      	subs	r3, r3, r6
 800702e:	60a3      	str	r3, [r4, #8]
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	4433      	add	r3, r6
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703a:	462a      	mov	r2, r5
 800703c:	f000 fa24 	bl	8007488 <_realloc_r>
 8007040:	4606      	mov	r6, r0
 8007042:	2800      	cmp	r0, #0
 8007044:	d1e0      	bne.n	8007008 <__ssputs_r+0x5c>
 8007046:	4650      	mov	r0, sl
 8007048:	6921      	ldr	r1, [r4, #16]
 800704a:	f7ff fb31 	bl	80066b0 <_free_r>
 800704e:	230c      	movs	r3, #12
 8007050:	f8ca 3000 	str.w	r3, [sl]
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	f04f 30ff 	mov.w	r0, #4294967295
 800705a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800705e:	81a3      	strh	r3, [r4, #12]
 8007060:	e7e9      	b.n	8007036 <__ssputs_r+0x8a>
	...

08007064 <_svfiprintf_r>:
 8007064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007068:	4698      	mov	r8, r3
 800706a:	898b      	ldrh	r3, [r1, #12]
 800706c:	4607      	mov	r7, r0
 800706e:	061b      	lsls	r3, r3, #24
 8007070:	460d      	mov	r5, r1
 8007072:	4614      	mov	r4, r2
 8007074:	b09d      	sub	sp, #116	@ 0x74
 8007076:	d510      	bpl.n	800709a <_svfiprintf_r+0x36>
 8007078:	690b      	ldr	r3, [r1, #16]
 800707a:	b973      	cbnz	r3, 800709a <_svfiprintf_r+0x36>
 800707c:	2140      	movs	r1, #64	@ 0x40
 800707e:	f7ff fb89 	bl	8006794 <_malloc_r>
 8007082:	6028      	str	r0, [r5, #0]
 8007084:	6128      	str	r0, [r5, #16]
 8007086:	b930      	cbnz	r0, 8007096 <_svfiprintf_r+0x32>
 8007088:	230c      	movs	r3, #12
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	b01d      	add	sp, #116	@ 0x74
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007096:	2340      	movs	r3, #64	@ 0x40
 8007098:	616b      	str	r3, [r5, #20]
 800709a:	2300      	movs	r3, #0
 800709c:	9309      	str	r3, [sp, #36]	@ 0x24
 800709e:	2320      	movs	r3, #32
 80070a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070a4:	2330      	movs	r3, #48	@ 0x30
 80070a6:	f04f 0901 	mov.w	r9, #1
 80070aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007248 <_svfiprintf_r+0x1e4>
 80070b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070b6:	4623      	mov	r3, r4
 80070b8:	469a      	mov	sl, r3
 80070ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070be:	b10a      	cbz	r2, 80070c4 <_svfiprintf_r+0x60>
 80070c0:	2a25      	cmp	r2, #37	@ 0x25
 80070c2:	d1f9      	bne.n	80070b8 <_svfiprintf_r+0x54>
 80070c4:	ebba 0b04 	subs.w	fp, sl, r4
 80070c8:	d00b      	beq.n	80070e2 <_svfiprintf_r+0x7e>
 80070ca:	465b      	mov	r3, fp
 80070cc:	4622      	mov	r2, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff ff6b 	bl	8006fac <__ssputs_r>
 80070d6:	3001      	adds	r0, #1
 80070d8:	f000 80a7 	beq.w	800722a <_svfiprintf_r+0x1c6>
 80070dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070de:	445a      	add	r2, fp
 80070e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80070e2:	f89a 3000 	ldrb.w	r3, [sl]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 809f 	beq.w	800722a <_svfiprintf_r+0x1c6>
 80070ec:	2300      	movs	r3, #0
 80070ee:	f04f 32ff 	mov.w	r2, #4294967295
 80070f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070f6:	f10a 0a01 	add.w	sl, sl, #1
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	9307      	str	r3, [sp, #28]
 80070fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007102:	931a      	str	r3, [sp, #104]	@ 0x68
 8007104:	4654      	mov	r4, sl
 8007106:	2205      	movs	r2, #5
 8007108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800710c:	484e      	ldr	r0, [pc, #312]	@ (8007248 <_svfiprintf_r+0x1e4>)
 800710e:	f7fe fc62 	bl	80059d6 <memchr>
 8007112:	9a04      	ldr	r2, [sp, #16]
 8007114:	b9d8      	cbnz	r0, 800714e <_svfiprintf_r+0xea>
 8007116:	06d0      	lsls	r0, r2, #27
 8007118:	bf44      	itt	mi
 800711a:	2320      	movmi	r3, #32
 800711c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007120:	0711      	lsls	r1, r2, #28
 8007122:	bf44      	itt	mi
 8007124:	232b      	movmi	r3, #43	@ 0x2b
 8007126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800712a:	f89a 3000 	ldrb.w	r3, [sl]
 800712e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007130:	d015      	beq.n	800715e <_svfiprintf_r+0xfa>
 8007132:	4654      	mov	r4, sl
 8007134:	2000      	movs	r0, #0
 8007136:	f04f 0c0a 	mov.w	ip, #10
 800713a:	9a07      	ldr	r2, [sp, #28]
 800713c:	4621      	mov	r1, r4
 800713e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007142:	3b30      	subs	r3, #48	@ 0x30
 8007144:	2b09      	cmp	r3, #9
 8007146:	d94b      	bls.n	80071e0 <_svfiprintf_r+0x17c>
 8007148:	b1b0      	cbz	r0, 8007178 <_svfiprintf_r+0x114>
 800714a:	9207      	str	r2, [sp, #28]
 800714c:	e014      	b.n	8007178 <_svfiprintf_r+0x114>
 800714e:	eba0 0308 	sub.w	r3, r0, r8
 8007152:	fa09 f303 	lsl.w	r3, r9, r3
 8007156:	4313      	orrs	r3, r2
 8007158:	46a2      	mov	sl, r4
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	e7d2      	b.n	8007104 <_svfiprintf_r+0xa0>
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	1d19      	adds	r1, r3, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	9103      	str	r1, [sp, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	bfbb      	ittet	lt
 800716a:	425b      	neglt	r3, r3
 800716c:	f042 0202 	orrlt.w	r2, r2, #2
 8007170:	9307      	strge	r3, [sp, #28]
 8007172:	9307      	strlt	r3, [sp, #28]
 8007174:	bfb8      	it	lt
 8007176:	9204      	strlt	r2, [sp, #16]
 8007178:	7823      	ldrb	r3, [r4, #0]
 800717a:	2b2e      	cmp	r3, #46	@ 0x2e
 800717c:	d10a      	bne.n	8007194 <_svfiprintf_r+0x130>
 800717e:	7863      	ldrb	r3, [r4, #1]
 8007180:	2b2a      	cmp	r3, #42	@ 0x2a
 8007182:	d132      	bne.n	80071ea <_svfiprintf_r+0x186>
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	3402      	adds	r4, #2
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	9203      	str	r2, [sp, #12]
 800718e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007192:	9305      	str	r3, [sp, #20]
 8007194:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800724c <_svfiprintf_r+0x1e8>
 8007198:	2203      	movs	r2, #3
 800719a:	4650      	mov	r0, sl
 800719c:	7821      	ldrb	r1, [r4, #0]
 800719e:	f7fe fc1a 	bl	80059d6 <memchr>
 80071a2:	b138      	cbz	r0, 80071b4 <_svfiprintf_r+0x150>
 80071a4:	2240      	movs	r2, #64	@ 0x40
 80071a6:	9b04      	ldr	r3, [sp, #16]
 80071a8:	eba0 000a 	sub.w	r0, r0, sl
 80071ac:	4082      	lsls	r2, r0
 80071ae:	4313      	orrs	r3, r2
 80071b0:	3401      	adds	r4, #1
 80071b2:	9304      	str	r3, [sp, #16]
 80071b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b8:	2206      	movs	r2, #6
 80071ba:	4825      	ldr	r0, [pc, #148]	@ (8007250 <_svfiprintf_r+0x1ec>)
 80071bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071c0:	f7fe fc09 	bl	80059d6 <memchr>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d036      	beq.n	8007236 <_svfiprintf_r+0x1d2>
 80071c8:	4b22      	ldr	r3, [pc, #136]	@ (8007254 <_svfiprintf_r+0x1f0>)
 80071ca:	bb1b      	cbnz	r3, 8007214 <_svfiprintf_r+0x1b0>
 80071cc:	9b03      	ldr	r3, [sp, #12]
 80071ce:	3307      	adds	r3, #7
 80071d0:	f023 0307 	bic.w	r3, r3, #7
 80071d4:	3308      	adds	r3, #8
 80071d6:	9303      	str	r3, [sp, #12]
 80071d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071da:	4433      	add	r3, r6
 80071dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071de:	e76a      	b.n	80070b6 <_svfiprintf_r+0x52>
 80071e0:	460c      	mov	r4, r1
 80071e2:	2001      	movs	r0, #1
 80071e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071e8:	e7a8      	b.n	800713c <_svfiprintf_r+0xd8>
 80071ea:	2300      	movs	r3, #0
 80071ec:	f04f 0c0a 	mov.w	ip, #10
 80071f0:	4619      	mov	r1, r3
 80071f2:	3401      	adds	r4, #1
 80071f4:	9305      	str	r3, [sp, #20]
 80071f6:	4620      	mov	r0, r4
 80071f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071fc:	3a30      	subs	r2, #48	@ 0x30
 80071fe:	2a09      	cmp	r2, #9
 8007200:	d903      	bls.n	800720a <_svfiprintf_r+0x1a6>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0c6      	beq.n	8007194 <_svfiprintf_r+0x130>
 8007206:	9105      	str	r1, [sp, #20]
 8007208:	e7c4      	b.n	8007194 <_svfiprintf_r+0x130>
 800720a:	4604      	mov	r4, r0
 800720c:	2301      	movs	r3, #1
 800720e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007212:	e7f0      	b.n	80071f6 <_svfiprintf_r+0x192>
 8007214:	ab03      	add	r3, sp, #12
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	462a      	mov	r2, r5
 800721a:	4638      	mov	r0, r7
 800721c:	4b0e      	ldr	r3, [pc, #56]	@ (8007258 <_svfiprintf_r+0x1f4>)
 800721e:	a904      	add	r1, sp, #16
 8007220:	f7fd fe5e 	bl	8004ee0 <_printf_float>
 8007224:	1c42      	adds	r2, r0, #1
 8007226:	4606      	mov	r6, r0
 8007228:	d1d6      	bne.n	80071d8 <_svfiprintf_r+0x174>
 800722a:	89ab      	ldrh	r3, [r5, #12]
 800722c:	065b      	lsls	r3, r3, #25
 800722e:	f53f af2d 	bmi.w	800708c <_svfiprintf_r+0x28>
 8007232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007234:	e72c      	b.n	8007090 <_svfiprintf_r+0x2c>
 8007236:	ab03      	add	r3, sp, #12
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	462a      	mov	r2, r5
 800723c:	4638      	mov	r0, r7
 800723e:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <_svfiprintf_r+0x1f4>)
 8007240:	a904      	add	r1, sp, #16
 8007242:	f7fe f8eb 	bl	800541c <_printf_i>
 8007246:	e7ed      	b.n	8007224 <_svfiprintf_r+0x1c0>
 8007248:	08007ce8 	.word	0x08007ce8
 800724c:	08007cee 	.word	0x08007cee
 8007250:	08007cf2 	.word	0x08007cf2
 8007254:	08004ee1 	.word	0x08004ee1
 8007258:	08006fad 	.word	0x08006fad

0800725c <__sflush_r>:
 800725c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	0716      	lsls	r6, r2, #28
 8007264:	4605      	mov	r5, r0
 8007266:	460c      	mov	r4, r1
 8007268:	d454      	bmi.n	8007314 <__sflush_r+0xb8>
 800726a:	684b      	ldr	r3, [r1, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	dc02      	bgt.n	8007276 <__sflush_r+0x1a>
 8007270:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	dd48      	ble.n	8007308 <__sflush_r+0xac>
 8007276:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007278:	2e00      	cmp	r6, #0
 800727a:	d045      	beq.n	8007308 <__sflush_r+0xac>
 800727c:	2300      	movs	r3, #0
 800727e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007282:	682f      	ldr	r7, [r5, #0]
 8007284:	6a21      	ldr	r1, [r4, #32]
 8007286:	602b      	str	r3, [r5, #0]
 8007288:	d030      	beq.n	80072ec <__sflush_r+0x90>
 800728a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	0759      	lsls	r1, r3, #29
 8007290:	d505      	bpl.n	800729e <__sflush_r+0x42>
 8007292:	6863      	ldr	r3, [r4, #4]
 8007294:	1ad2      	subs	r2, r2, r3
 8007296:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007298:	b10b      	cbz	r3, 800729e <__sflush_r+0x42>
 800729a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800729c:	1ad2      	subs	r2, r2, r3
 800729e:	2300      	movs	r3, #0
 80072a0:	4628      	mov	r0, r5
 80072a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072a4:	6a21      	ldr	r1, [r4, #32]
 80072a6:	47b0      	blx	r6
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	d106      	bne.n	80072bc <__sflush_r+0x60>
 80072ae:	6829      	ldr	r1, [r5, #0]
 80072b0:	291d      	cmp	r1, #29
 80072b2:	d82b      	bhi.n	800730c <__sflush_r+0xb0>
 80072b4:	4a28      	ldr	r2, [pc, #160]	@ (8007358 <__sflush_r+0xfc>)
 80072b6:	410a      	asrs	r2, r1
 80072b8:	07d6      	lsls	r6, r2, #31
 80072ba:	d427      	bmi.n	800730c <__sflush_r+0xb0>
 80072bc:	2200      	movs	r2, #0
 80072be:	6062      	str	r2, [r4, #4]
 80072c0:	6922      	ldr	r2, [r4, #16]
 80072c2:	04d9      	lsls	r1, r3, #19
 80072c4:	6022      	str	r2, [r4, #0]
 80072c6:	d504      	bpl.n	80072d2 <__sflush_r+0x76>
 80072c8:	1c42      	adds	r2, r0, #1
 80072ca:	d101      	bne.n	80072d0 <__sflush_r+0x74>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b903      	cbnz	r3, 80072d2 <__sflush_r+0x76>
 80072d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80072d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072d4:	602f      	str	r7, [r5, #0]
 80072d6:	b1b9      	cbz	r1, 8007308 <__sflush_r+0xac>
 80072d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072dc:	4299      	cmp	r1, r3
 80072de:	d002      	beq.n	80072e6 <__sflush_r+0x8a>
 80072e0:	4628      	mov	r0, r5
 80072e2:	f7ff f9e5 	bl	80066b0 <_free_r>
 80072e6:	2300      	movs	r3, #0
 80072e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80072ea:	e00d      	b.n	8007308 <__sflush_r+0xac>
 80072ec:	2301      	movs	r3, #1
 80072ee:	4628      	mov	r0, r5
 80072f0:	47b0      	blx	r6
 80072f2:	4602      	mov	r2, r0
 80072f4:	1c50      	adds	r0, r2, #1
 80072f6:	d1c9      	bne.n	800728c <__sflush_r+0x30>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0c6      	beq.n	800728c <__sflush_r+0x30>
 80072fe:	2b1d      	cmp	r3, #29
 8007300:	d001      	beq.n	8007306 <__sflush_r+0xaa>
 8007302:	2b16      	cmp	r3, #22
 8007304:	d11d      	bne.n	8007342 <__sflush_r+0xe6>
 8007306:	602f      	str	r7, [r5, #0]
 8007308:	2000      	movs	r0, #0
 800730a:	e021      	b.n	8007350 <__sflush_r+0xf4>
 800730c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007310:	b21b      	sxth	r3, r3
 8007312:	e01a      	b.n	800734a <__sflush_r+0xee>
 8007314:	690f      	ldr	r7, [r1, #16]
 8007316:	2f00      	cmp	r7, #0
 8007318:	d0f6      	beq.n	8007308 <__sflush_r+0xac>
 800731a:	0793      	lsls	r3, r2, #30
 800731c:	bf18      	it	ne
 800731e:	2300      	movne	r3, #0
 8007320:	680e      	ldr	r6, [r1, #0]
 8007322:	bf08      	it	eq
 8007324:	694b      	ldreq	r3, [r1, #20]
 8007326:	1bf6      	subs	r6, r6, r7
 8007328:	600f      	str	r7, [r1, #0]
 800732a:	608b      	str	r3, [r1, #8]
 800732c:	2e00      	cmp	r6, #0
 800732e:	ddeb      	ble.n	8007308 <__sflush_r+0xac>
 8007330:	4633      	mov	r3, r6
 8007332:	463a      	mov	r2, r7
 8007334:	4628      	mov	r0, r5
 8007336:	6a21      	ldr	r1, [r4, #32]
 8007338:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800733c:	47e0      	blx	ip
 800733e:	2800      	cmp	r0, #0
 8007340:	dc07      	bgt.n	8007352 <__sflush_r+0xf6>
 8007342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800734a:	f04f 30ff 	mov.w	r0, #4294967295
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007352:	4407      	add	r7, r0
 8007354:	1a36      	subs	r6, r6, r0
 8007356:	e7e9      	b.n	800732c <__sflush_r+0xd0>
 8007358:	dfbffffe 	.word	0xdfbffffe

0800735c <_fflush_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	690b      	ldr	r3, [r1, #16]
 8007360:	4605      	mov	r5, r0
 8007362:	460c      	mov	r4, r1
 8007364:	b913      	cbnz	r3, 800736c <_fflush_r+0x10>
 8007366:	2500      	movs	r5, #0
 8007368:	4628      	mov	r0, r5
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	b118      	cbz	r0, 8007376 <_fflush_r+0x1a>
 800736e:	6a03      	ldr	r3, [r0, #32]
 8007370:	b90b      	cbnz	r3, 8007376 <_fflush_r+0x1a>
 8007372:	f7fe f9ff 	bl	8005774 <__sinit>
 8007376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f3      	beq.n	8007366 <_fflush_r+0xa>
 800737e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007380:	07d0      	lsls	r0, r2, #31
 8007382:	d404      	bmi.n	800738e <_fflush_r+0x32>
 8007384:	0599      	lsls	r1, r3, #22
 8007386:	d402      	bmi.n	800738e <_fflush_r+0x32>
 8007388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800738a:	f7fe fb22 	bl	80059d2 <__retarget_lock_acquire_recursive>
 800738e:	4628      	mov	r0, r5
 8007390:	4621      	mov	r1, r4
 8007392:	f7ff ff63 	bl	800725c <__sflush_r>
 8007396:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007398:	4605      	mov	r5, r0
 800739a:	07da      	lsls	r2, r3, #31
 800739c:	d4e4      	bmi.n	8007368 <_fflush_r+0xc>
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	059b      	lsls	r3, r3, #22
 80073a2:	d4e1      	bmi.n	8007368 <_fflush_r+0xc>
 80073a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073a6:	f7fe fb15 	bl	80059d4 <__retarget_lock_release_recursive>
 80073aa:	e7dd      	b.n	8007368 <_fflush_r+0xc>

080073ac <memmove>:
 80073ac:	4288      	cmp	r0, r1
 80073ae:	b510      	push	{r4, lr}
 80073b0:	eb01 0402 	add.w	r4, r1, r2
 80073b4:	d902      	bls.n	80073bc <memmove+0x10>
 80073b6:	4284      	cmp	r4, r0
 80073b8:	4623      	mov	r3, r4
 80073ba:	d807      	bhi.n	80073cc <memmove+0x20>
 80073bc:	1e43      	subs	r3, r0, #1
 80073be:	42a1      	cmp	r1, r4
 80073c0:	d008      	beq.n	80073d4 <memmove+0x28>
 80073c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073ca:	e7f8      	b.n	80073be <memmove+0x12>
 80073cc:	4601      	mov	r1, r0
 80073ce:	4402      	add	r2, r0
 80073d0:	428a      	cmp	r2, r1
 80073d2:	d100      	bne.n	80073d6 <memmove+0x2a>
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073de:	e7f7      	b.n	80073d0 <memmove+0x24>

080073e0 <_sbrk_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	2300      	movs	r3, #0
 80073e4:	4d05      	ldr	r5, [pc, #20]	@ (80073fc <_sbrk_r+0x1c>)
 80073e6:	4604      	mov	r4, r0
 80073e8:	4608      	mov	r0, r1
 80073ea:	602b      	str	r3, [r5, #0]
 80073ec:	f7fa f9a6 	bl	800173c <_sbrk>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_sbrk_r+0x1a>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_sbrk_r+0x1a>
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	20000574 	.word	0x20000574

08007400 <__assert_func>:
 8007400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007402:	4614      	mov	r4, r2
 8007404:	461a      	mov	r2, r3
 8007406:	4b09      	ldr	r3, [pc, #36]	@ (800742c <__assert_func+0x2c>)
 8007408:	4605      	mov	r5, r0
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68d8      	ldr	r0, [r3, #12]
 800740e:	b954      	cbnz	r4, 8007426 <__assert_func+0x26>
 8007410:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <__assert_func+0x30>)
 8007412:	461c      	mov	r4, r3
 8007414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007418:	9100      	str	r1, [sp, #0]
 800741a:	462b      	mov	r3, r5
 800741c:	4905      	ldr	r1, [pc, #20]	@ (8007434 <__assert_func+0x34>)
 800741e:	f000 f86f 	bl	8007500 <fiprintf>
 8007422:	f000 f87f 	bl	8007524 <abort>
 8007426:	4b04      	ldr	r3, [pc, #16]	@ (8007438 <__assert_func+0x38>)
 8007428:	e7f4      	b.n	8007414 <__assert_func+0x14>
 800742a:	bf00      	nop
 800742c:	20000018 	.word	0x20000018
 8007430:	08007d3e 	.word	0x08007d3e
 8007434:	08007d10 	.word	0x08007d10
 8007438:	08007d03 	.word	0x08007d03

0800743c <_calloc_r>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	fba1 5402 	umull	r5, r4, r1, r2
 8007442:	b93c      	cbnz	r4, 8007454 <_calloc_r+0x18>
 8007444:	4629      	mov	r1, r5
 8007446:	f7ff f9a5 	bl	8006794 <_malloc_r>
 800744a:	4606      	mov	r6, r0
 800744c:	b928      	cbnz	r0, 800745a <_calloc_r+0x1e>
 800744e:	2600      	movs	r6, #0
 8007450:	4630      	mov	r0, r6
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	220c      	movs	r2, #12
 8007456:	6002      	str	r2, [r0, #0]
 8007458:	e7f9      	b.n	800744e <_calloc_r+0x12>
 800745a:	462a      	mov	r2, r5
 800745c:	4621      	mov	r1, r4
 800745e:	f7fe fa3b 	bl	80058d8 <memset>
 8007462:	e7f5      	b.n	8007450 <_calloc_r+0x14>

08007464 <__ascii_mbtowc>:
 8007464:	b082      	sub	sp, #8
 8007466:	b901      	cbnz	r1, 800746a <__ascii_mbtowc+0x6>
 8007468:	a901      	add	r1, sp, #4
 800746a:	b142      	cbz	r2, 800747e <__ascii_mbtowc+0x1a>
 800746c:	b14b      	cbz	r3, 8007482 <__ascii_mbtowc+0x1e>
 800746e:	7813      	ldrb	r3, [r2, #0]
 8007470:	600b      	str	r3, [r1, #0]
 8007472:	7812      	ldrb	r2, [r2, #0]
 8007474:	1e10      	subs	r0, r2, #0
 8007476:	bf18      	it	ne
 8007478:	2001      	movne	r0, #1
 800747a:	b002      	add	sp, #8
 800747c:	4770      	bx	lr
 800747e:	4610      	mov	r0, r2
 8007480:	e7fb      	b.n	800747a <__ascii_mbtowc+0x16>
 8007482:	f06f 0001 	mvn.w	r0, #1
 8007486:	e7f8      	b.n	800747a <__ascii_mbtowc+0x16>

08007488 <_realloc_r>:
 8007488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800748c:	4680      	mov	r8, r0
 800748e:	4615      	mov	r5, r2
 8007490:	460c      	mov	r4, r1
 8007492:	b921      	cbnz	r1, 800749e <_realloc_r+0x16>
 8007494:	4611      	mov	r1, r2
 8007496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800749a:	f7ff b97b 	b.w	8006794 <_malloc_r>
 800749e:	b92a      	cbnz	r2, 80074ac <_realloc_r+0x24>
 80074a0:	f7ff f906 	bl	80066b0 <_free_r>
 80074a4:	2400      	movs	r4, #0
 80074a6:	4620      	mov	r0, r4
 80074a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ac:	f000 f841 	bl	8007532 <_malloc_usable_size_r>
 80074b0:	4285      	cmp	r5, r0
 80074b2:	4606      	mov	r6, r0
 80074b4:	d802      	bhi.n	80074bc <_realloc_r+0x34>
 80074b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80074ba:	d8f4      	bhi.n	80074a6 <_realloc_r+0x1e>
 80074bc:	4629      	mov	r1, r5
 80074be:	4640      	mov	r0, r8
 80074c0:	f7ff f968 	bl	8006794 <_malloc_r>
 80074c4:	4607      	mov	r7, r0
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d0ec      	beq.n	80074a4 <_realloc_r+0x1c>
 80074ca:	42b5      	cmp	r5, r6
 80074cc:	462a      	mov	r2, r5
 80074ce:	4621      	mov	r1, r4
 80074d0:	bf28      	it	cs
 80074d2:	4632      	movcs	r2, r6
 80074d4:	f7fe fa8d 	bl	80059f2 <memcpy>
 80074d8:	4621      	mov	r1, r4
 80074da:	4640      	mov	r0, r8
 80074dc:	f7ff f8e8 	bl	80066b0 <_free_r>
 80074e0:	463c      	mov	r4, r7
 80074e2:	e7e0      	b.n	80074a6 <_realloc_r+0x1e>

080074e4 <__ascii_wctomb>:
 80074e4:	4603      	mov	r3, r0
 80074e6:	4608      	mov	r0, r1
 80074e8:	b141      	cbz	r1, 80074fc <__ascii_wctomb+0x18>
 80074ea:	2aff      	cmp	r2, #255	@ 0xff
 80074ec:	d904      	bls.n	80074f8 <__ascii_wctomb+0x14>
 80074ee:	228a      	movs	r2, #138	@ 0x8a
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	4770      	bx	lr
 80074f8:	2001      	movs	r0, #1
 80074fa:	700a      	strb	r2, [r1, #0]
 80074fc:	4770      	bx	lr
	...

08007500 <fiprintf>:
 8007500:	b40e      	push	{r1, r2, r3}
 8007502:	b503      	push	{r0, r1, lr}
 8007504:	4601      	mov	r1, r0
 8007506:	ab03      	add	r3, sp, #12
 8007508:	4805      	ldr	r0, [pc, #20]	@ (8007520 <fiprintf+0x20>)
 800750a:	f853 2b04 	ldr.w	r2, [r3], #4
 800750e:	6800      	ldr	r0, [r0, #0]
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	f000 f83d 	bl	8007590 <_vfiprintf_r>
 8007516:	b002      	add	sp, #8
 8007518:	f85d eb04 	ldr.w	lr, [sp], #4
 800751c:	b003      	add	sp, #12
 800751e:	4770      	bx	lr
 8007520:	20000018 	.word	0x20000018

08007524 <abort>:
 8007524:	2006      	movs	r0, #6
 8007526:	b508      	push	{r3, lr}
 8007528:	f000 fa06 	bl	8007938 <raise>
 800752c:	2001      	movs	r0, #1
 800752e:	f7fa f890 	bl	8001652 <_exit>

08007532 <_malloc_usable_size_r>:
 8007532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007536:	1f18      	subs	r0, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	bfbc      	itt	lt
 800753c:	580b      	ldrlt	r3, [r1, r0]
 800753e:	18c0      	addlt	r0, r0, r3
 8007540:	4770      	bx	lr

08007542 <__sfputc_r>:
 8007542:	6893      	ldr	r3, [r2, #8]
 8007544:	b410      	push	{r4}
 8007546:	3b01      	subs	r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	6093      	str	r3, [r2, #8]
 800754c:	da07      	bge.n	800755e <__sfputc_r+0x1c>
 800754e:	6994      	ldr	r4, [r2, #24]
 8007550:	42a3      	cmp	r3, r4
 8007552:	db01      	blt.n	8007558 <__sfputc_r+0x16>
 8007554:	290a      	cmp	r1, #10
 8007556:	d102      	bne.n	800755e <__sfputc_r+0x1c>
 8007558:	bc10      	pop	{r4}
 800755a:	f000 b931 	b.w	80077c0 <__swbuf_r>
 800755e:	6813      	ldr	r3, [r2, #0]
 8007560:	1c58      	adds	r0, r3, #1
 8007562:	6010      	str	r0, [r2, #0]
 8007564:	7019      	strb	r1, [r3, #0]
 8007566:	4608      	mov	r0, r1
 8007568:	bc10      	pop	{r4}
 800756a:	4770      	bx	lr

0800756c <__sfputs_r>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	4606      	mov	r6, r0
 8007570:	460f      	mov	r7, r1
 8007572:	4614      	mov	r4, r2
 8007574:	18d5      	adds	r5, r2, r3
 8007576:	42ac      	cmp	r4, r5
 8007578:	d101      	bne.n	800757e <__sfputs_r+0x12>
 800757a:	2000      	movs	r0, #0
 800757c:	e007      	b.n	800758e <__sfputs_r+0x22>
 800757e:	463a      	mov	r2, r7
 8007580:	4630      	mov	r0, r6
 8007582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007586:	f7ff ffdc 	bl	8007542 <__sfputc_r>
 800758a:	1c43      	adds	r3, r0, #1
 800758c:	d1f3      	bne.n	8007576 <__sfputs_r+0xa>
 800758e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007590 <_vfiprintf_r>:
 8007590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	460d      	mov	r5, r1
 8007596:	4614      	mov	r4, r2
 8007598:	4698      	mov	r8, r3
 800759a:	4606      	mov	r6, r0
 800759c:	b09d      	sub	sp, #116	@ 0x74
 800759e:	b118      	cbz	r0, 80075a8 <_vfiprintf_r+0x18>
 80075a0:	6a03      	ldr	r3, [r0, #32]
 80075a2:	b90b      	cbnz	r3, 80075a8 <_vfiprintf_r+0x18>
 80075a4:	f7fe f8e6 	bl	8005774 <__sinit>
 80075a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075aa:	07d9      	lsls	r1, r3, #31
 80075ac:	d405      	bmi.n	80075ba <_vfiprintf_r+0x2a>
 80075ae:	89ab      	ldrh	r3, [r5, #12]
 80075b0:	059a      	lsls	r2, r3, #22
 80075b2:	d402      	bmi.n	80075ba <_vfiprintf_r+0x2a>
 80075b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075b6:	f7fe fa0c 	bl	80059d2 <__retarget_lock_acquire_recursive>
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	071b      	lsls	r3, r3, #28
 80075be:	d501      	bpl.n	80075c4 <_vfiprintf_r+0x34>
 80075c0:	692b      	ldr	r3, [r5, #16]
 80075c2:	b99b      	cbnz	r3, 80075ec <_vfiprintf_r+0x5c>
 80075c4:	4629      	mov	r1, r5
 80075c6:	4630      	mov	r0, r6
 80075c8:	f000 f938 	bl	800783c <__swsetup_r>
 80075cc:	b170      	cbz	r0, 80075ec <_vfiprintf_r+0x5c>
 80075ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075d0:	07dc      	lsls	r4, r3, #31
 80075d2:	d504      	bpl.n	80075de <_vfiprintf_r+0x4e>
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295
 80075d8:	b01d      	add	sp, #116	@ 0x74
 80075da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075de:	89ab      	ldrh	r3, [r5, #12]
 80075e0:	0598      	lsls	r0, r3, #22
 80075e2:	d4f7      	bmi.n	80075d4 <_vfiprintf_r+0x44>
 80075e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075e6:	f7fe f9f5 	bl	80059d4 <__retarget_lock_release_recursive>
 80075ea:	e7f3      	b.n	80075d4 <_vfiprintf_r+0x44>
 80075ec:	2300      	movs	r3, #0
 80075ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80075f0:	2320      	movs	r3, #32
 80075f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075f6:	2330      	movs	r3, #48	@ 0x30
 80075f8:	f04f 0901 	mov.w	r9, #1
 80075fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007600:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80077ac <_vfiprintf_r+0x21c>
 8007604:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007608:	4623      	mov	r3, r4
 800760a:	469a      	mov	sl, r3
 800760c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007610:	b10a      	cbz	r2, 8007616 <_vfiprintf_r+0x86>
 8007612:	2a25      	cmp	r2, #37	@ 0x25
 8007614:	d1f9      	bne.n	800760a <_vfiprintf_r+0x7a>
 8007616:	ebba 0b04 	subs.w	fp, sl, r4
 800761a:	d00b      	beq.n	8007634 <_vfiprintf_r+0xa4>
 800761c:	465b      	mov	r3, fp
 800761e:	4622      	mov	r2, r4
 8007620:	4629      	mov	r1, r5
 8007622:	4630      	mov	r0, r6
 8007624:	f7ff ffa2 	bl	800756c <__sfputs_r>
 8007628:	3001      	adds	r0, #1
 800762a:	f000 80a7 	beq.w	800777c <_vfiprintf_r+0x1ec>
 800762e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007630:	445a      	add	r2, fp
 8007632:	9209      	str	r2, [sp, #36]	@ 0x24
 8007634:	f89a 3000 	ldrb.w	r3, [sl]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 809f 	beq.w	800777c <_vfiprintf_r+0x1ec>
 800763e:	2300      	movs	r3, #0
 8007640:	f04f 32ff 	mov.w	r2, #4294967295
 8007644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007648:	f10a 0a01 	add.w	sl, sl, #1
 800764c:	9304      	str	r3, [sp, #16]
 800764e:	9307      	str	r3, [sp, #28]
 8007650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007654:	931a      	str	r3, [sp, #104]	@ 0x68
 8007656:	4654      	mov	r4, sl
 8007658:	2205      	movs	r2, #5
 800765a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800765e:	4853      	ldr	r0, [pc, #332]	@ (80077ac <_vfiprintf_r+0x21c>)
 8007660:	f7fe f9b9 	bl	80059d6 <memchr>
 8007664:	9a04      	ldr	r2, [sp, #16]
 8007666:	b9d8      	cbnz	r0, 80076a0 <_vfiprintf_r+0x110>
 8007668:	06d1      	lsls	r1, r2, #27
 800766a:	bf44      	itt	mi
 800766c:	2320      	movmi	r3, #32
 800766e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007672:	0713      	lsls	r3, r2, #28
 8007674:	bf44      	itt	mi
 8007676:	232b      	movmi	r3, #43	@ 0x2b
 8007678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800767c:	f89a 3000 	ldrb.w	r3, [sl]
 8007680:	2b2a      	cmp	r3, #42	@ 0x2a
 8007682:	d015      	beq.n	80076b0 <_vfiprintf_r+0x120>
 8007684:	4654      	mov	r4, sl
 8007686:	2000      	movs	r0, #0
 8007688:	f04f 0c0a 	mov.w	ip, #10
 800768c:	9a07      	ldr	r2, [sp, #28]
 800768e:	4621      	mov	r1, r4
 8007690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007694:	3b30      	subs	r3, #48	@ 0x30
 8007696:	2b09      	cmp	r3, #9
 8007698:	d94b      	bls.n	8007732 <_vfiprintf_r+0x1a2>
 800769a:	b1b0      	cbz	r0, 80076ca <_vfiprintf_r+0x13a>
 800769c:	9207      	str	r2, [sp, #28]
 800769e:	e014      	b.n	80076ca <_vfiprintf_r+0x13a>
 80076a0:	eba0 0308 	sub.w	r3, r0, r8
 80076a4:	fa09 f303 	lsl.w	r3, r9, r3
 80076a8:	4313      	orrs	r3, r2
 80076aa:	46a2      	mov	sl, r4
 80076ac:	9304      	str	r3, [sp, #16]
 80076ae:	e7d2      	b.n	8007656 <_vfiprintf_r+0xc6>
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	1d19      	adds	r1, r3, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	9103      	str	r1, [sp, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	bfbb      	ittet	lt
 80076bc:	425b      	neglt	r3, r3
 80076be:	f042 0202 	orrlt.w	r2, r2, #2
 80076c2:	9307      	strge	r3, [sp, #28]
 80076c4:	9307      	strlt	r3, [sp, #28]
 80076c6:	bfb8      	it	lt
 80076c8:	9204      	strlt	r2, [sp, #16]
 80076ca:	7823      	ldrb	r3, [r4, #0]
 80076cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80076ce:	d10a      	bne.n	80076e6 <_vfiprintf_r+0x156>
 80076d0:	7863      	ldrb	r3, [r4, #1]
 80076d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80076d4:	d132      	bne.n	800773c <_vfiprintf_r+0x1ac>
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	3402      	adds	r4, #2
 80076da:	1d1a      	adds	r2, r3, #4
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	9203      	str	r2, [sp, #12]
 80076e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076e4:	9305      	str	r3, [sp, #20]
 80076e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80077b0 <_vfiprintf_r+0x220>
 80076ea:	2203      	movs	r2, #3
 80076ec:	4650      	mov	r0, sl
 80076ee:	7821      	ldrb	r1, [r4, #0]
 80076f0:	f7fe f971 	bl	80059d6 <memchr>
 80076f4:	b138      	cbz	r0, 8007706 <_vfiprintf_r+0x176>
 80076f6:	2240      	movs	r2, #64	@ 0x40
 80076f8:	9b04      	ldr	r3, [sp, #16]
 80076fa:	eba0 000a 	sub.w	r0, r0, sl
 80076fe:	4082      	lsls	r2, r0
 8007700:	4313      	orrs	r3, r2
 8007702:	3401      	adds	r4, #1
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800770a:	2206      	movs	r2, #6
 800770c:	4829      	ldr	r0, [pc, #164]	@ (80077b4 <_vfiprintf_r+0x224>)
 800770e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007712:	f7fe f960 	bl	80059d6 <memchr>
 8007716:	2800      	cmp	r0, #0
 8007718:	d03f      	beq.n	800779a <_vfiprintf_r+0x20a>
 800771a:	4b27      	ldr	r3, [pc, #156]	@ (80077b8 <_vfiprintf_r+0x228>)
 800771c:	bb1b      	cbnz	r3, 8007766 <_vfiprintf_r+0x1d6>
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	3307      	adds	r3, #7
 8007722:	f023 0307 	bic.w	r3, r3, #7
 8007726:	3308      	adds	r3, #8
 8007728:	9303      	str	r3, [sp, #12]
 800772a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800772c:	443b      	add	r3, r7
 800772e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007730:	e76a      	b.n	8007608 <_vfiprintf_r+0x78>
 8007732:	460c      	mov	r4, r1
 8007734:	2001      	movs	r0, #1
 8007736:	fb0c 3202 	mla	r2, ip, r2, r3
 800773a:	e7a8      	b.n	800768e <_vfiprintf_r+0xfe>
 800773c:	2300      	movs	r3, #0
 800773e:	f04f 0c0a 	mov.w	ip, #10
 8007742:	4619      	mov	r1, r3
 8007744:	3401      	adds	r4, #1
 8007746:	9305      	str	r3, [sp, #20]
 8007748:	4620      	mov	r0, r4
 800774a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800774e:	3a30      	subs	r2, #48	@ 0x30
 8007750:	2a09      	cmp	r2, #9
 8007752:	d903      	bls.n	800775c <_vfiprintf_r+0x1cc>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0c6      	beq.n	80076e6 <_vfiprintf_r+0x156>
 8007758:	9105      	str	r1, [sp, #20]
 800775a:	e7c4      	b.n	80076e6 <_vfiprintf_r+0x156>
 800775c:	4604      	mov	r4, r0
 800775e:	2301      	movs	r3, #1
 8007760:	fb0c 2101 	mla	r1, ip, r1, r2
 8007764:	e7f0      	b.n	8007748 <_vfiprintf_r+0x1b8>
 8007766:	ab03      	add	r3, sp, #12
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	462a      	mov	r2, r5
 800776c:	4630      	mov	r0, r6
 800776e:	4b13      	ldr	r3, [pc, #76]	@ (80077bc <_vfiprintf_r+0x22c>)
 8007770:	a904      	add	r1, sp, #16
 8007772:	f7fd fbb5 	bl	8004ee0 <_printf_float>
 8007776:	4607      	mov	r7, r0
 8007778:	1c78      	adds	r0, r7, #1
 800777a:	d1d6      	bne.n	800772a <_vfiprintf_r+0x19a>
 800777c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800777e:	07d9      	lsls	r1, r3, #31
 8007780:	d405      	bmi.n	800778e <_vfiprintf_r+0x1fe>
 8007782:	89ab      	ldrh	r3, [r5, #12]
 8007784:	059a      	lsls	r2, r3, #22
 8007786:	d402      	bmi.n	800778e <_vfiprintf_r+0x1fe>
 8007788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800778a:	f7fe f923 	bl	80059d4 <__retarget_lock_release_recursive>
 800778e:	89ab      	ldrh	r3, [r5, #12]
 8007790:	065b      	lsls	r3, r3, #25
 8007792:	f53f af1f 	bmi.w	80075d4 <_vfiprintf_r+0x44>
 8007796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007798:	e71e      	b.n	80075d8 <_vfiprintf_r+0x48>
 800779a:	ab03      	add	r3, sp, #12
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	462a      	mov	r2, r5
 80077a0:	4630      	mov	r0, r6
 80077a2:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <_vfiprintf_r+0x22c>)
 80077a4:	a904      	add	r1, sp, #16
 80077a6:	f7fd fe39 	bl	800541c <_printf_i>
 80077aa:	e7e4      	b.n	8007776 <_vfiprintf_r+0x1e6>
 80077ac:	08007ce8 	.word	0x08007ce8
 80077b0:	08007cee 	.word	0x08007cee
 80077b4:	08007cf2 	.word	0x08007cf2
 80077b8:	08004ee1 	.word	0x08004ee1
 80077bc:	0800756d 	.word	0x0800756d

080077c0 <__swbuf_r>:
 80077c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c2:	460e      	mov	r6, r1
 80077c4:	4614      	mov	r4, r2
 80077c6:	4605      	mov	r5, r0
 80077c8:	b118      	cbz	r0, 80077d2 <__swbuf_r+0x12>
 80077ca:	6a03      	ldr	r3, [r0, #32]
 80077cc:	b90b      	cbnz	r3, 80077d2 <__swbuf_r+0x12>
 80077ce:	f7fd ffd1 	bl	8005774 <__sinit>
 80077d2:	69a3      	ldr	r3, [r4, #24]
 80077d4:	60a3      	str	r3, [r4, #8]
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	071a      	lsls	r2, r3, #28
 80077da:	d501      	bpl.n	80077e0 <__swbuf_r+0x20>
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	b943      	cbnz	r3, 80077f2 <__swbuf_r+0x32>
 80077e0:	4621      	mov	r1, r4
 80077e2:	4628      	mov	r0, r5
 80077e4:	f000 f82a 	bl	800783c <__swsetup_r>
 80077e8:	b118      	cbz	r0, 80077f2 <__swbuf_r+0x32>
 80077ea:	f04f 37ff 	mov.w	r7, #4294967295
 80077ee:	4638      	mov	r0, r7
 80077f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	6922      	ldr	r2, [r4, #16]
 80077f6:	b2f6      	uxtb	r6, r6
 80077f8:	1a98      	subs	r0, r3, r2
 80077fa:	6963      	ldr	r3, [r4, #20]
 80077fc:	4637      	mov	r7, r6
 80077fe:	4283      	cmp	r3, r0
 8007800:	dc05      	bgt.n	800780e <__swbuf_r+0x4e>
 8007802:	4621      	mov	r1, r4
 8007804:	4628      	mov	r0, r5
 8007806:	f7ff fda9 	bl	800735c <_fflush_r>
 800780a:	2800      	cmp	r0, #0
 800780c:	d1ed      	bne.n	80077ea <__swbuf_r+0x2a>
 800780e:	68a3      	ldr	r3, [r4, #8]
 8007810:	3b01      	subs	r3, #1
 8007812:	60a3      	str	r3, [r4, #8]
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	6022      	str	r2, [r4, #0]
 800781a:	701e      	strb	r6, [r3, #0]
 800781c:	6962      	ldr	r2, [r4, #20]
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	429a      	cmp	r2, r3
 8007822:	d004      	beq.n	800782e <__swbuf_r+0x6e>
 8007824:	89a3      	ldrh	r3, [r4, #12]
 8007826:	07db      	lsls	r3, r3, #31
 8007828:	d5e1      	bpl.n	80077ee <__swbuf_r+0x2e>
 800782a:	2e0a      	cmp	r6, #10
 800782c:	d1df      	bne.n	80077ee <__swbuf_r+0x2e>
 800782e:	4621      	mov	r1, r4
 8007830:	4628      	mov	r0, r5
 8007832:	f7ff fd93 	bl	800735c <_fflush_r>
 8007836:	2800      	cmp	r0, #0
 8007838:	d0d9      	beq.n	80077ee <__swbuf_r+0x2e>
 800783a:	e7d6      	b.n	80077ea <__swbuf_r+0x2a>

0800783c <__swsetup_r>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	4b29      	ldr	r3, [pc, #164]	@ (80078e4 <__swsetup_r+0xa8>)
 8007840:	4605      	mov	r5, r0
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	460c      	mov	r4, r1
 8007846:	b118      	cbz	r0, 8007850 <__swsetup_r+0x14>
 8007848:	6a03      	ldr	r3, [r0, #32]
 800784a:	b90b      	cbnz	r3, 8007850 <__swsetup_r+0x14>
 800784c:	f7fd ff92 	bl	8005774 <__sinit>
 8007850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007854:	0719      	lsls	r1, r3, #28
 8007856:	d422      	bmi.n	800789e <__swsetup_r+0x62>
 8007858:	06da      	lsls	r2, r3, #27
 800785a:	d407      	bmi.n	800786c <__swsetup_r+0x30>
 800785c:	2209      	movs	r2, #9
 800785e:	602a      	str	r2, [r5, #0]
 8007860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007864:	f04f 30ff 	mov.w	r0, #4294967295
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	e033      	b.n	80078d4 <__swsetup_r+0x98>
 800786c:	0758      	lsls	r0, r3, #29
 800786e:	d512      	bpl.n	8007896 <__swsetup_r+0x5a>
 8007870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007872:	b141      	cbz	r1, 8007886 <__swsetup_r+0x4a>
 8007874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007878:	4299      	cmp	r1, r3
 800787a:	d002      	beq.n	8007882 <__swsetup_r+0x46>
 800787c:	4628      	mov	r0, r5
 800787e:	f7fe ff17 	bl	80066b0 <_free_r>
 8007882:	2300      	movs	r3, #0
 8007884:	6363      	str	r3, [r4, #52]	@ 0x34
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800788c:	81a3      	strh	r3, [r4, #12]
 800788e:	2300      	movs	r3, #0
 8007890:	6063      	str	r3, [r4, #4]
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	f043 0308 	orr.w	r3, r3, #8
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	b94b      	cbnz	r3, 80078b6 <__swsetup_r+0x7a>
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078ac:	d003      	beq.n	80078b6 <__swsetup_r+0x7a>
 80078ae:	4621      	mov	r1, r4
 80078b0:	4628      	mov	r0, r5
 80078b2:	f000 f882 	bl	80079ba <__smakebuf_r>
 80078b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ba:	f013 0201 	ands.w	r2, r3, #1
 80078be:	d00a      	beq.n	80078d6 <__swsetup_r+0x9a>
 80078c0:	2200      	movs	r2, #0
 80078c2:	60a2      	str	r2, [r4, #8]
 80078c4:	6962      	ldr	r2, [r4, #20]
 80078c6:	4252      	negs	r2, r2
 80078c8:	61a2      	str	r2, [r4, #24]
 80078ca:	6922      	ldr	r2, [r4, #16]
 80078cc:	b942      	cbnz	r2, 80078e0 <__swsetup_r+0xa4>
 80078ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078d2:	d1c5      	bne.n	8007860 <__swsetup_r+0x24>
 80078d4:	bd38      	pop	{r3, r4, r5, pc}
 80078d6:	0799      	lsls	r1, r3, #30
 80078d8:	bf58      	it	pl
 80078da:	6962      	ldrpl	r2, [r4, #20]
 80078dc:	60a2      	str	r2, [r4, #8]
 80078de:	e7f4      	b.n	80078ca <__swsetup_r+0x8e>
 80078e0:	2000      	movs	r0, #0
 80078e2:	e7f7      	b.n	80078d4 <__swsetup_r+0x98>
 80078e4:	20000018 	.word	0x20000018

080078e8 <_raise_r>:
 80078e8:	291f      	cmp	r1, #31
 80078ea:	b538      	push	{r3, r4, r5, lr}
 80078ec:	4605      	mov	r5, r0
 80078ee:	460c      	mov	r4, r1
 80078f0:	d904      	bls.n	80078fc <_raise_r+0x14>
 80078f2:	2316      	movs	r3, #22
 80078f4:	6003      	str	r3, [r0, #0]
 80078f6:	f04f 30ff 	mov.w	r0, #4294967295
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80078fe:	b112      	cbz	r2, 8007906 <_raise_r+0x1e>
 8007900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007904:	b94b      	cbnz	r3, 800791a <_raise_r+0x32>
 8007906:	4628      	mov	r0, r5
 8007908:	f000 f830 	bl	800796c <_getpid_r>
 800790c:	4622      	mov	r2, r4
 800790e:	4601      	mov	r1, r0
 8007910:	4628      	mov	r0, r5
 8007912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007916:	f000 b817 	b.w	8007948 <_kill_r>
 800791a:	2b01      	cmp	r3, #1
 800791c:	d00a      	beq.n	8007934 <_raise_r+0x4c>
 800791e:	1c59      	adds	r1, r3, #1
 8007920:	d103      	bne.n	800792a <_raise_r+0x42>
 8007922:	2316      	movs	r3, #22
 8007924:	6003      	str	r3, [r0, #0]
 8007926:	2001      	movs	r0, #1
 8007928:	e7e7      	b.n	80078fa <_raise_r+0x12>
 800792a:	2100      	movs	r1, #0
 800792c:	4620      	mov	r0, r4
 800792e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007932:	4798      	blx	r3
 8007934:	2000      	movs	r0, #0
 8007936:	e7e0      	b.n	80078fa <_raise_r+0x12>

08007938 <raise>:
 8007938:	4b02      	ldr	r3, [pc, #8]	@ (8007944 <raise+0xc>)
 800793a:	4601      	mov	r1, r0
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	f7ff bfd3 	b.w	80078e8 <_raise_r>
 8007942:	bf00      	nop
 8007944:	20000018 	.word	0x20000018

08007948 <_kill_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	2300      	movs	r3, #0
 800794c:	4d06      	ldr	r5, [pc, #24]	@ (8007968 <_kill_r+0x20>)
 800794e:	4604      	mov	r4, r0
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	602b      	str	r3, [r5, #0]
 8007956:	f7f9 fe6c 	bl	8001632 <_kill>
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	d102      	bne.n	8007964 <_kill_r+0x1c>
 800795e:	682b      	ldr	r3, [r5, #0]
 8007960:	b103      	cbz	r3, 8007964 <_kill_r+0x1c>
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	bd38      	pop	{r3, r4, r5, pc}
 8007966:	bf00      	nop
 8007968:	20000574 	.word	0x20000574

0800796c <_getpid_r>:
 800796c:	f7f9 be5a 	b.w	8001624 <_getpid>

08007970 <__swhatbuf_r>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	460c      	mov	r4, r1
 8007974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007978:	4615      	mov	r5, r2
 800797a:	2900      	cmp	r1, #0
 800797c:	461e      	mov	r6, r3
 800797e:	b096      	sub	sp, #88	@ 0x58
 8007980:	da0c      	bge.n	800799c <__swhatbuf_r+0x2c>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	2100      	movs	r1, #0
 8007986:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800798a:	bf14      	ite	ne
 800798c:	2340      	movne	r3, #64	@ 0x40
 800798e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007992:	2000      	movs	r0, #0
 8007994:	6031      	str	r1, [r6, #0]
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	b016      	add	sp, #88	@ 0x58
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	466a      	mov	r2, sp
 800799e:	f000 f849 	bl	8007a34 <_fstat_r>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	dbed      	blt.n	8007982 <__swhatbuf_r+0x12>
 80079a6:	9901      	ldr	r1, [sp, #4]
 80079a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079b0:	4259      	negs	r1, r3
 80079b2:	4159      	adcs	r1, r3
 80079b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079b8:	e7eb      	b.n	8007992 <__swhatbuf_r+0x22>

080079ba <__smakebuf_r>:
 80079ba:	898b      	ldrh	r3, [r1, #12]
 80079bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079be:	079d      	lsls	r5, r3, #30
 80079c0:	4606      	mov	r6, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	d507      	bpl.n	80079d6 <__smakebuf_r+0x1c>
 80079c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079ca:	6023      	str	r3, [r4, #0]
 80079cc:	6123      	str	r3, [r4, #16]
 80079ce:	2301      	movs	r3, #1
 80079d0:	6163      	str	r3, [r4, #20]
 80079d2:	b003      	add	sp, #12
 80079d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d6:	466a      	mov	r2, sp
 80079d8:	ab01      	add	r3, sp, #4
 80079da:	f7ff ffc9 	bl	8007970 <__swhatbuf_r>
 80079de:	9f00      	ldr	r7, [sp, #0]
 80079e0:	4605      	mov	r5, r0
 80079e2:	4639      	mov	r1, r7
 80079e4:	4630      	mov	r0, r6
 80079e6:	f7fe fed5 	bl	8006794 <_malloc_r>
 80079ea:	b948      	cbnz	r0, 8007a00 <__smakebuf_r+0x46>
 80079ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f0:	059a      	lsls	r2, r3, #22
 80079f2:	d4ee      	bmi.n	80079d2 <__smakebuf_r+0x18>
 80079f4:	f023 0303 	bic.w	r3, r3, #3
 80079f8:	f043 0302 	orr.w	r3, r3, #2
 80079fc:	81a3      	strh	r3, [r4, #12]
 80079fe:	e7e2      	b.n	80079c6 <__smakebuf_r+0xc>
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a0a:	81a3      	strh	r3, [r4, #12]
 8007a0c:	9b01      	ldr	r3, [sp, #4]
 8007a0e:	6020      	str	r0, [r4, #0]
 8007a10:	b15b      	cbz	r3, 8007a2a <__smakebuf_r+0x70>
 8007a12:	4630      	mov	r0, r6
 8007a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a18:	f000 f81e 	bl	8007a58 <_isatty_r>
 8007a1c:	b128      	cbz	r0, 8007a2a <__smakebuf_r+0x70>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	f023 0303 	bic.w	r3, r3, #3
 8007a24:	f043 0301 	orr.w	r3, r3, #1
 8007a28:	81a3      	strh	r3, [r4, #12]
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	431d      	orrs	r5, r3
 8007a2e:	81a5      	strh	r5, [r4, #12]
 8007a30:	e7cf      	b.n	80079d2 <__smakebuf_r+0x18>
	...

08007a34 <_fstat_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	2300      	movs	r3, #0
 8007a38:	4d06      	ldr	r5, [pc, #24]	@ (8007a54 <_fstat_r+0x20>)
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	4611      	mov	r1, r2
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	f7f9 fe55 	bl	80016f0 <_fstat>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	d102      	bne.n	8007a50 <_fstat_r+0x1c>
 8007a4a:	682b      	ldr	r3, [r5, #0]
 8007a4c:	b103      	cbz	r3, 8007a50 <_fstat_r+0x1c>
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	bd38      	pop	{r3, r4, r5, pc}
 8007a52:	bf00      	nop
 8007a54:	20000574 	.word	0x20000574

08007a58 <_isatty_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	4d05      	ldr	r5, [pc, #20]	@ (8007a74 <_isatty_r+0x1c>)
 8007a5e:	4604      	mov	r4, r0
 8007a60:	4608      	mov	r0, r1
 8007a62:	602b      	str	r3, [r5, #0]
 8007a64:	f7f9 fe53 	bl	800170e <_isatty>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	d102      	bne.n	8007a72 <_isatty_r+0x1a>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	b103      	cbz	r3, 8007a72 <_isatty_r+0x1a>
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	20000574 	.word	0x20000574

08007a78 <_init>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr

08007a84 <_fini>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr
