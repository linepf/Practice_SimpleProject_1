
practice_SimpleProject_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000809c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080081b0  080081b0  000091b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008590  08008590  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008590  08008590  00009590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008598  08008598  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008598  08008598  00009598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800859c  0800859c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080085a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001d4  08008774  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08008774  0000a4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001326d  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030eb  00000000  00000000  0001d46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00020558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e59  00000000  00000000  000217b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1cc  00000000  00000000  00022609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001931f  00000000  00000000  0003d7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f91  00000000  00000000  00056af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eaa85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dec  00000000  00000000  000eaac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f08b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008194 	.word	0x08008194

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008194 	.word	0x08008194

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f000 fcd6 	bl	8001938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f810 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f000 f9be 	bl	8001310 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f94:	f000 f99e 	bl	80012d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f98:	f000 f866 	bl	8001068 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f9c:	f000 f970 	bl	8001280 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fa0:	f000 f8cc 	bl	800113c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000fa4:	f000 f8f8 	bl	8001198 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  user_main();
 8000fa8:	f004 fa46 	bl	8005438 <user_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <main+0x28>

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	@ 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fba:	2228      	movs	r2, #40	@ 0x28
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f005 f816 	bl	8005ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000fea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ffe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001002:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001008:	4618      	mov	r0, r3
 800100a:	f002 f8c5 	bl	8003198 <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001014:	f000 f9de 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	230f      	movs	r3, #15
 800101a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001028:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	2102      	movs	r1, #2
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fb31 	bl	800369c <HAL_RCC_ClockConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001040:	f000 f9c8 	bl	80013d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001044:	2302      	movs	r3, #2
 8001046:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001048:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800104c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4618      	mov	r0, r3
 8001052:	f002 fcb3 	bl	80039bc <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800105c:	f000 f9ba 	bl	80013d4 <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3750      	adds	r7, #80	@ 0x50
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001078:	4b2e      	ldr	r3, [pc, #184]	@ (8001134 <MX_ADC1_Init+0xcc>)
 800107a:	4a2f      	ldr	r2, [pc, #188]	@ (8001138 <MX_ADC1_Init+0xd0>)
 800107c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800107e:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <MX_ADC1_Init+0xcc>)
 8001080:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001084:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001086:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <MX_ADC1_Init+0xcc>)
 8001088:	2201      	movs	r2, #1
 800108a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108c:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <MX_ADC1_Init+0xcc>)
 800108e:	2200      	movs	r2, #0
 8001090:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001092:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <MX_ADC1_Init+0xcc>)
 8001094:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001098:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109a:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <MX_ADC1_Init+0xcc>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80010a0:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <MX_ADC1_Init+0xcc>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a6:	4823      	ldr	r0, [pc, #140]	@ (8001134 <MX_ADC1_Init+0xcc>)
 80010a8:	f000 fccc 	bl	8001a44 <HAL_ADC_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010b2:	f000 f98f 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80010be:	2305      	movs	r3, #5
 80010c0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	481b      	ldr	r0, [pc, #108]	@ (8001134 <MX_ADC1_Init+0xcc>)
 80010c8:	f000 fe66 	bl	8001d98 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010d2:	f000 f97f 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010da:	2302      	movs	r3, #2
 80010dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4814      	ldr	r0, [pc, #80]	@ (8001134 <MX_ADC1_Init+0xcc>)
 80010e4:	f000 fe58 	bl	8001d98 <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010ee:	f000 f971 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010f6:	2303      	movs	r3, #3
 80010f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	@ (8001134 <MX_ADC1_Init+0xcc>)
 8001100:	f000 fe4a 	bl	8001d98 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800110a:	f000 f963 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800110e:	2310      	movs	r3, #16
 8001110:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001112:	2304      	movs	r3, #4
 8001114:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	@ (8001134 <MX_ADC1_Init+0xcc>)
 800111c:	f000 fe3c 	bl	8001d98 <HAL_ADC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001126:	f000 f955 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001f0 	.word	0x200001f0
 8001138:	40012400 	.word	0x40012400

0800113c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <MX_I2C1_Init+0x50>)
 8001142:	4a13      	ldr	r2, [pc, #76]	@ (8001190 <MX_I2C1_Init+0x54>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_I2C1_Init+0x50>)
 8001148:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <MX_I2C1_Init+0x58>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <MX_I2C1_Init+0x50>)
 800115a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800115e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_I2C1_Init+0x50>)
 800117a:	f001 fb71 	bl	8002860 <HAL_I2C_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 f926 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000264 	.word	0x20000264
 8001190:	40005400 	.word	0x40005400
 8001194:	000186a0 	.word	0x000186a0

08001198 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001278 <MX_TIM1_Init+0xe0>)
 80011c4:	4a2d      	ldr	r2, [pc, #180]	@ (800127c <MX_TIM1_Init+0xe4>)
 80011c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80011c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001278 <MX_TIM1_Init+0xe0>)
 80011ca:	2247      	movs	r2, #71	@ 0x47
 80011cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <MX_TIM1_Init+0xe0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80011d4:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <MX_TIM1_Init+0xe0>)
 80011d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <MX_TIM1_Init+0xe0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <MX_TIM1_Init+0xe0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <MX_TIM1_Init+0xe0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ee:	4822      	ldr	r0, [pc, #136]	@ (8001278 <MX_TIM1_Init+0xe0>)
 80011f0:	f002 fc9a 	bl	8003b28 <HAL_TIM_Base_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80011fa:	f000 f8eb 	bl	80013d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001202:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	4619      	mov	r1, r3
 800120a:	481b      	ldr	r0, [pc, #108]	@ (8001278 <MX_TIM1_Init+0xe0>)
 800120c:	f002 ffcc 	bl	80041a8 <HAL_TIM_ConfigClockSource>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001216:	f000 f8dd 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800121a:	4817      	ldr	r0, [pc, #92]	@ (8001278 <MX_TIM1_Init+0xe0>)
 800121c:	f002 fcd3 	bl	8003bc6 <HAL_TIM_IC_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001226:	f000 f8d5 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4619      	mov	r1, r3
 8001238:	480f      	ldr	r0, [pc, #60]	@ (8001278 <MX_TIM1_Init+0xe0>)
 800123a:	f003 fb1b 	bl	8004874 <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001244:	f000 f8c6 	bl	80013d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001248:	2300      	movs	r3, #0
 800124a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800124c:	2301      	movs	r3, #1
 800124e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <MX_TIM1_Init+0xe0>)
 8001260:	f002 ff06 	bl	8004070 <HAL_TIM_IC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800126a:	f000 f8b3 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	@ 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200002b8 	.word	0x200002b8
 800127c:	40012c00 	.word	0x40012c00

08001280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 8001286:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <MX_USART1_UART_Init+0x50>)
 8001288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 800128c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_USART1_UART_Init+0x4c>)
 80012b8:	f003 fb4c 	bl	8004954 <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012c2:	f000 f887 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000300 	.word	0x20000300
 80012d0:	40013800 	.word	0x40013800

080012d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_DMA_Init+0x38>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <MX_DMA_Init+0x38>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6153      	str	r3, [r2, #20]
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_DMA_Init+0x38>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	200b      	movs	r0, #11
 80012f8:	f000 ff67 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012fc:	200b      	movs	r0, #11
 80012fe:	f000 ff80 	bl	8002202 <HAL_NVIC_EnableIRQ>

}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001324:	4b28      	ldr	r3, [pc, #160]	@ (80013c8 <MX_GPIO_Init+0xb8>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a27      	ldr	r2, [pc, #156]	@ (80013c8 <MX_GPIO_Init+0xb8>)
 800132a:	f043 0320 	orr.w	r3, r3, #32
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <MX_GPIO_Init+0xb8>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <MX_GPIO_Init+0xb8>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a21      	ldr	r2, [pc, #132]	@ (80013c8 <MX_GPIO_Init+0xb8>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <MX_GPIO_Init+0xb8>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <MX_GPIO_Init+0xb8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a1b      	ldr	r2, [pc, #108]	@ (80013c8 <MX_GPIO_Init+0xb8>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <MX_GPIO_Init+0xb8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001372:	4816      	ldr	r0, [pc, #88]	@ (80013cc <MX_GPIO_Init+0xbc>)
 8001374:	f001 fa5b 	bl	800282e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800137e:	4814      	ldr	r0, [pc, #80]	@ (80013d0 <MX_GPIO_Init+0xc0>)
 8001380:	f001 fa55 	bl	800282e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8001384:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	480b      	ldr	r0, [pc, #44]	@ (80013cc <MX_GPIO_Init+0xbc>)
 800139e:	f001 f8ab 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80013a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_GPIO_Init+0xc0>)
 80013bc:	f001 f89c 	bl	80024f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010c00 	.word	0x40010c00
 80013d0:	40010800 	.word	0x40010800

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <Error_Handler+0x8>

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <HAL_MspInit+0x5c>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	4a14      	ldr	r2, [pc, #80]	@ (800143c <HAL_MspInit+0x5c>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6193      	str	r3, [r2, #24]
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_MspInit+0x5c>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <HAL_MspInit+0x5c>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a0e      	ldr	r2, [pc, #56]	@ (800143c <HAL_MspInit+0x5c>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <HAL_MspInit+0x5c>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_MspInit+0x60>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <HAL_MspInit+0x60>)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000

08001444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a2c      	ldr	r2, [pc, #176]	@ (8001510 <HAL_ADC_MspInit+0xcc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d151      	bne.n	8001508 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001464:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <HAL_ADC_MspInit+0xd0>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a2a      	ldr	r2, [pc, #168]	@ (8001514 <HAL_ADC_MspInit+0xd0>)
 800146a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b28      	ldr	r3, [pc, #160]	@ (8001514 <HAL_ADC_MspInit+0xd0>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <HAL_ADC_MspInit+0xd0>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a24      	ldr	r2, [pc, #144]	@ (8001514 <HAL_ADC_MspInit+0xd0>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <HAL_ADC_MspInit+0xd0>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001494:	2307      	movs	r3, #7
 8001496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001498:	2303      	movs	r3, #3
 800149a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4619      	mov	r1, r3
 80014a2:	481d      	ldr	r0, [pc, #116]	@ (8001518 <HAL_ADC_MspInit+0xd4>)
 80014a4:	f001 f828 	bl	80024f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 80014aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001520 <HAL_ADC_MspInit+0xdc>)
 80014ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b4:	4b19      	ldr	r3, [pc, #100]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 80014bc:	2280      	movs	r2, #128	@ 0x80
 80014be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 80014c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 80014ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 80014d2:	2220      	movs	r2, #32
 80014d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014dc:	480f      	ldr	r0, [pc, #60]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 80014de:	f000 feab 	bl	8002238 <HAL_DMA_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80014e8:	f7ff ff74 	bl	80013d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a0b      	ldr	r2, [pc, #44]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 80014f0:	621a      	str	r2, [r3, #32]
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2012      	movs	r0, #18
 80014fe:	f000 fe64 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001502:	2012      	movs	r0, #18
 8001504:	f000 fe7d 	bl	8002202 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40012400 	.word	0x40012400
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800
 800151c:	20000220 	.word	0x20000220
 8001520:	40020008 	.word	0x40020008

08001524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a15      	ldr	r2, [pc, #84]	@ (8001594 <HAL_I2C_MspInit+0x70>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d123      	bne.n	800158c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <HAL_I2C_MspInit+0x74>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a13      	ldr	r2, [pc, #76]	@ (8001598 <HAL_I2C_MspInit+0x74>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_I2C_MspInit+0x74>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800155c:	23c0      	movs	r3, #192	@ 0xc0
 800155e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4619      	mov	r1, r3
 800156e:	480b      	ldr	r0, [pc, #44]	@ (800159c <HAL_I2C_MspInit+0x78>)
 8001570:	f000 ffc2 	bl	80024f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_I2C_MspInit+0x74>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_I2C_MspInit+0x74>)
 800157a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800157e:	61d3      	str	r3, [r2, #28]
 8001580:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_I2C_MspInit+0x74>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40005400 	.word	0x40005400
 8001598:	40021000 	.word	0x40021000
 800159c:	40010c00 	.word	0x40010c00

080015a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001624 <HAL_TIM_Base_MspInit+0x84>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d12c      	bne.n	800161a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <HAL_TIM_Base_MspInit+0x88>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a18      	ldr	r2, [pc, #96]	@ (8001628 <HAL_TIM_Base_MspInit+0x88>)
 80015c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_TIM_Base_MspInit+0x88>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_TIM_Base_MspInit+0x88>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <HAL_TIM_Base_MspInit+0x88>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <HAL_TIM_Base_MspInit+0x88>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	4619      	mov	r1, r3
 8001604:	4809      	ldr	r0, [pc, #36]	@ (800162c <HAL_TIM_Base_MspInit+0x8c>)
 8001606:	f000 ff77 	bl	80024f8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	201b      	movs	r0, #27
 8001610:	f000 fddb 	bl	80021ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001614:	201b      	movs	r0, #27
 8001616:	f000 fdf4 	bl	8002202 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800161a:	bf00      	nop
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40012c00 	.word	0x40012c00
 8001628:	40021000 	.word	0x40021000
 800162c:	40010800 	.word	0x40010800

08001630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1c      	ldr	r2, [pc, #112]	@ (80016bc <HAL_UART_MspInit+0x8c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d131      	bne.n	80016b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <HAL_UART_MspInit+0x90>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a1a      	ldr	r2, [pc, #104]	@ (80016c0 <HAL_UART_MspInit+0x90>)
 8001656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <HAL_UART_MspInit+0x90>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_UART_MspInit+0x90>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <HAL_UART_MspInit+0x90>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_UART_MspInit+0x90>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001680:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001684:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	4619      	mov	r1, r3
 8001694:	480b      	ldr	r0, [pc, #44]	@ (80016c4 <HAL_UART_MspInit+0x94>)
 8001696:	f000 ff2f 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800169a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800169e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	4619      	mov	r1, r3
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <HAL_UART_MspInit+0x94>)
 80016b0:	f000 ff22 	bl	80024f8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80016b4:	bf00      	nop
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010800 	.word	0x40010800

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <NMI_Handler+0x4>

080016d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <MemManage_Handler+0x4>

080016e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <UsageFault_Handler+0x4>

080016f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 f954 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <DMA1_Channel1_IRQHandler+0x10>)
 8001726:	f000 fde1 	bl	80022ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000220 	.word	0x20000220

08001734 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <ADC1_2_IRQHandler+0x10>)
 800173a:	f000 fa5b 	bl	8001bf4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001f0 	.word	0x200001f0

08001748 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <TIM1_CC_IRQHandler+0x10>)
 800174e:	f002 fb9f 	bl	8003e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200002b8 	.word	0x200002b8

0800175c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return 1;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <_kill>:

int _kill(int pid, int sig)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001774:	f004 fc8e 	bl	8006094 <__errno>
 8001778:	4603      	mov	r3, r0
 800177a:	2216      	movs	r2, #22
 800177c:	601a      	str	r2, [r3, #0]
  return -1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_exit>:

void _exit (int status)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001792:	f04f 31ff 	mov.w	r1, #4294967295
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffe7 	bl	800176a <_kill>
  while (1) {}    /* Make sure we hang here */
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <_exit+0x12>

080017a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e00a      	b.n	80017c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017b2:	f3af 8000 	nop.w
 80017b6:	4601      	mov	r1, r0
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	60ba      	str	r2, [r7, #8]
 80017be:	b2ca      	uxtb	r2, r1
 80017c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbf0      	blt.n	80017b2 <_read+0x12>
  }

  return len;
 80017d0:	687b      	ldr	r3, [r7, #4]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e009      	b.n	8001800 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf1      	blt.n	80017ec <_write+0x12>
  }
  return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_close>:

int _close(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001838:	605a      	str	r2, [r3, #4]
  return 0;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <_isatty>:

int _isatty(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
	...

08001874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800187c:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <_sbrk+0x5c>)
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <_sbrk+0x60>)
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001888:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <_sbrk+0x64>)
 8001892:	4a12      	ldr	r2, [pc, #72]	@ (80018dc <_sbrk+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001896:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d207      	bcs.n	80018b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a4:	f004 fbf6 	bl	8006094 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20005000 	.word	0x20005000
 80018d4:	00000400 	.word	0x00000400
 80018d8:	20000348 	.word	0x20000348
 80018dc:	200004b8 	.word	0x200004b8

080018e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018ec:	f7ff fff8 	bl	80018e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f0:	480b      	ldr	r0, [pc, #44]	@ (8001920 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018f2:	490c      	ldr	r1, [pc, #48]	@ (8001924 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001928 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a09      	ldr	r2, [pc, #36]	@ (800192c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001908:	4c09      	ldr	r4, [pc, #36]	@ (8001930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001916:	f004 fbc3 	bl	80060a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800191a:	f7ff fb33 	bl	8000f84 <main>
  bx lr
 800191e:	4770      	bx	lr
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001928:	080085a0 	.word	0x080085a0
  ldr r2, =_sbss
 800192c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001930:	200004b8 	.word	0x200004b8

08001934 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <CAN1_RX1_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193c:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <HAL_Init+0x28>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	@ (8001960 <HAL_Init+0x28>)
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 fc33 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194e:	200f      	movs	r0, #15
 8001950:	f000 f808 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff fd44 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40022000 	.word	0x40022000

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196c:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_InitTick+0x54>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_InitTick+0x58>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fc4b 	bl	800221e <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00e      	b.n	80019b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d80a      	bhi.n	80019ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 fc13 	bl	80021ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4a06      	ldr	r2, [pc, #24]	@ (80019c0 <HAL_InitTick+0x5c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000008 	.word	0x20000008
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_IncTick+0x1c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <HAL_IncTick+0x20>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a03      	ldr	r2, [pc, #12]	@ (80019e4 <HAL_IncTick+0x20>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000008 	.word	0x20000008
 80019e4:	2000034c 	.word	0x2000034c

080019e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b02      	ldr	r3, [pc, #8]	@ (80019f8 <HAL_GetTick+0x10>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	2000034c 	.word	0x2000034c

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff fff0 	bl	80019e8 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <HAL_Delay+0x44>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffe0 	bl	80019e8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000008 	.word	0x20000008

08001a44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0be      	b.n	8001be4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fcde 	bl	8001444 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fa7d 	bl	8001f88 <ADC_ConversionStop_Disable>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8099 	bne.w	8001bd2 <HAL_ADC_Init+0x18e>
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 8095 	bne.w	8001bd2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ab0:	f023 0302 	bic.w	r3, r3, #2
 8001ab4:	f043 0202 	orr.w	r2, r3, #2
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ac4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7b1b      	ldrb	r3, [r3, #12]
 8001aca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001acc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001adc:	d003      	beq.n	8001ae6 <HAL_ADC_Init+0xa2>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d102      	bne.n	8001aec <HAL_ADC_Init+0xa8>
 8001ae6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aea:	e000      	b.n	8001aee <HAL_ADC_Init+0xaa>
 8001aec:	2300      	movs	r3, #0
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7d1b      	ldrb	r3, [r3, #20]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d119      	bne.n	8001b30 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7b1b      	ldrb	r3, [r3, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	035a      	lsls	r2, r3, #13
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	e00b      	b.n	8001b30 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	4b28      	ldr	r3, [pc, #160]	@ (8001bec <HAL_ADC_Init+0x1a8>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b60:	d003      	beq.n	8001b6a <HAL_ADC_Init+0x126>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d104      	bne.n	8001b74 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	051b      	lsls	r3, r3, #20
 8001b72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	4b18      	ldr	r3, [pc, #96]	@ (8001bf0 <HAL_ADC_Init+0x1ac>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d10b      	bne.n	8001bb0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba2:	f023 0303 	bic.w	r3, r3, #3
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bae:	e018      	b.n	8001be2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb4:	f023 0312 	bic.w	r3, r3, #18
 8001bb8:	f043 0210 	orr.w	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	f043 0201 	orr.w	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bd0:	e007      	b.n	8001be2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd6:	f043 0210 	orr.w	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	ffe1f7fd 	.word	0xffe1f7fd
 8001bf0:	ff1f0efe 	.word	0xff1f0efe

08001bf4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d03e      	beq.n	8001c94 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d039      	beq.n	8001c94 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d105      	bne.n	8001c38 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c42:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c46:	d11d      	bne.n	8001c84 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d119      	bne.n	8001c84 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0220 	bic.w	r2, r2, #32
 8001c5e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f874 	bl	8001d72 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f06f 0212 	mvn.w	r2, #18
 8001c92:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d04d      	beq.n	8001d3a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d048      	beq.n	8001d3a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001cca:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001cce:	d012      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d125      	bne.n	8001d2a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ce8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001cec:	d11d      	bne.n	8001d2a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d119      	bne.n	8001d2a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d04:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d105      	bne.n	8001d2a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d22:	f043 0201 	orr.w	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f96d 	bl	800200a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 020c 	mvn.w	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d012      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00d      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d52:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f812 	bl	8001d84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0201 	mvn.w	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x20>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e0dc      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x1da>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b06      	cmp	r3, #6
 8001dc6:	d81c      	bhi.n	8001e02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b05      	subs	r3, #5
 8001dda:	221f      	movs	r2, #31
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4019      	ands	r1, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	3b05      	subs	r3, #5
 8001df4:	fa00 f203 	lsl.w	r2, r0, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e00:	e03c      	b.n	8001e7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d81c      	bhi.n	8001e44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	3b23      	subs	r3, #35	@ 0x23
 8001e1c:	221f      	movs	r2, #31
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	4019      	ands	r1, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b23      	subs	r3, #35	@ 0x23
 8001e36:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e42:	e01b      	b.n	8001e7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	3b41      	subs	r3, #65	@ 0x41
 8001e56:	221f      	movs	r2, #31
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	4019      	ands	r1, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b41      	subs	r3, #65	@ 0x41
 8001e70:	fa00 f203 	lsl.w	r2, r0, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b09      	cmp	r3, #9
 8001e82:	d91c      	bls.n	8001ebe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68d9      	ldr	r1, [r3, #12]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	3b1e      	subs	r3, #30
 8001e96:	2207      	movs	r2, #7
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	4019      	ands	r1, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6898      	ldr	r0, [r3, #8]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	3b1e      	subs	r3, #30
 8001eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	e019      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6919      	ldr	r1, [r3, #16]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	2207      	movs	r2, #7
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6898      	ldr	r0, [r3, #8]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d003      	beq.n	8001f02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001efe:	2b11      	cmp	r3, #17
 8001f00:	d132      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1d      	ldr	r2, [pc, #116]	@ (8001f7c <HAL_ADC_ConfigChannel+0x1e4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d125      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d126      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d11a      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a13      	ldr	r2, [pc, #76]	@ (8001f84 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	0c9a      	lsrs	r2, r3, #18
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f48:	e002      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f9      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x1b2>
 8001f56:	e007      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	f043 0220 	orr.w	r2, r3, #32
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	40012400 	.word	0x40012400
 8001f80:	20000000 	.word	0x20000000
 8001f84:	431bde83 	.word	0x431bde83

08001f88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d12e      	bne.n	8002000 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fb2:	f7ff fd19 	bl	80019e8 <HAL_GetTick>
 8001fb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fb8:	e01b      	b.n	8001ff2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fba:	f7ff fd15 	bl	80019e8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d914      	bls.n	8001ff2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10d      	bne.n	8001ff2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fda:	f043 0210 	orr.w	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e007      	b.n	8002002 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d0dc      	beq.n	8001fba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002044:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	@ (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	@ (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4906      	ldr	r1, [pc, #24]	@ (80020b4 <__NVIC_EnableIRQ+0x34>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	@ (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	@ (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	@ 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	@ 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f7ff ff90 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff2d 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff42 	bl	8002064 <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff90 	bl	800210c <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5f 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff35 	bl	8002080 <__NVIC_EnableIRQ>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffa2 	bl	8002170 <SysTick_Config>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e043      	b.n	80022d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	4b22      	ldr	r3, [pc, #136]	@ (80022e0 <HAL_DMA_Init+0xa8>)
 8002256:	4413      	add	r3, r2
 8002258:	4a22      	ldr	r2, [pc, #136]	@ (80022e4 <HAL_DMA_Init+0xac>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	009a      	lsls	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1f      	ldr	r2, [pc, #124]	@ (80022e8 <HAL_DMA_Init+0xb0>)
 800226a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002282:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002286:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	bffdfff8 	.word	0xbffdfff8
 80022e4:	cccccccd 	.word	0xcccccccd
 80022e8:	40020000 	.word	0x40020000

080022ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	2204      	movs	r2, #4
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d04f      	beq.n	80023b4 <HAL_DMA_IRQHandler+0xc8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	d04a      	beq.n	80023b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0204 	bic.w	r2, r2, #4
 800233a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a66      	ldr	r2, [pc, #408]	@ (80024dc <HAL_DMA_IRQHandler+0x1f0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d029      	beq.n	800239a <HAL_DMA_IRQHandler+0xae>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a65      	ldr	r2, [pc, #404]	@ (80024e0 <HAL_DMA_IRQHandler+0x1f4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d022      	beq.n	8002396 <HAL_DMA_IRQHandler+0xaa>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a63      	ldr	r2, [pc, #396]	@ (80024e4 <HAL_DMA_IRQHandler+0x1f8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01a      	beq.n	8002390 <HAL_DMA_IRQHandler+0xa4>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a62      	ldr	r2, [pc, #392]	@ (80024e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d012      	beq.n	800238a <HAL_DMA_IRQHandler+0x9e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a60      	ldr	r2, [pc, #384]	@ (80024ec <HAL_DMA_IRQHandler+0x200>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00a      	beq.n	8002384 <HAL_DMA_IRQHandler+0x98>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5f      	ldr	r2, [pc, #380]	@ (80024f0 <HAL_DMA_IRQHandler+0x204>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d102      	bne.n	800237e <HAL_DMA_IRQHandler+0x92>
 8002378:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800237c:	e00e      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 800237e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002382:	e00b      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 8002384:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002388:	e008      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 800238a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800238e:	e005      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 8002390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002394:	e002      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 8002396:	2340      	movs	r3, #64	@ 0x40
 8002398:	e000      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 800239a:	2304      	movs	r3, #4
 800239c:	4a55      	ldr	r2, [pc, #340]	@ (80024f4 <HAL_DMA_IRQHandler+0x208>)
 800239e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8094 	beq.w	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80023b2:	e08e      	b.n	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	2202      	movs	r2, #2
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d056      	beq.n	8002472 <HAL_DMA_IRQHandler+0x186>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d051      	beq.n	8002472 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 020a 	bic.w	r2, r2, #10
 80023ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a38      	ldr	r2, [pc, #224]	@ (80024dc <HAL_DMA_IRQHandler+0x1f0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d029      	beq.n	8002452 <HAL_DMA_IRQHandler+0x166>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a37      	ldr	r2, [pc, #220]	@ (80024e0 <HAL_DMA_IRQHandler+0x1f4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d022      	beq.n	800244e <HAL_DMA_IRQHandler+0x162>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a35      	ldr	r2, [pc, #212]	@ (80024e4 <HAL_DMA_IRQHandler+0x1f8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01a      	beq.n	8002448 <HAL_DMA_IRQHandler+0x15c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a34      	ldr	r2, [pc, #208]	@ (80024e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d012      	beq.n	8002442 <HAL_DMA_IRQHandler+0x156>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a32      	ldr	r2, [pc, #200]	@ (80024ec <HAL_DMA_IRQHandler+0x200>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00a      	beq.n	800243c <HAL_DMA_IRQHandler+0x150>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a31      	ldr	r2, [pc, #196]	@ (80024f0 <HAL_DMA_IRQHandler+0x204>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d102      	bne.n	8002436 <HAL_DMA_IRQHandler+0x14a>
 8002430:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002434:	e00e      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800243a:	e00b      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 800243c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002440:	e008      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002442:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002446:	e005      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800244c:	e002      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 800244e:	2320      	movs	r3, #32
 8002450:	e000      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002452:	2302      	movs	r3, #2
 8002454:	4a27      	ldr	r2, [pc, #156]	@ (80024f4 <HAL_DMA_IRQHandler+0x208>)
 8002456:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	d034      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002470:	e02f      	b.n	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	2208      	movs	r2, #8
 8002478:	409a      	lsls	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d028      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e8>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d023      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 020e 	bic.w	r2, r2, #14
 800249a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f202 	lsl.w	r2, r1, r2
 80024aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
    }
  }
  return;
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
}
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40020008 	.word	0x40020008
 80024e0:	4002001c 	.word	0x4002001c
 80024e4:	40020030 	.word	0x40020030
 80024e8:	40020044 	.word	0x40020044
 80024ec:	40020058 	.word	0x40020058
 80024f0:	4002006c 	.word	0x4002006c
 80024f4:	40020000 	.word	0x40020000

080024f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b08b      	sub	sp, #44	@ 0x2c
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250a:	e169      	b.n	80027e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800250c:	2201      	movs	r2, #1
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 8158 	bne.w	80027da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a9a      	ldr	r2, [pc, #616]	@ (8002798 <HAL_GPIO_Init+0x2a0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d05e      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002534:	4a98      	ldr	r2, [pc, #608]	@ (8002798 <HAL_GPIO_Init+0x2a0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d875      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800253a:	4a98      	ldr	r2, [pc, #608]	@ (800279c <HAL_GPIO_Init+0x2a4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d058      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002540:	4a96      	ldr	r2, [pc, #600]	@ (800279c <HAL_GPIO_Init+0x2a4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d86f      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002546:	4a96      	ldr	r2, [pc, #600]	@ (80027a0 <HAL_GPIO_Init+0x2a8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d052      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 800254c:	4a94      	ldr	r2, [pc, #592]	@ (80027a0 <HAL_GPIO_Init+0x2a8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d869      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002552:	4a94      	ldr	r2, [pc, #592]	@ (80027a4 <HAL_GPIO_Init+0x2ac>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d04c      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002558:	4a92      	ldr	r2, [pc, #584]	@ (80027a4 <HAL_GPIO_Init+0x2ac>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d863      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800255e:	4a92      	ldr	r2, [pc, #584]	@ (80027a8 <HAL_GPIO_Init+0x2b0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d046      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002564:	4a90      	ldr	r2, [pc, #576]	@ (80027a8 <HAL_GPIO_Init+0x2b0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d85d      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800256a:	2b12      	cmp	r3, #18
 800256c:	d82a      	bhi.n	80025c4 <HAL_GPIO_Init+0xcc>
 800256e:	2b12      	cmp	r3, #18
 8002570:	d859      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002572:	a201      	add	r2, pc, #4	@ (adr r2, 8002578 <HAL_GPIO_Init+0x80>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	080025f3 	.word	0x080025f3
 800257c:	080025cd 	.word	0x080025cd
 8002580:	080025df 	.word	0x080025df
 8002584:	08002621 	.word	0x08002621
 8002588:	08002627 	.word	0x08002627
 800258c:	08002627 	.word	0x08002627
 8002590:	08002627 	.word	0x08002627
 8002594:	08002627 	.word	0x08002627
 8002598:	08002627 	.word	0x08002627
 800259c:	08002627 	.word	0x08002627
 80025a0:	08002627 	.word	0x08002627
 80025a4:	08002627 	.word	0x08002627
 80025a8:	08002627 	.word	0x08002627
 80025ac:	08002627 	.word	0x08002627
 80025b0:	08002627 	.word	0x08002627
 80025b4:	08002627 	.word	0x08002627
 80025b8:	08002627 	.word	0x08002627
 80025bc:	080025d5 	.word	0x080025d5
 80025c0:	080025e9 	.word	0x080025e9
 80025c4:	4a79      	ldr	r2, [pc, #484]	@ (80027ac <HAL_GPIO_Init+0x2b4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ca:	e02c      	b.n	8002626 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	623b      	str	r3, [r7, #32]
          break;
 80025d2:	e029      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	3304      	adds	r3, #4
 80025da:	623b      	str	r3, [r7, #32]
          break;
 80025dc:	e024      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	3308      	adds	r3, #8
 80025e4:	623b      	str	r3, [r7, #32]
          break;
 80025e6:	e01f      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	330c      	adds	r3, #12
 80025ee:	623b      	str	r3, [r7, #32]
          break;
 80025f0:	e01a      	b.n	8002628 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025fa:	2304      	movs	r3, #4
 80025fc:	623b      	str	r3, [r7, #32]
          break;
 80025fe:	e013      	b.n	8002628 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002608:	2308      	movs	r3, #8
 800260a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	611a      	str	r2, [r3, #16]
          break;
 8002612:	e009      	b.n	8002628 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002614:	2308      	movs	r3, #8
 8002616:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	615a      	str	r2, [r3, #20]
          break;
 800261e:	e003      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002620:	2300      	movs	r3, #0
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e000      	b.n	8002628 <HAL_GPIO_Init+0x130>
          break;
 8002626:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2bff      	cmp	r3, #255	@ 0xff
 800262c:	d801      	bhi.n	8002632 <HAL_GPIO_Init+0x13a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	e001      	b.n	8002636 <HAL_GPIO_Init+0x13e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2bff      	cmp	r3, #255	@ 0xff
 800263c:	d802      	bhi.n	8002644 <HAL_GPIO_Init+0x14c>
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	e002      	b.n	800264a <HAL_GPIO_Init+0x152>
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	3b08      	subs	r3, #8
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	210f      	movs	r1, #15
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	401a      	ands	r2, r3
 800265c:	6a39      	ldr	r1, [r7, #32]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	431a      	orrs	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80b1 	beq.w	80027da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002678:	4b4d      	ldr	r3, [pc, #308]	@ (80027b0 <HAL_GPIO_Init+0x2b8>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a4c      	ldr	r2, [pc, #304]	@ (80027b0 <HAL_GPIO_Init+0x2b8>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b4a      	ldr	r3, [pc, #296]	@ (80027b0 <HAL_GPIO_Init+0x2b8>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002690:	4a48      	ldr	r2, [pc, #288]	@ (80027b4 <HAL_GPIO_Init+0x2bc>)
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a40      	ldr	r2, [pc, #256]	@ (80027b8 <HAL_GPIO_Init+0x2c0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_GPIO_Init+0x1ec>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3f      	ldr	r2, [pc, #252]	@ (80027bc <HAL_GPIO_Init+0x2c4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00d      	beq.n	80026e0 <HAL_GPIO_Init+0x1e8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a3e      	ldr	r2, [pc, #248]	@ (80027c0 <HAL_GPIO_Init+0x2c8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d007      	beq.n	80026dc <HAL_GPIO_Init+0x1e4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a3d      	ldr	r2, [pc, #244]	@ (80027c4 <HAL_GPIO_Init+0x2cc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_GPIO_Init+0x1e0>
 80026d4:	2303      	movs	r3, #3
 80026d6:	e006      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026d8:	2304      	movs	r3, #4
 80026da:	e004      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026dc:	2302      	movs	r3, #2
 80026de:	e002      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026e4:	2300      	movs	r3, #0
 80026e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e8:	f002 0203 	and.w	r2, r2, #3
 80026ec:	0092      	lsls	r2, r2, #2
 80026ee:	4093      	lsls	r3, r2
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026f6:	492f      	ldr	r1, [pc, #188]	@ (80027b4 <HAL_GPIO_Init+0x2bc>)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002710:	4b2d      	ldr	r3, [pc, #180]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	492c      	ldr	r1, [pc, #176]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800271e:	4b2a      	ldr	r3, [pc, #168]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	43db      	mvns	r3, r3
 8002726:	4928      	ldr	r1, [pc, #160]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002728:	4013      	ands	r3, r2
 800272a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002738:	4b23      	ldr	r3, [pc, #140]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4922      	ldr	r1, [pc, #136]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002746:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	43db      	mvns	r3, r3
 800274e:	491e      	ldr	r1, [pc, #120]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002750:	4013      	ands	r3, r2
 8002752:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002760:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4918      	ldr	r1, [pc, #96]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800276e:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	43db      	mvns	r3, r3
 8002776:	4914      	ldr	r1, [pc, #80]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002778:	4013      	ands	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d021      	beq.n	80027cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002788:	4b0f      	ldr	r3, [pc, #60]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	490e      	ldr	r1, [pc, #56]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e021      	b.n	80027da <HAL_GPIO_Init+0x2e2>
 8002796:	bf00      	nop
 8002798:	10320000 	.word	0x10320000
 800279c:	10310000 	.word	0x10310000
 80027a0:	10220000 	.word	0x10220000
 80027a4:	10210000 	.word	0x10210000
 80027a8:	10120000 	.word	0x10120000
 80027ac:	10110000 	.word	0x10110000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40010800 	.word	0x40010800
 80027bc:	40010c00 	.word	0x40010c00
 80027c0:	40011000 	.word	0x40011000
 80027c4:	40011400 	.word	0x40011400
 80027c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_GPIO_Init+0x304>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	4909      	ldr	r1, [pc, #36]	@ (80027fc <HAL_GPIO_Init+0x304>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	3301      	adds	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f47f ae8e 	bne.w	800250c <HAL_GPIO_Init+0x14>
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	372c      	adds	r7, #44	@ 0x2c
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	40010400 	.word	0x40010400

08002800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
 800281c:	e001      	b.n	8002822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002822:	7bfb      	ldrb	r3, [r7, #15]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	807b      	strh	r3, [r7, #2]
 800283a:	4613      	mov	r3, r2
 800283c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800283e:	787b      	ldrb	r3, [r7, #1]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002844:	887a      	ldrh	r2, [r7, #2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800284a:	e003      	b.n	8002854 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	041a      	lsls	r2, r3, #16
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	611a      	str	r2, [r3, #16]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
	...

08002860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e12b      	b.n	8002aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe fe4c 	bl	8001524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	@ 0x24
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028c4:	f001 f834 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 80028c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a81      	ldr	r2, [pc, #516]	@ (8002ad4 <HAL_I2C_Init+0x274>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d807      	bhi.n	80028e4 <HAL_I2C_Init+0x84>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a80      	ldr	r2, [pc, #512]	@ (8002ad8 <HAL_I2C_Init+0x278>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	bf94      	ite	ls
 80028dc:	2301      	movls	r3, #1
 80028de:	2300      	movhi	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e006      	b.n	80028f2 <HAL_I2C_Init+0x92>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a7d      	ldr	r2, [pc, #500]	@ (8002adc <HAL_I2C_Init+0x27c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	bf94      	ite	ls
 80028ec:	2301      	movls	r3, #1
 80028ee:	2300      	movhi	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0e7      	b.n	8002aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a78      	ldr	r2, [pc, #480]	@ (8002ae0 <HAL_I2C_Init+0x280>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0c9b      	lsrs	r3, r3, #18
 8002904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a6a      	ldr	r2, [pc, #424]	@ (8002ad4 <HAL_I2C_Init+0x274>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d802      	bhi.n	8002934 <HAL_I2C_Init+0xd4>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3301      	adds	r3, #1
 8002932:	e009      	b.n	8002948 <HAL_I2C_Init+0xe8>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	4a69      	ldr	r2, [pc, #420]	@ (8002ae4 <HAL_I2C_Init+0x284>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	3301      	adds	r3, #1
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	430b      	orrs	r3, r1
 800294e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800295a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	495c      	ldr	r1, [pc, #368]	@ (8002ad4 <HAL_I2C_Init+0x274>)
 8002964:	428b      	cmp	r3, r1
 8002966:	d819      	bhi.n	800299c <HAL_I2C_Init+0x13c>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1e59      	subs	r1, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fbb1 f3f3 	udiv	r3, r1, r3
 8002976:	1c59      	adds	r1, r3, #1
 8002978:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800297c:	400b      	ands	r3, r1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_I2C_Init+0x138>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1e59      	subs	r1, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	e051      	b.n	8002a3c <HAL_I2C_Init+0x1dc>
 8002998:	2304      	movs	r3, #4
 800299a:	e04f      	b.n	8002a3c <HAL_I2C_Init+0x1dc>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d111      	bne.n	80029c8 <HAL_I2C_Init+0x168>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1e58      	subs	r0, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	440b      	add	r3, r1
 80029b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e012      	b.n	80029ee <HAL_I2C_Init+0x18e>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e58      	subs	r0, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	0099      	lsls	r1, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	fbb0 f3f3 	udiv	r3, r0, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Init+0x196>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e022      	b.n	8002a3c <HAL_I2C_Init+0x1dc>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10e      	bne.n	8002a1c <HAL_I2C_Init+0x1bc>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1e58      	subs	r0, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	440b      	add	r3, r1
 8002a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a1a:	e00f      	b.n	8002a3c <HAL_I2C_Init+0x1dc>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e58      	subs	r0, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	0099      	lsls	r1, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	6809      	ldr	r1, [r1, #0]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6911      	ldr	r1, [r2, #16]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68d2      	ldr	r2, [r2, #12]
 8002a76:	4311      	orrs	r1, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	000186a0 	.word	0x000186a0
 8002ad8:	001e847f 	.word	0x001e847f
 8002adc:	003d08ff 	.word	0x003d08ff
 8002ae0:	431bde83 	.word	0x431bde83
 8002ae4:	10624dd3 	.word	0x10624dd3

08002ae8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	461a      	mov	r2, r3
 8002af4:	460b      	mov	r3, r1
 8002af6:	817b      	strh	r3, [r7, #10]
 8002af8:	4613      	mov	r3, r2
 8002afa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002afc:	f7fe ff74 	bl	80019e8 <HAL_GetTick>
 8002b00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	f040 80e0 	bne.w	8002cd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2319      	movs	r3, #25
 8002b16:	2201      	movs	r2, #1
 8002b18:	4970      	ldr	r1, [pc, #448]	@ (8002cdc <HAL_I2C_Master_Transmit+0x1f4>)
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f964 	bl	8002de8 <I2C_WaitOnFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
 8002b28:	e0d3      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_I2C_Master_Transmit+0x50>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e0cc      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d007      	beq.n	8002b5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2221      	movs	r2, #33	@ 0x21
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2210      	movs	r2, #16
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	893a      	ldrh	r2, [r7, #8]
 8002b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4a50      	ldr	r2, [pc, #320]	@ (8002ce0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f89c 	bl	8002ce4 <I2C_MasterRequestWrite>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e08d      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bcc:	e066      	b.n	8002c9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	6a39      	ldr	r1, [r7, #32]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fa22 	bl	800301c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d107      	bne.n	8002bf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06b      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	781a      	ldrb	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d11b      	bne.n	8002c70 <HAL_I2C_Master_Transmit+0x188>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d017      	beq.n	8002c70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	6a39      	ldr	r1, [r7, #32]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fa19 	bl	80030ac <I2C_WaitOnBTFFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00d      	beq.n	8002c9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d107      	bne.n	8002c98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e01a      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d194      	bne.n	8002bce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e000      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cd0:	2302      	movs	r3, #2
  }
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	00100002 	.word	0x00100002
 8002ce0:	ffff0000 	.word	0xffff0000

08002ce4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d006      	beq.n	8002d0e <I2C_MasterRequestWrite+0x2a>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d003      	beq.n	8002d0e <I2C_MasterRequestWrite+0x2a>
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d0c:	d108      	bne.n	8002d20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e00b      	b.n	8002d38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d24:	2b12      	cmp	r3, #18
 8002d26:	d107      	bne.n	8002d38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f84f 	bl	8002de8 <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d5e:	d103      	bne.n	8002d68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e035      	b.n	8002dd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d74:	d108      	bne.n	8002d88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d76:	897b      	ldrh	r3, [r7, #10]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d84:	611a      	str	r2, [r3, #16]
 8002d86:	e01b      	b.n	8002dc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d88:	897b      	ldrh	r3, [r7, #10]
 8002d8a:	11db      	asrs	r3, r3, #7
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f003 0306 	and.w	r3, r3, #6
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f063 030f 	orn	r3, r3, #15
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	490e      	ldr	r1, [pc, #56]	@ (8002de0 <I2C_MasterRequestWrite+0xfc>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f898 	bl	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e010      	b.n	8002dd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4907      	ldr	r1, [pc, #28]	@ (8002de4 <I2C_MasterRequestWrite+0x100>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f888 	bl	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	00010008 	.word	0x00010008
 8002de4:	00010002 	.word	0x00010002

08002de8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df8:	e048      	b.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d044      	beq.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e02:	f7fe fdf1 	bl	80019e8 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d302      	bcc.n	8002e18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d139      	bne.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d10d      	bne.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	e00c      	b.n	8002e58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	43da      	mvns	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d116      	bne.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e023      	b.n	8002ed4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	0c1b      	lsrs	r3, r3, #16
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d10d      	bne.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	e00c      	b.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d093      	beq.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eea:	e071      	b.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efa:	d123      	bne.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	f043 0204 	orr.w	r2, r3, #4
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e067      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d041      	beq.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4c:	f7fe fd4c 	bl	80019e8 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d302      	bcc.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d136      	bne.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10c      	bne.n	8002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf14      	ite	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	2300      	moveq	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	e00b      	b.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e021      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d10c      	bne.n	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e00b      	b.n	800300c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	f47f af6d 	bne.w	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003028:	e034      	b.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f886 	bl	800313c <I2C_IsAcknowledgeFailed>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e034      	b.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d028      	beq.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fe fcd1 	bl	80019e8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d11d      	bne.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003062:	2b80      	cmp	r3, #128	@ 0x80
 8003064:	d016      	beq.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e007      	b.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309e:	2b80      	cmp	r3, #128	@ 0x80
 80030a0:	d1c3      	bne.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030b8:	e034      	b.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f83e 	bl	800313c <I2C_IsAcknowledgeFailed>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e034      	b.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d028      	beq.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d2:	f7fe fc89 	bl	80019e8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d302      	bcc.n	80030e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11d      	bne.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d016      	beq.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e007      	b.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d1c3      	bne.n	80030ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003152:	d11b      	bne.n	800318c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800315c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	f043 0204 	orr.w	r2, r3, #4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e272      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8087 	beq.w	80032c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b8:	4b92      	ldr	r3, [pc, #584]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d00c      	beq.n	80031de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d112      	bne.n	80031f6 <HAL_RCC_OscConfig+0x5e>
 80031d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031de:	4b89      	ldr	r3, [pc, #548]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d06c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x12c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d168      	bne.n	80032c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e24c      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x76>
 8003200:	4b80      	ldr	r3, [pc, #512]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a7f      	ldr	r2, [pc, #508]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	e02e      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x98>
 8003216:	4b7b      	ldr	r3, [pc, #492]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7a      	ldr	r2, [pc, #488]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b78      	ldr	r3, [pc, #480]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a77      	ldr	r2, [pc, #476]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003228:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0xbc>
 800323a:	4b72      	ldr	r3, [pc, #456]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a71      	ldr	r2, [pc, #452]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b6f      	ldr	r3, [pc, #444]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6e      	ldr	r2, [pc, #440]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 8003254:	4b6b      	ldr	r3, [pc, #428]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6a      	ldr	r2, [pc, #424]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b68      	ldr	r3, [pc, #416]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a67      	ldr	r2, [pc, #412]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800326a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe fbb8 	bl	80019e8 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe fbb4 	bl	80019e8 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	@ 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e200      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b5d      	ldr	r3, [pc, #372]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xe4>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fba4 	bl	80019e8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fba0 	bl	80019e8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	@ 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1ec      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b53      	ldr	r3, [pc, #332]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x10c>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d063      	beq.n	800339a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032de:	4b49      	ldr	r3, [pc, #292]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x18c>
 80032ea:	4b46      	ldr	r3, [pc, #280]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b43      	ldr	r3, [pc, #268]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x176>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1c0      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b3d      	ldr	r3, [pc, #244]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4939      	ldr	r1, [pc, #228]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e03a      	b.n	800339a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b36      	ldr	r3, [pc, #216]	@ (8003408 <HAL_RCC_OscConfig+0x270>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fe fb59 	bl	80019e8 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333a:	f7fe fb55 	bl	80019e8 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e1a1      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b2d      	ldr	r3, [pc, #180]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b2a      	ldr	r3, [pc, #168]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4927      	ldr	r1, [pc, #156]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b26      	ldr	r3, [pc, #152]	@ (8003408 <HAL_RCC_OscConfig+0x270>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fb38 	bl	80019e8 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337c:	f7fe fb34 	bl	80019e8 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e180      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	4b1d      	ldr	r3, [pc, #116]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d03a      	beq.n	800341c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d019      	beq.n	80033e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b17      	ldr	r3, [pc, #92]	@ (800340c <HAL_RCC_OscConfig+0x274>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b4:	f7fe fb18 	bl	80019e8 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fe fb14 	bl	80019e8 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e160      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003404 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033da:	2001      	movs	r0, #1
 80033dc:	f000 fad0 	bl	8003980 <RCC_Delay>
 80033e0:	e01c      	b.n	800341c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_RCC_OscConfig+0x274>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7fe fafe 	bl	80019e8 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ee:	e00f      	b.n	8003410 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fe fafa 	bl	80019e8 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d908      	bls.n	8003410 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e146      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	42420000 	.word	0x42420000
 800340c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	4b92      	ldr	r3, [pc, #584]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e9      	bne.n	80033f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80a6 	beq.w	8003576 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342e:	4b8b      	ldr	r3, [pc, #556]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	4b88      	ldr	r3, [pc, #544]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	4a87      	ldr	r2, [pc, #540]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003444:	61d3      	str	r3, [r2, #28]
 8003446:	4b85      	ldr	r3, [pc, #532]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b82      	ldr	r3, [pc, #520]	@ (8003660 <HAL_RCC_OscConfig+0x4c8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d118      	bne.n	8003494 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003462:	4b7f      	ldr	r3, [pc, #508]	@ (8003660 <HAL_RCC_OscConfig+0x4c8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7e      	ldr	r2, [pc, #504]	@ (8003660 <HAL_RCC_OscConfig+0x4c8>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346e:	f7fe fabb 	bl	80019e8 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003476:	f7fe fab7 	bl	80019e8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b64      	cmp	r3, #100	@ 0x64
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e103      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	4b75      	ldr	r3, [pc, #468]	@ (8003660 <HAL_RCC_OscConfig+0x4c8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x312>
 800349c:	4b6f      	ldr	r3, [pc, #444]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a6e      	ldr	r2, [pc, #440]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6213      	str	r3, [r2, #32]
 80034a8:	e02d      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x334>
 80034b2:	4b6a      	ldr	r3, [pc, #424]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4a69      	ldr	r2, [pc, #420]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	6213      	str	r3, [r2, #32]
 80034be:	4b67      	ldr	r3, [pc, #412]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4a66      	ldr	r2, [pc, #408]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	e01c      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b05      	cmp	r3, #5
 80034d2:	d10c      	bne.n	80034ee <HAL_RCC_OscConfig+0x356>
 80034d4:	4b61      	ldr	r3, [pc, #388]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4a60      	ldr	r2, [pc, #384]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034da:	f043 0304 	orr.w	r3, r3, #4
 80034de:	6213      	str	r3, [r2, #32]
 80034e0:	4b5e      	ldr	r3, [pc, #376]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4a5d      	ldr	r2, [pc, #372]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6213      	str	r3, [r2, #32]
 80034ec:	e00b      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034ee:	4b5b      	ldr	r3, [pc, #364]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4a5a      	ldr	r2, [pc, #360]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	6213      	str	r3, [r2, #32]
 80034fa:	4b58      	ldr	r3, [pc, #352]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4a57      	ldr	r2, [pc, #348]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d015      	beq.n	800353a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fe fa6b 	bl	80019e8 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003514:	e00a      	b.n	800352c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fe fa67 	bl	80019e8 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003524:	4293      	cmp	r3, r2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e0b1      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352c:	4b4b      	ldr	r3, [pc, #300]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ee      	beq.n	8003516 <HAL_RCC_OscConfig+0x37e>
 8003538:	e014      	b.n	8003564 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7fe fa55 	bl	80019e8 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fe fa51 	bl	80019e8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e09b      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003558:	4b40      	ldr	r3, [pc, #256]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ee      	bne.n	8003542 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d105      	bne.n	8003576 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4b3c      	ldr	r3, [pc, #240]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4a3b      	ldr	r2, [pc, #236]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003574:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8087 	beq.w	800368e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003580:	4b36      	ldr	r3, [pc, #216]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b08      	cmp	r3, #8
 800358a:	d061      	beq.n	8003650 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d146      	bne.n	8003622 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003594:	4b33      	ldr	r3, [pc, #204]	@ (8003664 <HAL_RCC_OscConfig+0x4cc>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe fa25 	bl	80019e8 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a2:	f7fe fa21 	bl	80019e8 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e06d      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b4:	4b29      	ldr	r3, [pc, #164]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f0      	bne.n	80035a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d108      	bne.n	80035dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ca:	4b24      	ldr	r3, [pc, #144]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4921      	ldr	r1, [pc, #132]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035dc:	4b1f      	ldr	r3, [pc, #124]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a19      	ldr	r1, [r3, #32]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	430b      	orrs	r3, r1
 80035ee:	491b      	ldr	r1, [pc, #108]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <HAL_RCC_OscConfig+0x4cc>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fe f9f5 	bl	80019e8 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fe f9f1 	bl	80019e8 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e03d      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003614:	4b11      	ldr	r3, [pc, #68]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x46a>
 8003620:	e035      	b.n	800368e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003622:	4b10      	ldr	r3, [pc, #64]	@ (8003664 <HAL_RCC_OscConfig+0x4cc>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe f9de 	bl	80019e8 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe f9da 	bl	80019e8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e026      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003642:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_RCC_OscConfig+0x4c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x498>
 800364e:	e01e      	b.n	800368e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e019      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
 8003664:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <HAL_RCC_OscConfig+0x500>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	429a      	cmp	r2, r3
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0d0      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b6a      	ldr	r3, [pc, #424]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d910      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b67      	ldr	r3, [pc, #412]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	4965      	ldr	r1, [pc, #404]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a58      	ldr	r2, [pc, #352]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003702:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a52      	ldr	r2, [pc, #328]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800371a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d040      	beq.n	80037bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d115      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375a:	4b41      	ldr	r3, [pc, #260]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e073      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	4b3d      	ldr	r3, [pc, #244]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06b      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377a:	4b39      	ldr	r3, [pc, #228]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f023 0203 	bic.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4936      	ldr	r1, [pc, #216]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800378c:	f7fe f92c 	bl	80019e8 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003794:	f7fe f928 	bl	80019e8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e053      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1eb      	bne.n	8003794 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037bc:	4b27      	ldr	r3, [pc, #156]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d210      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b24      	ldr	r3, [pc, #144]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 0207 	bic.w	r2, r3, #7
 80037d2:	4922      	ldr	r1, [pc, #136]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	@ (800385c <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003816:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	490a      	ldr	r1, [pc, #40]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	@ (8003868 <HAL_RCC_ClockConfig+0x1cc>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	@ (800386c <HAL_RCC_ClockConfig+0x1d0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe f88a 	bl	8001964 <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40022000 	.word	0x40022000
 8003860:	40021000 	.word	0x40021000
 8003864:	080081f8 	.word	0x080081f8
 8003868:	20000000 	.word	0x20000000
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800388a:	4b1e      	ldr	r3, [pc, #120]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x94>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b04      	cmp	r3, #4
 8003898:	d002      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x30>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x36>
 800389e:	e027      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a0:	4b19      	ldr	r3, [pc, #100]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x98>)
 80038a2:	613b      	str	r3, [r7, #16]
      break;
 80038a4:	e027      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	0c9b      	lsrs	r3, r3, #18
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	4a17      	ldr	r2, [pc, #92]	@ (800390c <HAL_RCC_GetSysClockFreq+0x9c>)
 80038b0:	5cd3      	ldrb	r3, [r2, r3]
 80038b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038be:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x94>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	0c5b      	lsrs	r3, r3, #17
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	4a11      	ldr	r2, [pc, #68]	@ (8003910 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038ca:	5cd3      	ldrb	r3, [r2, r3]
 80038cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x98>)
 80038d2:	fb03 f202 	mul.w	r2, r3, r2
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e004      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038e4:	fb02 f303 	mul.w	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	613b      	str	r3, [r7, #16]
      break;
 80038ee:	e002      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f0:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <HAL_RCC_GetSysClockFreq+0xa8>)
 80038f2:	613b      	str	r3, [r7, #16]
      break;
 80038f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f6:	693b      	ldr	r3, [r7, #16]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	00f42400 	.word	0x00f42400
 800390c:	08008210 	.word	0x08008210
 8003910:	08008220 	.word	0x08008220
 8003914:	003d0900 	.word	0x003d0900
 8003918:	007a1200 	.word	0x007a1200

0800391c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b02      	ldr	r3, [pc, #8]	@ (800392c <HAL_RCC_GetHCLKFreq+0x10>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	20000000 	.word	0x20000000

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003934:	f7ff fff2 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	@ (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	08008208 	.word	0x08008208

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800395c:	f7ff ffde 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	0adb      	lsrs	r3, r3, #11
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	@ (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	08008208 	.word	0x08008208

08003980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003988:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <RCC_Delay+0x34>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <RCC_Delay+0x38>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0a5b      	lsrs	r3, r3, #9
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800399c:	bf00      	nop
  }
  while (Delay --);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1e5a      	subs	r2, r3, #1
 80039a2:	60fa      	str	r2, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f9      	bne.n	800399c <RCC_Delay+0x1c>
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	20000000 	.word	0x20000000
 80039b8:	10624dd3 	.word	0x10624dd3

080039bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d07d      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039d8:	2300      	movs	r3, #0
 80039da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039dc:	4b4f      	ldr	r3, [pc, #316]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	4b4c      	ldr	r3, [pc, #304]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	4a4b      	ldr	r2, [pc, #300]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	61d3      	str	r3, [r2, #28]
 80039f4:	4b49      	ldr	r3, [pc, #292]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	4b46      	ldr	r3, [pc, #280]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d118      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a10:	4b43      	ldr	r3, [pc, #268]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a42      	ldr	r2, [pc, #264]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1c:	f7fd ffe4 	bl	80019e8 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	e008      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a24:	f7fd ffe0 	bl	80019e8 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	@ 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e06d      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a36:	4b3a      	ldr	r3, [pc, #232]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a42:	4b36      	ldr	r3, [pc, #216]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d02e      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d027      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a60:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a70:	4b2c      	ldr	r3, [pc, #176]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a76:	4a29      	ldr	r2, [pc, #164]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d014      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a86:	f7fd ffaf 	bl	80019e8 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fd ffab 	bl	80019e8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e036      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ee      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4917      	ldr	r1, [pc, #92]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac8:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4a13      	ldr	r2, [pc, #76]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	490b      	ldr	r1, [pc, #44]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003afe:	4b07      	ldr	r3, [pc, #28]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	4904      	ldr	r1, [pc, #16]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40007000 	.word	0x40007000
 8003b24:	42420440 	.word	0x42420440

08003b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e041      	b.n	8003bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fd fd26 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f000 fc4e 	bl	8004408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e041      	b.n	8003c5c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d106      	bne.n	8003bf2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f839 	bl	8003c64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f000 fbff 	bl	8004408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <HAL_TIM_IC_Start_IT+0x1e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	e013      	b.n	8003cbe <HAL_TIM_IC_Start_IT+0x46>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_IC_Start_IT+0x2e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	e00b      	b.n	8003cbe <HAL_TIM_IC_Start_IT+0x46>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_IC_Start_IT+0x3e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	e003      	b.n	8003cbe <HAL_TIM_IC_Start_IT+0x46>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <HAL_TIM_IC_Start_IT+0x58>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e013      	b.n	8003cf8 <HAL_TIM_IC_Start_IT+0x80>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d104      	bne.n	8003ce0 <HAL_TIM_IC_Start_IT+0x68>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e00b      	b.n	8003cf8 <HAL_TIM_IC_Start_IT+0x80>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d104      	bne.n	8003cf0 <HAL_TIM_IC_Start_IT+0x78>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e003      	b.n	8003cf8 <HAL_TIM_IC_Start_IT+0x80>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cfa:	7bbb      	ldrb	r3, [r7, #14]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d102      	bne.n	8003d06 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d00:	7b7b      	ldrb	r3, [r7, #13]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d001      	beq.n	8003d0a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e0b8      	b.n	8003e7c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d104      	bne.n	8003d1a <HAL_TIM_IC_Start_IT+0xa2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d18:	e013      	b.n	8003d42 <HAL_TIM_IC_Start_IT+0xca>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_IC_Start_IT+0xb2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d28:	e00b      	b.n	8003d42 <HAL_TIM_IC_Start_IT+0xca>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d104      	bne.n	8003d3a <HAL_TIM_IC_Start_IT+0xc2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d38:	e003      	b.n	8003d42 <HAL_TIM_IC_Start_IT+0xca>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d104      	bne.n	8003d52 <HAL_TIM_IC_Start_IT+0xda>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d50:	e013      	b.n	8003d7a <HAL_TIM_IC_Start_IT+0x102>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d104      	bne.n	8003d62 <HAL_TIM_IC_Start_IT+0xea>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d60:	e00b      	b.n	8003d7a <HAL_TIM_IC_Start_IT+0x102>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d104      	bne.n	8003d72 <HAL_TIM_IC_Start_IT+0xfa>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d70:	e003      	b.n	8003d7a <HAL_TIM_IC_Start_IT+0x102>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b0c      	cmp	r3, #12
 8003d7e:	d841      	bhi.n	8003e04 <HAL_TIM_IC_Start_IT+0x18c>
 8003d80:	a201      	add	r2, pc, #4	@ (adr r2, 8003d88 <HAL_TIM_IC_Start_IT+0x110>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003dbd 	.word	0x08003dbd
 8003d8c:	08003e05 	.word	0x08003e05
 8003d90:	08003e05 	.word	0x08003e05
 8003d94:	08003e05 	.word	0x08003e05
 8003d98:	08003dcf 	.word	0x08003dcf
 8003d9c:	08003e05 	.word	0x08003e05
 8003da0:	08003e05 	.word	0x08003e05
 8003da4:	08003e05 	.word	0x08003e05
 8003da8:	08003de1 	.word	0x08003de1
 8003dac:	08003e05 	.word	0x08003e05
 8003db0:	08003e05 	.word	0x08003e05
 8003db4:	08003e05 	.word	0x08003e05
 8003db8:	08003df3 	.word	0x08003df3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0202 	orr.w	r2, r2, #2
 8003dca:	60da      	str	r2, [r3, #12]
      break;
 8003dcc:	e01d      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0204 	orr.w	r2, r2, #4
 8003ddc:	60da      	str	r2, [r3, #12]
      break;
 8003dde:	e014      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	60da      	str	r2, [r3, #12]
      break;
 8003df0:	e00b      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0210 	orr.w	r2, r2, #16
 8003e00:	60da      	str	r2, [r3, #12]
      break;
 8003e02:	e002      	b.n	8003e0a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      break;
 8003e08:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d134      	bne.n	8003e7a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2201      	movs	r2, #1
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fd06 	bl	800482a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a18      	ldr	r2, [pc, #96]	@ (8003e84 <HAL_TIM_IC_Start_IT+0x20c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_TIM_IC_Start_IT+0x1ce>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e30:	d009      	beq.n	8003e46 <HAL_TIM_IC_Start_IT+0x1ce>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a14      	ldr	r2, [pc, #80]	@ (8003e88 <HAL_TIM_IC_Start_IT+0x210>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIM_IC_Start_IT+0x1ce>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a12      	ldr	r2, [pc, #72]	@ (8003e8c <HAL_TIM_IC_Start_IT+0x214>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d111      	bne.n	8003e6a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d010      	beq.n	8003e7a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e68:	e007      	b.n	8003e7a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800

08003e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d020      	beq.n	8003ef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01b      	beq.n	8003ef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0202 	mvn.w	r2, #2
 8003ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f001 f910 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8003ee0:	e005      	b.n	8003eee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa75 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fa7b 	bl	80043e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d020      	beq.n	8003f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01b      	beq.n	8003f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0204 	mvn.w	r2, #4
 8003f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f001 f8ea 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8003f2c:	e005      	b.n	8003f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fa4f 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fa55 	bl	80043e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d020      	beq.n	8003f8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01b      	beq.n	8003f8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0208 	mvn.w	r2, #8
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2204      	movs	r2, #4
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f001 f8c4 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa29 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fa2f 	bl	80043e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d020      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01b      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0210 	mvn.w	r2, #16
 8003fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2208      	movs	r2, #8
 8003fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f001 f89e 	bl	8005100 <HAL_TIM_IC_CaptureCallback>
 8003fc4:	e005      	b.n	8003fd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa03 	bl	80043d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fa09 	bl	80043e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00c      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0201 	mvn.w	r2, #1
 8003ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f9e2 	bl	80043c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00c      	beq.n	8004020 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fc91 	bl	8004942 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800403c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f9d9 	bl	80043f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00c      	beq.n	8004068 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0220 	mvn.w	r2, #32
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fc64 	bl	8004930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_TIM_IC_ConfigChannel+0x1e>
 800408a:	2302      	movs	r3, #2
 800408c:	e088      	b.n	80041a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d11b      	bne.n	80040d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80040ac:	f000 fa1a 	bl	80044e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 020c 	bic.w	r2, r2, #12
 80040be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6999      	ldr	r1, [r3, #24]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	619a      	str	r2, [r3, #24]
 80040d2:	e060      	b.n	8004196 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d11c      	bne.n	8004114 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80040ea:	f000 fa83 	bl	80045f4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80040fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6999      	ldr	r1, [r3, #24]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	021a      	lsls	r2, r3, #8
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	619a      	str	r2, [r3, #24]
 8004112:	e040      	b.n	8004196 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b08      	cmp	r3, #8
 8004118:	d11b      	bne.n	8004152 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800412a:	f000 face 	bl	80046ca <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 020c 	bic.w	r2, r2, #12
 800413c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69d9      	ldr	r1, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	61da      	str	r2, [r3, #28]
 8004150:	e021      	b.n	8004196 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	d11c      	bne.n	8004192 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004168:	f000 faea 	bl	8004740 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69da      	ldr	r2, [r3, #28]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800417a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69d9      	ldr	r1, [r3, #28]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	021a      	lsls	r2, r3, #8
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	61da      	str	r2, [r3, #28]
 8004190:	e001      	b.n	8004196 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800419e:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_TIM_ConfigClockSource+0x1c>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e0b4      	b.n	800432e <HAL_TIM_ConfigClockSource+0x186>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041fc:	d03e      	beq.n	800427c <HAL_TIM_ConfigClockSource+0xd4>
 80041fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004202:	f200 8087 	bhi.w	8004314 <HAL_TIM_ConfigClockSource+0x16c>
 8004206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800420a:	f000 8086 	beq.w	800431a <HAL_TIM_ConfigClockSource+0x172>
 800420e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004212:	d87f      	bhi.n	8004314 <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b70      	cmp	r3, #112	@ 0x70
 8004216:	d01a      	beq.n	800424e <HAL_TIM_ConfigClockSource+0xa6>
 8004218:	2b70      	cmp	r3, #112	@ 0x70
 800421a:	d87b      	bhi.n	8004314 <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b60      	cmp	r3, #96	@ 0x60
 800421e:	d050      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004220:	2b60      	cmp	r3, #96	@ 0x60
 8004222:	d877      	bhi.n	8004314 <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b50      	cmp	r3, #80	@ 0x50
 8004226:	d03c      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004228:	2b50      	cmp	r3, #80	@ 0x50
 800422a:	d873      	bhi.n	8004314 <HAL_TIM_ConfigClockSource+0x16c>
 800422c:	2b40      	cmp	r3, #64	@ 0x40
 800422e:	d058      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004230:	2b40      	cmp	r3, #64	@ 0x40
 8004232:	d86f      	bhi.n	8004314 <HAL_TIM_ConfigClockSource+0x16c>
 8004234:	2b30      	cmp	r3, #48	@ 0x30
 8004236:	d064      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x15a>
 8004238:	2b30      	cmp	r3, #48	@ 0x30
 800423a:	d86b      	bhi.n	8004314 <HAL_TIM_ConfigClockSource+0x16c>
 800423c:	2b20      	cmp	r3, #32
 800423e:	d060      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x15a>
 8004240:	2b20      	cmp	r3, #32
 8004242:	d867      	bhi.n	8004314 <HAL_TIM_ConfigClockSource+0x16c>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d05c      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x15a>
 8004248:	2b10      	cmp	r3, #16
 800424a:	d05a      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x15a>
 800424c:	e062      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800425e:	f000 fac5 	bl	80047ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004270:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	609a      	str	r2, [r3, #8]
      break;
 800427a:	e04f      	b.n	800431c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800428c:	f000 faae 	bl	80047ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800429e:	609a      	str	r2, [r3, #8]
      break;
 80042a0:	e03c      	b.n	800431c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ae:	461a      	mov	r2, r3
 80042b0:	f000 f972 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2150      	movs	r1, #80	@ 0x50
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fa7c 	bl	80047b8 <TIM_ITRx_SetConfig>
      break;
 80042c0:	e02c      	b.n	800431c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 f9cc 	bl	800466c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2160      	movs	r1, #96	@ 0x60
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fa6c 	bl	80047b8 <TIM_ITRx_SetConfig>
      break;
 80042e0:	e01c      	b.n	800431c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ee:	461a      	mov	r2, r3
 80042f0:	f000 f952 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2140      	movs	r1, #64	@ 0x40
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fa5c 	bl	80047b8 <TIM_ITRx_SetConfig>
      break;
 8004300:	e00c      	b.n	800431c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4619      	mov	r1, r3
 800430c:	4610      	mov	r0, r2
 800430e:	f000 fa53 	bl	80047b8 <TIM_ITRx_SetConfig>
      break;
 8004312:	e003      	b.n	800431c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
      break;
 8004318:	e000      	b.n	800431c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800431a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b0c      	cmp	r3, #12
 800434a:	d831      	bhi.n	80043b0 <HAL_TIM_ReadCapturedValue+0x78>
 800434c:	a201      	add	r2, pc, #4	@ (adr r2, 8004354 <HAL_TIM_ReadCapturedValue+0x1c>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004389 	.word	0x08004389
 8004358:	080043b1 	.word	0x080043b1
 800435c:	080043b1 	.word	0x080043b1
 8004360:	080043b1 	.word	0x080043b1
 8004364:	08004393 	.word	0x08004393
 8004368:	080043b1 	.word	0x080043b1
 800436c:	080043b1 	.word	0x080043b1
 8004370:	080043b1 	.word	0x080043b1
 8004374:	0800439d 	.word	0x0800439d
 8004378:	080043b1 	.word	0x080043b1
 800437c:	080043b1 	.word	0x080043b1
 8004380:	080043b1 	.word	0x080043b1
 8004384:	080043a7 	.word	0x080043a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438e:	60fb      	str	r3, [r7, #12]

      break;
 8004390:	e00f      	b.n	80043b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004398:	60fb      	str	r3, [r7, #12]

      break;
 800439a:	e00a      	b.n	80043b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a2:	60fb      	str	r3, [r7, #12]

      break;
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	60fb      	str	r3, [r7, #12]

      break;
 80043ae:	e000      	b.n	80043b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80043b0:	bf00      	nop
  }

  return tmpreg;
 80043b2:	68fb      	ldr	r3, [r7, #12]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop

080043c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a2f      	ldr	r2, [pc, #188]	@ (80044d8 <TIM_Base_SetConfig+0xd0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00b      	beq.n	8004438 <TIM_Base_SetConfig+0x30>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004426:	d007      	beq.n	8004438 <TIM_Base_SetConfig+0x30>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a2c      	ldr	r2, [pc, #176]	@ (80044dc <TIM_Base_SetConfig+0xd4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0x30>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a2b      	ldr	r2, [pc, #172]	@ (80044e0 <TIM_Base_SetConfig+0xd8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d108      	bne.n	800444a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a22      	ldr	r2, [pc, #136]	@ (80044d8 <TIM_Base_SetConfig+0xd0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00b      	beq.n	800446a <TIM_Base_SetConfig+0x62>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004458:	d007      	beq.n	800446a <TIM_Base_SetConfig+0x62>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1f      	ldr	r2, [pc, #124]	@ (80044dc <TIM_Base_SetConfig+0xd4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_Base_SetConfig+0x62>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1e      	ldr	r2, [pc, #120]	@ (80044e0 <TIM_Base_SetConfig+0xd8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d108      	bne.n	800447c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a0d      	ldr	r2, [pc, #52]	@ (80044d8 <TIM_Base_SetConfig+0xd0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d103      	bne.n	80044b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f023 0201 	bic.w	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	611a      	str	r2, [r3, #16]
  }
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800

080044e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	f023 0201 	bic.w	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a1f      	ldr	r2, [pc, #124]	@ (800458c <TIM_TI1_SetConfig+0xa8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00b      	beq.n	800452a <TIM_TI1_SetConfig+0x46>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004518:	d007      	beq.n	800452a <TIM_TI1_SetConfig+0x46>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4a1c      	ldr	r2, [pc, #112]	@ (8004590 <TIM_TI1_SetConfig+0xac>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d003      	beq.n	800452a <TIM_TI1_SetConfig+0x46>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a1b      	ldr	r2, [pc, #108]	@ (8004594 <TIM_TI1_SetConfig+0xb0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <TIM_TI1_SetConfig+0x4a>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <TIM_TI1_SetConfig+0x4c>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	e003      	b.n	800454e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	b2db      	uxtb	r3, r3
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f023 030a 	bic.w	r3, r3, #10
 8004568:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f003 030a 	and.w	r3, r3, #10
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800

08004598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f023 0201 	bic.w	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 030a 	bic.w	r3, r3, #10
 80045d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr

080045f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f023 0210 	bic.w	r2, r3, #16
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	031b      	lsls	r3, r3, #12
 8004638:	b29b      	uxth	r3, r3
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004646:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f023 0210 	bic.w	r2, r3, #16
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	031b      	lsls	r3, r3, #12
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr

080046ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b087      	sub	sp, #28
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f023 0303 	bic.w	r3, r3, #3
 80046f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004706:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	b2db      	uxtb	r3, r3
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800471a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800477e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	031b      	lsls	r3, r3, #12
 8004784:	b29b      	uxth	r3, r3
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004792:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	031b      	lsls	r3, r3, #12
 8004798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f043 0307 	orr.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	609a      	str	r2, [r3, #8]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	021a      	lsls	r2, r3, #8
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	431a      	orrs	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4313      	orrs	r3, r2
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	609a      	str	r2, [r3, #8]
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800482a:	b480      	push	{r7}
 800482c:	b087      	sub	sp, #28
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2201      	movs	r2, #1
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a1a      	ldr	r2, [r3, #32]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	43db      	mvns	r3, r3
 800484c:	401a      	ands	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a1a      	ldr	r2, [r3, #32]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	431a      	orrs	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	621a      	str	r2, [r3, #32]
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr
	...

08004874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004888:	2302      	movs	r3, #2
 800488a:	e046      	b.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a16      	ldr	r2, [pc, #88]	@ (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00e      	beq.n	80048ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d8:	d009      	beq.n	80048ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a12      	ldr	r2, [pc, #72]	@ (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d004      	beq.n	80048ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a10      	ldr	r2, [pc, #64]	@ (800492c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d10c      	bne.n	8004908 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800

08004930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr

08004942 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr

08004954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e042      	b.n	80049ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fc fe58 	bl	8001630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2224      	movs	r2, #36	@ 0x24
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f971 	bl	8004c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	@ 0x28
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d175      	bne.n	8004b00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_UART_Transmit+0x2c>
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e06e      	b.n	8004b02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2221      	movs	r2, #33	@ 0x21
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a32:	f7fc ffd9 	bl	80019e8 <HAL_GetTick>
 8004a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	88fa      	ldrh	r2, [r7, #6]
 8004a42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a4c:	d108      	bne.n	8004a60 <HAL_UART_Transmit+0x6c>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d104      	bne.n	8004a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	e003      	b.n	8004a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a68:	e02e      	b.n	8004ac8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2200      	movs	r2, #0
 8004a72:	2180      	movs	r1, #128	@ 0x80
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f848 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e03a      	b.n	8004b02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10b      	bne.n	8004aaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	e007      	b.n	8004aba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	781a      	ldrb	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1cb      	bne.n	8004a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2140      	movs	r1, #64	@ 0x40
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f814 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e006      	b.n	8004b02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e000      	b.n	8004b02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
  }
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1a:	e03b      	b.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d037      	beq.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b24:	f7fc ff60 	bl	80019e8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	6a3a      	ldr	r2, [r7, #32]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d302      	bcc.n	8004b3a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e03a      	b.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d023      	beq.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b80      	cmp	r3, #128	@ 0x80
 8004b50:	d020      	beq.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d01d      	beq.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d116      	bne.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f81d 	bl	8004bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2208      	movs	r2, #8
 8004b86:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e00f      	b.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d0b4      	beq.n	8004b1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b095      	sub	sp, #84	@ 0x54
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004be4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3314      	adds	r3, #20
 8004c16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e5      	bne.n	8004bf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d119      	bne.n	8004c68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f023 0310 	bic.w	r3, r3, #16
 8004c4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c54:	61ba      	str	r2, [r7, #24]
 8004c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6979      	ldr	r1, [r7, #20]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	613b      	str	r3, [r7, #16]
   return(result);
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e5      	bne.n	8004c34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c76:	bf00      	nop
 8004c78:	3754      	adds	r7, #84	@ 0x54
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004cba:	f023 030c 	bic.w	r3, r3, #12
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d94 <UART_SetConfig+0x114>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d103      	bne.n	8004cf0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ce8:	f7fe fe36 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	e002      	b.n	8004cf6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7fe fe1e 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009a      	lsls	r2, r3, #2
 8004d00:	441a      	add	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	4a22      	ldr	r2, [pc, #136]	@ (8004d98 <UART_SetConfig+0x118>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	0119      	lsls	r1, r3, #4
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009a      	lsls	r2, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d98 <UART_SetConfig+0x118>)
 8004d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2064      	movs	r0, #100	@ 0x64
 8004d36:	fb00 f303 	mul.w	r3, r0, r3
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	3332      	adds	r3, #50	@ 0x32
 8004d40:	4a15      	ldr	r2, [pc, #84]	@ (8004d98 <UART_SetConfig+0x118>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d4c:	4419      	add	r1, r3
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009a      	lsls	r2, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d64:	4b0c      	ldr	r3, [pc, #48]	@ (8004d98 <UART_SetConfig+0x118>)
 8004d66:	fba3 0302 	umull	r0, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2064      	movs	r0, #100	@ 0x64
 8004d6e:	fb00 f303 	mul.w	r3, r0, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	3332      	adds	r3, #50	@ 0x32
 8004d78:	4a07      	ldr	r2, [pc, #28]	@ (8004d98 <UART_SetConfig+0x118>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 020f 	and.w	r2, r3, #15
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	440a      	add	r2, r1
 8004d8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40013800 	.word	0x40013800
 8004d98:	51eb851f 	.word	0x51eb851f

08004d9c <delay_us>:
* @details	HC_SR04 모듈의 트리거를 위해서 사용
* @param	딜레이할 정수값 입력 ex) 10이면 10us딜레이
* @return	viod
*/
#ifdef USE_DELAY_US_TIMER
void delay_us(uint16_t time){
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&DELAY_US_TIMER_HANDLE, 0);
 8004da6:	4b08      	ldr	r3, [pc, #32]	@ (8004dc8 <delay_us+0x2c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&DELAY_US_TIMER_HANDLE) < time);
 8004dae:	bf00      	nop
 8004db0:	4b05      	ldr	r3, [pc, #20]	@ (8004dc8 <delay_us+0x2c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d3f9      	bcc.n	8004db0 <delay_us+0x14>
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr
 8004dc8:	200002b8 	.word	0x200002b8

08004dcc <DHT11_Start>:
* @brief	MCU가 DHT11로 시작신호를 보내는 함수
* @details
* @param	void
* @return	void
*/
void DHT11_Start(){
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
	Set_Pin_Output();
 8004dd0:	f000 f81a 	bl	8004e08 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004dda:	480a      	ldr	r0, [pc, #40]	@ (8004e04 <DHT11_Start+0x38>)
 8004ddc:	f7fd fd27 	bl	800282e <HAL_GPIO_WritePin>
	delay_us(18000);
 8004de0:	f244 6050 	movw	r0, #18000	@ 0x4650
 8004de4:	f7ff ffda 	bl	8004d9c <delay_us>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);
 8004de8:	2201      	movs	r2, #1
 8004dea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004dee:	4805      	ldr	r0, [pc, #20]	@ (8004e04 <DHT11_Start+0x38>)
 8004df0:	f7fd fd1d 	bl	800282e <HAL_GPIO_WritePin>
	delay_us(20);
 8004df4:	2014      	movs	r0, #20
 8004df6:	f7ff ffd1 	bl	8004d9c <delay_us>
	Set_Pin_Input();
 8004dfa:	f000 f821 	bl	8004e40 <Set_Pin_Input>
}
 8004dfe:	bf00      	nop
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40010800 	.word	0x40010800

08004e08 <Set_Pin_Output>:
* @brief	DHT11에 연결된 신호핀을 Output로 만드는 함수
* @details
* @param	void
* @return	void
*/
void Set_Pin_Output() {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004e0e:	463b      	mov	r3, r7
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	605a      	str	r2, [r3, #4]
 8004e16:	609a      	str	r2, [r3, #8]
 8004e18:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT11_PIN;
 8004e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e1e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e20:	2301      	movs	r3, #1
 8004e22:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e24:	2302      	movs	r3, #2
 8004e26:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8004e28:	463b      	mov	r3, r7
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4803      	ldr	r0, [pc, #12]	@ (8004e3c <Set_Pin_Output+0x34>)
 8004e2e:	f7fd fb63 	bl	80024f8 <HAL_GPIO_Init>
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40010800 	.word	0x40010800

08004e40 <Set_Pin_Input>:
* @brief	DHT11에 연결된 신호핀을 Input로 만드는 함수
* @details
* @param	void
* @return	void
*/
void Set_Pin_Input() {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004e46:	463b      	mov	r3, r7
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	609a      	str	r2, [r3, #8]
 8004e50:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT11_Pin;
 8004e52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e56:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8004e60:	463b      	mov	r3, r7
 8004e62:	4619      	mov	r1, r3
 8004e64:	4803      	ldr	r0, [pc, #12]	@ (8004e74 <Set_Pin_Input+0x34>)
 8004e66:	f7fd fb47 	bl	80024f8 <HAL_GPIO_Init>
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40010800 	.word	0x40010800

08004e78 <DHT11_Check_Response>:
* @brief	DHT11이 처음에 제대로 응답하는지 확인하는 함수
* @details	정상응답 : 1 / 제대로 응답하지 않거나 전혀 응답이 없을경우: 0
* @param	void
* @return	void
*/
uint8_t DHT11_Check_Response() {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	71fb      	strb	r3, [r7, #7]
	delay_us(40);
 8004e82:	2028      	movs	r0, #40	@ 0x28
 8004e84:	f7ff ff8a 	bl	8004d9c <delay_us>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8004e88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e8c:	4818      	ldr	r0, [pc, #96]	@ (8004ef0 <DHT11_Check_Response+0x78>)
 8004e8e:	f7fd fcb7 	bl	8002800 <HAL_GPIO_ReadPin>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10f      	bne.n	8004eb8 <DHT11_Check_Response+0x40>
		delay_us(80);
 8004e98:	2050      	movs	r0, #80	@ 0x50
 8004e9a:	f7ff ff7f 	bl	8004d9c <delay_us>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8004e9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004ea2:	4813      	ldr	r0, [pc, #76]	@ (8004ef0 <DHT11_Check_Response+0x78>)
 8004ea4:	f7fd fcac 	bl	8002800 <HAL_GPIO_ReadPin>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <DHT11_Check_Response+0x3c>
			Response = 1;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	71fb      	strb	r3, [r7, #7]
 8004eb2:	e001      	b.n	8004eb8 <DHT11_Check_Response+0x40>
		} else {
			Response = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	71fb      	strb	r3, [r7, #7]
		}
	}

	uint8_t timeout = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	71bb      	strb	r3, [r7, #6]
	while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))){
 8004ebc:	e00a      	b.n	8004ed4 <DHT11_Check_Response+0x5c>
		if (++timeout > 50) return 0; // 타임아웃 50us 이상
 8004ebe:	79bb      	ldrb	r3, [r7, #6]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	71bb      	strb	r3, [r7, #6]
 8004ec4:	79bb      	ldrb	r3, [r7, #6]
 8004ec6:	2b32      	cmp	r3, #50	@ 0x32
 8004ec8:	d901      	bls.n	8004ece <DHT11_Check_Response+0x56>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e00b      	b.n	8004ee6 <DHT11_Check_Response+0x6e>
		delay_us(1);
 8004ece:	2001      	movs	r0, #1
 8004ed0:	f7ff ff64 	bl	8004d9c <delay_us>
	while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))){
 8004ed4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004ed8:	4805      	ldr	r0, [pc, #20]	@ (8004ef0 <DHT11_Check_Response+0x78>)
 8004eda:	f7fd fc91 	bl	8002800 <HAL_GPIO_ReadPin>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ec      	bne.n	8004ebe <DHT11_Check_Response+0x46>
	}

	return Response;
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40010800 	.word	0x40010800

08004ef4 <DHT11_Read_8bit>:
* @brief	DHT11에서 오는 온습도 및 체크sum 을 읽는 함수
* @details	8bit씩 읽으므로 이함수를 총 5번 사용해야 한다
* @param	void
* @return	void
*/
uint8_t DHT11_Read_8bit(void) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0

	uint8_t i, j;
	uint8_t timeout = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	717b      	strb	r3, [r7, #5]
	for (j = 0; j < 8; j++) {
 8004efe:	2300      	movs	r3, #0
 8004f00:	71bb      	strb	r3, [r7, #6]
 8004f02:	e054      	b.n	8004fae <DHT11_Read_8bit+0xba>
		timeout = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	717b      	strb	r3, [r7, #5]
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8004f08:	e00a      	b.n	8004f20 <DHT11_Read_8bit+0x2c>
			if (++timeout > 50) return 0xFF; // 타임아웃 50us 이상
 8004f0a:	797b      	ldrb	r3, [r7, #5]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	717b      	strb	r3, [r7, #5]
 8004f10:	797b      	ldrb	r3, [r7, #5]
 8004f12:	2b32      	cmp	r3, #50	@ 0x32
 8004f14:	d901      	bls.n	8004f1a <DHT11_Read_8bit+0x26>
 8004f16:	23ff      	movs	r3, #255	@ 0xff
 8004f18:	e04d      	b.n	8004fb6 <DHT11_Read_8bit+0xc2>
			delay_us(1);
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f7ff ff3e 	bl	8004d9c <delay_us>
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8004f20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f24:	4826      	ldr	r0, [pc, #152]	@ (8004fc0 <DHT11_Read_8bit+0xcc>)
 8004f26:	f7fd fc6b 	bl	8002800 <HAL_GPIO_ReadPin>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0ec      	beq.n	8004f0a <DHT11_Read_8bit+0x16>
		}
		delay_us(40);   // wait for 40 us
 8004f30:	2028      	movs	r0, #40	@ 0x28
 8004f32:	f7ff ff33 	bl	8004d9c <delay_us>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8004f36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f3a:	4821      	ldr	r0, [pc, #132]	@ (8004fc0 <DHT11_Read_8bit+0xcc>)
 8004f3c:	f7fd fc60 	bl	8002800 <HAL_GPIO_ReadPin>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10e      	bne.n	8004f64 <DHT11_Read_8bit+0x70>
		{
			i &= ~(1 << (7 - j));   // write 0
 8004f46:	79bb      	ldrb	r3, [r7, #6]
 8004f48:	f1c3 0307 	rsb	r3, r3, #7
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	b25b      	sxtb	r3, r3
 8004f54:	43db      	mvns	r3, r3
 8004f56:	b25a      	sxtb	r2, r3
 8004f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	b25b      	sxtb	r3, r3
 8004f60:	71fb      	strb	r3, [r7, #7]
 8004f62:	e00b      	b.n	8004f7c <DHT11_Read_8bit+0x88>
		} else
			i |= (1 << (7 - j));  // if the pin is high, write 1
 8004f64:	79bb      	ldrb	r3, [r7, #6]
 8004f66:	f1c3 0307 	rsb	r3, r3, #7
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	b25a      	sxtb	r2, r3
 8004f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	b25b      	sxtb	r3, r3
 8004f7a:	71fb      	strb	r3, [r7, #7]
		timeout = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	717b      	strb	r3, [r7, #5]
		while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 8004f80:	e00a      	b.n	8004f98 <DHT11_Read_8bit+0xa4>
			if (++timeout > 50) return 0xFF; // 타임아웃 50us 이상
 8004f82:	797b      	ldrb	r3, [r7, #5]
 8004f84:	3301      	adds	r3, #1
 8004f86:	717b      	strb	r3, [r7, #5]
 8004f88:	797b      	ldrb	r3, [r7, #5]
 8004f8a:	2b32      	cmp	r3, #50	@ 0x32
 8004f8c:	d901      	bls.n	8004f92 <DHT11_Read_8bit+0x9e>
 8004f8e:	23ff      	movs	r3, #255	@ 0xff
 8004f90:	e011      	b.n	8004fb6 <DHT11_Read_8bit+0xc2>
			delay_us(1);
 8004f92:	2001      	movs	r0, #1
 8004f94:	f7ff ff02 	bl	8004d9c <delay_us>
		while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 8004f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f9c:	4808      	ldr	r0, [pc, #32]	@ (8004fc0 <DHT11_Read_8bit+0xcc>)
 8004f9e:	f7fd fc2f 	bl	8002800 <HAL_GPIO_ReadPin>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1ec      	bne.n	8004f82 <DHT11_Read_8bit+0x8e>
	for (j = 0; j < 8; j++) {
 8004fa8:	79bb      	ldrb	r3, [r7, #6]
 8004faa:	3301      	adds	r3, #1
 8004fac:	71bb      	strb	r3, [r7, #6]
 8004fae:	79bb      	ldrb	r3, [r7, #6]
 8004fb0:	2b07      	cmp	r3, #7
 8004fb2:	d9a7      	bls.n	8004f04 <DHT11_Read_8bit+0x10>
		}
	}
	return i;
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40010800 	.word	0x40010800

08004fc4 <DHT11_Read_tmepandhum>:
* 			이 함수를 사용 할때는 2초 간격으로 사용하기를 권장한다
* @param	void
* @return	0xff, hum
*/

uint8_t DHT11_Read_tmepandhum(){
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
	DHT11_Start();
 8004fca:	f7ff feff 	bl	8004dcc <DHT11_Start>
		int a = DHT11_Check_Response();
 8004fce:	f7ff ff53 	bl	8004e78 <DHT11_Check_Response>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	60fb      	str	r3, [r7, #12]
		if(a == 0xFF) return 0xFF;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2bff      	cmp	r3, #255	@ 0xff
 8004fda:	d101      	bne.n	8004fe0 <DHT11_Read_tmepandhum+0x1c>
 8004fdc:	23ff      	movs	r3, #255	@ 0xff
 8004fde:	e03b      	b.n	8005058 <DHT11_Read_tmepandhum+0x94>

		uint8_t temp , hum, sum , hum1 , temp1 ;
		hum = DHT11_Read_8bit();
 8004fe0:	f7ff ff88 	bl	8004ef4 <DHT11_Read_8bit>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	72fb      	strb	r3, [r7, #11]
		hum1 = DHT11_Read_8bit();
 8004fe8:	f7ff ff84 	bl	8004ef4 <DHT11_Read_8bit>
 8004fec:	4603      	mov	r3, r0
 8004fee:	72bb      	strb	r3, [r7, #10]
		temp = DHT11_Read_8bit();
 8004ff0:	f7ff ff80 	bl	8004ef4 <DHT11_Read_8bit>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	727b      	strb	r3, [r7, #9]
		temp1 = DHT11_Read_8bit();
 8004ff8:	f7ff ff7c 	bl	8004ef4 <DHT11_Read_8bit>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	723b      	strb	r3, [r7, #8]
		sum = DHT11_Read_8bit();
 8005000:	f7ff ff78 	bl	8004ef4 <DHT11_Read_8bit>
 8005004:	4603      	mov	r3, r0
 8005006:	71fb      	strb	r3, [r7, #7]

		float result = temp + (temp1 / 10.0f);
 8005008:	7a7b      	ldrb	r3, [r7, #9]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fb fe16 	bl	8000c3c <__aeabi_i2f>
 8005010:	4604      	mov	r4, r0
 8005012:	7a3b      	ldrb	r3, [r7, #8]
 8005014:	4618      	mov	r0, r3
 8005016:	f7fb fe11 	bl	8000c3c <__aeabi_i2f>
 800501a:	4603      	mov	r3, r0
 800501c:	4910      	ldr	r1, [pc, #64]	@ (8005060 <DHT11_Read_tmepandhum+0x9c>)
 800501e:	4618      	mov	r0, r3
 8005020:	f7fb ff14 	bl	8000e4c <__aeabi_fdiv>
 8005024:	4603      	mov	r3, r0
 8005026:	4619      	mov	r1, r3
 8005028:	4620      	mov	r0, r4
 800502a:	f7fb fd53 	bl	8000ad4 <__addsf3>
 800502e:	4603      	mov	r3, r0
 8005030:	603b      	str	r3, [r7, #0]

		if((hum + temp + hum1 + temp1) == sum)
 8005032:	7afa      	ldrb	r2, [r7, #11]
 8005034:	7a7b      	ldrb	r3, [r7, #9]
 8005036:	441a      	add	r2, r3
 8005038:	7abb      	ldrb	r3, [r7, #10]
 800503a:	441a      	add	r2, r3
 800503c:	7a3b      	ldrb	r3, [r7, #8]
 800503e:	441a      	add	r2, r3
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	429a      	cmp	r2, r3
 8005044:	d107      	bne.n	8005056 <DHT11_Read_tmepandhum+0x92>
		{
			DHT11.DHT11_temp = result;
 8005046:	4a07      	ldr	r2, [pc, #28]	@ (8005064 <DHT11_Read_tmepandhum+0xa0>)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6013      	str	r3, [r2, #0]
			DHT11.DHT11_hum = hum;
 800504c:	7afb      	ldrb	r3, [r7, #11]
 800504e:	4a05      	ldr	r2, [pc, #20]	@ (8005064 <DHT11_Read_tmepandhum+0xa0>)
 8005050:	6053      	str	r3, [r2, #4]
			return 0;
 8005052:	2300      	movs	r3, #0
 8005054:	e000      	b.n	8005058 <DHT11_Read_tmepandhum+0x94>
		}else return 0xFF;
 8005056:	23ff      	movs	r3, #255	@ 0xff
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	bd90      	pop	{r4, r7, pc}
 8005060:	41200000 	.word	0x41200000
 8005064:	20000350 	.word	0x20000350

08005068 <HC_SR04_Init>:
* @brief	HC_SR04 모듈 초기화 함수
* @details	타이머, 체널선택 및 연산에 필요한 변수값 초기화
* @param	사용할 타이머 주소 주소, 사용할 체널 1~4까지 정수로 입력
* @return	void
*/
void HC_SR04_Init(){
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	HC_SR04.IC_Val1 = 0;
 800506e:	4b10      	ldr	r3, [pc, #64]	@ (80050b0 <HC_SR04_Init+0x48>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
	HC_SR04.IC_Val2 = 0;
 8005074:	4b0e      	ldr	r3, [pc, #56]	@ (80050b0 <HC_SR04_Init+0x48>)
 8005076:	2200      	movs	r2, #0
 8005078:	605a      	str	r2, [r3, #4]
	HC_SR04.Difference = 0;
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <HC_SR04_Init+0x48>)
 800507c:	2200      	movs	r2, #0
 800507e:	609a      	str	r2, [r3, #8]
	HC_SR04.Is_First_Captured = 0;
 8005080:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <HC_SR04_Init+0x48>)
 8005082:	2200      	movs	r2, #0
 8005084:	731a      	strb	r2, [r3, #12]
	HC_SR04.Distance = 0;
 8005086:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <HC_SR04_Init+0x48>)
 8005088:	2200      	movs	r2, #0
 800508a:	735a      	strb	r2, [r3, #13]
	HC_SR04.HC_SR04_timer = &TIMER_HC_SR04;
 800508c:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <HC_SR04_Init+0x48>)
 800508e:	4a09      	ldr	r2, [pc, #36]	@ (80050b4 <HC_SR04_Init+0x4c>)
 8005090:	611a      	str	r2, [r3, #16]

	uint32_t temp = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]

	switch(CHALLEL_NUMBER){
	case 1:
		temp = TIM_CHANNEL_1;
 8005096:	2300      	movs	r3, #0
 8005098:	607b      	str	r3, [r7, #4]
		break;
 800509a:	bf00      	nop
	case 4:
		temp = TIM_CHANNEL_4;
		break;
	}

	HAL_TIM_IC_Start_IT(HC_SR04.HC_SR04_timer, temp);
 800509c:	4b04      	ldr	r3, [pc, #16]	@ (80050b0 <HC_SR04_Init+0x48>)
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe fde8 	bl	8003c78 <HAL_TIM_IC_Start_IT>
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20000358 	.word	0x20000358
 80050b4:	200002b8 	.word	0x200002b8

080050b8 <HC_SR04_Read>:
* @details	HC_SR04 모듈에 트리거를 입력후 인터럽트를 활성화 시켜 거리를 연산
* 			초음파 모듈 측정주기는 60ms이상을 권장한다
* @param	void
* @return	void
*/
int HC_SR04_Read(void) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
	Trig(1);
 80050bc:	2201      	movs	r2, #1
 80050be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050c2:	480d      	ldr	r0, [pc, #52]	@ (80050f8 <HC_SR04_Read+0x40>)
 80050c4:	f7fd fbb3 	bl	800282e <HAL_GPIO_WritePin>
	delay_us(10);
 80050c8:	200a      	movs	r0, #10
 80050ca:	f7ff fe67 	bl	8004d9c <delay_us>
	Trig(0);
 80050ce:	2200      	movs	r2, #0
 80050d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050d4:	4808      	ldr	r0, [pc, #32]	@ (80050f8 <HC_SR04_Read+0x40>)
 80050d6:	f7fd fbaa 	bl	800282e <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(HC_SR04.HC_SR04_timer, TIM_IT_CC1);
 80050da:	4b08      	ldr	r3, [pc, #32]	@ (80050fc <HC_SR04_Read+0x44>)
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <HC_SR04_Read+0x44>)
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0202 	orr.w	r2, r2, #2
 80050ec:	60da      	str	r2, [r3, #12]

	return HC_SR04.Distance;
 80050ee:	4b03      	ldr	r3, [pc, #12]	@ (80050fc <HC_SR04_Read+0x44>)
 80050f0:	7b5b      	ldrb	r3, [r3, #13]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40010c00 	.word	0x40010c00
 80050fc:	20000358 	.word	0x20000358

08005100 <HAL_TIM_IC_CaptureCallback>:
* @details	입력 캡처 인터럽트가 발생했을 때 자동으로 호출되는 콜백 함수
* @param	htim
* @return	void
*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	7f1b      	ldrb	r3, [r3, #28]
 800510c:	2b01      	cmp	r3, #1
 800510e:	f040 8085 	bne.w	800521c <HAL_TIM_IC_CaptureCallback+0x11c>
	{
		if (HC_SR04.Is_First_Captured==0) // if the first value is not captured
 8005112:	4b47      	ldr	r3, [pc, #284]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005114:	7b1b      	ldrb	r3, [r3, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d11a      	bne.n	8005150 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			HC_SR04.IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800511a:	2100      	movs	r1, #0
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff f90b 	bl	8004338 <HAL_TIM_ReadCapturedValue>
 8005122:	4603      	mov	r3, r0
 8005124:	4a42      	ldr	r2, [pc, #264]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005126:	6013      	str	r3, [r2, #0]
			HC_SR04.Is_First_Captured = 1;  // set the first captured as true
 8005128:	4b41      	ldr	r3, [pc, #260]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 800512a:	2201      	movs	r2, #1
 800512c:	731a      	strb	r2, [r3, #12]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 020a 	bic.w	r2, r2, #10
 800513c:	621a      	str	r2, [r3, #32]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a1a      	ldr	r2, [r3, #32]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0202 	orr.w	r2, r2, #2
 800514c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(HC_SR04.HC_SR04_timer, TIM_IT_CC1);
		}
	}
}
 800514e:	e065      	b.n	800521c <HAL_TIM_IC_CaptureCallback+0x11c>
		else if (HC_SR04.Is_First_Captured==1)   // if the first is already captured
 8005150:	4b37      	ldr	r3, [pc, #220]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005152:	7b1b      	ldrb	r3, [r3, #12]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d161      	bne.n	800521c <HAL_TIM_IC_CaptureCallback+0x11c>
			HC_SR04.IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8005158:	2100      	movs	r1, #0
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff f8ec 	bl	8004338 <HAL_TIM_ReadCapturedValue>
 8005160:	4603      	mov	r3, r0
 8005162:	4a33      	ldr	r2, [pc, #204]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005164:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2200      	movs	r2, #0
 800516c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (HC_SR04.IC_Val2 > HC_SR04.IC_Val1)
 800516e:	4b30      	ldr	r3, [pc, #192]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	4b2f      	ldr	r3, [pc, #188]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d907      	bls.n	800518a <HAL_TIM_IC_CaptureCallback+0x8a>
				HC_SR04.Difference = HC_SR04.IC_Val2 - HC_SR04.IC_Val1;
 800517a:	4b2d      	ldr	r3, [pc, #180]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	4b2c      	ldr	r3, [pc, #176]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	4a2a      	ldr	r2, [pc, #168]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005186:	6093      	str	r3, [r2, #8]
 8005188:	e00f      	b.n	80051aa <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (HC_SR04.IC_Val1 > HC_SR04.IC_Val2)
 800518a:	4b29      	ldr	r3, [pc, #164]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4b28      	ldr	r3, [pc, #160]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	429a      	cmp	r2, r3
 8005194:	d909      	bls.n	80051aa <HAL_TIM_IC_CaptureCallback+0xaa>
				HC_SR04.Difference = (0xffff - HC_SR04.IC_Val1) + HC_SR04.IC_Val2;
 8005196:	4b26      	ldr	r3, [pc, #152]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	4b25      	ldr	r3, [pc, #148]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80051a4:	33ff      	adds	r3, #255	@ 0xff
 80051a6:	4a22      	ldr	r2, [pc, #136]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 80051a8:	6093      	str	r3, [r2, #8]
			HC_SR04.Distance = HC_SR04.Difference * .034/2;
 80051aa:	4b21      	ldr	r3, [pc, #132]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fb f918 	bl	80003e4 <__aeabi_ui2d>
 80051b4:	a31c      	add	r3, pc, #112	@ (adr r3, 8005228 <HAL_TIM_IC_CaptureCallback+0x128>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f7fb f98d 	bl	80004d8 <__aeabi_dmul>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4610      	mov	r0, r2
 80051c4:	4619      	mov	r1, r3
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80051ce:	f7fb faad 	bl	800072c <__aeabi_ddiv>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4610      	mov	r0, r2
 80051d8:	4619      	mov	r1, r3
 80051da:	f7fb fc55 	bl	8000a88 <__aeabi_d2uiz>
 80051de:	4603      	mov	r3, r0
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	4b13      	ldr	r3, [pc, #76]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 80051e4:	735a      	strb	r2, [r3, #13]
			HC_SR04.Is_First_Captured = 0; // set it back to false
 80051e6:	4b12      	ldr	r3, [pc, #72]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	731a      	strb	r2, [r3, #12]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6a1a      	ldr	r2, [r3, #32]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 020a 	bic.w	r2, r2, #10
 80051fa:	621a      	str	r2, [r3, #32]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6a12      	ldr	r2, [r2, #32]
 8005206:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(HC_SR04.HC_SR04_timer, TIM_IT_CC1);
 8005208:	4b09      	ldr	r3, [pc, #36]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0202 	bic.w	r2, r2, #2
 800521a:	60da      	str	r2, [r3, #12]
}
 800521c:	bf00      	nop
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	f3af 8000 	nop.w
 8005228:	b020c49c 	.word	0xb020c49c
 800522c:	3fa16872 	.word	0x3fa16872
 8005230:	20000358 	.word	0x20000358

08005234 <LCD_SendInternal>:
* @details
* @param	cmd, flag
* @return	viod
*/
void LCD_SendInternal(uint8_t cmd, uint8_t flag)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af02      	add	r7, sp, #8
 800523a:	4603      	mov	r3, r0
 800523c:	460a      	mov	r2, r1
 800523e:	71fb      	strb	r3, [r7, #7]
 8005240:	4613      	mov	r3, r2
 8005242:	71bb      	strb	r3, [r7, #6]
  uint8_t data_u, data_l;
  uint8_t data_t[4];

  data_u = (cmd & 0xf0);
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	f023 030f 	bic.w	r3, r3, #15
 800524a:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd<<4) & 0xf0);
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	73bb      	strb	r3, [r7, #14]
  data_t[0] = data_u|flag|0x0C;
 8005252:	7bfa      	ldrb	r2, [r7, #15]
 8005254:	79bb      	ldrb	r3, [r7, #6]
 8005256:	4313      	orrs	r3, r2
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f043 030c 	orr.w	r3, r3, #12
 800525e:	b2db      	uxtb	r3, r3
 8005260:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u|flag|0x08;
 8005262:	7bfa      	ldrb	r2, [r7, #15]
 8005264:	79bb      	ldrb	r3, [r7, #6]
 8005266:	4313      	orrs	r3, r2
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f043 0308 	orr.w	r3, r3, #8
 800526e:	b2db      	uxtb	r3, r3
 8005270:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l|flag|0x0C;
 8005272:	7bba      	ldrb	r2, [r7, #14]
 8005274:	79bb      	ldrb	r3, [r7, #6]
 8005276:	4313      	orrs	r3, r2
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f043 030c 	orr.w	r3, r3, #12
 800527e:	b2db      	uxtb	r3, r3
 8005280:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l|flag|0x08;
 8005282:	7bba      	ldrb	r2, [r7, #14]
 8005284:	79bb      	ldrb	r3, [r7, #6]
 8005286:	4313      	orrs	r3, r2
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f043 0308 	orr.w	r3, r3, #8
 800528e:	b2db      	uxtb	r3, r3
 8005290:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit (&I2C_LCD_I2C_16X2, LCD_ADDR,data_t, sizeof(data_t), HAL_MAX_DELAY);
 8005292:	f107 0208 	add.w	r2, r7, #8
 8005296:	f04f 33ff 	mov.w	r3, #4294967295
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2304      	movs	r3, #4
 800529e:	217e      	movs	r1, #126	@ 0x7e
 80052a0:	4804      	ldr	r0, [pc, #16]	@ (80052b4 <LCD_SendInternal+0x80>)
 80052a2:	f7fd fc21 	bl	8002ae8 <HAL_I2C_Master_Transmit>
  HAL_Delay(5);
 80052a6:	2005      	movs	r0, #5
 80052a8:	f7fc fba8 	bl	80019fc <HAL_Delay>
}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	20000264 	.word	0x20000264

080052b8 <LCD_print_Cmd>:
* @brief	명령어를 LCD로 출력하는 함수
* @details	내부적으로 LCD_SendData로 명령어 전송
* @param	cmd
* @return	viod
*/
void LCD_print_Cmd(uint8_t cmd) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	71fb      	strb	r3, [r7, #7]
  LCD_SendInternal(cmd, 0x00);
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	2100      	movs	r1, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff ffb4 	bl	8005234 <LCD_SendInternal>
}
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <LCD_print_String>:
* @brief	글자를 출력하는 함수
* @details	글자를 받아서 내부적으로 LCD_SendData로 한 워드씩 출력
* @param	str
* @return	viod
*/
void LCD_print_String(char *format, ...) {
 80052d4:	b40f      	push	{r0, r1, r2, r3}
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b0c2      	sub	sp, #264	@ 0x108
 80052da:	af00      	add	r7, sp, #0
	char buffer[256];

	va_list args;
	va_start(args, format);
 80052dc:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80052e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e8:	601a      	str	r2, [r3, #0]
	vsnprintf(buffer, sizeof(buffer), format, args);
 80052ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f2:	1d38      	adds	r0, r7, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80052fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052fe:	f000 fe69 	bl	8005fd4 <vsniprintf>
	va_end(args);

	char *temp = buffer;
 8005302:	1d3b      	adds	r3, r7, #4
 8005304:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    while(*temp) {
 8005308:	e008      	b.n	800531c <LCD_print_String+0x48>
    	LCD_SendData(*temp++);
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f80e 	bl	8005338 <LCD_SendData>
    while(*temp) {
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f1      	bne.n	800530a <LCD_print_String+0x36>
    }
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800532e:	46bd      	mov	sp, r7
 8005330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005334:	b004      	add	sp, #16
 8005336:	4770      	bx	lr

08005338 <LCD_SendData>:
* @brief	데이터를 LCD로 출력하는 함수
* @details	내부적으로 LCD_SendData로 명령어 전송
* @param	data
* @return	void
*/
void LCD_SendData(uint8_t data) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	71fb      	strb	r3, [r7, #7]
  LCD_SendInternal(data, 0x01);
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	2101      	movs	r1, #1
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff ff74 	bl	8005234 <LCD_SendInternal>
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <LCD_Init>:
* @brief	LCD를 처음 켤때 초기화 해주는 함수
* @details	글자크기, 커서표시여부, 비트수, 백라이트 설정등을 제어
* @param	void
* @return	void
*/
void LCD_Init(void) {
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  // LCD_FUNCTIONSET, 8-bit mode, 2 lines, 5x8 format
	LCD_print_Cmd(0x38); // 0b00111000
 8005358:	2038      	movs	r0, #56	@ 0x38
 800535a:	f7ff ffad 	bl	80052b8 <LCD_print_Cmd>
  // display & cursor home
	LCD_print_Cmd(0x02); // 0b00000010
 800535e:	2002      	movs	r0, #2
 8005360:	f7ff ffaa 	bl	80052b8 <LCD_print_Cmd>
  // display on, right shift, underline off, blink off
	LCD_print_Cmd(0x0C); // 0b00001100
 8005364:	200c      	movs	r0, #12
 8005366:	f7ff ffa7 	bl	80052b8 <LCD_print_Cmd>
  // clear display (optional here)
	LCD_print_Cmd(0x01); // 0b00000001
 800536a:	2001      	movs	r0, #1
 800536c:	f7ff ffa4 	bl	80052b8 <LCD_print_Cmd>
  // LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC
	LCD_print_Cmd(0x06); // 0b00000110
 8005370:	2006      	movs	r0, #6
 8005372:	f7ff ffa1 	bl	80052b8 <LCD_print_Cmd>
}
 8005376:	bf00      	nop
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <LCD_setCursor>:
* @brief	LCD의 커서 위치제어 함수
* @details	본 LCD는 16*2 크기이다.
* @param	width(가로), length(세로)
* @return	void
*/
void LCD_setCursor(uint8_t col, uint8_t row){
 800537c:	b590      	push	{r4, r7, lr}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	4603      	mov	r3, r0
 8005384:	460a      	mov	r2, r1
 8005386:	71fb      	strb	r3, [r7, #7]
 8005388:	4613      	mov	r3, r2
 800538a:	71bb      	strb	r3, [r7, #6]
    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800538c:	4b10      	ldr	r3, [pc, #64]	@ (80053d0 <LCD_setCursor+0x54>)
 800538e:	f107 0408 	add.w	r4, r7, #8
 8005392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005394:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if ( row > LCD_LINES ) {
 8005398:	79bb      	ldrb	r3, [r7, #6]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <LCD_setCursor+0x26>
        row = LCD_LINES-1;
 800539e:	2301      	movs	r3, #1
 80053a0:	71bb      	strb	r3, [r7, #6]
    }
    LCD_print_Cmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80053a2:	79bb      	ldrb	r3, [r7, #6]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	3318      	adds	r3, #24
 80053a8:	443b      	add	r3, r7
 80053aa:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	4413      	add	r3, r2
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	b25b      	sxtb	r3, r3
 80053b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053bc:	b25b      	sxtb	r3, r3
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff ff79 	bl	80052b8 <LCD_print_Cmd>
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd90      	pop	{r4, r7, pc}
 80053ce:	bf00      	nop
 80053d0:	080081b0 	.word	0x080081b0

080053d4 <UART_print>:
 * @brief	UART 글자출력함수
 * @details	UART통신을 이용해서 아스키코드 포맷으로 출력하는 함수 / printf함수와 유사
 * @param
 * @return	int
 */
int UART_print(char *format, ...) {
 80053d4:	b40f      	push	{r0, r1, r2, r3}
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b0c2      	sub	sp, #264	@ 0x108
 80053da:	af00      	add	r7, sp, #0
    char buffer[256];

    va_list args;
    va_start(args, format);
 80053dc:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80053e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053e8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80053ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053f2:	f107 0008 	add.w	r0, r7, #8
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80053fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005400:	f000 fde8 	bl	8005fd4 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&UART, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8005404:	f107 0308 	add.w	r3, r7, #8
 8005408:	4618      	mov	r0, r3
 800540a:	f7fa fea1 	bl	8000150 <strlen>
 800540e:	4603      	mov	r3, r0
 8005410:	b29a      	uxth	r2, r3
 8005412:	f107 0108 	add.w	r1, r7, #8
 8005416:	f04f 33ff 	mov.w	r3, #4294967295
 800541a:	4806      	ldr	r0, [pc, #24]	@ (8005434 <UART_print+0x60>)
 800541c:	f7ff faea 	bl	80049f4 <HAL_UART_Transmit>
    return 0;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005428:	46bd      	mov	sp, r7
 800542a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800542e:	b004      	add	sp, #16
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20000300 	.word	0x20000300

08005438 <user_main>:

#include "user_main.h"



void user_main() {
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
	LCD_Init();
 800543e:	f7ff ff89 	bl	8005354 <LCD_Init>
	LCD_setCursor(0, 0);
 8005442:	2100      	movs	r1, #0
 8005444:	2000      	movs	r0, #0
 8005446:	f7ff ff99 	bl	800537c <LCD_setCursor>
	HC_SR04_Init();
 800544a:	f7ff fe0d 	bl	8005068 <HC_SR04_Init>
	int a = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	607b      	str	r3, [r7, #4]


	while (1) {

		HAL_Delay(500);
 8005452:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005456:	f7fc fad1 	bl	80019fc <HAL_Delay>

		DHT11_Read_tmepandhum();
 800545a:	f7ff fdb3 	bl	8004fc4 <DHT11_Read_tmepandhum>
		LCD_setCursor(0, 0);
 800545e:	2100      	movs	r1, #0
 8005460:	2000      	movs	r0, #0
 8005462:	f7ff ff8b 	bl	800537c <LCD_setCursor>
		LCD_print_String("T: %.2f ", DHT11.DHT11_temp);
 8005466:	4b10      	ldr	r3, [pc, #64]	@ (80054a8 <user_main+0x70>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fa ffdc 	bl	8000428 <__aeabi_f2d>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	480d      	ldr	r0, [pc, #52]	@ (80054ac <user_main+0x74>)
 8005476:	f7ff ff2d 	bl	80052d4 <LCD_print_String>
		LCD_print_String("H: %d", DHT11.DHT11_hum);
 800547a:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <user_main+0x70>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4619      	mov	r1, r3
 8005480:	480b      	ldr	r0, [pc, #44]	@ (80054b0 <user_main+0x78>)
 8005482:	f7ff ff27 	bl	80052d4 <LCD_print_String>

		a = HC_SR04_Read();
 8005486:	f7ff fe17 	bl	80050b8 <HC_SR04_Read>
 800548a:	6078      	str	r0, [r7, #4]
		LCD_setCursor(0, 1);
 800548c:	2101      	movs	r1, #1
 800548e:	2000      	movs	r0, #0
 8005490:	f7ff ff74 	bl	800537c <LCD_setCursor>
		LCD_print_String("Distance : %.3d", a);
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	4807      	ldr	r0, [pc, #28]	@ (80054b4 <user_main+0x7c>)
 8005498:	f7ff ff1c 	bl	80052d4 <LCD_print_String>
		UART_print("Distance : %.3d\n", a);
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	4806      	ldr	r0, [pc, #24]	@ (80054b8 <user_main+0x80>)
 80054a0:	f7ff ff98 	bl	80053d4 <UART_print>
		HAL_Delay(500);
 80054a4:	bf00      	nop
 80054a6:	e7d4      	b.n	8005452 <user_main+0x1a>
 80054a8:	20000350 	.word	0x20000350
 80054ac:	080081c0 	.word	0x080081c0
 80054b0:	080081cc 	.word	0x080081cc
 80054b4:	080081d4 	.word	0x080081d4
 80054b8:	080081e4 	.word	0x080081e4

080054bc <__cvt>:
 80054bc:	2b00      	cmp	r3, #0
 80054be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c2:	461d      	mov	r5, r3
 80054c4:	bfbb      	ittet	lt
 80054c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80054ca:	461d      	movlt	r5, r3
 80054cc:	2300      	movge	r3, #0
 80054ce:	232d      	movlt	r3, #45	@ 0x2d
 80054d0:	b088      	sub	sp, #32
 80054d2:	4614      	mov	r4, r2
 80054d4:	bfb8      	it	lt
 80054d6:	4614      	movlt	r4, r2
 80054d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80054da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80054dc:	7013      	strb	r3, [r2, #0]
 80054de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80054e4:	f023 0820 	bic.w	r8, r3, #32
 80054e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054ec:	d005      	beq.n	80054fa <__cvt+0x3e>
 80054ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80054f2:	d100      	bne.n	80054f6 <__cvt+0x3a>
 80054f4:	3601      	adds	r6, #1
 80054f6:	2302      	movs	r3, #2
 80054f8:	e000      	b.n	80054fc <__cvt+0x40>
 80054fa:	2303      	movs	r3, #3
 80054fc:	aa07      	add	r2, sp, #28
 80054fe:	9204      	str	r2, [sp, #16]
 8005500:	aa06      	add	r2, sp, #24
 8005502:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005506:	e9cd 3600 	strd	r3, r6, [sp]
 800550a:	4622      	mov	r2, r4
 800550c:	462b      	mov	r3, r5
 800550e:	f000 fe87 	bl	8006220 <_dtoa_r>
 8005512:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005516:	4607      	mov	r7, r0
 8005518:	d119      	bne.n	800554e <__cvt+0x92>
 800551a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800551c:	07db      	lsls	r3, r3, #31
 800551e:	d50e      	bpl.n	800553e <__cvt+0x82>
 8005520:	eb00 0906 	add.w	r9, r0, r6
 8005524:	2200      	movs	r2, #0
 8005526:	2300      	movs	r3, #0
 8005528:	4620      	mov	r0, r4
 800552a:	4629      	mov	r1, r5
 800552c:	f7fb fa3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005530:	b108      	cbz	r0, 8005536 <__cvt+0x7a>
 8005532:	f8cd 901c 	str.w	r9, [sp, #28]
 8005536:	2230      	movs	r2, #48	@ 0x30
 8005538:	9b07      	ldr	r3, [sp, #28]
 800553a:	454b      	cmp	r3, r9
 800553c:	d31e      	bcc.n	800557c <__cvt+0xc0>
 800553e:	4638      	mov	r0, r7
 8005540:	9b07      	ldr	r3, [sp, #28]
 8005542:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005544:	1bdb      	subs	r3, r3, r7
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	b008      	add	sp, #32
 800554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005552:	eb00 0906 	add.w	r9, r0, r6
 8005556:	d1e5      	bne.n	8005524 <__cvt+0x68>
 8005558:	7803      	ldrb	r3, [r0, #0]
 800555a:	2b30      	cmp	r3, #48	@ 0x30
 800555c:	d10a      	bne.n	8005574 <__cvt+0xb8>
 800555e:	2200      	movs	r2, #0
 8005560:	2300      	movs	r3, #0
 8005562:	4620      	mov	r0, r4
 8005564:	4629      	mov	r1, r5
 8005566:	f7fb fa1f 	bl	80009a8 <__aeabi_dcmpeq>
 800556a:	b918      	cbnz	r0, 8005574 <__cvt+0xb8>
 800556c:	f1c6 0601 	rsb	r6, r6, #1
 8005570:	f8ca 6000 	str.w	r6, [sl]
 8005574:	f8da 3000 	ldr.w	r3, [sl]
 8005578:	4499      	add	r9, r3
 800557a:	e7d3      	b.n	8005524 <__cvt+0x68>
 800557c:	1c59      	adds	r1, r3, #1
 800557e:	9107      	str	r1, [sp, #28]
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	e7d9      	b.n	8005538 <__cvt+0x7c>

08005584 <__exponent>:
 8005584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005586:	2900      	cmp	r1, #0
 8005588:	bfb6      	itet	lt
 800558a:	232d      	movlt	r3, #45	@ 0x2d
 800558c:	232b      	movge	r3, #43	@ 0x2b
 800558e:	4249      	neglt	r1, r1
 8005590:	2909      	cmp	r1, #9
 8005592:	7002      	strb	r2, [r0, #0]
 8005594:	7043      	strb	r3, [r0, #1]
 8005596:	dd29      	ble.n	80055ec <__exponent+0x68>
 8005598:	f10d 0307 	add.w	r3, sp, #7
 800559c:	461d      	mov	r5, r3
 800559e:	270a      	movs	r7, #10
 80055a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80055a4:	461a      	mov	r2, r3
 80055a6:	fb07 1416 	mls	r4, r7, r6, r1
 80055aa:	3430      	adds	r4, #48	@ 0x30
 80055ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80055b0:	460c      	mov	r4, r1
 80055b2:	2c63      	cmp	r4, #99	@ 0x63
 80055b4:	4631      	mov	r1, r6
 80055b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80055ba:	dcf1      	bgt.n	80055a0 <__exponent+0x1c>
 80055bc:	3130      	adds	r1, #48	@ 0x30
 80055be:	1e94      	subs	r4, r2, #2
 80055c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80055c4:	4623      	mov	r3, r4
 80055c6:	1c41      	adds	r1, r0, #1
 80055c8:	42ab      	cmp	r3, r5
 80055ca:	d30a      	bcc.n	80055e2 <__exponent+0x5e>
 80055cc:	f10d 0309 	add.w	r3, sp, #9
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	42ac      	cmp	r4, r5
 80055d4:	bf88      	it	hi
 80055d6:	2300      	movhi	r3, #0
 80055d8:	3302      	adds	r3, #2
 80055da:	4403      	add	r3, r0
 80055dc:	1a18      	subs	r0, r3, r0
 80055de:	b003      	add	sp, #12
 80055e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80055e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80055ea:	e7ed      	b.n	80055c8 <__exponent+0x44>
 80055ec:	2330      	movs	r3, #48	@ 0x30
 80055ee:	3130      	adds	r1, #48	@ 0x30
 80055f0:	7083      	strb	r3, [r0, #2]
 80055f2:	70c1      	strb	r1, [r0, #3]
 80055f4:	1d03      	adds	r3, r0, #4
 80055f6:	e7f1      	b.n	80055dc <__exponent+0x58>

080055f8 <_printf_float>:
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	b091      	sub	sp, #68	@ 0x44
 80055fe:	460c      	mov	r4, r1
 8005600:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005604:	4616      	mov	r6, r2
 8005606:	461f      	mov	r7, r3
 8005608:	4605      	mov	r5, r0
 800560a:	f000 fcf9 	bl	8006000 <_localeconv_r>
 800560e:	6803      	ldr	r3, [r0, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	9308      	str	r3, [sp, #32]
 8005614:	f7fa fd9c 	bl	8000150 <strlen>
 8005618:	2300      	movs	r3, #0
 800561a:	930e      	str	r3, [sp, #56]	@ 0x38
 800561c:	f8d8 3000 	ldr.w	r3, [r8]
 8005620:	9009      	str	r0, [sp, #36]	@ 0x24
 8005622:	3307      	adds	r3, #7
 8005624:	f023 0307 	bic.w	r3, r3, #7
 8005628:	f103 0208 	add.w	r2, r3, #8
 800562c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005630:	f8d4 b000 	ldr.w	fp, [r4]
 8005634:	f8c8 2000 	str.w	r2, [r8]
 8005638:	e9d3 8900 	ldrd	r8, r9, [r3]
 800563c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005640:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005642:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005646:	f04f 32ff 	mov.w	r2, #4294967295
 800564a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800564e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005652:	4b9c      	ldr	r3, [pc, #624]	@ (80058c4 <_printf_float+0x2cc>)
 8005654:	f7fb f9da 	bl	8000a0c <__aeabi_dcmpun>
 8005658:	bb70      	cbnz	r0, 80056b8 <_printf_float+0xc0>
 800565a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800565e:	f04f 32ff 	mov.w	r2, #4294967295
 8005662:	4b98      	ldr	r3, [pc, #608]	@ (80058c4 <_printf_float+0x2cc>)
 8005664:	f7fb f9b4 	bl	80009d0 <__aeabi_dcmple>
 8005668:	bb30      	cbnz	r0, 80056b8 <_printf_float+0xc0>
 800566a:	2200      	movs	r2, #0
 800566c:	2300      	movs	r3, #0
 800566e:	4640      	mov	r0, r8
 8005670:	4649      	mov	r1, r9
 8005672:	f7fb f9a3 	bl	80009bc <__aeabi_dcmplt>
 8005676:	b110      	cbz	r0, 800567e <_printf_float+0x86>
 8005678:	232d      	movs	r3, #45	@ 0x2d
 800567a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800567e:	4a92      	ldr	r2, [pc, #584]	@ (80058c8 <_printf_float+0x2d0>)
 8005680:	4b92      	ldr	r3, [pc, #584]	@ (80058cc <_printf_float+0x2d4>)
 8005682:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005686:	bf94      	ite	ls
 8005688:	4690      	movls	r8, r2
 800568a:	4698      	movhi	r8, r3
 800568c:	2303      	movs	r3, #3
 800568e:	f04f 0900 	mov.w	r9, #0
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	f02b 0304 	bic.w	r3, fp, #4
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	4633      	mov	r3, r6
 800569c:	4621      	mov	r1, r4
 800569e:	4628      	mov	r0, r5
 80056a0:	9700      	str	r7, [sp, #0]
 80056a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80056a4:	f000 f9d4 	bl	8005a50 <_printf_common>
 80056a8:	3001      	adds	r0, #1
 80056aa:	f040 8090 	bne.w	80057ce <_printf_float+0x1d6>
 80056ae:	f04f 30ff 	mov.w	r0, #4294967295
 80056b2:	b011      	add	sp, #68	@ 0x44
 80056b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	4640      	mov	r0, r8
 80056be:	4649      	mov	r1, r9
 80056c0:	f7fb f9a4 	bl	8000a0c <__aeabi_dcmpun>
 80056c4:	b148      	cbz	r0, 80056da <_printf_float+0xe2>
 80056c6:	464b      	mov	r3, r9
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bfb8      	it	lt
 80056cc:	232d      	movlt	r3, #45	@ 0x2d
 80056ce:	4a80      	ldr	r2, [pc, #512]	@ (80058d0 <_printf_float+0x2d8>)
 80056d0:	bfb8      	it	lt
 80056d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80056d6:	4b7f      	ldr	r3, [pc, #508]	@ (80058d4 <_printf_float+0x2dc>)
 80056d8:	e7d3      	b.n	8005682 <_printf_float+0x8a>
 80056da:	6863      	ldr	r3, [r4, #4]
 80056dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	d13f      	bne.n	8005764 <_printf_float+0x16c>
 80056e4:	2306      	movs	r3, #6
 80056e6:	6063      	str	r3, [r4, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80056ee:	6023      	str	r3, [r4, #0]
 80056f0:	9206      	str	r2, [sp, #24]
 80056f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80056f4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80056f8:	aa0d      	add	r2, sp, #52	@ 0x34
 80056fa:	9203      	str	r2, [sp, #12]
 80056fc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005700:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005704:	6863      	ldr	r3, [r4, #4]
 8005706:	4642      	mov	r2, r8
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	4628      	mov	r0, r5
 800570c:	464b      	mov	r3, r9
 800570e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005710:	f7ff fed4 	bl	80054bc <__cvt>
 8005714:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005716:	4680      	mov	r8, r0
 8005718:	2947      	cmp	r1, #71	@ 0x47
 800571a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800571c:	d128      	bne.n	8005770 <_printf_float+0x178>
 800571e:	1cc8      	adds	r0, r1, #3
 8005720:	db02      	blt.n	8005728 <_printf_float+0x130>
 8005722:	6863      	ldr	r3, [r4, #4]
 8005724:	4299      	cmp	r1, r3
 8005726:	dd40      	ble.n	80057aa <_printf_float+0x1b2>
 8005728:	f1aa 0a02 	sub.w	sl, sl, #2
 800572c:	fa5f fa8a 	uxtb.w	sl, sl
 8005730:	4652      	mov	r2, sl
 8005732:	3901      	subs	r1, #1
 8005734:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005738:	910d      	str	r1, [sp, #52]	@ 0x34
 800573a:	f7ff ff23 	bl	8005584 <__exponent>
 800573e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005740:	4681      	mov	r9, r0
 8005742:	1813      	adds	r3, r2, r0
 8005744:	2a01      	cmp	r2, #1
 8005746:	6123      	str	r3, [r4, #16]
 8005748:	dc02      	bgt.n	8005750 <_printf_float+0x158>
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	07d2      	lsls	r2, r2, #31
 800574e:	d501      	bpl.n	8005754 <_printf_float+0x15c>
 8005750:	3301      	adds	r3, #1
 8005752:	6123      	str	r3, [r4, #16]
 8005754:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005758:	2b00      	cmp	r3, #0
 800575a:	d09e      	beq.n	800569a <_printf_float+0xa2>
 800575c:	232d      	movs	r3, #45	@ 0x2d
 800575e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005762:	e79a      	b.n	800569a <_printf_float+0xa2>
 8005764:	2947      	cmp	r1, #71	@ 0x47
 8005766:	d1bf      	bne.n	80056e8 <_printf_float+0xf0>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1bd      	bne.n	80056e8 <_printf_float+0xf0>
 800576c:	2301      	movs	r3, #1
 800576e:	e7ba      	b.n	80056e6 <_printf_float+0xee>
 8005770:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005774:	d9dc      	bls.n	8005730 <_printf_float+0x138>
 8005776:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800577a:	d118      	bne.n	80057ae <_printf_float+0x1b6>
 800577c:	2900      	cmp	r1, #0
 800577e:	6863      	ldr	r3, [r4, #4]
 8005780:	dd0b      	ble.n	800579a <_printf_float+0x1a2>
 8005782:	6121      	str	r1, [r4, #16]
 8005784:	b913      	cbnz	r3, 800578c <_printf_float+0x194>
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	07d0      	lsls	r0, r2, #31
 800578a:	d502      	bpl.n	8005792 <_printf_float+0x19a>
 800578c:	3301      	adds	r3, #1
 800578e:	440b      	add	r3, r1
 8005790:	6123      	str	r3, [r4, #16]
 8005792:	f04f 0900 	mov.w	r9, #0
 8005796:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005798:	e7dc      	b.n	8005754 <_printf_float+0x15c>
 800579a:	b913      	cbnz	r3, 80057a2 <_printf_float+0x1aa>
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	07d2      	lsls	r2, r2, #31
 80057a0:	d501      	bpl.n	80057a6 <_printf_float+0x1ae>
 80057a2:	3302      	adds	r3, #2
 80057a4:	e7f4      	b.n	8005790 <_printf_float+0x198>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e7f2      	b.n	8005790 <_printf_float+0x198>
 80057aa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80057ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057b0:	4299      	cmp	r1, r3
 80057b2:	db05      	blt.n	80057c0 <_printf_float+0x1c8>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	6121      	str	r1, [r4, #16]
 80057b8:	07d8      	lsls	r0, r3, #31
 80057ba:	d5ea      	bpl.n	8005792 <_printf_float+0x19a>
 80057bc:	1c4b      	adds	r3, r1, #1
 80057be:	e7e7      	b.n	8005790 <_printf_float+0x198>
 80057c0:	2900      	cmp	r1, #0
 80057c2:	bfcc      	ite	gt
 80057c4:	2201      	movgt	r2, #1
 80057c6:	f1c1 0202 	rsble	r2, r1, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	e7e0      	b.n	8005790 <_printf_float+0x198>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	055a      	lsls	r2, r3, #21
 80057d2:	d407      	bmi.n	80057e4 <_printf_float+0x1ec>
 80057d4:	6923      	ldr	r3, [r4, #16]
 80057d6:	4642      	mov	r2, r8
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	d12b      	bne.n	800583a <_printf_float+0x242>
 80057e2:	e764      	b.n	80056ae <_printf_float+0xb6>
 80057e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057e8:	f240 80dc 	bls.w	80059a4 <_printf_float+0x3ac>
 80057ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057f0:	2200      	movs	r2, #0
 80057f2:	2300      	movs	r3, #0
 80057f4:	f7fb f8d8 	bl	80009a8 <__aeabi_dcmpeq>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d033      	beq.n	8005864 <_printf_float+0x26c>
 80057fc:	2301      	movs	r3, #1
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	4a35      	ldr	r2, [pc, #212]	@ (80058d8 <_printf_float+0x2e0>)
 8005804:	47b8      	blx	r7
 8005806:	3001      	adds	r0, #1
 8005808:	f43f af51 	beq.w	80056ae <_printf_float+0xb6>
 800580c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005810:	4543      	cmp	r3, r8
 8005812:	db02      	blt.n	800581a <_printf_float+0x222>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	07d8      	lsls	r0, r3, #31
 8005818:	d50f      	bpl.n	800583a <_printf_float+0x242>
 800581a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	f43f af42 	beq.w	80056ae <_printf_float+0xb6>
 800582a:	f04f 0900 	mov.w	r9, #0
 800582e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005832:	f104 0a1a 	add.w	sl, r4, #26
 8005836:	45c8      	cmp	r8, r9
 8005838:	dc09      	bgt.n	800584e <_printf_float+0x256>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	079b      	lsls	r3, r3, #30
 800583e:	f100 8102 	bmi.w	8005a46 <_printf_float+0x44e>
 8005842:	68e0      	ldr	r0, [r4, #12]
 8005844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005846:	4298      	cmp	r0, r3
 8005848:	bfb8      	it	lt
 800584a:	4618      	movlt	r0, r3
 800584c:	e731      	b.n	80056b2 <_printf_float+0xba>
 800584e:	2301      	movs	r3, #1
 8005850:	4652      	mov	r2, sl
 8005852:	4631      	mov	r1, r6
 8005854:	4628      	mov	r0, r5
 8005856:	47b8      	blx	r7
 8005858:	3001      	adds	r0, #1
 800585a:	f43f af28 	beq.w	80056ae <_printf_float+0xb6>
 800585e:	f109 0901 	add.w	r9, r9, #1
 8005862:	e7e8      	b.n	8005836 <_printf_float+0x23e>
 8005864:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005866:	2b00      	cmp	r3, #0
 8005868:	dc38      	bgt.n	80058dc <_printf_float+0x2e4>
 800586a:	2301      	movs	r3, #1
 800586c:	4631      	mov	r1, r6
 800586e:	4628      	mov	r0, r5
 8005870:	4a19      	ldr	r2, [pc, #100]	@ (80058d8 <_printf_float+0x2e0>)
 8005872:	47b8      	blx	r7
 8005874:	3001      	adds	r0, #1
 8005876:	f43f af1a 	beq.w	80056ae <_printf_float+0xb6>
 800587a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800587e:	ea59 0303 	orrs.w	r3, r9, r3
 8005882:	d102      	bne.n	800588a <_printf_float+0x292>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	07d9      	lsls	r1, r3, #31
 8005888:	d5d7      	bpl.n	800583a <_printf_float+0x242>
 800588a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800588e:	4631      	mov	r1, r6
 8005890:	4628      	mov	r0, r5
 8005892:	47b8      	blx	r7
 8005894:	3001      	adds	r0, #1
 8005896:	f43f af0a 	beq.w	80056ae <_printf_float+0xb6>
 800589a:	f04f 0a00 	mov.w	sl, #0
 800589e:	f104 0b1a 	add.w	fp, r4, #26
 80058a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058a4:	425b      	negs	r3, r3
 80058a6:	4553      	cmp	r3, sl
 80058a8:	dc01      	bgt.n	80058ae <_printf_float+0x2b6>
 80058aa:	464b      	mov	r3, r9
 80058ac:	e793      	b.n	80057d6 <_printf_float+0x1de>
 80058ae:	2301      	movs	r3, #1
 80058b0:	465a      	mov	r2, fp
 80058b2:	4631      	mov	r1, r6
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b8      	blx	r7
 80058b8:	3001      	adds	r0, #1
 80058ba:	f43f aef8 	beq.w	80056ae <_printf_float+0xb6>
 80058be:	f10a 0a01 	add.w	sl, sl, #1
 80058c2:	e7ee      	b.n	80058a2 <_printf_float+0x2aa>
 80058c4:	7fefffff 	.word	0x7fefffff
 80058c8:	08008222 	.word	0x08008222
 80058cc:	08008226 	.word	0x08008226
 80058d0:	0800822a 	.word	0x0800822a
 80058d4:	0800822e 	.word	0x0800822e
 80058d8:	08008232 	.word	0x08008232
 80058dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058de:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80058e2:	4553      	cmp	r3, sl
 80058e4:	bfa8      	it	ge
 80058e6:	4653      	movge	r3, sl
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	4699      	mov	r9, r3
 80058ec:	dc36      	bgt.n	800595c <_printf_float+0x364>
 80058ee:	f04f 0b00 	mov.w	fp, #0
 80058f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058f6:	f104 021a 	add.w	r2, r4, #26
 80058fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80058fe:	eba3 0309 	sub.w	r3, r3, r9
 8005902:	455b      	cmp	r3, fp
 8005904:	dc31      	bgt.n	800596a <_printf_float+0x372>
 8005906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005908:	459a      	cmp	sl, r3
 800590a:	dc3a      	bgt.n	8005982 <_printf_float+0x38a>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	07da      	lsls	r2, r3, #31
 8005910:	d437      	bmi.n	8005982 <_printf_float+0x38a>
 8005912:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005914:	ebaa 0903 	sub.w	r9, sl, r3
 8005918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800591a:	ebaa 0303 	sub.w	r3, sl, r3
 800591e:	4599      	cmp	r9, r3
 8005920:	bfa8      	it	ge
 8005922:	4699      	movge	r9, r3
 8005924:	f1b9 0f00 	cmp.w	r9, #0
 8005928:	dc33      	bgt.n	8005992 <_printf_float+0x39a>
 800592a:	f04f 0800 	mov.w	r8, #0
 800592e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005932:	f104 0b1a 	add.w	fp, r4, #26
 8005936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005938:	ebaa 0303 	sub.w	r3, sl, r3
 800593c:	eba3 0309 	sub.w	r3, r3, r9
 8005940:	4543      	cmp	r3, r8
 8005942:	f77f af7a 	ble.w	800583a <_printf_float+0x242>
 8005946:	2301      	movs	r3, #1
 8005948:	465a      	mov	r2, fp
 800594a:	4631      	mov	r1, r6
 800594c:	4628      	mov	r0, r5
 800594e:	47b8      	blx	r7
 8005950:	3001      	adds	r0, #1
 8005952:	f43f aeac 	beq.w	80056ae <_printf_float+0xb6>
 8005956:	f108 0801 	add.w	r8, r8, #1
 800595a:	e7ec      	b.n	8005936 <_printf_float+0x33e>
 800595c:	4642      	mov	r2, r8
 800595e:	4631      	mov	r1, r6
 8005960:	4628      	mov	r0, r5
 8005962:	47b8      	blx	r7
 8005964:	3001      	adds	r0, #1
 8005966:	d1c2      	bne.n	80058ee <_printf_float+0x2f6>
 8005968:	e6a1      	b.n	80056ae <_printf_float+0xb6>
 800596a:	2301      	movs	r3, #1
 800596c:	4631      	mov	r1, r6
 800596e:	4628      	mov	r0, r5
 8005970:	920a      	str	r2, [sp, #40]	@ 0x28
 8005972:	47b8      	blx	r7
 8005974:	3001      	adds	r0, #1
 8005976:	f43f ae9a 	beq.w	80056ae <_printf_float+0xb6>
 800597a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800597c:	f10b 0b01 	add.w	fp, fp, #1
 8005980:	e7bb      	b.n	80058fa <_printf_float+0x302>
 8005982:	4631      	mov	r1, r6
 8005984:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005988:	4628      	mov	r0, r5
 800598a:	47b8      	blx	r7
 800598c:	3001      	adds	r0, #1
 800598e:	d1c0      	bne.n	8005912 <_printf_float+0x31a>
 8005990:	e68d      	b.n	80056ae <_printf_float+0xb6>
 8005992:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005994:	464b      	mov	r3, r9
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	4442      	add	r2, r8
 800599c:	47b8      	blx	r7
 800599e:	3001      	adds	r0, #1
 80059a0:	d1c3      	bne.n	800592a <_printf_float+0x332>
 80059a2:	e684      	b.n	80056ae <_printf_float+0xb6>
 80059a4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80059a8:	f1ba 0f01 	cmp.w	sl, #1
 80059ac:	dc01      	bgt.n	80059b2 <_printf_float+0x3ba>
 80059ae:	07db      	lsls	r3, r3, #31
 80059b0:	d536      	bpl.n	8005a20 <_printf_float+0x428>
 80059b2:	2301      	movs	r3, #1
 80059b4:	4642      	mov	r2, r8
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	f43f ae76 	beq.w	80056ae <_printf_float+0xb6>
 80059c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059c6:	4631      	mov	r1, r6
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b8      	blx	r7
 80059cc:	3001      	adds	r0, #1
 80059ce:	f43f ae6e 	beq.w	80056ae <_printf_float+0xb6>
 80059d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059d6:	2200      	movs	r2, #0
 80059d8:	2300      	movs	r3, #0
 80059da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059de:	f7fa ffe3 	bl	80009a8 <__aeabi_dcmpeq>
 80059e2:	b9c0      	cbnz	r0, 8005a16 <_printf_float+0x41e>
 80059e4:	4653      	mov	r3, sl
 80059e6:	f108 0201 	add.w	r2, r8, #1
 80059ea:	4631      	mov	r1, r6
 80059ec:	4628      	mov	r0, r5
 80059ee:	47b8      	blx	r7
 80059f0:	3001      	adds	r0, #1
 80059f2:	d10c      	bne.n	8005a0e <_printf_float+0x416>
 80059f4:	e65b      	b.n	80056ae <_printf_float+0xb6>
 80059f6:	2301      	movs	r3, #1
 80059f8:	465a      	mov	r2, fp
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b8      	blx	r7
 8005a00:	3001      	adds	r0, #1
 8005a02:	f43f ae54 	beq.w	80056ae <_printf_float+0xb6>
 8005a06:	f108 0801 	add.w	r8, r8, #1
 8005a0a:	45d0      	cmp	r8, sl
 8005a0c:	dbf3      	blt.n	80059f6 <_printf_float+0x3fe>
 8005a0e:	464b      	mov	r3, r9
 8005a10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005a14:	e6e0      	b.n	80057d8 <_printf_float+0x1e0>
 8005a16:	f04f 0800 	mov.w	r8, #0
 8005a1a:	f104 0b1a 	add.w	fp, r4, #26
 8005a1e:	e7f4      	b.n	8005a0a <_printf_float+0x412>
 8005a20:	2301      	movs	r3, #1
 8005a22:	4642      	mov	r2, r8
 8005a24:	e7e1      	b.n	80059ea <_printf_float+0x3f2>
 8005a26:	2301      	movs	r3, #1
 8005a28:	464a      	mov	r2, r9
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	47b8      	blx	r7
 8005a30:	3001      	adds	r0, #1
 8005a32:	f43f ae3c 	beq.w	80056ae <_printf_float+0xb6>
 8005a36:	f108 0801 	add.w	r8, r8, #1
 8005a3a:	68e3      	ldr	r3, [r4, #12]
 8005a3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a3e:	1a5b      	subs	r3, r3, r1
 8005a40:	4543      	cmp	r3, r8
 8005a42:	dcf0      	bgt.n	8005a26 <_printf_float+0x42e>
 8005a44:	e6fd      	b.n	8005842 <_printf_float+0x24a>
 8005a46:	f04f 0800 	mov.w	r8, #0
 8005a4a:	f104 0919 	add.w	r9, r4, #25
 8005a4e:	e7f4      	b.n	8005a3a <_printf_float+0x442>

08005a50 <_printf_common>:
 8005a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a54:	4616      	mov	r6, r2
 8005a56:	4698      	mov	r8, r3
 8005a58:	688a      	ldr	r2, [r1, #8]
 8005a5a:	690b      	ldr	r3, [r1, #16]
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	bfb8      	it	lt
 8005a62:	4613      	movlt	r3, r2
 8005a64:	6033      	str	r3, [r6, #0]
 8005a66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a70:	b10a      	cbz	r2, 8005a76 <_printf_common+0x26>
 8005a72:	3301      	adds	r3, #1
 8005a74:	6033      	str	r3, [r6, #0]
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	0699      	lsls	r1, r3, #26
 8005a7a:	bf42      	ittt	mi
 8005a7c:	6833      	ldrmi	r3, [r6, #0]
 8005a7e:	3302      	addmi	r3, #2
 8005a80:	6033      	strmi	r3, [r6, #0]
 8005a82:	6825      	ldr	r5, [r4, #0]
 8005a84:	f015 0506 	ands.w	r5, r5, #6
 8005a88:	d106      	bne.n	8005a98 <_printf_common+0x48>
 8005a8a:	f104 0a19 	add.w	sl, r4, #25
 8005a8e:	68e3      	ldr	r3, [r4, #12]
 8005a90:	6832      	ldr	r2, [r6, #0]
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	42ab      	cmp	r3, r5
 8005a96:	dc2b      	bgt.n	8005af0 <_printf_common+0xa0>
 8005a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a9c:	6822      	ldr	r2, [r4, #0]
 8005a9e:	3b00      	subs	r3, #0
 8005aa0:	bf18      	it	ne
 8005aa2:	2301      	movne	r3, #1
 8005aa4:	0692      	lsls	r2, r2, #26
 8005aa6:	d430      	bmi.n	8005b0a <_printf_common+0xba>
 8005aa8:	4641      	mov	r1, r8
 8005aaa:	4638      	mov	r0, r7
 8005aac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ab0:	47c8      	blx	r9
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d023      	beq.n	8005afe <_printf_common+0xae>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	6922      	ldr	r2, [r4, #16]
 8005aba:	f003 0306 	and.w	r3, r3, #6
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	bf14      	ite	ne
 8005ac2:	2500      	movne	r5, #0
 8005ac4:	6833      	ldreq	r3, [r6, #0]
 8005ac6:	f04f 0600 	mov.w	r6, #0
 8005aca:	bf08      	it	eq
 8005acc:	68e5      	ldreq	r5, [r4, #12]
 8005ace:	f104 041a 	add.w	r4, r4, #26
 8005ad2:	bf08      	it	eq
 8005ad4:	1aed      	subeq	r5, r5, r3
 8005ad6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ada:	bf08      	it	eq
 8005adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	bfc4      	itt	gt
 8005ae4:	1a9b      	subgt	r3, r3, r2
 8005ae6:	18ed      	addgt	r5, r5, r3
 8005ae8:	42b5      	cmp	r5, r6
 8005aea:	d11a      	bne.n	8005b22 <_printf_common+0xd2>
 8005aec:	2000      	movs	r0, #0
 8005aee:	e008      	b.n	8005b02 <_printf_common+0xb2>
 8005af0:	2301      	movs	r3, #1
 8005af2:	4652      	mov	r2, sl
 8005af4:	4641      	mov	r1, r8
 8005af6:	4638      	mov	r0, r7
 8005af8:	47c8      	blx	r9
 8005afa:	3001      	adds	r0, #1
 8005afc:	d103      	bne.n	8005b06 <_printf_common+0xb6>
 8005afe:	f04f 30ff 	mov.w	r0, #4294967295
 8005b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b06:	3501      	adds	r5, #1
 8005b08:	e7c1      	b.n	8005a8e <_printf_common+0x3e>
 8005b0a:	2030      	movs	r0, #48	@ 0x30
 8005b0c:	18e1      	adds	r1, r4, r3
 8005b0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b18:	4422      	add	r2, r4
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b20:	e7c2      	b.n	8005aa8 <_printf_common+0x58>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4622      	mov	r2, r4
 8005b26:	4641      	mov	r1, r8
 8005b28:	4638      	mov	r0, r7
 8005b2a:	47c8      	blx	r9
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d0e6      	beq.n	8005afe <_printf_common+0xae>
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7d9      	b.n	8005ae8 <_printf_common+0x98>

08005b34 <_printf_i>:
 8005b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b38:	7e0f      	ldrb	r7, [r1, #24]
 8005b3a:	4691      	mov	r9, r2
 8005b3c:	2f78      	cmp	r7, #120	@ 0x78
 8005b3e:	4680      	mov	r8, r0
 8005b40:	460c      	mov	r4, r1
 8005b42:	469a      	mov	sl, r3
 8005b44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b4a:	d807      	bhi.n	8005b5c <_printf_i+0x28>
 8005b4c:	2f62      	cmp	r7, #98	@ 0x62
 8005b4e:	d80a      	bhi.n	8005b66 <_printf_i+0x32>
 8005b50:	2f00      	cmp	r7, #0
 8005b52:	f000 80d3 	beq.w	8005cfc <_printf_i+0x1c8>
 8005b56:	2f58      	cmp	r7, #88	@ 0x58
 8005b58:	f000 80ba 	beq.w	8005cd0 <_printf_i+0x19c>
 8005b5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b64:	e03a      	b.n	8005bdc <_printf_i+0xa8>
 8005b66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b6a:	2b15      	cmp	r3, #21
 8005b6c:	d8f6      	bhi.n	8005b5c <_printf_i+0x28>
 8005b6e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b74 <_printf_i+0x40>)
 8005b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b74:	08005bcd 	.word	0x08005bcd
 8005b78:	08005be1 	.word	0x08005be1
 8005b7c:	08005b5d 	.word	0x08005b5d
 8005b80:	08005b5d 	.word	0x08005b5d
 8005b84:	08005b5d 	.word	0x08005b5d
 8005b88:	08005b5d 	.word	0x08005b5d
 8005b8c:	08005be1 	.word	0x08005be1
 8005b90:	08005b5d 	.word	0x08005b5d
 8005b94:	08005b5d 	.word	0x08005b5d
 8005b98:	08005b5d 	.word	0x08005b5d
 8005b9c:	08005b5d 	.word	0x08005b5d
 8005ba0:	08005ce3 	.word	0x08005ce3
 8005ba4:	08005c0b 	.word	0x08005c0b
 8005ba8:	08005c9d 	.word	0x08005c9d
 8005bac:	08005b5d 	.word	0x08005b5d
 8005bb0:	08005b5d 	.word	0x08005b5d
 8005bb4:	08005d05 	.word	0x08005d05
 8005bb8:	08005b5d 	.word	0x08005b5d
 8005bbc:	08005c0b 	.word	0x08005c0b
 8005bc0:	08005b5d 	.word	0x08005b5d
 8005bc4:	08005b5d 	.word	0x08005b5d
 8005bc8:	08005ca5 	.word	0x08005ca5
 8005bcc:	6833      	ldr	r3, [r6, #0]
 8005bce:	1d1a      	adds	r2, r3, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6032      	str	r2, [r6, #0]
 8005bd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e09e      	b.n	8005d1e <_printf_i+0x1ea>
 8005be0:	6833      	ldr	r3, [r6, #0]
 8005be2:	6820      	ldr	r0, [r4, #0]
 8005be4:	1d19      	adds	r1, r3, #4
 8005be6:	6031      	str	r1, [r6, #0]
 8005be8:	0606      	lsls	r6, r0, #24
 8005bea:	d501      	bpl.n	8005bf0 <_printf_i+0xbc>
 8005bec:	681d      	ldr	r5, [r3, #0]
 8005bee:	e003      	b.n	8005bf8 <_printf_i+0xc4>
 8005bf0:	0645      	lsls	r5, r0, #25
 8005bf2:	d5fb      	bpl.n	8005bec <_printf_i+0xb8>
 8005bf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bf8:	2d00      	cmp	r5, #0
 8005bfa:	da03      	bge.n	8005c04 <_printf_i+0xd0>
 8005bfc:	232d      	movs	r3, #45	@ 0x2d
 8005bfe:	426d      	negs	r5, r5
 8005c00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c04:	230a      	movs	r3, #10
 8005c06:	4859      	ldr	r0, [pc, #356]	@ (8005d6c <_printf_i+0x238>)
 8005c08:	e011      	b.n	8005c2e <_printf_i+0xfa>
 8005c0a:	6821      	ldr	r1, [r4, #0]
 8005c0c:	6833      	ldr	r3, [r6, #0]
 8005c0e:	0608      	lsls	r0, r1, #24
 8005c10:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c14:	d402      	bmi.n	8005c1c <_printf_i+0xe8>
 8005c16:	0649      	lsls	r1, r1, #25
 8005c18:	bf48      	it	mi
 8005c1a:	b2ad      	uxthmi	r5, r5
 8005c1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c1e:	6033      	str	r3, [r6, #0]
 8005c20:	bf14      	ite	ne
 8005c22:	230a      	movne	r3, #10
 8005c24:	2308      	moveq	r3, #8
 8005c26:	4851      	ldr	r0, [pc, #324]	@ (8005d6c <_printf_i+0x238>)
 8005c28:	2100      	movs	r1, #0
 8005c2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c2e:	6866      	ldr	r6, [r4, #4]
 8005c30:	2e00      	cmp	r6, #0
 8005c32:	bfa8      	it	ge
 8005c34:	6821      	ldrge	r1, [r4, #0]
 8005c36:	60a6      	str	r6, [r4, #8]
 8005c38:	bfa4      	itt	ge
 8005c3a:	f021 0104 	bicge.w	r1, r1, #4
 8005c3e:	6021      	strge	r1, [r4, #0]
 8005c40:	b90d      	cbnz	r5, 8005c46 <_printf_i+0x112>
 8005c42:	2e00      	cmp	r6, #0
 8005c44:	d04b      	beq.n	8005cde <_printf_i+0x1aa>
 8005c46:	4616      	mov	r6, r2
 8005c48:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c4c:	fb03 5711 	mls	r7, r3, r1, r5
 8005c50:	5dc7      	ldrb	r7, [r0, r7]
 8005c52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c56:	462f      	mov	r7, r5
 8005c58:	42bb      	cmp	r3, r7
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	d9f4      	bls.n	8005c48 <_printf_i+0x114>
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d10b      	bne.n	8005c7a <_printf_i+0x146>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	07df      	lsls	r7, r3, #31
 8005c66:	d508      	bpl.n	8005c7a <_printf_i+0x146>
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	6861      	ldr	r1, [r4, #4]
 8005c6c:	4299      	cmp	r1, r3
 8005c6e:	bfde      	ittt	le
 8005c70:	2330      	movle	r3, #48	@ 0x30
 8005c72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c7a:	1b92      	subs	r2, r2, r6
 8005c7c:	6122      	str	r2, [r4, #16]
 8005c7e:	464b      	mov	r3, r9
 8005c80:	4621      	mov	r1, r4
 8005c82:	4640      	mov	r0, r8
 8005c84:	f8cd a000 	str.w	sl, [sp]
 8005c88:	aa03      	add	r2, sp, #12
 8005c8a:	f7ff fee1 	bl	8005a50 <_printf_common>
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d14a      	bne.n	8005d28 <_printf_i+0x1f4>
 8005c92:	f04f 30ff 	mov.w	r0, #4294967295
 8005c96:	b004      	add	sp, #16
 8005c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	f043 0320 	orr.w	r3, r3, #32
 8005ca2:	6023      	str	r3, [r4, #0]
 8005ca4:	2778      	movs	r7, #120	@ 0x78
 8005ca6:	4832      	ldr	r0, [pc, #200]	@ (8005d70 <_printf_i+0x23c>)
 8005ca8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	6831      	ldr	r1, [r6, #0]
 8005cb0:	061f      	lsls	r7, r3, #24
 8005cb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cb6:	d402      	bmi.n	8005cbe <_printf_i+0x18a>
 8005cb8:	065f      	lsls	r7, r3, #25
 8005cba:	bf48      	it	mi
 8005cbc:	b2ad      	uxthmi	r5, r5
 8005cbe:	6031      	str	r1, [r6, #0]
 8005cc0:	07d9      	lsls	r1, r3, #31
 8005cc2:	bf44      	itt	mi
 8005cc4:	f043 0320 	orrmi.w	r3, r3, #32
 8005cc8:	6023      	strmi	r3, [r4, #0]
 8005cca:	b11d      	cbz	r5, 8005cd4 <_printf_i+0x1a0>
 8005ccc:	2310      	movs	r3, #16
 8005cce:	e7ab      	b.n	8005c28 <_printf_i+0xf4>
 8005cd0:	4826      	ldr	r0, [pc, #152]	@ (8005d6c <_printf_i+0x238>)
 8005cd2:	e7e9      	b.n	8005ca8 <_printf_i+0x174>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	f023 0320 	bic.w	r3, r3, #32
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	e7f6      	b.n	8005ccc <_printf_i+0x198>
 8005cde:	4616      	mov	r6, r2
 8005ce0:	e7bd      	b.n	8005c5e <_printf_i+0x12a>
 8005ce2:	6833      	ldr	r3, [r6, #0]
 8005ce4:	6825      	ldr	r5, [r4, #0]
 8005ce6:	1d18      	adds	r0, r3, #4
 8005ce8:	6961      	ldr	r1, [r4, #20]
 8005cea:	6030      	str	r0, [r6, #0]
 8005cec:	062e      	lsls	r6, r5, #24
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	d501      	bpl.n	8005cf6 <_printf_i+0x1c2>
 8005cf2:	6019      	str	r1, [r3, #0]
 8005cf4:	e002      	b.n	8005cfc <_printf_i+0x1c8>
 8005cf6:	0668      	lsls	r0, r5, #25
 8005cf8:	d5fb      	bpl.n	8005cf2 <_printf_i+0x1be>
 8005cfa:	8019      	strh	r1, [r3, #0]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	4616      	mov	r6, r2
 8005d00:	6123      	str	r3, [r4, #16]
 8005d02:	e7bc      	b.n	8005c7e <_printf_i+0x14a>
 8005d04:	6833      	ldr	r3, [r6, #0]
 8005d06:	2100      	movs	r1, #0
 8005d08:	1d1a      	adds	r2, r3, #4
 8005d0a:	6032      	str	r2, [r6, #0]
 8005d0c:	681e      	ldr	r6, [r3, #0]
 8005d0e:	6862      	ldr	r2, [r4, #4]
 8005d10:	4630      	mov	r0, r6
 8005d12:	f000 f9ec 	bl	80060ee <memchr>
 8005d16:	b108      	cbz	r0, 8005d1c <_printf_i+0x1e8>
 8005d18:	1b80      	subs	r0, r0, r6
 8005d1a:	6060      	str	r0, [r4, #4]
 8005d1c:	6863      	ldr	r3, [r4, #4]
 8005d1e:	6123      	str	r3, [r4, #16]
 8005d20:	2300      	movs	r3, #0
 8005d22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d26:	e7aa      	b.n	8005c7e <_printf_i+0x14a>
 8005d28:	4632      	mov	r2, r6
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	4640      	mov	r0, r8
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	47d0      	blx	sl
 8005d32:	3001      	adds	r0, #1
 8005d34:	d0ad      	beq.n	8005c92 <_printf_i+0x15e>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	079b      	lsls	r3, r3, #30
 8005d3a:	d413      	bmi.n	8005d64 <_printf_i+0x230>
 8005d3c:	68e0      	ldr	r0, [r4, #12]
 8005d3e:	9b03      	ldr	r3, [sp, #12]
 8005d40:	4298      	cmp	r0, r3
 8005d42:	bfb8      	it	lt
 8005d44:	4618      	movlt	r0, r3
 8005d46:	e7a6      	b.n	8005c96 <_printf_i+0x162>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4632      	mov	r2, r6
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	4640      	mov	r0, r8
 8005d50:	47d0      	blx	sl
 8005d52:	3001      	adds	r0, #1
 8005d54:	d09d      	beq.n	8005c92 <_printf_i+0x15e>
 8005d56:	3501      	adds	r5, #1
 8005d58:	68e3      	ldr	r3, [r4, #12]
 8005d5a:	9903      	ldr	r1, [sp, #12]
 8005d5c:	1a5b      	subs	r3, r3, r1
 8005d5e:	42ab      	cmp	r3, r5
 8005d60:	dcf2      	bgt.n	8005d48 <_printf_i+0x214>
 8005d62:	e7eb      	b.n	8005d3c <_printf_i+0x208>
 8005d64:	2500      	movs	r5, #0
 8005d66:	f104 0619 	add.w	r6, r4, #25
 8005d6a:	e7f5      	b.n	8005d58 <_printf_i+0x224>
 8005d6c:	08008234 	.word	0x08008234
 8005d70:	08008245 	.word	0x08008245

08005d74 <std>:
 8005d74:	2300      	movs	r3, #0
 8005d76:	b510      	push	{r4, lr}
 8005d78:	4604      	mov	r4, r0
 8005d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d82:	6083      	str	r3, [r0, #8]
 8005d84:	8181      	strh	r1, [r0, #12]
 8005d86:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d88:	81c2      	strh	r2, [r0, #14]
 8005d8a:	6183      	str	r3, [r0, #24]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	2208      	movs	r2, #8
 8005d90:	305c      	adds	r0, #92	@ 0x5c
 8005d92:	f000 f92d 	bl	8005ff0 <memset>
 8005d96:	4b0d      	ldr	r3, [pc, #52]	@ (8005dcc <std+0x58>)
 8005d98:	6224      	str	r4, [r4, #32]
 8005d9a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd0 <std+0x5c>)
 8005d9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005da0:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd4 <std+0x60>)
 8005da2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005da4:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd8 <std+0x64>)
 8005da6:	6323      	str	r3, [r4, #48]	@ 0x30
 8005da8:	4b0c      	ldr	r3, [pc, #48]	@ (8005ddc <std+0x68>)
 8005daa:	429c      	cmp	r4, r3
 8005dac:	d006      	beq.n	8005dbc <std+0x48>
 8005dae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005db2:	4294      	cmp	r4, r2
 8005db4:	d002      	beq.n	8005dbc <std+0x48>
 8005db6:	33d0      	adds	r3, #208	@ 0xd0
 8005db8:	429c      	cmp	r4, r3
 8005dba:	d105      	bne.n	8005dc8 <std+0x54>
 8005dbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc4:	f000 b990 	b.w	80060e8 <__retarget_lock_init_recursive>
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	bf00      	nop
 8005dcc:	08005ef9 	.word	0x08005ef9
 8005dd0:	08005f1b 	.word	0x08005f1b
 8005dd4:	08005f53 	.word	0x08005f53
 8005dd8:	08005f77 	.word	0x08005f77
 8005ddc:	2000036c 	.word	0x2000036c

08005de0 <stdio_exit_handler>:
 8005de0:	4a02      	ldr	r2, [pc, #8]	@ (8005dec <stdio_exit_handler+0xc>)
 8005de2:	4903      	ldr	r1, [pc, #12]	@ (8005df0 <stdio_exit_handler+0x10>)
 8005de4:	4803      	ldr	r0, [pc, #12]	@ (8005df4 <stdio_exit_handler+0x14>)
 8005de6:	f000 b869 	b.w	8005ebc <_fwalk_sglue>
 8005dea:	bf00      	nop
 8005dec:	2000000c 	.word	0x2000000c
 8005df0:	08007a5d 	.word	0x08007a5d
 8005df4:	2000001c 	.word	0x2000001c

08005df8 <cleanup_stdio>:
 8005df8:	6841      	ldr	r1, [r0, #4]
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <cleanup_stdio+0x34>)
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	4299      	cmp	r1, r3
 8005e00:	4604      	mov	r4, r0
 8005e02:	d001      	beq.n	8005e08 <cleanup_stdio+0x10>
 8005e04:	f001 fe2a 	bl	8007a5c <_fflush_r>
 8005e08:	68a1      	ldr	r1, [r4, #8]
 8005e0a:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <cleanup_stdio+0x38>)
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	d002      	beq.n	8005e16 <cleanup_stdio+0x1e>
 8005e10:	4620      	mov	r0, r4
 8005e12:	f001 fe23 	bl	8007a5c <_fflush_r>
 8005e16:	68e1      	ldr	r1, [r4, #12]
 8005e18:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <cleanup_stdio+0x3c>)
 8005e1a:	4299      	cmp	r1, r3
 8005e1c:	d004      	beq.n	8005e28 <cleanup_stdio+0x30>
 8005e1e:	4620      	mov	r0, r4
 8005e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e24:	f001 be1a 	b.w	8007a5c <_fflush_r>
 8005e28:	bd10      	pop	{r4, pc}
 8005e2a:	bf00      	nop
 8005e2c:	2000036c 	.word	0x2000036c
 8005e30:	200003d4 	.word	0x200003d4
 8005e34:	2000043c 	.word	0x2000043c

08005e38 <global_stdio_init.part.0>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e68 <global_stdio_init.part.0+0x30>)
 8005e3c:	4c0b      	ldr	r4, [pc, #44]	@ (8005e6c <global_stdio_init.part.0+0x34>)
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e70 <global_stdio_init.part.0+0x38>)
 8005e40:	4620      	mov	r0, r4
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	2104      	movs	r1, #4
 8005e46:	2200      	movs	r2, #0
 8005e48:	f7ff ff94 	bl	8005d74 <std>
 8005e4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e50:	2201      	movs	r2, #1
 8005e52:	2109      	movs	r1, #9
 8005e54:	f7ff ff8e 	bl	8005d74 <std>
 8005e58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e62:	2112      	movs	r1, #18
 8005e64:	f7ff bf86 	b.w	8005d74 <std>
 8005e68:	200004a4 	.word	0x200004a4
 8005e6c:	2000036c 	.word	0x2000036c
 8005e70:	08005de1 	.word	0x08005de1

08005e74 <__sfp_lock_acquire>:
 8005e74:	4801      	ldr	r0, [pc, #4]	@ (8005e7c <__sfp_lock_acquire+0x8>)
 8005e76:	f000 b938 	b.w	80060ea <__retarget_lock_acquire_recursive>
 8005e7a:	bf00      	nop
 8005e7c:	200004ad 	.word	0x200004ad

08005e80 <__sfp_lock_release>:
 8005e80:	4801      	ldr	r0, [pc, #4]	@ (8005e88 <__sfp_lock_release+0x8>)
 8005e82:	f000 b933 	b.w	80060ec <__retarget_lock_release_recursive>
 8005e86:	bf00      	nop
 8005e88:	200004ad 	.word	0x200004ad

08005e8c <__sinit>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	4604      	mov	r4, r0
 8005e90:	f7ff fff0 	bl	8005e74 <__sfp_lock_acquire>
 8005e94:	6a23      	ldr	r3, [r4, #32]
 8005e96:	b11b      	cbz	r3, 8005ea0 <__sinit+0x14>
 8005e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e9c:	f7ff bff0 	b.w	8005e80 <__sfp_lock_release>
 8005ea0:	4b04      	ldr	r3, [pc, #16]	@ (8005eb4 <__sinit+0x28>)
 8005ea2:	6223      	str	r3, [r4, #32]
 8005ea4:	4b04      	ldr	r3, [pc, #16]	@ (8005eb8 <__sinit+0x2c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f5      	bne.n	8005e98 <__sinit+0xc>
 8005eac:	f7ff ffc4 	bl	8005e38 <global_stdio_init.part.0>
 8005eb0:	e7f2      	b.n	8005e98 <__sinit+0xc>
 8005eb2:	bf00      	nop
 8005eb4:	08005df9 	.word	0x08005df9
 8005eb8:	200004a4 	.word	0x200004a4

08005ebc <_fwalk_sglue>:
 8005ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	4688      	mov	r8, r1
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	2600      	movs	r6, #0
 8005ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ed0:	d505      	bpl.n	8005ede <_fwalk_sglue+0x22>
 8005ed2:	6824      	ldr	r4, [r4, #0]
 8005ed4:	2c00      	cmp	r4, #0
 8005ed6:	d1f7      	bne.n	8005ec8 <_fwalk_sglue+0xc>
 8005ed8:	4630      	mov	r0, r6
 8005eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ede:	89ab      	ldrh	r3, [r5, #12]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d907      	bls.n	8005ef4 <_fwalk_sglue+0x38>
 8005ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	d003      	beq.n	8005ef4 <_fwalk_sglue+0x38>
 8005eec:	4629      	mov	r1, r5
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c0      	blx	r8
 8005ef2:	4306      	orrs	r6, r0
 8005ef4:	3568      	adds	r5, #104	@ 0x68
 8005ef6:	e7e9      	b.n	8005ecc <_fwalk_sglue+0x10>

08005ef8 <__sread>:
 8005ef8:	b510      	push	{r4, lr}
 8005efa:	460c      	mov	r4, r1
 8005efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f00:	f000 f8a4 	bl	800604c <_read_r>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	bfab      	itete	ge
 8005f08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f0c:	181b      	addge	r3, r3, r0
 8005f0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f12:	bfac      	ite	ge
 8005f14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f16:	81a3      	strhlt	r3, [r4, #12]
 8005f18:	bd10      	pop	{r4, pc}

08005f1a <__swrite>:
 8005f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1e:	461f      	mov	r7, r3
 8005f20:	898b      	ldrh	r3, [r1, #12]
 8005f22:	4605      	mov	r5, r0
 8005f24:	05db      	lsls	r3, r3, #23
 8005f26:	460c      	mov	r4, r1
 8005f28:	4616      	mov	r6, r2
 8005f2a:	d505      	bpl.n	8005f38 <__swrite+0x1e>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f34:	f000 f878 	bl	8006028 <_lseek_r>
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	4632      	mov	r2, r6
 8005f3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	4628      	mov	r0, r5
 8005f44:	463b      	mov	r3, r7
 8005f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4e:	f000 b88f 	b.w	8006070 <_write_r>

08005f52 <__sseek>:
 8005f52:	b510      	push	{r4, lr}
 8005f54:	460c      	mov	r4, r1
 8005f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f5a:	f000 f865 	bl	8006028 <_lseek_r>
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	bf15      	itete	ne
 8005f64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f6e:	81a3      	strheq	r3, [r4, #12]
 8005f70:	bf18      	it	ne
 8005f72:	81a3      	strhne	r3, [r4, #12]
 8005f74:	bd10      	pop	{r4, pc}

08005f76 <__sclose>:
 8005f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7a:	f000 b845 	b.w	8006008 <_close_r>

08005f7e <_vsniprintf_r>:
 8005f7e:	b530      	push	{r4, r5, lr}
 8005f80:	4614      	mov	r4, r2
 8005f82:	2c00      	cmp	r4, #0
 8005f84:	4605      	mov	r5, r0
 8005f86:	461a      	mov	r2, r3
 8005f88:	b09b      	sub	sp, #108	@ 0x6c
 8005f8a:	da05      	bge.n	8005f98 <_vsniprintf_r+0x1a>
 8005f8c:	238b      	movs	r3, #139	@ 0x8b
 8005f8e:	6003      	str	r3, [r0, #0]
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295
 8005f94:	b01b      	add	sp, #108	@ 0x6c
 8005f96:	bd30      	pop	{r4, r5, pc}
 8005f98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005f9c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005fa0:	bf0c      	ite	eq
 8005fa2:	4623      	moveq	r3, r4
 8005fa4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fa8:	9302      	str	r3, [sp, #8]
 8005faa:	9305      	str	r3, [sp, #20]
 8005fac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005fb0:	9100      	str	r1, [sp, #0]
 8005fb2:	9104      	str	r1, [sp, #16]
 8005fb4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005fb8:	4669      	mov	r1, sp
 8005fba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005fbc:	f001 fbd2 	bl	8007764 <_svfiprintf_r>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	bfbc      	itt	lt
 8005fc4:	238b      	movlt	r3, #139	@ 0x8b
 8005fc6:	602b      	strlt	r3, [r5, #0]
 8005fc8:	2c00      	cmp	r4, #0
 8005fca:	d0e3      	beq.n	8005f94 <_vsniprintf_r+0x16>
 8005fcc:	2200      	movs	r2, #0
 8005fce:	9b00      	ldr	r3, [sp, #0]
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e7df      	b.n	8005f94 <_vsniprintf_r+0x16>

08005fd4 <vsniprintf>:
 8005fd4:	b507      	push	{r0, r1, r2, lr}
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	460a      	mov	r2, r1
 8005fdc:	4601      	mov	r1, r0
 8005fde:	4803      	ldr	r0, [pc, #12]	@ (8005fec <vsniprintf+0x18>)
 8005fe0:	6800      	ldr	r0, [r0, #0]
 8005fe2:	f7ff ffcc 	bl	8005f7e <_vsniprintf_r>
 8005fe6:	b003      	add	sp, #12
 8005fe8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fec:	20000018 	.word	0x20000018

08005ff0 <memset>:
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	4402      	add	r2, r0
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d100      	bne.n	8005ffa <memset+0xa>
 8005ff8:	4770      	bx	lr
 8005ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8005ffe:	e7f9      	b.n	8005ff4 <memset+0x4>

08006000 <_localeconv_r>:
 8006000:	4800      	ldr	r0, [pc, #0]	@ (8006004 <_localeconv_r+0x4>)
 8006002:	4770      	bx	lr
 8006004:	20000158 	.word	0x20000158

08006008 <_close_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	2300      	movs	r3, #0
 800600c:	4d05      	ldr	r5, [pc, #20]	@ (8006024 <_close_r+0x1c>)
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fb fbfd 	bl	8001812 <_close>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_close_r+0x1a>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_close_r+0x1a>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	200004a8 	.word	0x200004a8

08006028 <_lseek_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4604      	mov	r4, r0
 800602c:	4608      	mov	r0, r1
 800602e:	4611      	mov	r1, r2
 8006030:	2200      	movs	r2, #0
 8006032:	4d05      	ldr	r5, [pc, #20]	@ (8006048 <_lseek_r+0x20>)
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7fb fc0f 	bl	800185a <_lseek>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_lseek_r+0x1e>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_lseek_r+0x1e>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	200004a8 	.word	0x200004a8

0800604c <_read_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4604      	mov	r4, r0
 8006050:	4608      	mov	r0, r1
 8006052:	4611      	mov	r1, r2
 8006054:	2200      	movs	r2, #0
 8006056:	4d05      	ldr	r5, [pc, #20]	@ (800606c <_read_r+0x20>)
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7fb fba0 	bl	80017a0 <_read>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_read_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_read_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	200004a8 	.word	0x200004a8

08006070 <_write_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4604      	mov	r4, r0
 8006074:	4608      	mov	r0, r1
 8006076:	4611      	mov	r1, r2
 8006078:	2200      	movs	r2, #0
 800607a:	4d05      	ldr	r5, [pc, #20]	@ (8006090 <_write_r+0x20>)
 800607c:	602a      	str	r2, [r5, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	f7fb fbab 	bl	80017da <_write>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_write_r+0x1e>
 8006088:	682b      	ldr	r3, [r5, #0]
 800608a:	b103      	cbz	r3, 800608e <_write_r+0x1e>
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	200004a8 	.word	0x200004a8

08006094 <__errno>:
 8006094:	4b01      	ldr	r3, [pc, #4]	@ (800609c <__errno+0x8>)
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000018 	.word	0x20000018

080060a0 <__libc_init_array>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	2600      	movs	r6, #0
 80060a4:	4d0c      	ldr	r5, [pc, #48]	@ (80060d8 <__libc_init_array+0x38>)
 80060a6:	4c0d      	ldr	r4, [pc, #52]	@ (80060dc <__libc_init_array+0x3c>)
 80060a8:	1b64      	subs	r4, r4, r5
 80060aa:	10a4      	asrs	r4, r4, #2
 80060ac:	42a6      	cmp	r6, r4
 80060ae:	d109      	bne.n	80060c4 <__libc_init_array+0x24>
 80060b0:	f002 f870 	bl	8008194 <_init>
 80060b4:	2600      	movs	r6, #0
 80060b6:	4d0a      	ldr	r5, [pc, #40]	@ (80060e0 <__libc_init_array+0x40>)
 80060b8:	4c0a      	ldr	r4, [pc, #40]	@ (80060e4 <__libc_init_array+0x44>)
 80060ba:	1b64      	subs	r4, r4, r5
 80060bc:	10a4      	asrs	r4, r4, #2
 80060be:	42a6      	cmp	r6, r4
 80060c0:	d105      	bne.n	80060ce <__libc_init_array+0x2e>
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c8:	4798      	blx	r3
 80060ca:	3601      	adds	r6, #1
 80060cc:	e7ee      	b.n	80060ac <__libc_init_array+0xc>
 80060ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d2:	4798      	blx	r3
 80060d4:	3601      	adds	r6, #1
 80060d6:	e7f2      	b.n	80060be <__libc_init_array+0x1e>
 80060d8:	08008598 	.word	0x08008598
 80060dc:	08008598 	.word	0x08008598
 80060e0:	08008598 	.word	0x08008598
 80060e4:	0800859c 	.word	0x0800859c

080060e8 <__retarget_lock_init_recursive>:
 80060e8:	4770      	bx	lr

080060ea <__retarget_lock_acquire_recursive>:
 80060ea:	4770      	bx	lr

080060ec <__retarget_lock_release_recursive>:
 80060ec:	4770      	bx	lr

080060ee <memchr>:
 80060ee:	4603      	mov	r3, r0
 80060f0:	b510      	push	{r4, lr}
 80060f2:	b2c9      	uxtb	r1, r1
 80060f4:	4402      	add	r2, r0
 80060f6:	4293      	cmp	r3, r2
 80060f8:	4618      	mov	r0, r3
 80060fa:	d101      	bne.n	8006100 <memchr+0x12>
 80060fc:	2000      	movs	r0, #0
 80060fe:	e003      	b.n	8006108 <memchr+0x1a>
 8006100:	7804      	ldrb	r4, [r0, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	428c      	cmp	r4, r1
 8006106:	d1f6      	bne.n	80060f6 <memchr+0x8>
 8006108:	bd10      	pop	{r4, pc}

0800610a <quorem>:
 800610a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610e:	6903      	ldr	r3, [r0, #16]
 8006110:	690c      	ldr	r4, [r1, #16]
 8006112:	4607      	mov	r7, r0
 8006114:	42a3      	cmp	r3, r4
 8006116:	db7e      	blt.n	8006216 <quorem+0x10c>
 8006118:	3c01      	subs	r4, #1
 800611a:	00a3      	lsls	r3, r4, #2
 800611c:	f100 0514 	add.w	r5, r0, #20
 8006120:	f101 0814 	add.w	r8, r1, #20
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800612a:	9301      	str	r3, [sp, #4]
 800612c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006134:	3301      	adds	r3, #1
 8006136:	429a      	cmp	r2, r3
 8006138:	fbb2 f6f3 	udiv	r6, r2, r3
 800613c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006140:	d32e      	bcc.n	80061a0 <quorem+0x96>
 8006142:	f04f 0a00 	mov.w	sl, #0
 8006146:	46c4      	mov	ip, r8
 8006148:	46ae      	mov	lr, r5
 800614a:	46d3      	mov	fp, sl
 800614c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006150:	b298      	uxth	r0, r3
 8006152:	fb06 a000 	mla	r0, r6, r0, sl
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	0c02      	lsrs	r2, r0, #16
 800615a:	fb06 2303 	mla	r3, r6, r3, r2
 800615e:	f8de 2000 	ldr.w	r2, [lr]
 8006162:	b280      	uxth	r0, r0
 8006164:	b292      	uxth	r2, r2
 8006166:	1a12      	subs	r2, r2, r0
 8006168:	445a      	add	r2, fp
 800616a:	f8de 0000 	ldr.w	r0, [lr]
 800616e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006172:	b29b      	uxth	r3, r3
 8006174:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006178:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800617c:	b292      	uxth	r2, r2
 800617e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006182:	45e1      	cmp	r9, ip
 8006184:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006188:	f84e 2b04 	str.w	r2, [lr], #4
 800618c:	d2de      	bcs.n	800614c <quorem+0x42>
 800618e:	9b00      	ldr	r3, [sp, #0]
 8006190:	58eb      	ldr	r3, [r5, r3]
 8006192:	b92b      	cbnz	r3, 80061a0 <quorem+0x96>
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	3b04      	subs	r3, #4
 8006198:	429d      	cmp	r5, r3
 800619a:	461a      	mov	r2, r3
 800619c:	d32f      	bcc.n	80061fe <quorem+0xf4>
 800619e:	613c      	str	r4, [r7, #16]
 80061a0:	4638      	mov	r0, r7
 80061a2:	f001 f97b 	bl	800749c <__mcmp>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	db25      	blt.n	80061f6 <quorem+0xec>
 80061aa:	4629      	mov	r1, r5
 80061ac:	2000      	movs	r0, #0
 80061ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80061b2:	f8d1 c000 	ldr.w	ip, [r1]
 80061b6:	fa1f fe82 	uxth.w	lr, r2
 80061ba:	fa1f f38c 	uxth.w	r3, ip
 80061be:	eba3 030e 	sub.w	r3, r3, lr
 80061c2:	4403      	add	r3, r0
 80061c4:	0c12      	lsrs	r2, r2, #16
 80061c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80061ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061d4:	45c1      	cmp	r9, r8
 80061d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061da:	f841 3b04 	str.w	r3, [r1], #4
 80061de:	d2e6      	bcs.n	80061ae <quorem+0xa4>
 80061e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061e8:	b922      	cbnz	r2, 80061f4 <quorem+0xea>
 80061ea:	3b04      	subs	r3, #4
 80061ec:	429d      	cmp	r5, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	d30b      	bcc.n	800620a <quorem+0x100>
 80061f2:	613c      	str	r4, [r7, #16]
 80061f4:	3601      	adds	r6, #1
 80061f6:	4630      	mov	r0, r6
 80061f8:	b003      	add	sp, #12
 80061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fe:	6812      	ldr	r2, [r2, #0]
 8006200:	3b04      	subs	r3, #4
 8006202:	2a00      	cmp	r2, #0
 8006204:	d1cb      	bne.n	800619e <quorem+0x94>
 8006206:	3c01      	subs	r4, #1
 8006208:	e7c6      	b.n	8006198 <quorem+0x8e>
 800620a:	6812      	ldr	r2, [r2, #0]
 800620c:	3b04      	subs	r3, #4
 800620e:	2a00      	cmp	r2, #0
 8006210:	d1ef      	bne.n	80061f2 <quorem+0xe8>
 8006212:	3c01      	subs	r4, #1
 8006214:	e7ea      	b.n	80061ec <quorem+0xe2>
 8006216:	2000      	movs	r0, #0
 8006218:	e7ee      	b.n	80061f8 <quorem+0xee>
 800621a:	0000      	movs	r0, r0
 800621c:	0000      	movs	r0, r0
	...

08006220 <_dtoa_r>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	4614      	mov	r4, r2
 8006226:	461d      	mov	r5, r3
 8006228:	69c7      	ldr	r7, [r0, #28]
 800622a:	b097      	sub	sp, #92	@ 0x5c
 800622c:	4683      	mov	fp, r0
 800622e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006232:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006234:	b97f      	cbnz	r7, 8006256 <_dtoa_r+0x36>
 8006236:	2010      	movs	r0, #16
 8006238:	f000 fe02 	bl	8006e40 <malloc>
 800623c:	4602      	mov	r2, r0
 800623e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006242:	b920      	cbnz	r0, 800624e <_dtoa_r+0x2e>
 8006244:	21ef      	movs	r1, #239	@ 0xef
 8006246:	4ba8      	ldr	r3, [pc, #672]	@ (80064e8 <_dtoa_r+0x2c8>)
 8006248:	48a8      	ldr	r0, [pc, #672]	@ (80064ec <_dtoa_r+0x2cc>)
 800624a:	f001 fc67 	bl	8007b1c <__assert_func>
 800624e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006252:	6007      	str	r7, [r0, #0]
 8006254:	60c7      	str	r7, [r0, #12]
 8006256:	f8db 301c 	ldr.w	r3, [fp, #28]
 800625a:	6819      	ldr	r1, [r3, #0]
 800625c:	b159      	cbz	r1, 8006276 <_dtoa_r+0x56>
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	2301      	movs	r3, #1
 8006262:	4093      	lsls	r3, r2
 8006264:	604a      	str	r2, [r1, #4]
 8006266:	608b      	str	r3, [r1, #8]
 8006268:	4658      	mov	r0, fp
 800626a:	f000 fedf 	bl	800702c <_Bfree>
 800626e:	2200      	movs	r2, #0
 8006270:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	1e2b      	subs	r3, r5, #0
 8006278:	bfaf      	iteee	ge
 800627a:	2300      	movge	r3, #0
 800627c:	2201      	movlt	r2, #1
 800627e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006282:	9303      	strlt	r3, [sp, #12]
 8006284:	bfa8      	it	ge
 8006286:	6033      	strge	r3, [r6, #0]
 8006288:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800628c:	4b98      	ldr	r3, [pc, #608]	@ (80064f0 <_dtoa_r+0x2d0>)
 800628e:	bfb8      	it	lt
 8006290:	6032      	strlt	r2, [r6, #0]
 8006292:	ea33 0308 	bics.w	r3, r3, r8
 8006296:	d112      	bne.n	80062be <_dtoa_r+0x9e>
 8006298:	f242 730f 	movw	r3, #9999	@ 0x270f
 800629c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80062a4:	4323      	orrs	r3, r4
 80062a6:	f000 8550 	beq.w	8006d4a <_dtoa_r+0xb2a>
 80062aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80064f4 <_dtoa_r+0x2d4>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8552 	beq.w	8006d5a <_dtoa_r+0xb3a>
 80062b6:	f10a 0303 	add.w	r3, sl, #3
 80062ba:	f000 bd4c 	b.w	8006d56 <_dtoa_r+0xb36>
 80062be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80062c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062ca:	2200      	movs	r2, #0
 80062cc:	2300      	movs	r3, #0
 80062ce:	f7fa fb6b 	bl	80009a8 <__aeabi_dcmpeq>
 80062d2:	4607      	mov	r7, r0
 80062d4:	b158      	cbz	r0, 80062ee <_dtoa_r+0xce>
 80062d6:	2301      	movs	r3, #1
 80062d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062de:	b113      	cbz	r3, 80062e6 <_dtoa_r+0xc6>
 80062e0:	4b85      	ldr	r3, [pc, #532]	@ (80064f8 <_dtoa_r+0x2d8>)
 80062e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80064fc <_dtoa_r+0x2dc>
 80062ea:	f000 bd36 	b.w	8006d5a <_dtoa_r+0xb3a>
 80062ee:	ab14      	add	r3, sp, #80	@ 0x50
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	ab15      	add	r3, sp, #84	@ 0x54
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	4658      	mov	r0, fp
 80062f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062fc:	f001 f97e 	bl	80075fc <__d2b>
 8006300:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006304:	4681      	mov	r9, r0
 8006306:	2e00      	cmp	r6, #0
 8006308:	d077      	beq.n	80063fa <_dtoa_r+0x1da>
 800630a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800630e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006310:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006318:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800631c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006320:	9712      	str	r7, [sp, #72]	@ 0x48
 8006322:	4619      	mov	r1, r3
 8006324:	2200      	movs	r2, #0
 8006326:	4b76      	ldr	r3, [pc, #472]	@ (8006500 <_dtoa_r+0x2e0>)
 8006328:	f7f9 ff1e 	bl	8000168 <__aeabi_dsub>
 800632c:	a368      	add	r3, pc, #416	@ (adr r3, 80064d0 <_dtoa_r+0x2b0>)
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f7fa f8d1 	bl	80004d8 <__aeabi_dmul>
 8006336:	a368      	add	r3, pc, #416	@ (adr r3, 80064d8 <_dtoa_r+0x2b8>)
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f7f9 ff16 	bl	800016c <__adddf3>
 8006340:	4604      	mov	r4, r0
 8006342:	4630      	mov	r0, r6
 8006344:	460d      	mov	r5, r1
 8006346:	f7fa f85d 	bl	8000404 <__aeabi_i2d>
 800634a:	a365      	add	r3, pc, #404	@ (adr r3, 80064e0 <_dtoa_r+0x2c0>)
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	f7fa f8c2 	bl	80004d8 <__aeabi_dmul>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4620      	mov	r0, r4
 800635a:	4629      	mov	r1, r5
 800635c:	f7f9 ff06 	bl	800016c <__adddf3>
 8006360:	4604      	mov	r4, r0
 8006362:	460d      	mov	r5, r1
 8006364:	f7fa fb68 	bl	8000a38 <__aeabi_d2iz>
 8006368:	2200      	movs	r2, #0
 800636a:	4607      	mov	r7, r0
 800636c:	2300      	movs	r3, #0
 800636e:	4620      	mov	r0, r4
 8006370:	4629      	mov	r1, r5
 8006372:	f7fa fb23 	bl	80009bc <__aeabi_dcmplt>
 8006376:	b140      	cbz	r0, 800638a <_dtoa_r+0x16a>
 8006378:	4638      	mov	r0, r7
 800637a:	f7fa f843 	bl	8000404 <__aeabi_i2d>
 800637e:	4622      	mov	r2, r4
 8006380:	462b      	mov	r3, r5
 8006382:	f7fa fb11 	bl	80009a8 <__aeabi_dcmpeq>
 8006386:	b900      	cbnz	r0, 800638a <_dtoa_r+0x16a>
 8006388:	3f01      	subs	r7, #1
 800638a:	2f16      	cmp	r7, #22
 800638c:	d853      	bhi.n	8006436 <_dtoa_r+0x216>
 800638e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006392:	4b5c      	ldr	r3, [pc, #368]	@ (8006504 <_dtoa_r+0x2e4>)
 8006394:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f7fa fb0e 	bl	80009bc <__aeabi_dcmplt>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d04a      	beq.n	800643a <_dtoa_r+0x21a>
 80063a4:	2300      	movs	r3, #0
 80063a6:	3f01      	subs	r7, #1
 80063a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80063ac:	1b9b      	subs	r3, r3, r6
 80063ae:	1e5a      	subs	r2, r3, #1
 80063b0:	bf46      	itte	mi
 80063b2:	f1c3 0801 	rsbmi	r8, r3, #1
 80063b6:	2300      	movmi	r3, #0
 80063b8:	f04f 0800 	movpl.w	r8, #0
 80063bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80063be:	bf48      	it	mi
 80063c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80063c2:	2f00      	cmp	r7, #0
 80063c4:	db3b      	blt.n	800643e <_dtoa_r+0x21e>
 80063c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80063ca:	443b      	add	r3, r7
 80063cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ce:	2300      	movs	r3, #0
 80063d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063d4:	2b09      	cmp	r3, #9
 80063d6:	d866      	bhi.n	80064a6 <_dtoa_r+0x286>
 80063d8:	2b05      	cmp	r3, #5
 80063da:	bfc4      	itt	gt
 80063dc:	3b04      	subgt	r3, #4
 80063de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80063e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063e2:	bfc8      	it	gt
 80063e4:	2400      	movgt	r4, #0
 80063e6:	f1a3 0302 	sub.w	r3, r3, #2
 80063ea:	bfd8      	it	le
 80063ec:	2401      	movle	r4, #1
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d864      	bhi.n	80064bc <_dtoa_r+0x29c>
 80063f2:	e8df f003 	tbb	[pc, r3]
 80063f6:	382b      	.short	0x382b
 80063f8:	5636      	.short	0x5636
 80063fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80063fe:	441e      	add	r6, r3
 8006400:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006404:	2b20      	cmp	r3, #32
 8006406:	bfc1      	itttt	gt
 8006408:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800640c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006410:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006414:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006418:	bfd6      	itet	le
 800641a:	f1c3 0320 	rsble	r3, r3, #32
 800641e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006422:	fa04 f003 	lslle.w	r0, r4, r3
 8006426:	f7f9 ffdd 	bl	80003e4 <__aeabi_ui2d>
 800642a:	2201      	movs	r2, #1
 800642c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006430:	3e01      	subs	r6, #1
 8006432:	9212      	str	r2, [sp, #72]	@ 0x48
 8006434:	e775      	b.n	8006322 <_dtoa_r+0x102>
 8006436:	2301      	movs	r3, #1
 8006438:	e7b6      	b.n	80063a8 <_dtoa_r+0x188>
 800643a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800643c:	e7b5      	b.n	80063aa <_dtoa_r+0x18a>
 800643e:	427b      	negs	r3, r7
 8006440:	930a      	str	r3, [sp, #40]	@ 0x28
 8006442:	2300      	movs	r3, #0
 8006444:	eba8 0807 	sub.w	r8, r8, r7
 8006448:	930e      	str	r3, [sp, #56]	@ 0x38
 800644a:	e7c2      	b.n	80063d2 <_dtoa_r+0x1b2>
 800644c:	2300      	movs	r3, #0
 800644e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006450:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006452:	2b00      	cmp	r3, #0
 8006454:	dc35      	bgt.n	80064c2 <_dtoa_r+0x2a2>
 8006456:	2301      	movs	r3, #1
 8006458:	461a      	mov	r2, r3
 800645a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800645e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006460:	e00b      	b.n	800647a <_dtoa_r+0x25a>
 8006462:	2301      	movs	r3, #1
 8006464:	e7f3      	b.n	800644e <_dtoa_r+0x22e>
 8006466:	2300      	movs	r3, #0
 8006468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800646a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800646c:	18fb      	adds	r3, r7, r3
 800646e:	9308      	str	r3, [sp, #32]
 8006470:	3301      	adds	r3, #1
 8006472:	2b01      	cmp	r3, #1
 8006474:	9307      	str	r3, [sp, #28]
 8006476:	bfb8      	it	lt
 8006478:	2301      	movlt	r3, #1
 800647a:	2100      	movs	r1, #0
 800647c:	2204      	movs	r2, #4
 800647e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006482:	f102 0514 	add.w	r5, r2, #20
 8006486:	429d      	cmp	r5, r3
 8006488:	d91f      	bls.n	80064ca <_dtoa_r+0x2aa>
 800648a:	6041      	str	r1, [r0, #4]
 800648c:	4658      	mov	r0, fp
 800648e:	f000 fd8d 	bl	8006fac <_Balloc>
 8006492:	4682      	mov	sl, r0
 8006494:	2800      	cmp	r0, #0
 8006496:	d139      	bne.n	800650c <_dtoa_r+0x2ec>
 8006498:	4602      	mov	r2, r0
 800649a:	f240 11af 	movw	r1, #431	@ 0x1af
 800649e:	4b1a      	ldr	r3, [pc, #104]	@ (8006508 <_dtoa_r+0x2e8>)
 80064a0:	e6d2      	b.n	8006248 <_dtoa_r+0x28>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e7e0      	b.n	8006468 <_dtoa_r+0x248>
 80064a6:	2401      	movs	r4, #1
 80064a8:	2300      	movs	r3, #0
 80064aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80064ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80064ae:	f04f 33ff 	mov.w	r3, #4294967295
 80064b2:	2200      	movs	r2, #0
 80064b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80064b8:	2312      	movs	r3, #18
 80064ba:	e7d0      	b.n	800645e <_dtoa_r+0x23e>
 80064bc:	2301      	movs	r3, #1
 80064be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064c0:	e7f5      	b.n	80064ae <_dtoa_r+0x28e>
 80064c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80064c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80064c8:	e7d7      	b.n	800647a <_dtoa_r+0x25a>
 80064ca:	3101      	adds	r1, #1
 80064cc:	0052      	lsls	r2, r2, #1
 80064ce:	e7d8      	b.n	8006482 <_dtoa_r+0x262>
 80064d0:	636f4361 	.word	0x636f4361
 80064d4:	3fd287a7 	.word	0x3fd287a7
 80064d8:	8b60c8b3 	.word	0x8b60c8b3
 80064dc:	3fc68a28 	.word	0x3fc68a28
 80064e0:	509f79fb 	.word	0x509f79fb
 80064e4:	3fd34413 	.word	0x3fd34413
 80064e8:	08008263 	.word	0x08008263
 80064ec:	0800827a 	.word	0x0800827a
 80064f0:	7ff00000 	.word	0x7ff00000
 80064f4:	0800825f 	.word	0x0800825f
 80064f8:	08008233 	.word	0x08008233
 80064fc:	08008232 	.word	0x08008232
 8006500:	3ff80000 	.word	0x3ff80000
 8006504:	08008370 	.word	0x08008370
 8006508:	080082d2 	.word	0x080082d2
 800650c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006510:	6018      	str	r0, [r3, #0]
 8006512:	9b07      	ldr	r3, [sp, #28]
 8006514:	2b0e      	cmp	r3, #14
 8006516:	f200 80a4 	bhi.w	8006662 <_dtoa_r+0x442>
 800651a:	2c00      	cmp	r4, #0
 800651c:	f000 80a1 	beq.w	8006662 <_dtoa_r+0x442>
 8006520:	2f00      	cmp	r7, #0
 8006522:	dd33      	ble.n	800658c <_dtoa_r+0x36c>
 8006524:	4b86      	ldr	r3, [pc, #536]	@ (8006740 <_dtoa_r+0x520>)
 8006526:	f007 020f 	and.w	r2, r7, #15
 800652a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800652e:	05f8      	lsls	r0, r7, #23
 8006530:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006534:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006538:	ea4f 1427 	mov.w	r4, r7, asr #4
 800653c:	d516      	bpl.n	800656c <_dtoa_r+0x34c>
 800653e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006542:	4b80      	ldr	r3, [pc, #512]	@ (8006744 <_dtoa_r+0x524>)
 8006544:	2603      	movs	r6, #3
 8006546:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800654a:	f7fa f8ef 	bl	800072c <__aeabi_ddiv>
 800654e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006552:	f004 040f 	and.w	r4, r4, #15
 8006556:	4d7b      	ldr	r5, [pc, #492]	@ (8006744 <_dtoa_r+0x524>)
 8006558:	b954      	cbnz	r4, 8006570 <_dtoa_r+0x350>
 800655a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800655e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006562:	f7fa f8e3 	bl	800072c <__aeabi_ddiv>
 8006566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800656a:	e028      	b.n	80065be <_dtoa_r+0x39e>
 800656c:	2602      	movs	r6, #2
 800656e:	e7f2      	b.n	8006556 <_dtoa_r+0x336>
 8006570:	07e1      	lsls	r1, r4, #31
 8006572:	d508      	bpl.n	8006586 <_dtoa_r+0x366>
 8006574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006578:	e9d5 2300 	ldrd	r2, r3, [r5]
 800657c:	f7f9 ffac 	bl	80004d8 <__aeabi_dmul>
 8006580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006584:	3601      	adds	r6, #1
 8006586:	1064      	asrs	r4, r4, #1
 8006588:	3508      	adds	r5, #8
 800658a:	e7e5      	b.n	8006558 <_dtoa_r+0x338>
 800658c:	f000 80d2 	beq.w	8006734 <_dtoa_r+0x514>
 8006590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006594:	427c      	negs	r4, r7
 8006596:	4b6a      	ldr	r3, [pc, #424]	@ (8006740 <_dtoa_r+0x520>)
 8006598:	f004 020f 	and.w	r2, r4, #15
 800659c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7f9 ff98 	bl	80004d8 <__aeabi_dmul>
 80065a8:	2602      	movs	r6, #2
 80065aa:	2300      	movs	r3, #0
 80065ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b0:	4d64      	ldr	r5, [pc, #400]	@ (8006744 <_dtoa_r+0x524>)
 80065b2:	1124      	asrs	r4, r4, #4
 80065b4:	2c00      	cmp	r4, #0
 80065b6:	f040 80b2 	bne.w	800671e <_dtoa_r+0x4fe>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1d3      	bne.n	8006566 <_dtoa_r+0x346>
 80065be:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80065c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80b7 	beq.w	8006738 <_dtoa_r+0x518>
 80065ca:	2200      	movs	r2, #0
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	4b5d      	ldr	r3, [pc, #372]	@ (8006748 <_dtoa_r+0x528>)
 80065d2:	f7fa f9f3 	bl	80009bc <__aeabi_dcmplt>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f000 80ae 	beq.w	8006738 <_dtoa_r+0x518>
 80065dc:	9b07      	ldr	r3, [sp, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 80aa 	beq.w	8006738 <_dtoa_r+0x518>
 80065e4:	9b08      	ldr	r3, [sp, #32]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	dd37      	ble.n	800665a <_dtoa_r+0x43a>
 80065ea:	1e7b      	subs	r3, r7, #1
 80065ec:	4620      	mov	r0, r4
 80065ee:	9304      	str	r3, [sp, #16]
 80065f0:	2200      	movs	r2, #0
 80065f2:	4629      	mov	r1, r5
 80065f4:	4b55      	ldr	r3, [pc, #340]	@ (800674c <_dtoa_r+0x52c>)
 80065f6:	f7f9 ff6f 	bl	80004d8 <__aeabi_dmul>
 80065fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065fe:	9c08      	ldr	r4, [sp, #32]
 8006600:	3601      	adds	r6, #1
 8006602:	4630      	mov	r0, r6
 8006604:	f7f9 fefe 	bl	8000404 <__aeabi_i2d>
 8006608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800660c:	f7f9 ff64 	bl	80004d8 <__aeabi_dmul>
 8006610:	2200      	movs	r2, #0
 8006612:	4b4f      	ldr	r3, [pc, #316]	@ (8006750 <_dtoa_r+0x530>)
 8006614:	f7f9 fdaa 	bl	800016c <__adddf3>
 8006618:	4605      	mov	r5, r0
 800661a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800661e:	2c00      	cmp	r4, #0
 8006620:	f040 809a 	bne.w	8006758 <_dtoa_r+0x538>
 8006624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006628:	2200      	movs	r2, #0
 800662a:	4b4a      	ldr	r3, [pc, #296]	@ (8006754 <_dtoa_r+0x534>)
 800662c:	f7f9 fd9c 	bl	8000168 <__aeabi_dsub>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006638:	462a      	mov	r2, r5
 800663a:	4633      	mov	r3, r6
 800663c:	f7fa f9dc 	bl	80009f8 <__aeabi_dcmpgt>
 8006640:	2800      	cmp	r0, #0
 8006642:	f040 828e 	bne.w	8006b62 <_dtoa_r+0x942>
 8006646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800664a:	462a      	mov	r2, r5
 800664c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006650:	f7fa f9b4 	bl	80009bc <__aeabi_dcmplt>
 8006654:	2800      	cmp	r0, #0
 8006656:	f040 8127 	bne.w	80068a8 <_dtoa_r+0x688>
 800665a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800665e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006662:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006664:	2b00      	cmp	r3, #0
 8006666:	f2c0 8163 	blt.w	8006930 <_dtoa_r+0x710>
 800666a:	2f0e      	cmp	r7, #14
 800666c:	f300 8160 	bgt.w	8006930 <_dtoa_r+0x710>
 8006670:	4b33      	ldr	r3, [pc, #204]	@ (8006740 <_dtoa_r+0x520>)
 8006672:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006676:	e9d3 3400 	ldrd	r3, r4, [r3]
 800667a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800667e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006680:	2b00      	cmp	r3, #0
 8006682:	da03      	bge.n	800668c <_dtoa_r+0x46c>
 8006684:	9b07      	ldr	r3, [sp, #28]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f340 8100 	ble.w	800688c <_dtoa_r+0x66c>
 800668c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006690:	4656      	mov	r6, sl
 8006692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006696:	4620      	mov	r0, r4
 8006698:	4629      	mov	r1, r5
 800669a:	f7fa f847 	bl	800072c <__aeabi_ddiv>
 800669e:	f7fa f9cb 	bl	8000a38 <__aeabi_d2iz>
 80066a2:	4680      	mov	r8, r0
 80066a4:	f7f9 feae 	bl	8000404 <__aeabi_i2d>
 80066a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ac:	f7f9 ff14 	bl	80004d8 <__aeabi_dmul>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4620      	mov	r0, r4
 80066b6:	4629      	mov	r1, r5
 80066b8:	f7f9 fd56 	bl	8000168 <__aeabi_dsub>
 80066bc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80066c0:	9d07      	ldr	r5, [sp, #28]
 80066c2:	f806 4b01 	strb.w	r4, [r6], #1
 80066c6:	eba6 040a 	sub.w	r4, r6, sl
 80066ca:	42a5      	cmp	r5, r4
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	f040 8116 	bne.w	8006900 <_dtoa_r+0x6e0>
 80066d4:	f7f9 fd4a 	bl	800016c <__adddf3>
 80066d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066dc:	4604      	mov	r4, r0
 80066de:	460d      	mov	r5, r1
 80066e0:	f7fa f98a 	bl	80009f8 <__aeabi_dcmpgt>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f040 80f8 	bne.w	80068da <_dtoa_r+0x6ba>
 80066ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ee:	4620      	mov	r0, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7fa f959 	bl	80009a8 <__aeabi_dcmpeq>
 80066f6:	b118      	cbz	r0, 8006700 <_dtoa_r+0x4e0>
 80066f8:	f018 0f01 	tst.w	r8, #1
 80066fc:	f040 80ed 	bne.w	80068da <_dtoa_r+0x6ba>
 8006700:	4649      	mov	r1, r9
 8006702:	4658      	mov	r0, fp
 8006704:	f000 fc92 	bl	800702c <_Bfree>
 8006708:	2300      	movs	r3, #0
 800670a:	7033      	strb	r3, [r6, #0]
 800670c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800670e:	3701      	adds	r7, #1
 8006710:	601f      	str	r7, [r3, #0]
 8006712:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8320 	beq.w	8006d5a <_dtoa_r+0xb3a>
 800671a:	601e      	str	r6, [r3, #0]
 800671c:	e31d      	b.n	8006d5a <_dtoa_r+0xb3a>
 800671e:	07e2      	lsls	r2, r4, #31
 8006720:	d505      	bpl.n	800672e <_dtoa_r+0x50e>
 8006722:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006726:	f7f9 fed7 	bl	80004d8 <__aeabi_dmul>
 800672a:	2301      	movs	r3, #1
 800672c:	3601      	adds	r6, #1
 800672e:	1064      	asrs	r4, r4, #1
 8006730:	3508      	adds	r5, #8
 8006732:	e73f      	b.n	80065b4 <_dtoa_r+0x394>
 8006734:	2602      	movs	r6, #2
 8006736:	e742      	b.n	80065be <_dtoa_r+0x39e>
 8006738:	9c07      	ldr	r4, [sp, #28]
 800673a:	9704      	str	r7, [sp, #16]
 800673c:	e761      	b.n	8006602 <_dtoa_r+0x3e2>
 800673e:	bf00      	nop
 8006740:	08008370 	.word	0x08008370
 8006744:	08008348 	.word	0x08008348
 8006748:	3ff00000 	.word	0x3ff00000
 800674c:	40240000 	.word	0x40240000
 8006750:	401c0000 	.word	0x401c0000
 8006754:	40140000 	.word	0x40140000
 8006758:	4b70      	ldr	r3, [pc, #448]	@ (800691c <_dtoa_r+0x6fc>)
 800675a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800675c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006760:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006764:	4454      	add	r4, sl
 8006766:	2900      	cmp	r1, #0
 8006768:	d045      	beq.n	80067f6 <_dtoa_r+0x5d6>
 800676a:	2000      	movs	r0, #0
 800676c:	496c      	ldr	r1, [pc, #432]	@ (8006920 <_dtoa_r+0x700>)
 800676e:	f7f9 ffdd 	bl	800072c <__aeabi_ddiv>
 8006772:	4633      	mov	r3, r6
 8006774:	462a      	mov	r2, r5
 8006776:	f7f9 fcf7 	bl	8000168 <__aeabi_dsub>
 800677a:	4656      	mov	r6, sl
 800677c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006784:	f7fa f958 	bl	8000a38 <__aeabi_d2iz>
 8006788:	4605      	mov	r5, r0
 800678a:	f7f9 fe3b 	bl	8000404 <__aeabi_i2d>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006796:	f7f9 fce7 	bl	8000168 <__aeabi_dsub>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	3530      	adds	r5, #48	@ 0x30
 80067a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067a8:	f806 5b01 	strb.w	r5, [r6], #1
 80067ac:	f7fa f906 	bl	80009bc <__aeabi_dcmplt>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d163      	bne.n	800687c <_dtoa_r+0x65c>
 80067b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067b8:	2000      	movs	r0, #0
 80067ba:	495a      	ldr	r1, [pc, #360]	@ (8006924 <_dtoa_r+0x704>)
 80067bc:	f7f9 fcd4 	bl	8000168 <__aeabi_dsub>
 80067c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067c4:	f7fa f8fa 	bl	80009bc <__aeabi_dcmplt>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f040 8087 	bne.w	80068dc <_dtoa_r+0x6bc>
 80067ce:	42a6      	cmp	r6, r4
 80067d0:	f43f af43 	beq.w	800665a <_dtoa_r+0x43a>
 80067d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067d8:	2200      	movs	r2, #0
 80067da:	4b53      	ldr	r3, [pc, #332]	@ (8006928 <_dtoa_r+0x708>)
 80067dc:	f7f9 fe7c 	bl	80004d8 <__aeabi_dmul>
 80067e0:	2200      	movs	r2, #0
 80067e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ea:	4b4f      	ldr	r3, [pc, #316]	@ (8006928 <_dtoa_r+0x708>)
 80067ec:	f7f9 fe74 	bl	80004d8 <__aeabi_dmul>
 80067f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f4:	e7c4      	b.n	8006780 <_dtoa_r+0x560>
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	f7f9 fe6d 	bl	80004d8 <__aeabi_dmul>
 80067fe:	4656      	mov	r6, sl
 8006800:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006804:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800680a:	f7fa f915 	bl	8000a38 <__aeabi_d2iz>
 800680e:	4605      	mov	r5, r0
 8006810:	f7f9 fdf8 	bl	8000404 <__aeabi_i2d>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800681c:	f7f9 fca4 	bl	8000168 <__aeabi_dsub>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	3530      	adds	r5, #48	@ 0x30
 8006826:	f806 5b01 	strb.w	r5, [r6], #1
 800682a:	42a6      	cmp	r6, r4
 800682c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006830:	f04f 0200 	mov.w	r2, #0
 8006834:	d124      	bne.n	8006880 <_dtoa_r+0x660>
 8006836:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800683a:	4b39      	ldr	r3, [pc, #228]	@ (8006920 <_dtoa_r+0x700>)
 800683c:	f7f9 fc96 	bl	800016c <__adddf3>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006848:	f7fa f8d6 	bl	80009f8 <__aeabi_dcmpgt>
 800684c:	2800      	cmp	r0, #0
 800684e:	d145      	bne.n	80068dc <_dtoa_r+0x6bc>
 8006850:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006854:	2000      	movs	r0, #0
 8006856:	4932      	ldr	r1, [pc, #200]	@ (8006920 <_dtoa_r+0x700>)
 8006858:	f7f9 fc86 	bl	8000168 <__aeabi_dsub>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006864:	f7fa f8aa 	bl	80009bc <__aeabi_dcmplt>
 8006868:	2800      	cmp	r0, #0
 800686a:	f43f aef6 	beq.w	800665a <_dtoa_r+0x43a>
 800686e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006870:	1e73      	subs	r3, r6, #1
 8006872:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006874:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006878:	2b30      	cmp	r3, #48	@ 0x30
 800687a:	d0f8      	beq.n	800686e <_dtoa_r+0x64e>
 800687c:	9f04      	ldr	r7, [sp, #16]
 800687e:	e73f      	b.n	8006700 <_dtoa_r+0x4e0>
 8006880:	4b29      	ldr	r3, [pc, #164]	@ (8006928 <_dtoa_r+0x708>)
 8006882:	f7f9 fe29 	bl	80004d8 <__aeabi_dmul>
 8006886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800688a:	e7bc      	b.n	8006806 <_dtoa_r+0x5e6>
 800688c:	d10c      	bne.n	80068a8 <_dtoa_r+0x688>
 800688e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006892:	2200      	movs	r2, #0
 8006894:	4b25      	ldr	r3, [pc, #148]	@ (800692c <_dtoa_r+0x70c>)
 8006896:	f7f9 fe1f 	bl	80004d8 <__aeabi_dmul>
 800689a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800689e:	f7fa f8a1 	bl	80009e4 <__aeabi_dcmpge>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	f000 815b 	beq.w	8006b5e <_dtoa_r+0x93e>
 80068a8:	2400      	movs	r4, #0
 80068aa:	4625      	mov	r5, r4
 80068ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068ae:	4656      	mov	r6, sl
 80068b0:	43db      	mvns	r3, r3
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	2700      	movs	r7, #0
 80068b6:	4621      	mov	r1, r4
 80068b8:	4658      	mov	r0, fp
 80068ba:	f000 fbb7 	bl	800702c <_Bfree>
 80068be:	2d00      	cmp	r5, #0
 80068c0:	d0dc      	beq.n	800687c <_dtoa_r+0x65c>
 80068c2:	b12f      	cbz	r7, 80068d0 <_dtoa_r+0x6b0>
 80068c4:	42af      	cmp	r7, r5
 80068c6:	d003      	beq.n	80068d0 <_dtoa_r+0x6b0>
 80068c8:	4639      	mov	r1, r7
 80068ca:	4658      	mov	r0, fp
 80068cc:	f000 fbae 	bl	800702c <_Bfree>
 80068d0:	4629      	mov	r1, r5
 80068d2:	4658      	mov	r0, fp
 80068d4:	f000 fbaa 	bl	800702c <_Bfree>
 80068d8:	e7d0      	b.n	800687c <_dtoa_r+0x65c>
 80068da:	9704      	str	r7, [sp, #16]
 80068dc:	4633      	mov	r3, r6
 80068de:	461e      	mov	r6, r3
 80068e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068e4:	2a39      	cmp	r2, #57	@ 0x39
 80068e6:	d107      	bne.n	80068f8 <_dtoa_r+0x6d8>
 80068e8:	459a      	cmp	sl, r3
 80068ea:	d1f8      	bne.n	80068de <_dtoa_r+0x6be>
 80068ec:	9a04      	ldr	r2, [sp, #16]
 80068ee:	3201      	adds	r2, #1
 80068f0:	9204      	str	r2, [sp, #16]
 80068f2:	2230      	movs	r2, #48	@ 0x30
 80068f4:	f88a 2000 	strb.w	r2, [sl]
 80068f8:	781a      	ldrb	r2, [r3, #0]
 80068fa:	3201      	adds	r2, #1
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	e7bd      	b.n	800687c <_dtoa_r+0x65c>
 8006900:	2200      	movs	r2, #0
 8006902:	4b09      	ldr	r3, [pc, #36]	@ (8006928 <_dtoa_r+0x708>)
 8006904:	f7f9 fde8 	bl	80004d8 <__aeabi_dmul>
 8006908:	2200      	movs	r2, #0
 800690a:	2300      	movs	r3, #0
 800690c:	4604      	mov	r4, r0
 800690e:	460d      	mov	r5, r1
 8006910:	f7fa f84a 	bl	80009a8 <__aeabi_dcmpeq>
 8006914:	2800      	cmp	r0, #0
 8006916:	f43f aebc 	beq.w	8006692 <_dtoa_r+0x472>
 800691a:	e6f1      	b.n	8006700 <_dtoa_r+0x4e0>
 800691c:	08008370 	.word	0x08008370
 8006920:	3fe00000 	.word	0x3fe00000
 8006924:	3ff00000 	.word	0x3ff00000
 8006928:	40240000 	.word	0x40240000
 800692c:	40140000 	.word	0x40140000
 8006930:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006932:	2a00      	cmp	r2, #0
 8006934:	f000 80db 	beq.w	8006aee <_dtoa_r+0x8ce>
 8006938:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800693a:	2a01      	cmp	r2, #1
 800693c:	f300 80bf 	bgt.w	8006abe <_dtoa_r+0x89e>
 8006940:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006942:	2a00      	cmp	r2, #0
 8006944:	f000 80b7 	beq.w	8006ab6 <_dtoa_r+0x896>
 8006948:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800694c:	4646      	mov	r6, r8
 800694e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006950:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006952:	2101      	movs	r1, #1
 8006954:	441a      	add	r2, r3
 8006956:	4658      	mov	r0, fp
 8006958:	4498      	add	r8, r3
 800695a:	9209      	str	r2, [sp, #36]	@ 0x24
 800695c:	f000 fc1a 	bl	8007194 <__i2b>
 8006960:	4605      	mov	r5, r0
 8006962:	b15e      	cbz	r6, 800697c <_dtoa_r+0x75c>
 8006964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	dd08      	ble.n	800697c <_dtoa_r+0x75c>
 800696a:	42b3      	cmp	r3, r6
 800696c:	bfa8      	it	ge
 800696e:	4633      	movge	r3, r6
 8006970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006972:	eba8 0803 	sub.w	r8, r8, r3
 8006976:	1af6      	subs	r6, r6, r3
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	9309      	str	r3, [sp, #36]	@ 0x24
 800697c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800697e:	b1f3      	cbz	r3, 80069be <_dtoa_r+0x79e>
 8006980:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80b7 	beq.w	8006af6 <_dtoa_r+0x8d6>
 8006988:	b18c      	cbz	r4, 80069ae <_dtoa_r+0x78e>
 800698a:	4629      	mov	r1, r5
 800698c:	4622      	mov	r2, r4
 800698e:	4658      	mov	r0, fp
 8006990:	f000 fcbe 	bl	8007310 <__pow5mult>
 8006994:	464a      	mov	r2, r9
 8006996:	4601      	mov	r1, r0
 8006998:	4605      	mov	r5, r0
 800699a:	4658      	mov	r0, fp
 800699c:	f000 fc10 	bl	80071c0 <__multiply>
 80069a0:	4649      	mov	r1, r9
 80069a2:	9004      	str	r0, [sp, #16]
 80069a4:	4658      	mov	r0, fp
 80069a6:	f000 fb41 	bl	800702c <_Bfree>
 80069aa:	9b04      	ldr	r3, [sp, #16]
 80069ac:	4699      	mov	r9, r3
 80069ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069b0:	1b1a      	subs	r2, r3, r4
 80069b2:	d004      	beq.n	80069be <_dtoa_r+0x79e>
 80069b4:	4649      	mov	r1, r9
 80069b6:	4658      	mov	r0, fp
 80069b8:	f000 fcaa 	bl	8007310 <__pow5mult>
 80069bc:	4681      	mov	r9, r0
 80069be:	2101      	movs	r1, #1
 80069c0:	4658      	mov	r0, fp
 80069c2:	f000 fbe7 	bl	8007194 <__i2b>
 80069c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069c8:	4604      	mov	r4, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 81c9 	beq.w	8006d62 <_dtoa_r+0xb42>
 80069d0:	461a      	mov	r2, r3
 80069d2:	4601      	mov	r1, r0
 80069d4:	4658      	mov	r0, fp
 80069d6:	f000 fc9b 	bl	8007310 <__pow5mult>
 80069da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069dc:	4604      	mov	r4, r0
 80069de:	2b01      	cmp	r3, #1
 80069e0:	f300 808f 	bgt.w	8006b02 <_dtoa_r+0x8e2>
 80069e4:	9b02      	ldr	r3, [sp, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f040 8087 	bne.w	8006afa <_dtoa_r+0x8da>
 80069ec:	9b03      	ldr	r3, [sp, #12]
 80069ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f040 8083 	bne.w	8006afe <_dtoa_r+0x8de>
 80069f8:	9b03      	ldr	r3, [sp, #12]
 80069fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069fe:	0d1b      	lsrs	r3, r3, #20
 8006a00:	051b      	lsls	r3, r3, #20
 8006a02:	b12b      	cbz	r3, 8006a10 <_dtoa_r+0x7f0>
 8006a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a06:	f108 0801 	add.w	r8, r8, #1
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a0e:	2301      	movs	r3, #1
 8006a10:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 81aa 	beq.w	8006d6e <_dtoa_r+0xb4e>
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a20:	6918      	ldr	r0, [r3, #16]
 8006a22:	f000 fb6b 	bl	80070fc <__hi0bits>
 8006a26:	f1c0 0020 	rsb	r0, r0, #32
 8006a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a2c:	4418      	add	r0, r3
 8006a2e:	f010 001f 	ands.w	r0, r0, #31
 8006a32:	d071      	beq.n	8006b18 <_dtoa_r+0x8f8>
 8006a34:	f1c0 0320 	rsb	r3, r0, #32
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	dd65      	ble.n	8006b08 <_dtoa_r+0x8e8>
 8006a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a3e:	f1c0 001c 	rsb	r0, r0, #28
 8006a42:	4403      	add	r3, r0
 8006a44:	4480      	add	r8, r0
 8006a46:	4406      	add	r6, r0
 8006a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a4a:	f1b8 0f00 	cmp.w	r8, #0
 8006a4e:	dd05      	ble.n	8006a5c <_dtoa_r+0x83c>
 8006a50:	4649      	mov	r1, r9
 8006a52:	4642      	mov	r2, r8
 8006a54:	4658      	mov	r0, fp
 8006a56:	f000 fcb5 	bl	80073c4 <__lshift>
 8006a5a:	4681      	mov	r9, r0
 8006a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dd05      	ble.n	8006a6e <_dtoa_r+0x84e>
 8006a62:	4621      	mov	r1, r4
 8006a64:	461a      	mov	r2, r3
 8006a66:	4658      	mov	r0, fp
 8006a68:	f000 fcac 	bl	80073c4 <__lshift>
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d053      	beq.n	8006b1c <_dtoa_r+0x8fc>
 8006a74:	4621      	mov	r1, r4
 8006a76:	4648      	mov	r0, r9
 8006a78:	f000 fd10 	bl	800749c <__mcmp>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	da4d      	bge.n	8006b1c <_dtoa_r+0x8fc>
 8006a80:	1e7b      	subs	r3, r7, #1
 8006a82:	4649      	mov	r1, r9
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	220a      	movs	r2, #10
 8006a88:	2300      	movs	r3, #0
 8006a8a:	4658      	mov	r0, fp
 8006a8c:	f000 faf0 	bl	8007070 <__multadd>
 8006a90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a92:	4681      	mov	r9, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 816c 	beq.w	8006d72 <_dtoa_r+0xb52>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	220a      	movs	r2, #10
 8006aa0:	4658      	mov	r0, fp
 8006aa2:	f000 fae5 	bl	8007070 <__multadd>
 8006aa6:	9b08      	ldr	r3, [sp, #32]
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	dc61      	bgt.n	8006b72 <_dtoa_r+0x952>
 8006aae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	dc3b      	bgt.n	8006b2c <_dtoa_r+0x90c>
 8006ab4:	e05d      	b.n	8006b72 <_dtoa_r+0x952>
 8006ab6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ab8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006abc:	e746      	b.n	800694c <_dtoa_r+0x72c>
 8006abe:	9b07      	ldr	r3, [sp, #28]
 8006ac0:	1e5c      	subs	r4, r3, #1
 8006ac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	bfbf      	itttt	lt
 8006ac8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006aca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006acc:	1ae3      	sublt	r3, r4, r3
 8006ace:	18d2      	addlt	r2, r2, r3
 8006ad0:	bfa8      	it	ge
 8006ad2:	1b1c      	subge	r4, r3, r4
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	bfbe      	ittt	lt
 8006ad8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006ada:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006adc:	2400      	movlt	r4, #0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bfb5      	itete	lt
 8006ae2:	eba8 0603 	sublt.w	r6, r8, r3
 8006ae6:	4646      	movge	r6, r8
 8006ae8:	2300      	movlt	r3, #0
 8006aea:	9b07      	ldrge	r3, [sp, #28]
 8006aec:	e730      	b.n	8006950 <_dtoa_r+0x730>
 8006aee:	4646      	mov	r6, r8
 8006af0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006af2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006af4:	e735      	b.n	8006962 <_dtoa_r+0x742>
 8006af6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006af8:	e75c      	b.n	80069b4 <_dtoa_r+0x794>
 8006afa:	2300      	movs	r3, #0
 8006afc:	e788      	b.n	8006a10 <_dtoa_r+0x7f0>
 8006afe:	9b02      	ldr	r3, [sp, #8]
 8006b00:	e786      	b.n	8006a10 <_dtoa_r+0x7f0>
 8006b02:	2300      	movs	r3, #0
 8006b04:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b06:	e788      	b.n	8006a1a <_dtoa_r+0x7fa>
 8006b08:	d09f      	beq.n	8006a4a <_dtoa_r+0x82a>
 8006b0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b0c:	331c      	adds	r3, #28
 8006b0e:	441a      	add	r2, r3
 8006b10:	4498      	add	r8, r3
 8006b12:	441e      	add	r6, r3
 8006b14:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b16:	e798      	b.n	8006a4a <_dtoa_r+0x82a>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	e7f6      	b.n	8006b0a <_dtoa_r+0x8ea>
 8006b1c:	9b07      	ldr	r3, [sp, #28]
 8006b1e:	9704      	str	r7, [sp, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	dc20      	bgt.n	8006b66 <_dtoa_r+0x946>
 8006b24:	9308      	str	r3, [sp, #32]
 8006b26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	dd1e      	ble.n	8006b6a <_dtoa_r+0x94a>
 8006b2c:	9b08      	ldr	r3, [sp, #32]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f47f aebc 	bne.w	80068ac <_dtoa_r+0x68c>
 8006b34:	4621      	mov	r1, r4
 8006b36:	2205      	movs	r2, #5
 8006b38:	4658      	mov	r0, fp
 8006b3a:	f000 fa99 	bl	8007070 <__multadd>
 8006b3e:	4601      	mov	r1, r0
 8006b40:	4604      	mov	r4, r0
 8006b42:	4648      	mov	r0, r9
 8006b44:	f000 fcaa 	bl	800749c <__mcmp>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	f77f aeaf 	ble.w	80068ac <_dtoa_r+0x68c>
 8006b4e:	2331      	movs	r3, #49	@ 0x31
 8006b50:	4656      	mov	r6, sl
 8006b52:	f806 3b01 	strb.w	r3, [r6], #1
 8006b56:	9b04      	ldr	r3, [sp, #16]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	e6aa      	b.n	80068b4 <_dtoa_r+0x694>
 8006b5e:	9c07      	ldr	r4, [sp, #28]
 8006b60:	9704      	str	r7, [sp, #16]
 8006b62:	4625      	mov	r5, r4
 8006b64:	e7f3      	b.n	8006b4e <_dtoa_r+0x92e>
 8006b66:	9b07      	ldr	r3, [sp, #28]
 8006b68:	9308      	str	r3, [sp, #32]
 8006b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8104 	beq.w	8006d7a <_dtoa_r+0xb5a>
 8006b72:	2e00      	cmp	r6, #0
 8006b74:	dd05      	ble.n	8006b82 <_dtoa_r+0x962>
 8006b76:	4629      	mov	r1, r5
 8006b78:	4632      	mov	r2, r6
 8006b7a:	4658      	mov	r0, fp
 8006b7c:	f000 fc22 	bl	80073c4 <__lshift>
 8006b80:	4605      	mov	r5, r0
 8006b82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d05a      	beq.n	8006c3e <_dtoa_r+0xa1e>
 8006b88:	4658      	mov	r0, fp
 8006b8a:	6869      	ldr	r1, [r5, #4]
 8006b8c:	f000 fa0e 	bl	8006fac <_Balloc>
 8006b90:	4606      	mov	r6, r0
 8006b92:	b928      	cbnz	r0, 8006ba0 <_dtoa_r+0x980>
 8006b94:	4602      	mov	r2, r0
 8006b96:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b9a:	4b83      	ldr	r3, [pc, #524]	@ (8006da8 <_dtoa_r+0xb88>)
 8006b9c:	f7ff bb54 	b.w	8006248 <_dtoa_r+0x28>
 8006ba0:	692a      	ldr	r2, [r5, #16]
 8006ba2:	f105 010c 	add.w	r1, r5, #12
 8006ba6:	3202      	adds	r2, #2
 8006ba8:	0092      	lsls	r2, r2, #2
 8006baa:	300c      	adds	r0, #12
 8006bac:	f000 ffa8 	bl	8007b00 <memcpy>
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4658      	mov	r0, fp
 8006bb6:	f000 fc05 	bl	80073c4 <__lshift>
 8006bba:	462f      	mov	r7, r5
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	f10a 0301 	add.w	r3, sl, #1
 8006bc2:	9307      	str	r3, [sp, #28]
 8006bc4:	9b08      	ldr	r3, [sp, #32]
 8006bc6:	4453      	add	r3, sl
 8006bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bca:	9b02      	ldr	r3, [sp, #8]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bd2:	9b07      	ldr	r3, [sp, #28]
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	4648      	mov	r0, r9
 8006bda:	9302      	str	r3, [sp, #8]
 8006bdc:	f7ff fa95 	bl	800610a <quorem>
 8006be0:	4639      	mov	r1, r7
 8006be2:	9008      	str	r0, [sp, #32]
 8006be4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006be8:	4648      	mov	r0, r9
 8006bea:	f000 fc57 	bl	800749c <__mcmp>
 8006bee:	462a      	mov	r2, r5
 8006bf0:	9009      	str	r0, [sp, #36]	@ 0x24
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	4658      	mov	r0, fp
 8006bf6:	f000 fc6d 	bl	80074d4 <__mdiff>
 8006bfa:	68c2      	ldr	r2, [r0, #12]
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	bb02      	cbnz	r2, 8006c42 <_dtoa_r+0xa22>
 8006c00:	4601      	mov	r1, r0
 8006c02:	4648      	mov	r0, r9
 8006c04:	f000 fc4a 	bl	800749c <__mcmp>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4658      	mov	r0, fp
 8006c0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006c10:	f000 fa0c 	bl	800702c <_Bfree>
 8006c14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c18:	9e07      	ldr	r6, [sp, #28]
 8006c1a:	ea43 0102 	orr.w	r1, r3, r2
 8006c1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c20:	4319      	orrs	r1, r3
 8006c22:	d110      	bne.n	8006c46 <_dtoa_r+0xa26>
 8006c24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c28:	d029      	beq.n	8006c7e <_dtoa_r+0xa5e>
 8006c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	dd02      	ble.n	8006c36 <_dtoa_r+0xa16>
 8006c30:	9b08      	ldr	r3, [sp, #32]
 8006c32:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006c36:	9b02      	ldr	r3, [sp, #8]
 8006c38:	f883 8000 	strb.w	r8, [r3]
 8006c3c:	e63b      	b.n	80068b6 <_dtoa_r+0x696>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	e7bb      	b.n	8006bba <_dtoa_r+0x99a>
 8006c42:	2201      	movs	r2, #1
 8006c44:	e7e1      	b.n	8006c0a <_dtoa_r+0x9ea>
 8006c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	db04      	blt.n	8006c56 <_dtoa_r+0xa36>
 8006c4c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c52:	430b      	orrs	r3, r1
 8006c54:	d120      	bne.n	8006c98 <_dtoa_r+0xa78>
 8006c56:	2a00      	cmp	r2, #0
 8006c58:	dded      	ble.n	8006c36 <_dtoa_r+0xa16>
 8006c5a:	4649      	mov	r1, r9
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	4658      	mov	r0, fp
 8006c60:	f000 fbb0 	bl	80073c4 <__lshift>
 8006c64:	4621      	mov	r1, r4
 8006c66:	4681      	mov	r9, r0
 8006c68:	f000 fc18 	bl	800749c <__mcmp>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	dc03      	bgt.n	8006c78 <_dtoa_r+0xa58>
 8006c70:	d1e1      	bne.n	8006c36 <_dtoa_r+0xa16>
 8006c72:	f018 0f01 	tst.w	r8, #1
 8006c76:	d0de      	beq.n	8006c36 <_dtoa_r+0xa16>
 8006c78:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c7c:	d1d8      	bne.n	8006c30 <_dtoa_r+0xa10>
 8006c7e:	2339      	movs	r3, #57	@ 0x39
 8006c80:	9a02      	ldr	r2, [sp, #8]
 8006c82:	7013      	strb	r3, [r2, #0]
 8006c84:	4633      	mov	r3, r6
 8006c86:	461e      	mov	r6, r3
 8006c88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	2a39      	cmp	r2, #57	@ 0x39
 8006c90:	d052      	beq.n	8006d38 <_dtoa_r+0xb18>
 8006c92:	3201      	adds	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e60e      	b.n	80068b6 <_dtoa_r+0x696>
 8006c98:	2a00      	cmp	r2, #0
 8006c9a:	dd07      	ble.n	8006cac <_dtoa_r+0xa8c>
 8006c9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ca0:	d0ed      	beq.n	8006c7e <_dtoa_r+0xa5e>
 8006ca2:	9a02      	ldr	r2, [sp, #8]
 8006ca4:	f108 0301 	add.w	r3, r8, #1
 8006ca8:	7013      	strb	r3, [r2, #0]
 8006caa:	e604      	b.n	80068b6 <_dtoa_r+0x696>
 8006cac:	9b07      	ldr	r3, [sp, #28]
 8006cae:	9a07      	ldr	r2, [sp, #28]
 8006cb0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006cb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d028      	beq.n	8006d0c <_dtoa_r+0xaec>
 8006cba:	4649      	mov	r1, r9
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	220a      	movs	r2, #10
 8006cc0:	4658      	mov	r0, fp
 8006cc2:	f000 f9d5 	bl	8007070 <__multadd>
 8006cc6:	42af      	cmp	r7, r5
 8006cc8:	4681      	mov	r9, r0
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	f04f 020a 	mov.w	r2, #10
 8006cd2:	4639      	mov	r1, r7
 8006cd4:	4658      	mov	r0, fp
 8006cd6:	d107      	bne.n	8006ce8 <_dtoa_r+0xac8>
 8006cd8:	f000 f9ca 	bl	8007070 <__multadd>
 8006cdc:	4607      	mov	r7, r0
 8006cde:	4605      	mov	r5, r0
 8006ce0:	9b07      	ldr	r3, [sp, #28]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	9307      	str	r3, [sp, #28]
 8006ce6:	e774      	b.n	8006bd2 <_dtoa_r+0x9b2>
 8006ce8:	f000 f9c2 	bl	8007070 <__multadd>
 8006cec:	4629      	mov	r1, r5
 8006cee:	4607      	mov	r7, r0
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	220a      	movs	r2, #10
 8006cf4:	4658      	mov	r0, fp
 8006cf6:	f000 f9bb 	bl	8007070 <__multadd>
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	e7f0      	b.n	8006ce0 <_dtoa_r+0xac0>
 8006cfe:	9b08      	ldr	r3, [sp, #32]
 8006d00:	2700      	movs	r7, #0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	bfcc      	ite	gt
 8006d06:	461e      	movgt	r6, r3
 8006d08:	2601      	movle	r6, #1
 8006d0a:	4456      	add	r6, sl
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	2201      	movs	r2, #1
 8006d10:	4658      	mov	r0, fp
 8006d12:	f000 fb57 	bl	80073c4 <__lshift>
 8006d16:	4621      	mov	r1, r4
 8006d18:	4681      	mov	r9, r0
 8006d1a:	f000 fbbf 	bl	800749c <__mcmp>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	dcb0      	bgt.n	8006c84 <_dtoa_r+0xa64>
 8006d22:	d102      	bne.n	8006d2a <_dtoa_r+0xb0a>
 8006d24:	f018 0f01 	tst.w	r8, #1
 8006d28:	d1ac      	bne.n	8006c84 <_dtoa_r+0xa64>
 8006d2a:	4633      	mov	r3, r6
 8006d2c:	461e      	mov	r6, r3
 8006d2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d32:	2a30      	cmp	r2, #48	@ 0x30
 8006d34:	d0fa      	beq.n	8006d2c <_dtoa_r+0xb0c>
 8006d36:	e5be      	b.n	80068b6 <_dtoa_r+0x696>
 8006d38:	459a      	cmp	sl, r3
 8006d3a:	d1a4      	bne.n	8006c86 <_dtoa_r+0xa66>
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	2331      	movs	r3, #49	@ 0x31
 8006d44:	f88a 3000 	strb.w	r3, [sl]
 8006d48:	e5b5      	b.n	80068b6 <_dtoa_r+0x696>
 8006d4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d4c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006dac <_dtoa_r+0xb8c>
 8006d50:	b11b      	cbz	r3, 8006d5a <_dtoa_r+0xb3a>
 8006d52:	f10a 0308 	add.w	r3, sl, #8
 8006d56:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	4650      	mov	r0, sl
 8006d5c:	b017      	add	sp, #92	@ 0x5c
 8006d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	f77f ae3d 	ble.w	80069e4 <_dtoa_r+0x7c4>
 8006d6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d6e:	2001      	movs	r0, #1
 8006d70:	e65b      	b.n	8006a2a <_dtoa_r+0x80a>
 8006d72:	9b08      	ldr	r3, [sp, #32]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f77f aed6 	ble.w	8006b26 <_dtoa_r+0x906>
 8006d7a:	4656      	mov	r6, sl
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	4648      	mov	r0, r9
 8006d80:	f7ff f9c3 	bl	800610a <quorem>
 8006d84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d88:	9b08      	ldr	r3, [sp, #32]
 8006d8a:	f806 8b01 	strb.w	r8, [r6], #1
 8006d8e:	eba6 020a 	sub.w	r2, r6, sl
 8006d92:	4293      	cmp	r3, r2
 8006d94:	ddb3      	ble.n	8006cfe <_dtoa_r+0xade>
 8006d96:	4649      	mov	r1, r9
 8006d98:	2300      	movs	r3, #0
 8006d9a:	220a      	movs	r2, #10
 8006d9c:	4658      	mov	r0, fp
 8006d9e:	f000 f967 	bl	8007070 <__multadd>
 8006da2:	4681      	mov	r9, r0
 8006da4:	e7ea      	b.n	8006d7c <_dtoa_r+0xb5c>
 8006da6:	bf00      	nop
 8006da8:	080082d2 	.word	0x080082d2
 8006dac:	08008256 	.word	0x08008256

08006db0 <_free_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4605      	mov	r5, r0
 8006db4:	2900      	cmp	r1, #0
 8006db6:	d040      	beq.n	8006e3a <_free_r+0x8a>
 8006db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dbc:	1f0c      	subs	r4, r1, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bfb8      	it	lt
 8006dc2:	18e4      	addlt	r4, r4, r3
 8006dc4:	f000 f8e6 	bl	8006f94 <__malloc_lock>
 8006dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8006e3c <_free_r+0x8c>)
 8006dca:	6813      	ldr	r3, [r2, #0]
 8006dcc:	b933      	cbnz	r3, 8006ddc <_free_r+0x2c>
 8006dce:	6063      	str	r3, [r4, #4]
 8006dd0:	6014      	str	r4, [r2, #0]
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dd8:	f000 b8e2 	b.w	8006fa0 <__malloc_unlock>
 8006ddc:	42a3      	cmp	r3, r4
 8006dde:	d908      	bls.n	8006df2 <_free_r+0x42>
 8006de0:	6820      	ldr	r0, [r4, #0]
 8006de2:	1821      	adds	r1, r4, r0
 8006de4:	428b      	cmp	r3, r1
 8006de6:	bf01      	itttt	eq
 8006de8:	6819      	ldreq	r1, [r3, #0]
 8006dea:	685b      	ldreq	r3, [r3, #4]
 8006dec:	1809      	addeq	r1, r1, r0
 8006dee:	6021      	streq	r1, [r4, #0]
 8006df0:	e7ed      	b.n	8006dce <_free_r+0x1e>
 8006df2:	461a      	mov	r2, r3
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	b10b      	cbz	r3, 8006dfc <_free_r+0x4c>
 8006df8:	42a3      	cmp	r3, r4
 8006dfa:	d9fa      	bls.n	8006df2 <_free_r+0x42>
 8006dfc:	6811      	ldr	r1, [r2, #0]
 8006dfe:	1850      	adds	r0, r2, r1
 8006e00:	42a0      	cmp	r0, r4
 8006e02:	d10b      	bne.n	8006e1c <_free_r+0x6c>
 8006e04:	6820      	ldr	r0, [r4, #0]
 8006e06:	4401      	add	r1, r0
 8006e08:	1850      	adds	r0, r2, r1
 8006e0a:	4283      	cmp	r3, r0
 8006e0c:	6011      	str	r1, [r2, #0]
 8006e0e:	d1e0      	bne.n	8006dd2 <_free_r+0x22>
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	4408      	add	r0, r1
 8006e16:	6010      	str	r0, [r2, #0]
 8006e18:	6053      	str	r3, [r2, #4]
 8006e1a:	e7da      	b.n	8006dd2 <_free_r+0x22>
 8006e1c:	d902      	bls.n	8006e24 <_free_r+0x74>
 8006e1e:	230c      	movs	r3, #12
 8006e20:	602b      	str	r3, [r5, #0]
 8006e22:	e7d6      	b.n	8006dd2 <_free_r+0x22>
 8006e24:	6820      	ldr	r0, [r4, #0]
 8006e26:	1821      	adds	r1, r4, r0
 8006e28:	428b      	cmp	r3, r1
 8006e2a:	bf01      	itttt	eq
 8006e2c:	6819      	ldreq	r1, [r3, #0]
 8006e2e:	685b      	ldreq	r3, [r3, #4]
 8006e30:	1809      	addeq	r1, r1, r0
 8006e32:	6021      	streq	r1, [r4, #0]
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	6054      	str	r4, [r2, #4]
 8006e38:	e7cb      	b.n	8006dd2 <_free_r+0x22>
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	200004b4 	.word	0x200004b4

08006e40 <malloc>:
 8006e40:	4b02      	ldr	r3, [pc, #8]	@ (8006e4c <malloc+0xc>)
 8006e42:	4601      	mov	r1, r0
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	f000 b825 	b.w	8006e94 <_malloc_r>
 8006e4a:	bf00      	nop
 8006e4c:	20000018 	.word	0x20000018

08006e50 <sbrk_aligned>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	4e0f      	ldr	r6, [pc, #60]	@ (8006e90 <sbrk_aligned+0x40>)
 8006e54:	460c      	mov	r4, r1
 8006e56:	6831      	ldr	r1, [r6, #0]
 8006e58:	4605      	mov	r5, r0
 8006e5a:	b911      	cbnz	r1, 8006e62 <sbrk_aligned+0x12>
 8006e5c:	f000 fe40 	bl	8007ae0 <_sbrk_r>
 8006e60:	6030      	str	r0, [r6, #0]
 8006e62:	4621      	mov	r1, r4
 8006e64:	4628      	mov	r0, r5
 8006e66:	f000 fe3b 	bl	8007ae0 <_sbrk_r>
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	d103      	bne.n	8006e76 <sbrk_aligned+0x26>
 8006e6e:	f04f 34ff 	mov.w	r4, #4294967295
 8006e72:	4620      	mov	r0, r4
 8006e74:	bd70      	pop	{r4, r5, r6, pc}
 8006e76:	1cc4      	adds	r4, r0, #3
 8006e78:	f024 0403 	bic.w	r4, r4, #3
 8006e7c:	42a0      	cmp	r0, r4
 8006e7e:	d0f8      	beq.n	8006e72 <sbrk_aligned+0x22>
 8006e80:	1a21      	subs	r1, r4, r0
 8006e82:	4628      	mov	r0, r5
 8006e84:	f000 fe2c 	bl	8007ae0 <_sbrk_r>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d1f2      	bne.n	8006e72 <sbrk_aligned+0x22>
 8006e8c:	e7ef      	b.n	8006e6e <sbrk_aligned+0x1e>
 8006e8e:	bf00      	nop
 8006e90:	200004b0 	.word	0x200004b0

08006e94 <_malloc_r>:
 8006e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e98:	1ccd      	adds	r5, r1, #3
 8006e9a:	f025 0503 	bic.w	r5, r5, #3
 8006e9e:	3508      	adds	r5, #8
 8006ea0:	2d0c      	cmp	r5, #12
 8006ea2:	bf38      	it	cc
 8006ea4:	250c      	movcc	r5, #12
 8006ea6:	2d00      	cmp	r5, #0
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	db01      	blt.n	8006eb0 <_malloc_r+0x1c>
 8006eac:	42a9      	cmp	r1, r5
 8006eae:	d904      	bls.n	8006eba <_malloc_r+0x26>
 8006eb0:	230c      	movs	r3, #12
 8006eb2:	6033      	str	r3, [r6, #0]
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f90 <_malloc_r+0xfc>
 8006ebe:	f000 f869 	bl	8006f94 <__malloc_lock>
 8006ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec6:	461c      	mov	r4, r3
 8006ec8:	bb44      	cbnz	r4, 8006f1c <_malloc_r+0x88>
 8006eca:	4629      	mov	r1, r5
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f7ff ffbf 	bl	8006e50 <sbrk_aligned>
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	d158      	bne.n	8006f8a <_malloc_r+0xf6>
 8006ed8:	f8d8 4000 	ldr.w	r4, [r8]
 8006edc:	4627      	mov	r7, r4
 8006ede:	2f00      	cmp	r7, #0
 8006ee0:	d143      	bne.n	8006f6a <_malloc_r+0xd6>
 8006ee2:	2c00      	cmp	r4, #0
 8006ee4:	d04b      	beq.n	8006f7e <_malloc_r+0xea>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	4639      	mov	r1, r7
 8006eea:	4630      	mov	r0, r6
 8006eec:	eb04 0903 	add.w	r9, r4, r3
 8006ef0:	f000 fdf6 	bl	8007ae0 <_sbrk_r>
 8006ef4:	4581      	cmp	r9, r0
 8006ef6:	d142      	bne.n	8006f7e <_malloc_r+0xea>
 8006ef8:	6821      	ldr	r1, [r4, #0]
 8006efa:	4630      	mov	r0, r6
 8006efc:	1a6d      	subs	r5, r5, r1
 8006efe:	4629      	mov	r1, r5
 8006f00:	f7ff ffa6 	bl	8006e50 <sbrk_aligned>
 8006f04:	3001      	adds	r0, #1
 8006f06:	d03a      	beq.n	8006f7e <_malloc_r+0xea>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	442b      	add	r3, r5
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	bb62      	cbnz	r2, 8006f70 <_malloc_r+0xdc>
 8006f16:	f8c8 7000 	str.w	r7, [r8]
 8006f1a:	e00f      	b.n	8006f3c <_malloc_r+0xa8>
 8006f1c:	6822      	ldr	r2, [r4, #0]
 8006f1e:	1b52      	subs	r2, r2, r5
 8006f20:	d420      	bmi.n	8006f64 <_malloc_r+0xd0>
 8006f22:	2a0b      	cmp	r2, #11
 8006f24:	d917      	bls.n	8006f56 <_malloc_r+0xc2>
 8006f26:	1961      	adds	r1, r4, r5
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	6025      	str	r5, [r4, #0]
 8006f2c:	bf18      	it	ne
 8006f2e:	6059      	strne	r1, [r3, #4]
 8006f30:	6863      	ldr	r3, [r4, #4]
 8006f32:	bf08      	it	eq
 8006f34:	f8c8 1000 	streq.w	r1, [r8]
 8006f38:	5162      	str	r2, [r4, r5]
 8006f3a:	604b      	str	r3, [r1, #4]
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f000 f82f 	bl	8006fa0 <__malloc_unlock>
 8006f42:	f104 000b 	add.w	r0, r4, #11
 8006f46:	1d23      	adds	r3, r4, #4
 8006f48:	f020 0007 	bic.w	r0, r0, #7
 8006f4c:	1ac2      	subs	r2, r0, r3
 8006f4e:	bf1c      	itt	ne
 8006f50:	1a1b      	subne	r3, r3, r0
 8006f52:	50a3      	strne	r3, [r4, r2]
 8006f54:	e7af      	b.n	8006eb6 <_malloc_r+0x22>
 8006f56:	6862      	ldr	r2, [r4, #4]
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	bf0c      	ite	eq
 8006f5c:	f8c8 2000 	streq.w	r2, [r8]
 8006f60:	605a      	strne	r2, [r3, #4]
 8006f62:	e7eb      	b.n	8006f3c <_malloc_r+0xa8>
 8006f64:	4623      	mov	r3, r4
 8006f66:	6864      	ldr	r4, [r4, #4]
 8006f68:	e7ae      	b.n	8006ec8 <_malloc_r+0x34>
 8006f6a:	463c      	mov	r4, r7
 8006f6c:	687f      	ldr	r7, [r7, #4]
 8006f6e:	e7b6      	b.n	8006ede <_malloc_r+0x4a>
 8006f70:	461a      	mov	r2, r3
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	d1fb      	bne.n	8006f70 <_malloc_r+0xdc>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6053      	str	r3, [r2, #4]
 8006f7c:	e7de      	b.n	8006f3c <_malloc_r+0xa8>
 8006f7e:	230c      	movs	r3, #12
 8006f80:	4630      	mov	r0, r6
 8006f82:	6033      	str	r3, [r6, #0]
 8006f84:	f000 f80c 	bl	8006fa0 <__malloc_unlock>
 8006f88:	e794      	b.n	8006eb4 <_malloc_r+0x20>
 8006f8a:	6005      	str	r5, [r0, #0]
 8006f8c:	e7d6      	b.n	8006f3c <_malloc_r+0xa8>
 8006f8e:	bf00      	nop
 8006f90:	200004b4 	.word	0x200004b4

08006f94 <__malloc_lock>:
 8006f94:	4801      	ldr	r0, [pc, #4]	@ (8006f9c <__malloc_lock+0x8>)
 8006f96:	f7ff b8a8 	b.w	80060ea <__retarget_lock_acquire_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	200004ac 	.word	0x200004ac

08006fa0 <__malloc_unlock>:
 8006fa0:	4801      	ldr	r0, [pc, #4]	@ (8006fa8 <__malloc_unlock+0x8>)
 8006fa2:	f7ff b8a3 	b.w	80060ec <__retarget_lock_release_recursive>
 8006fa6:	bf00      	nop
 8006fa8:	200004ac 	.word	0x200004ac

08006fac <_Balloc>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	69c6      	ldr	r6, [r0, #28]
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	460d      	mov	r5, r1
 8006fb4:	b976      	cbnz	r6, 8006fd4 <_Balloc+0x28>
 8006fb6:	2010      	movs	r0, #16
 8006fb8:	f7ff ff42 	bl	8006e40 <malloc>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	61e0      	str	r0, [r4, #28]
 8006fc0:	b920      	cbnz	r0, 8006fcc <_Balloc+0x20>
 8006fc2:	216b      	movs	r1, #107	@ 0x6b
 8006fc4:	4b17      	ldr	r3, [pc, #92]	@ (8007024 <_Balloc+0x78>)
 8006fc6:	4818      	ldr	r0, [pc, #96]	@ (8007028 <_Balloc+0x7c>)
 8006fc8:	f000 fda8 	bl	8007b1c <__assert_func>
 8006fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fd0:	6006      	str	r6, [r0, #0]
 8006fd2:	60c6      	str	r6, [r0, #12]
 8006fd4:	69e6      	ldr	r6, [r4, #28]
 8006fd6:	68f3      	ldr	r3, [r6, #12]
 8006fd8:	b183      	cbz	r3, 8006ffc <_Balloc+0x50>
 8006fda:	69e3      	ldr	r3, [r4, #28]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fe2:	b9b8      	cbnz	r0, 8007014 <_Balloc+0x68>
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	fa01 f605 	lsl.w	r6, r1, r5
 8006fea:	1d72      	adds	r2, r6, #5
 8006fec:	4620      	mov	r0, r4
 8006fee:	0092      	lsls	r2, r2, #2
 8006ff0:	f000 fdb2 	bl	8007b58 <_calloc_r>
 8006ff4:	b160      	cbz	r0, 8007010 <_Balloc+0x64>
 8006ff6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ffa:	e00e      	b.n	800701a <_Balloc+0x6e>
 8006ffc:	2221      	movs	r2, #33	@ 0x21
 8006ffe:	2104      	movs	r1, #4
 8007000:	4620      	mov	r0, r4
 8007002:	f000 fda9 	bl	8007b58 <_calloc_r>
 8007006:	69e3      	ldr	r3, [r4, #28]
 8007008:	60f0      	str	r0, [r6, #12]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e4      	bne.n	8006fda <_Balloc+0x2e>
 8007010:	2000      	movs	r0, #0
 8007012:	bd70      	pop	{r4, r5, r6, pc}
 8007014:	6802      	ldr	r2, [r0, #0]
 8007016:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800701a:	2300      	movs	r3, #0
 800701c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007020:	e7f7      	b.n	8007012 <_Balloc+0x66>
 8007022:	bf00      	nop
 8007024:	08008263 	.word	0x08008263
 8007028:	080082e3 	.word	0x080082e3

0800702c <_Bfree>:
 800702c:	b570      	push	{r4, r5, r6, lr}
 800702e:	69c6      	ldr	r6, [r0, #28]
 8007030:	4605      	mov	r5, r0
 8007032:	460c      	mov	r4, r1
 8007034:	b976      	cbnz	r6, 8007054 <_Bfree+0x28>
 8007036:	2010      	movs	r0, #16
 8007038:	f7ff ff02 	bl	8006e40 <malloc>
 800703c:	4602      	mov	r2, r0
 800703e:	61e8      	str	r0, [r5, #28]
 8007040:	b920      	cbnz	r0, 800704c <_Bfree+0x20>
 8007042:	218f      	movs	r1, #143	@ 0x8f
 8007044:	4b08      	ldr	r3, [pc, #32]	@ (8007068 <_Bfree+0x3c>)
 8007046:	4809      	ldr	r0, [pc, #36]	@ (800706c <_Bfree+0x40>)
 8007048:	f000 fd68 	bl	8007b1c <__assert_func>
 800704c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007050:	6006      	str	r6, [r0, #0]
 8007052:	60c6      	str	r6, [r0, #12]
 8007054:	b13c      	cbz	r4, 8007066 <_Bfree+0x3a>
 8007056:	69eb      	ldr	r3, [r5, #28]
 8007058:	6862      	ldr	r2, [r4, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007060:	6021      	str	r1, [r4, #0]
 8007062:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007066:	bd70      	pop	{r4, r5, r6, pc}
 8007068:	08008263 	.word	0x08008263
 800706c:	080082e3 	.word	0x080082e3

08007070 <__multadd>:
 8007070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007074:	4607      	mov	r7, r0
 8007076:	460c      	mov	r4, r1
 8007078:	461e      	mov	r6, r3
 800707a:	2000      	movs	r0, #0
 800707c:	690d      	ldr	r5, [r1, #16]
 800707e:	f101 0c14 	add.w	ip, r1, #20
 8007082:	f8dc 3000 	ldr.w	r3, [ip]
 8007086:	3001      	adds	r0, #1
 8007088:	b299      	uxth	r1, r3
 800708a:	fb02 6101 	mla	r1, r2, r1, r6
 800708e:	0c1e      	lsrs	r6, r3, #16
 8007090:	0c0b      	lsrs	r3, r1, #16
 8007092:	fb02 3306 	mla	r3, r2, r6, r3
 8007096:	b289      	uxth	r1, r1
 8007098:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800709c:	4285      	cmp	r5, r0
 800709e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070a2:	f84c 1b04 	str.w	r1, [ip], #4
 80070a6:	dcec      	bgt.n	8007082 <__multadd+0x12>
 80070a8:	b30e      	cbz	r6, 80070ee <__multadd+0x7e>
 80070aa:	68a3      	ldr	r3, [r4, #8]
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dc19      	bgt.n	80070e4 <__multadd+0x74>
 80070b0:	6861      	ldr	r1, [r4, #4]
 80070b2:	4638      	mov	r0, r7
 80070b4:	3101      	adds	r1, #1
 80070b6:	f7ff ff79 	bl	8006fac <_Balloc>
 80070ba:	4680      	mov	r8, r0
 80070bc:	b928      	cbnz	r0, 80070ca <__multadd+0x5a>
 80070be:	4602      	mov	r2, r0
 80070c0:	21ba      	movs	r1, #186	@ 0xba
 80070c2:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <__multadd+0x84>)
 80070c4:	480c      	ldr	r0, [pc, #48]	@ (80070f8 <__multadd+0x88>)
 80070c6:	f000 fd29 	bl	8007b1c <__assert_func>
 80070ca:	6922      	ldr	r2, [r4, #16]
 80070cc:	f104 010c 	add.w	r1, r4, #12
 80070d0:	3202      	adds	r2, #2
 80070d2:	0092      	lsls	r2, r2, #2
 80070d4:	300c      	adds	r0, #12
 80070d6:	f000 fd13 	bl	8007b00 <memcpy>
 80070da:	4621      	mov	r1, r4
 80070dc:	4638      	mov	r0, r7
 80070de:	f7ff ffa5 	bl	800702c <_Bfree>
 80070e2:	4644      	mov	r4, r8
 80070e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070e8:	3501      	adds	r5, #1
 80070ea:	615e      	str	r6, [r3, #20]
 80070ec:	6125      	str	r5, [r4, #16]
 80070ee:	4620      	mov	r0, r4
 80070f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f4:	080082d2 	.word	0x080082d2
 80070f8:	080082e3 	.word	0x080082e3

080070fc <__hi0bits>:
 80070fc:	4603      	mov	r3, r0
 80070fe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007102:	bf3a      	itte	cc
 8007104:	0403      	lslcc	r3, r0, #16
 8007106:	2010      	movcc	r0, #16
 8007108:	2000      	movcs	r0, #0
 800710a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800710e:	bf3c      	itt	cc
 8007110:	021b      	lslcc	r3, r3, #8
 8007112:	3008      	addcc	r0, #8
 8007114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007118:	bf3c      	itt	cc
 800711a:	011b      	lslcc	r3, r3, #4
 800711c:	3004      	addcc	r0, #4
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007122:	bf3c      	itt	cc
 8007124:	009b      	lslcc	r3, r3, #2
 8007126:	3002      	addcc	r0, #2
 8007128:	2b00      	cmp	r3, #0
 800712a:	db05      	blt.n	8007138 <__hi0bits+0x3c>
 800712c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007130:	f100 0001 	add.w	r0, r0, #1
 8007134:	bf08      	it	eq
 8007136:	2020      	moveq	r0, #32
 8007138:	4770      	bx	lr

0800713a <__lo0bits>:
 800713a:	6803      	ldr	r3, [r0, #0]
 800713c:	4602      	mov	r2, r0
 800713e:	f013 0007 	ands.w	r0, r3, #7
 8007142:	d00b      	beq.n	800715c <__lo0bits+0x22>
 8007144:	07d9      	lsls	r1, r3, #31
 8007146:	d421      	bmi.n	800718c <__lo0bits+0x52>
 8007148:	0798      	lsls	r0, r3, #30
 800714a:	bf49      	itett	mi
 800714c:	085b      	lsrmi	r3, r3, #1
 800714e:	089b      	lsrpl	r3, r3, #2
 8007150:	2001      	movmi	r0, #1
 8007152:	6013      	strmi	r3, [r2, #0]
 8007154:	bf5c      	itt	pl
 8007156:	2002      	movpl	r0, #2
 8007158:	6013      	strpl	r3, [r2, #0]
 800715a:	4770      	bx	lr
 800715c:	b299      	uxth	r1, r3
 800715e:	b909      	cbnz	r1, 8007164 <__lo0bits+0x2a>
 8007160:	2010      	movs	r0, #16
 8007162:	0c1b      	lsrs	r3, r3, #16
 8007164:	b2d9      	uxtb	r1, r3
 8007166:	b909      	cbnz	r1, 800716c <__lo0bits+0x32>
 8007168:	3008      	adds	r0, #8
 800716a:	0a1b      	lsrs	r3, r3, #8
 800716c:	0719      	lsls	r1, r3, #28
 800716e:	bf04      	itt	eq
 8007170:	091b      	lsreq	r3, r3, #4
 8007172:	3004      	addeq	r0, #4
 8007174:	0799      	lsls	r1, r3, #30
 8007176:	bf04      	itt	eq
 8007178:	089b      	lsreq	r3, r3, #2
 800717a:	3002      	addeq	r0, #2
 800717c:	07d9      	lsls	r1, r3, #31
 800717e:	d403      	bmi.n	8007188 <__lo0bits+0x4e>
 8007180:	085b      	lsrs	r3, r3, #1
 8007182:	f100 0001 	add.w	r0, r0, #1
 8007186:	d003      	beq.n	8007190 <__lo0bits+0x56>
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	4770      	bx	lr
 800718c:	2000      	movs	r0, #0
 800718e:	4770      	bx	lr
 8007190:	2020      	movs	r0, #32
 8007192:	4770      	bx	lr

08007194 <__i2b>:
 8007194:	b510      	push	{r4, lr}
 8007196:	460c      	mov	r4, r1
 8007198:	2101      	movs	r1, #1
 800719a:	f7ff ff07 	bl	8006fac <_Balloc>
 800719e:	4602      	mov	r2, r0
 80071a0:	b928      	cbnz	r0, 80071ae <__i2b+0x1a>
 80071a2:	f240 1145 	movw	r1, #325	@ 0x145
 80071a6:	4b04      	ldr	r3, [pc, #16]	@ (80071b8 <__i2b+0x24>)
 80071a8:	4804      	ldr	r0, [pc, #16]	@ (80071bc <__i2b+0x28>)
 80071aa:	f000 fcb7 	bl	8007b1c <__assert_func>
 80071ae:	2301      	movs	r3, #1
 80071b0:	6144      	str	r4, [r0, #20]
 80071b2:	6103      	str	r3, [r0, #16]
 80071b4:	bd10      	pop	{r4, pc}
 80071b6:	bf00      	nop
 80071b8:	080082d2 	.word	0x080082d2
 80071bc:	080082e3 	.word	0x080082e3

080071c0 <__multiply>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	4614      	mov	r4, r2
 80071c6:	690a      	ldr	r2, [r1, #16]
 80071c8:	6923      	ldr	r3, [r4, #16]
 80071ca:	460f      	mov	r7, r1
 80071cc:	429a      	cmp	r2, r3
 80071ce:	bfa2      	ittt	ge
 80071d0:	4623      	movge	r3, r4
 80071d2:	460c      	movge	r4, r1
 80071d4:	461f      	movge	r7, r3
 80071d6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80071da:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80071de:	68a3      	ldr	r3, [r4, #8]
 80071e0:	6861      	ldr	r1, [r4, #4]
 80071e2:	eb0a 0609 	add.w	r6, sl, r9
 80071e6:	42b3      	cmp	r3, r6
 80071e8:	b085      	sub	sp, #20
 80071ea:	bfb8      	it	lt
 80071ec:	3101      	addlt	r1, #1
 80071ee:	f7ff fedd 	bl	8006fac <_Balloc>
 80071f2:	b930      	cbnz	r0, 8007202 <__multiply+0x42>
 80071f4:	4602      	mov	r2, r0
 80071f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071fa:	4b43      	ldr	r3, [pc, #268]	@ (8007308 <__multiply+0x148>)
 80071fc:	4843      	ldr	r0, [pc, #268]	@ (800730c <__multiply+0x14c>)
 80071fe:	f000 fc8d 	bl	8007b1c <__assert_func>
 8007202:	f100 0514 	add.w	r5, r0, #20
 8007206:	462b      	mov	r3, r5
 8007208:	2200      	movs	r2, #0
 800720a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800720e:	4543      	cmp	r3, r8
 8007210:	d321      	bcc.n	8007256 <__multiply+0x96>
 8007212:	f107 0114 	add.w	r1, r7, #20
 8007216:	f104 0214 	add.w	r2, r4, #20
 800721a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800721e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007222:	9302      	str	r3, [sp, #8]
 8007224:	1b13      	subs	r3, r2, r4
 8007226:	3b15      	subs	r3, #21
 8007228:	f023 0303 	bic.w	r3, r3, #3
 800722c:	3304      	adds	r3, #4
 800722e:	f104 0715 	add.w	r7, r4, #21
 8007232:	42ba      	cmp	r2, r7
 8007234:	bf38      	it	cc
 8007236:	2304      	movcc	r3, #4
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	9b02      	ldr	r3, [sp, #8]
 800723c:	9103      	str	r1, [sp, #12]
 800723e:	428b      	cmp	r3, r1
 8007240:	d80c      	bhi.n	800725c <__multiply+0x9c>
 8007242:	2e00      	cmp	r6, #0
 8007244:	dd03      	ble.n	800724e <__multiply+0x8e>
 8007246:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800724a:	2b00      	cmp	r3, #0
 800724c:	d05a      	beq.n	8007304 <__multiply+0x144>
 800724e:	6106      	str	r6, [r0, #16]
 8007250:	b005      	add	sp, #20
 8007252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007256:	f843 2b04 	str.w	r2, [r3], #4
 800725a:	e7d8      	b.n	800720e <__multiply+0x4e>
 800725c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007260:	f1ba 0f00 	cmp.w	sl, #0
 8007264:	d023      	beq.n	80072ae <__multiply+0xee>
 8007266:	46a9      	mov	r9, r5
 8007268:	f04f 0c00 	mov.w	ip, #0
 800726c:	f104 0e14 	add.w	lr, r4, #20
 8007270:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007274:	f8d9 3000 	ldr.w	r3, [r9]
 8007278:	fa1f fb87 	uxth.w	fp, r7
 800727c:	b29b      	uxth	r3, r3
 800727e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007282:	4463      	add	r3, ip
 8007284:	f8d9 c000 	ldr.w	ip, [r9]
 8007288:	0c3f      	lsrs	r7, r7, #16
 800728a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800728e:	fb0a c707 	mla	r7, sl, r7, ip
 8007292:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007296:	b29b      	uxth	r3, r3
 8007298:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800729c:	4572      	cmp	r2, lr
 800729e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80072a2:	f849 3b04 	str.w	r3, [r9], #4
 80072a6:	d8e3      	bhi.n	8007270 <__multiply+0xb0>
 80072a8:	9b01      	ldr	r3, [sp, #4]
 80072aa:	f845 c003 	str.w	ip, [r5, r3]
 80072ae:	9b03      	ldr	r3, [sp, #12]
 80072b0:	3104      	adds	r1, #4
 80072b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80072b6:	f1b9 0f00 	cmp.w	r9, #0
 80072ba:	d021      	beq.n	8007300 <__multiply+0x140>
 80072bc:	46ae      	mov	lr, r5
 80072be:	f04f 0a00 	mov.w	sl, #0
 80072c2:	682b      	ldr	r3, [r5, #0]
 80072c4:	f104 0c14 	add.w	ip, r4, #20
 80072c8:	f8bc b000 	ldrh.w	fp, [ip]
 80072cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	fb09 770b 	mla	r7, r9, fp, r7
 80072d6:	4457      	add	r7, sl
 80072d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80072dc:	f84e 3b04 	str.w	r3, [lr], #4
 80072e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072e8:	f8be 3000 	ldrh.w	r3, [lr]
 80072ec:	4562      	cmp	r2, ip
 80072ee:	fb09 330a 	mla	r3, r9, sl, r3
 80072f2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80072f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072fa:	d8e5      	bhi.n	80072c8 <__multiply+0x108>
 80072fc:	9f01      	ldr	r7, [sp, #4]
 80072fe:	51eb      	str	r3, [r5, r7]
 8007300:	3504      	adds	r5, #4
 8007302:	e79a      	b.n	800723a <__multiply+0x7a>
 8007304:	3e01      	subs	r6, #1
 8007306:	e79c      	b.n	8007242 <__multiply+0x82>
 8007308:	080082d2 	.word	0x080082d2
 800730c:	080082e3 	.word	0x080082e3

08007310 <__pow5mult>:
 8007310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007314:	4615      	mov	r5, r2
 8007316:	f012 0203 	ands.w	r2, r2, #3
 800731a:	4607      	mov	r7, r0
 800731c:	460e      	mov	r6, r1
 800731e:	d007      	beq.n	8007330 <__pow5mult+0x20>
 8007320:	4c25      	ldr	r4, [pc, #148]	@ (80073b8 <__pow5mult+0xa8>)
 8007322:	3a01      	subs	r2, #1
 8007324:	2300      	movs	r3, #0
 8007326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800732a:	f7ff fea1 	bl	8007070 <__multadd>
 800732e:	4606      	mov	r6, r0
 8007330:	10ad      	asrs	r5, r5, #2
 8007332:	d03d      	beq.n	80073b0 <__pow5mult+0xa0>
 8007334:	69fc      	ldr	r4, [r7, #28]
 8007336:	b97c      	cbnz	r4, 8007358 <__pow5mult+0x48>
 8007338:	2010      	movs	r0, #16
 800733a:	f7ff fd81 	bl	8006e40 <malloc>
 800733e:	4602      	mov	r2, r0
 8007340:	61f8      	str	r0, [r7, #28]
 8007342:	b928      	cbnz	r0, 8007350 <__pow5mult+0x40>
 8007344:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007348:	4b1c      	ldr	r3, [pc, #112]	@ (80073bc <__pow5mult+0xac>)
 800734a:	481d      	ldr	r0, [pc, #116]	@ (80073c0 <__pow5mult+0xb0>)
 800734c:	f000 fbe6 	bl	8007b1c <__assert_func>
 8007350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007354:	6004      	str	r4, [r0, #0]
 8007356:	60c4      	str	r4, [r0, #12]
 8007358:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800735c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007360:	b94c      	cbnz	r4, 8007376 <__pow5mult+0x66>
 8007362:	f240 2171 	movw	r1, #625	@ 0x271
 8007366:	4638      	mov	r0, r7
 8007368:	f7ff ff14 	bl	8007194 <__i2b>
 800736c:	2300      	movs	r3, #0
 800736e:	4604      	mov	r4, r0
 8007370:	f8c8 0008 	str.w	r0, [r8, #8]
 8007374:	6003      	str	r3, [r0, #0]
 8007376:	f04f 0900 	mov.w	r9, #0
 800737a:	07eb      	lsls	r3, r5, #31
 800737c:	d50a      	bpl.n	8007394 <__pow5mult+0x84>
 800737e:	4631      	mov	r1, r6
 8007380:	4622      	mov	r2, r4
 8007382:	4638      	mov	r0, r7
 8007384:	f7ff ff1c 	bl	80071c0 <__multiply>
 8007388:	4680      	mov	r8, r0
 800738a:	4631      	mov	r1, r6
 800738c:	4638      	mov	r0, r7
 800738e:	f7ff fe4d 	bl	800702c <_Bfree>
 8007392:	4646      	mov	r6, r8
 8007394:	106d      	asrs	r5, r5, #1
 8007396:	d00b      	beq.n	80073b0 <__pow5mult+0xa0>
 8007398:	6820      	ldr	r0, [r4, #0]
 800739a:	b938      	cbnz	r0, 80073ac <__pow5mult+0x9c>
 800739c:	4622      	mov	r2, r4
 800739e:	4621      	mov	r1, r4
 80073a0:	4638      	mov	r0, r7
 80073a2:	f7ff ff0d 	bl	80071c0 <__multiply>
 80073a6:	6020      	str	r0, [r4, #0]
 80073a8:	f8c0 9000 	str.w	r9, [r0]
 80073ac:	4604      	mov	r4, r0
 80073ae:	e7e4      	b.n	800737a <__pow5mult+0x6a>
 80073b0:	4630      	mov	r0, r6
 80073b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b6:	bf00      	nop
 80073b8:	0800833c 	.word	0x0800833c
 80073bc:	08008263 	.word	0x08008263
 80073c0:	080082e3 	.word	0x080082e3

080073c4 <__lshift>:
 80073c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	460c      	mov	r4, r1
 80073ca:	4607      	mov	r7, r0
 80073cc:	4691      	mov	r9, r2
 80073ce:	6923      	ldr	r3, [r4, #16]
 80073d0:	6849      	ldr	r1, [r1, #4]
 80073d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073d6:	68a3      	ldr	r3, [r4, #8]
 80073d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073dc:	f108 0601 	add.w	r6, r8, #1
 80073e0:	42b3      	cmp	r3, r6
 80073e2:	db0b      	blt.n	80073fc <__lshift+0x38>
 80073e4:	4638      	mov	r0, r7
 80073e6:	f7ff fde1 	bl	8006fac <_Balloc>
 80073ea:	4605      	mov	r5, r0
 80073ec:	b948      	cbnz	r0, 8007402 <__lshift+0x3e>
 80073ee:	4602      	mov	r2, r0
 80073f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073f4:	4b27      	ldr	r3, [pc, #156]	@ (8007494 <__lshift+0xd0>)
 80073f6:	4828      	ldr	r0, [pc, #160]	@ (8007498 <__lshift+0xd4>)
 80073f8:	f000 fb90 	bl	8007b1c <__assert_func>
 80073fc:	3101      	adds	r1, #1
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	e7ee      	b.n	80073e0 <__lshift+0x1c>
 8007402:	2300      	movs	r3, #0
 8007404:	f100 0114 	add.w	r1, r0, #20
 8007408:	f100 0210 	add.w	r2, r0, #16
 800740c:	4618      	mov	r0, r3
 800740e:	4553      	cmp	r3, sl
 8007410:	db33      	blt.n	800747a <__lshift+0xb6>
 8007412:	6920      	ldr	r0, [r4, #16]
 8007414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007418:	f104 0314 	add.w	r3, r4, #20
 800741c:	f019 091f 	ands.w	r9, r9, #31
 8007420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007428:	d02b      	beq.n	8007482 <__lshift+0xbe>
 800742a:	468a      	mov	sl, r1
 800742c:	2200      	movs	r2, #0
 800742e:	f1c9 0e20 	rsb	lr, r9, #32
 8007432:	6818      	ldr	r0, [r3, #0]
 8007434:	fa00 f009 	lsl.w	r0, r0, r9
 8007438:	4310      	orrs	r0, r2
 800743a:	f84a 0b04 	str.w	r0, [sl], #4
 800743e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007442:	459c      	cmp	ip, r3
 8007444:	fa22 f20e 	lsr.w	r2, r2, lr
 8007448:	d8f3      	bhi.n	8007432 <__lshift+0x6e>
 800744a:	ebac 0304 	sub.w	r3, ip, r4
 800744e:	3b15      	subs	r3, #21
 8007450:	f023 0303 	bic.w	r3, r3, #3
 8007454:	3304      	adds	r3, #4
 8007456:	f104 0015 	add.w	r0, r4, #21
 800745a:	4584      	cmp	ip, r0
 800745c:	bf38      	it	cc
 800745e:	2304      	movcc	r3, #4
 8007460:	50ca      	str	r2, [r1, r3]
 8007462:	b10a      	cbz	r2, 8007468 <__lshift+0xa4>
 8007464:	f108 0602 	add.w	r6, r8, #2
 8007468:	3e01      	subs	r6, #1
 800746a:	4638      	mov	r0, r7
 800746c:	4621      	mov	r1, r4
 800746e:	612e      	str	r6, [r5, #16]
 8007470:	f7ff fddc 	bl	800702c <_Bfree>
 8007474:	4628      	mov	r0, r5
 8007476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747a:	f842 0f04 	str.w	r0, [r2, #4]!
 800747e:	3301      	adds	r3, #1
 8007480:	e7c5      	b.n	800740e <__lshift+0x4a>
 8007482:	3904      	subs	r1, #4
 8007484:	f853 2b04 	ldr.w	r2, [r3], #4
 8007488:	459c      	cmp	ip, r3
 800748a:	f841 2f04 	str.w	r2, [r1, #4]!
 800748e:	d8f9      	bhi.n	8007484 <__lshift+0xc0>
 8007490:	e7ea      	b.n	8007468 <__lshift+0xa4>
 8007492:	bf00      	nop
 8007494:	080082d2 	.word	0x080082d2
 8007498:	080082e3 	.word	0x080082e3

0800749c <__mcmp>:
 800749c:	4603      	mov	r3, r0
 800749e:	690a      	ldr	r2, [r1, #16]
 80074a0:	6900      	ldr	r0, [r0, #16]
 80074a2:	b530      	push	{r4, r5, lr}
 80074a4:	1a80      	subs	r0, r0, r2
 80074a6:	d10e      	bne.n	80074c6 <__mcmp+0x2a>
 80074a8:	3314      	adds	r3, #20
 80074aa:	3114      	adds	r1, #20
 80074ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80074b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80074b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074bc:	4295      	cmp	r5, r2
 80074be:	d003      	beq.n	80074c8 <__mcmp+0x2c>
 80074c0:	d205      	bcs.n	80074ce <__mcmp+0x32>
 80074c2:	f04f 30ff 	mov.w	r0, #4294967295
 80074c6:	bd30      	pop	{r4, r5, pc}
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	d3f3      	bcc.n	80074b4 <__mcmp+0x18>
 80074cc:	e7fb      	b.n	80074c6 <__mcmp+0x2a>
 80074ce:	2001      	movs	r0, #1
 80074d0:	e7f9      	b.n	80074c6 <__mcmp+0x2a>
	...

080074d4 <__mdiff>:
 80074d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	4689      	mov	r9, r1
 80074da:	4606      	mov	r6, r0
 80074dc:	4611      	mov	r1, r2
 80074de:	4648      	mov	r0, r9
 80074e0:	4614      	mov	r4, r2
 80074e2:	f7ff ffdb 	bl	800749c <__mcmp>
 80074e6:	1e05      	subs	r5, r0, #0
 80074e8:	d112      	bne.n	8007510 <__mdiff+0x3c>
 80074ea:	4629      	mov	r1, r5
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff fd5d 	bl	8006fac <_Balloc>
 80074f2:	4602      	mov	r2, r0
 80074f4:	b928      	cbnz	r0, 8007502 <__mdiff+0x2e>
 80074f6:	f240 2137 	movw	r1, #567	@ 0x237
 80074fa:	4b3e      	ldr	r3, [pc, #248]	@ (80075f4 <__mdiff+0x120>)
 80074fc:	483e      	ldr	r0, [pc, #248]	@ (80075f8 <__mdiff+0x124>)
 80074fe:	f000 fb0d 	bl	8007b1c <__assert_func>
 8007502:	2301      	movs	r3, #1
 8007504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007508:	4610      	mov	r0, r2
 800750a:	b003      	add	sp, #12
 800750c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007510:	bfbc      	itt	lt
 8007512:	464b      	movlt	r3, r9
 8007514:	46a1      	movlt	r9, r4
 8007516:	4630      	mov	r0, r6
 8007518:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800751c:	bfba      	itte	lt
 800751e:	461c      	movlt	r4, r3
 8007520:	2501      	movlt	r5, #1
 8007522:	2500      	movge	r5, #0
 8007524:	f7ff fd42 	bl	8006fac <_Balloc>
 8007528:	4602      	mov	r2, r0
 800752a:	b918      	cbnz	r0, 8007534 <__mdiff+0x60>
 800752c:	f240 2145 	movw	r1, #581	@ 0x245
 8007530:	4b30      	ldr	r3, [pc, #192]	@ (80075f4 <__mdiff+0x120>)
 8007532:	e7e3      	b.n	80074fc <__mdiff+0x28>
 8007534:	f100 0b14 	add.w	fp, r0, #20
 8007538:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800753c:	f109 0310 	add.w	r3, r9, #16
 8007540:	60c5      	str	r5, [r0, #12]
 8007542:	f04f 0c00 	mov.w	ip, #0
 8007546:	f109 0514 	add.w	r5, r9, #20
 800754a:	46d9      	mov	r9, fp
 800754c:	6926      	ldr	r6, [r4, #16]
 800754e:	f104 0e14 	add.w	lr, r4, #20
 8007552:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007556:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	9b01      	ldr	r3, [sp, #4]
 800755e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007562:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007566:	b281      	uxth	r1, r0
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	fa1f f38a 	uxth.w	r3, sl
 800756e:	1a5b      	subs	r3, r3, r1
 8007570:	0c00      	lsrs	r0, r0, #16
 8007572:	4463      	add	r3, ip
 8007574:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007578:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800757c:	b29b      	uxth	r3, r3
 800757e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007582:	4576      	cmp	r6, lr
 8007584:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007588:	f849 3b04 	str.w	r3, [r9], #4
 800758c:	d8e6      	bhi.n	800755c <__mdiff+0x88>
 800758e:	1b33      	subs	r3, r6, r4
 8007590:	3b15      	subs	r3, #21
 8007592:	f023 0303 	bic.w	r3, r3, #3
 8007596:	3415      	adds	r4, #21
 8007598:	3304      	adds	r3, #4
 800759a:	42a6      	cmp	r6, r4
 800759c:	bf38      	it	cc
 800759e:	2304      	movcc	r3, #4
 80075a0:	441d      	add	r5, r3
 80075a2:	445b      	add	r3, fp
 80075a4:	461e      	mov	r6, r3
 80075a6:	462c      	mov	r4, r5
 80075a8:	4544      	cmp	r4, r8
 80075aa:	d30e      	bcc.n	80075ca <__mdiff+0xf6>
 80075ac:	f108 0103 	add.w	r1, r8, #3
 80075b0:	1b49      	subs	r1, r1, r5
 80075b2:	f021 0103 	bic.w	r1, r1, #3
 80075b6:	3d03      	subs	r5, #3
 80075b8:	45a8      	cmp	r8, r5
 80075ba:	bf38      	it	cc
 80075bc:	2100      	movcc	r1, #0
 80075be:	440b      	add	r3, r1
 80075c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075c4:	b199      	cbz	r1, 80075ee <__mdiff+0x11a>
 80075c6:	6117      	str	r7, [r2, #16]
 80075c8:	e79e      	b.n	8007508 <__mdiff+0x34>
 80075ca:	46e6      	mov	lr, ip
 80075cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80075d0:	fa1f fc81 	uxth.w	ip, r1
 80075d4:	44f4      	add	ip, lr
 80075d6:	0c08      	lsrs	r0, r1, #16
 80075d8:	4471      	add	r1, lr
 80075da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80075de:	b289      	uxth	r1, r1
 80075e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80075e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075e8:	f846 1b04 	str.w	r1, [r6], #4
 80075ec:	e7dc      	b.n	80075a8 <__mdiff+0xd4>
 80075ee:	3f01      	subs	r7, #1
 80075f0:	e7e6      	b.n	80075c0 <__mdiff+0xec>
 80075f2:	bf00      	nop
 80075f4:	080082d2 	.word	0x080082d2
 80075f8:	080082e3 	.word	0x080082e3

080075fc <__d2b>:
 80075fc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007600:	2101      	movs	r1, #1
 8007602:	4690      	mov	r8, r2
 8007604:	4699      	mov	r9, r3
 8007606:	9e08      	ldr	r6, [sp, #32]
 8007608:	f7ff fcd0 	bl	8006fac <_Balloc>
 800760c:	4604      	mov	r4, r0
 800760e:	b930      	cbnz	r0, 800761e <__d2b+0x22>
 8007610:	4602      	mov	r2, r0
 8007612:	f240 310f 	movw	r1, #783	@ 0x30f
 8007616:	4b23      	ldr	r3, [pc, #140]	@ (80076a4 <__d2b+0xa8>)
 8007618:	4823      	ldr	r0, [pc, #140]	@ (80076a8 <__d2b+0xac>)
 800761a:	f000 fa7f 	bl	8007b1c <__assert_func>
 800761e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007622:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007626:	b10d      	cbz	r5, 800762c <__d2b+0x30>
 8007628:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	f1b8 0300 	subs.w	r3, r8, #0
 8007632:	d024      	beq.n	800767e <__d2b+0x82>
 8007634:	4668      	mov	r0, sp
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	f7ff fd7f 	bl	800713a <__lo0bits>
 800763c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007640:	b1d8      	cbz	r0, 800767a <__d2b+0x7e>
 8007642:	f1c0 0320 	rsb	r3, r0, #32
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	430b      	orrs	r3, r1
 800764c:	40c2      	lsrs	r2, r0
 800764e:	6163      	str	r3, [r4, #20]
 8007650:	9201      	str	r2, [sp, #4]
 8007652:	9b01      	ldr	r3, [sp, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	bf0c      	ite	eq
 8007658:	2201      	moveq	r2, #1
 800765a:	2202      	movne	r2, #2
 800765c:	61a3      	str	r3, [r4, #24]
 800765e:	6122      	str	r2, [r4, #16]
 8007660:	b1ad      	cbz	r5, 800768e <__d2b+0x92>
 8007662:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007666:	4405      	add	r5, r0
 8007668:	6035      	str	r5, [r6, #0]
 800766a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800766e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007670:	6018      	str	r0, [r3, #0]
 8007672:	4620      	mov	r0, r4
 8007674:	b002      	add	sp, #8
 8007676:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800767a:	6161      	str	r1, [r4, #20]
 800767c:	e7e9      	b.n	8007652 <__d2b+0x56>
 800767e:	a801      	add	r0, sp, #4
 8007680:	f7ff fd5b 	bl	800713a <__lo0bits>
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	6163      	str	r3, [r4, #20]
 800768a:	3020      	adds	r0, #32
 800768c:	e7e7      	b.n	800765e <__d2b+0x62>
 800768e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007692:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007696:	6030      	str	r0, [r6, #0]
 8007698:	6918      	ldr	r0, [r3, #16]
 800769a:	f7ff fd2f 	bl	80070fc <__hi0bits>
 800769e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076a2:	e7e4      	b.n	800766e <__d2b+0x72>
 80076a4:	080082d2 	.word	0x080082d2
 80076a8:	080082e3 	.word	0x080082e3

080076ac <__ssputs_r>:
 80076ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b0:	461f      	mov	r7, r3
 80076b2:	688e      	ldr	r6, [r1, #8]
 80076b4:	4682      	mov	sl, r0
 80076b6:	42be      	cmp	r6, r7
 80076b8:	460c      	mov	r4, r1
 80076ba:	4690      	mov	r8, r2
 80076bc:	680b      	ldr	r3, [r1, #0]
 80076be:	d82d      	bhi.n	800771c <__ssputs_r+0x70>
 80076c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80076c8:	d026      	beq.n	8007718 <__ssputs_r+0x6c>
 80076ca:	6965      	ldr	r5, [r4, #20]
 80076cc:	6909      	ldr	r1, [r1, #16]
 80076ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076d2:	eba3 0901 	sub.w	r9, r3, r1
 80076d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076da:	1c7b      	adds	r3, r7, #1
 80076dc:	444b      	add	r3, r9
 80076de:	106d      	asrs	r5, r5, #1
 80076e0:	429d      	cmp	r5, r3
 80076e2:	bf38      	it	cc
 80076e4:	461d      	movcc	r5, r3
 80076e6:	0553      	lsls	r3, r2, #21
 80076e8:	d527      	bpl.n	800773a <__ssputs_r+0x8e>
 80076ea:	4629      	mov	r1, r5
 80076ec:	f7ff fbd2 	bl	8006e94 <_malloc_r>
 80076f0:	4606      	mov	r6, r0
 80076f2:	b360      	cbz	r0, 800774e <__ssputs_r+0xa2>
 80076f4:	464a      	mov	r2, r9
 80076f6:	6921      	ldr	r1, [r4, #16]
 80076f8:	f000 fa02 	bl	8007b00 <memcpy>
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007706:	81a3      	strh	r3, [r4, #12]
 8007708:	6126      	str	r6, [r4, #16]
 800770a:	444e      	add	r6, r9
 800770c:	6026      	str	r6, [r4, #0]
 800770e:	463e      	mov	r6, r7
 8007710:	6165      	str	r5, [r4, #20]
 8007712:	eba5 0509 	sub.w	r5, r5, r9
 8007716:	60a5      	str	r5, [r4, #8]
 8007718:	42be      	cmp	r6, r7
 800771a:	d900      	bls.n	800771e <__ssputs_r+0x72>
 800771c:	463e      	mov	r6, r7
 800771e:	4632      	mov	r2, r6
 8007720:	4641      	mov	r1, r8
 8007722:	6820      	ldr	r0, [r4, #0]
 8007724:	f000 f9c2 	bl	8007aac <memmove>
 8007728:	2000      	movs	r0, #0
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	1b9b      	subs	r3, r3, r6
 800772e:	60a3      	str	r3, [r4, #8]
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	4433      	add	r3, r6
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773a:	462a      	mov	r2, r5
 800773c:	f000 fa32 	bl	8007ba4 <_realloc_r>
 8007740:	4606      	mov	r6, r0
 8007742:	2800      	cmp	r0, #0
 8007744:	d1e0      	bne.n	8007708 <__ssputs_r+0x5c>
 8007746:	4650      	mov	r0, sl
 8007748:	6921      	ldr	r1, [r4, #16]
 800774a:	f7ff fb31 	bl	8006db0 <_free_r>
 800774e:	230c      	movs	r3, #12
 8007750:	f8ca 3000 	str.w	r3, [sl]
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800775e:	81a3      	strh	r3, [r4, #12]
 8007760:	e7e9      	b.n	8007736 <__ssputs_r+0x8a>
	...

08007764 <_svfiprintf_r>:
 8007764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007768:	4698      	mov	r8, r3
 800776a:	898b      	ldrh	r3, [r1, #12]
 800776c:	4607      	mov	r7, r0
 800776e:	061b      	lsls	r3, r3, #24
 8007770:	460d      	mov	r5, r1
 8007772:	4614      	mov	r4, r2
 8007774:	b09d      	sub	sp, #116	@ 0x74
 8007776:	d510      	bpl.n	800779a <_svfiprintf_r+0x36>
 8007778:	690b      	ldr	r3, [r1, #16]
 800777a:	b973      	cbnz	r3, 800779a <_svfiprintf_r+0x36>
 800777c:	2140      	movs	r1, #64	@ 0x40
 800777e:	f7ff fb89 	bl	8006e94 <_malloc_r>
 8007782:	6028      	str	r0, [r5, #0]
 8007784:	6128      	str	r0, [r5, #16]
 8007786:	b930      	cbnz	r0, 8007796 <_svfiprintf_r+0x32>
 8007788:	230c      	movs	r3, #12
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	b01d      	add	sp, #116	@ 0x74
 8007792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007796:	2340      	movs	r3, #64	@ 0x40
 8007798:	616b      	str	r3, [r5, #20]
 800779a:	2300      	movs	r3, #0
 800779c:	9309      	str	r3, [sp, #36]	@ 0x24
 800779e:	2320      	movs	r3, #32
 80077a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077a4:	2330      	movs	r3, #48	@ 0x30
 80077a6:	f04f 0901 	mov.w	r9, #1
 80077aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80077ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007948 <_svfiprintf_r+0x1e4>
 80077b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077b6:	4623      	mov	r3, r4
 80077b8:	469a      	mov	sl, r3
 80077ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077be:	b10a      	cbz	r2, 80077c4 <_svfiprintf_r+0x60>
 80077c0:	2a25      	cmp	r2, #37	@ 0x25
 80077c2:	d1f9      	bne.n	80077b8 <_svfiprintf_r+0x54>
 80077c4:	ebba 0b04 	subs.w	fp, sl, r4
 80077c8:	d00b      	beq.n	80077e2 <_svfiprintf_r+0x7e>
 80077ca:	465b      	mov	r3, fp
 80077cc:	4622      	mov	r2, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	4638      	mov	r0, r7
 80077d2:	f7ff ff6b 	bl	80076ac <__ssputs_r>
 80077d6:	3001      	adds	r0, #1
 80077d8:	f000 80a7 	beq.w	800792a <_svfiprintf_r+0x1c6>
 80077dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077de:	445a      	add	r2, fp
 80077e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80077e2:	f89a 3000 	ldrb.w	r3, [sl]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 809f 	beq.w	800792a <_svfiprintf_r+0x1c6>
 80077ec:	2300      	movs	r3, #0
 80077ee:	f04f 32ff 	mov.w	r2, #4294967295
 80077f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077f6:	f10a 0a01 	add.w	sl, sl, #1
 80077fa:	9304      	str	r3, [sp, #16]
 80077fc:	9307      	str	r3, [sp, #28]
 80077fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007802:	931a      	str	r3, [sp, #104]	@ 0x68
 8007804:	4654      	mov	r4, sl
 8007806:	2205      	movs	r2, #5
 8007808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800780c:	484e      	ldr	r0, [pc, #312]	@ (8007948 <_svfiprintf_r+0x1e4>)
 800780e:	f7fe fc6e 	bl	80060ee <memchr>
 8007812:	9a04      	ldr	r2, [sp, #16]
 8007814:	b9d8      	cbnz	r0, 800784e <_svfiprintf_r+0xea>
 8007816:	06d0      	lsls	r0, r2, #27
 8007818:	bf44      	itt	mi
 800781a:	2320      	movmi	r3, #32
 800781c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007820:	0711      	lsls	r1, r2, #28
 8007822:	bf44      	itt	mi
 8007824:	232b      	movmi	r3, #43	@ 0x2b
 8007826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800782a:	f89a 3000 	ldrb.w	r3, [sl]
 800782e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007830:	d015      	beq.n	800785e <_svfiprintf_r+0xfa>
 8007832:	4654      	mov	r4, sl
 8007834:	2000      	movs	r0, #0
 8007836:	f04f 0c0a 	mov.w	ip, #10
 800783a:	9a07      	ldr	r2, [sp, #28]
 800783c:	4621      	mov	r1, r4
 800783e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007842:	3b30      	subs	r3, #48	@ 0x30
 8007844:	2b09      	cmp	r3, #9
 8007846:	d94b      	bls.n	80078e0 <_svfiprintf_r+0x17c>
 8007848:	b1b0      	cbz	r0, 8007878 <_svfiprintf_r+0x114>
 800784a:	9207      	str	r2, [sp, #28]
 800784c:	e014      	b.n	8007878 <_svfiprintf_r+0x114>
 800784e:	eba0 0308 	sub.w	r3, r0, r8
 8007852:	fa09 f303 	lsl.w	r3, r9, r3
 8007856:	4313      	orrs	r3, r2
 8007858:	46a2      	mov	sl, r4
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	e7d2      	b.n	8007804 <_svfiprintf_r+0xa0>
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	1d19      	adds	r1, r3, #4
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	9103      	str	r1, [sp, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	bfbb      	ittet	lt
 800786a:	425b      	neglt	r3, r3
 800786c:	f042 0202 	orrlt.w	r2, r2, #2
 8007870:	9307      	strge	r3, [sp, #28]
 8007872:	9307      	strlt	r3, [sp, #28]
 8007874:	bfb8      	it	lt
 8007876:	9204      	strlt	r2, [sp, #16]
 8007878:	7823      	ldrb	r3, [r4, #0]
 800787a:	2b2e      	cmp	r3, #46	@ 0x2e
 800787c:	d10a      	bne.n	8007894 <_svfiprintf_r+0x130>
 800787e:	7863      	ldrb	r3, [r4, #1]
 8007880:	2b2a      	cmp	r3, #42	@ 0x2a
 8007882:	d132      	bne.n	80078ea <_svfiprintf_r+0x186>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	3402      	adds	r4, #2
 8007888:	1d1a      	adds	r2, r3, #4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	9203      	str	r2, [sp, #12]
 800788e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007892:	9305      	str	r3, [sp, #20]
 8007894:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800794c <_svfiprintf_r+0x1e8>
 8007898:	2203      	movs	r2, #3
 800789a:	4650      	mov	r0, sl
 800789c:	7821      	ldrb	r1, [r4, #0]
 800789e:	f7fe fc26 	bl	80060ee <memchr>
 80078a2:	b138      	cbz	r0, 80078b4 <_svfiprintf_r+0x150>
 80078a4:	2240      	movs	r2, #64	@ 0x40
 80078a6:	9b04      	ldr	r3, [sp, #16]
 80078a8:	eba0 000a 	sub.w	r0, r0, sl
 80078ac:	4082      	lsls	r2, r0
 80078ae:	4313      	orrs	r3, r2
 80078b0:	3401      	adds	r4, #1
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b8:	2206      	movs	r2, #6
 80078ba:	4825      	ldr	r0, [pc, #148]	@ (8007950 <_svfiprintf_r+0x1ec>)
 80078bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078c0:	f7fe fc15 	bl	80060ee <memchr>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d036      	beq.n	8007936 <_svfiprintf_r+0x1d2>
 80078c8:	4b22      	ldr	r3, [pc, #136]	@ (8007954 <_svfiprintf_r+0x1f0>)
 80078ca:	bb1b      	cbnz	r3, 8007914 <_svfiprintf_r+0x1b0>
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	3307      	adds	r3, #7
 80078d0:	f023 0307 	bic.w	r3, r3, #7
 80078d4:	3308      	adds	r3, #8
 80078d6:	9303      	str	r3, [sp, #12]
 80078d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078da:	4433      	add	r3, r6
 80078dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078de:	e76a      	b.n	80077b6 <_svfiprintf_r+0x52>
 80078e0:	460c      	mov	r4, r1
 80078e2:	2001      	movs	r0, #1
 80078e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80078e8:	e7a8      	b.n	800783c <_svfiprintf_r+0xd8>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f04f 0c0a 	mov.w	ip, #10
 80078f0:	4619      	mov	r1, r3
 80078f2:	3401      	adds	r4, #1
 80078f4:	9305      	str	r3, [sp, #20]
 80078f6:	4620      	mov	r0, r4
 80078f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078fc:	3a30      	subs	r2, #48	@ 0x30
 80078fe:	2a09      	cmp	r2, #9
 8007900:	d903      	bls.n	800790a <_svfiprintf_r+0x1a6>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0c6      	beq.n	8007894 <_svfiprintf_r+0x130>
 8007906:	9105      	str	r1, [sp, #20]
 8007908:	e7c4      	b.n	8007894 <_svfiprintf_r+0x130>
 800790a:	4604      	mov	r4, r0
 800790c:	2301      	movs	r3, #1
 800790e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007912:	e7f0      	b.n	80078f6 <_svfiprintf_r+0x192>
 8007914:	ab03      	add	r3, sp, #12
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	462a      	mov	r2, r5
 800791a:	4638      	mov	r0, r7
 800791c:	4b0e      	ldr	r3, [pc, #56]	@ (8007958 <_svfiprintf_r+0x1f4>)
 800791e:	a904      	add	r1, sp, #16
 8007920:	f7fd fe6a 	bl	80055f8 <_printf_float>
 8007924:	1c42      	adds	r2, r0, #1
 8007926:	4606      	mov	r6, r0
 8007928:	d1d6      	bne.n	80078d8 <_svfiprintf_r+0x174>
 800792a:	89ab      	ldrh	r3, [r5, #12]
 800792c:	065b      	lsls	r3, r3, #25
 800792e:	f53f af2d 	bmi.w	800778c <_svfiprintf_r+0x28>
 8007932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007934:	e72c      	b.n	8007790 <_svfiprintf_r+0x2c>
 8007936:	ab03      	add	r3, sp, #12
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	462a      	mov	r2, r5
 800793c:	4638      	mov	r0, r7
 800793e:	4b06      	ldr	r3, [pc, #24]	@ (8007958 <_svfiprintf_r+0x1f4>)
 8007940:	a904      	add	r1, sp, #16
 8007942:	f7fe f8f7 	bl	8005b34 <_printf_i>
 8007946:	e7ed      	b.n	8007924 <_svfiprintf_r+0x1c0>
 8007948:	08008438 	.word	0x08008438
 800794c:	0800843e 	.word	0x0800843e
 8007950:	08008442 	.word	0x08008442
 8007954:	080055f9 	.word	0x080055f9
 8007958:	080076ad 	.word	0x080076ad

0800795c <__sflush_r>:
 800795c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	0716      	lsls	r6, r2, #28
 8007964:	4605      	mov	r5, r0
 8007966:	460c      	mov	r4, r1
 8007968:	d454      	bmi.n	8007a14 <__sflush_r+0xb8>
 800796a:	684b      	ldr	r3, [r1, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	dc02      	bgt.n	8007976 <__sflush_r+0x1a>
 8007970:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	dd48      	ble.n	8007a08 <__sflush_r+0xac>
 8007976:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007978:	2e00      	cmp	r6, #0
 800797a:	d045      	beq.n	8007a08 <__sflush_r+0xac>
 800797c:	2300      	movs	r3, #0
 800797e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007982:	682f      	ldr	r7, [r5, #0]
 8007984:	6a21      	ldr	r1, [r4, #32]
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	d030      	beq.n	80079ec <__sflush_r+0x90>
 800798a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	0759      	lsls	r1, r3, #29
 8007990:	d505      	bpl.n	800799e <__sflush_r+0x42>
 8007992:	6863      	ldr	r3, [r4, #4]
 8007994:	1ad2      	subs	r2, r2, r3
 8007996:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007998:	b10b      	cbz	r3, 800799e <__sflush_r+0x42>
 800799a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800799c:	1ad2      	subs	r2, r2, r3
 800799e:	2300      	movs	r3, #0
 80079a0:	4628      	mov	r0, r5
 80079a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079a4:	6a21      	ldr	r1, [r4, #32]
 80079a6:	47b0      	blx	r6
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	d106      	bne.n	80079bc <__sflush_r+0x60>
 80079ae:	6829      	ldr	r1, [r5, #0]
 80079b0:	291d      	cmp	r1, #29
 80079b2:	d82b      	bhi.n	8007a0c <__sflush_r+0xb0>
 80079b4:	4a28      	ldr	r2, [pc, #160]	@ (8007a58 <__sflush_r+0xfc>)
 80079b6:	410a      	asrs	r2, r1
 80079b8:	07d6      	lsls	r6, r2, #31
 80079ba:	d427      	bmi.n	8007a0c <__sflush_r+0xb0>
 80079bc:	2200      	movs	r2, #0
 80079be:	6062      	str	r2, [r4, #4]
 80079c0:	6922      	ldr	r2, [r4, #16]
 80079c2:	04d9      	lsls	r1, r3, #19
 80079c4:	6022      	str	r2, [r4, #0]
 80079c6:	d504      	bpl.n	80079d2 <__sflush_r+0x76>
 80079c8:	1c42      	adds	r2, r0, #1
 80079ca:	d101      	bne.n	80079d0 <__sflush_r+0x74>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b903      	cbnz	r3, 80079d2 <__sflush_r+0x76>
 80079d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80079d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079d4:	602f      	str	r7, [r5, #0]
 80079d6:	b1b9      	cbz	r1, 8007a08 <__sflush_r+0xac>
 80079d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079dc:	4299      	cmp	r1, r3
 80079de:	d002      	beq.n	80079e6 <__sflush_r+0x8a>
 80079e0:	4628      	mov	r0, r5
 80079e2:	f7ff f9e5 	bl	8006db0 <_free_r>
 80079e6:	2300      	movs	r3, #0
 80079e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80079ea:	e00d      	b.n	8007a08 <__sflush_r+0xac>
 80079ec:	2301      	movs	r3, #1
 80079ee:	4628      	mov	r0, r5
 80079f0:	47b0      	blx	r6
 80079f2:	4602      	mov	r2, r0
 80079f4:	1c50      	adds	r0, r2, #1
 80079f6:	d1c9      	bne.n	800798c <__sflush_r+0x30>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0c6      	beq.n	800798c <__sflush_r+0x30>
 80079fe:	2b1d      	cmp	r3, #29
 8007a00:	d001      	beq.n	8007a06 <__sflush_r+0xaa>
 8007a02:	2b16      	cmp	r3, #22
 8007a04:	d11d      	bne.n	8007a42 <__sflush_r+0xe6>
 8007a06:	602f      	str	r7, [r5, #0]
 8007a08:	2000      	movs	r0, #0
 8007a0a:	e021      	b.n	8007a50 <__sflush_r+0xf4>
 8007a0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a10:	b21b      	sxth	r3, r3
 8007a12:	e01a      	b.n	8007a4a <__sflush_r+0xee>
 8007a14:	690f      	ldr	r7, [r1, #16]
 8007a16:	2f00      	cmp	r7, #0
 8007a18:	d0f6      	beq.n	8007a08 <__sflush_r+0xac>
 8007a1a:	0793      	lsls	r3, r2, #30
 8007a1c:	bf18      	it	ne
 8007a1e:	2300      	movne	r3, #0
 8007a20:	680e      	ldr	r6, [r1, #0]
 8007a22:	bf08      	it	eq
 8007a24:	694b      	ldreq	r3, [r1, #20]
 8007a26:	1bf6      	subs	r6, r6, r7
 8007a28:	600f      	str	r7, [r1, #0]
 8007a2a:	608b      	str	r3, [r1, #8]
 8007a2c:	2e00      	cmp	r6, #0
 8007a2e:	ddeb      	ble.n	8007a08 <__sflush_r+0xac>
 8007a30:	4633      	mov	r3, r6
 8007a32:	463a      	mov	r2, r7
 8007a34:	4628      	mov	r0, r5
 8007a36:	6a21      	ldr	r1, [r4, #32]
 8007a38:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007a3c:	47e0      	blx	ip
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	dc07      	bgt.n	8007a52 <__sflush_r+0xf6>
 8007a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a52:	4407      	add	r7, r0
 8007a54:	1a36      	subs	r6, r6, r0
 8007a56:	e7e9      	b.n	8007a2c <__sflush_r+0xd0>
 8007a58:	dfbffffe 	.word	0xdfbffffe

08007a5c <_fflush_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	690b      	ldr	r3, [r1, #16]
 8007a60:	4605      	mov	r5, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	b913      	cbnz	r3, 8007a6c <_fflush_r+0x10>
 8007a66:	2500      	movs	r5, #0
 8007a68:	4628      	mov	r0, r5
 8007a6a:	bd38      	pop	{r3, r4, r5, pc}
 8007a6c:	b118      	cbz	r0, 8007a76 <_fflush_r+0x1a>
 8007a6e:	6a03      	ldr	r3, [r0, #32]
 8007a70:	b90b      	cbnz	r3, 8007a76 <_fflush_r+0x1a>
 8007a72:	f7fe fa0b 	bl	8005e8c <__sinit>
 8007a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0f3      	beq.n	8007a66 <_fflush_r+0xa>
 8007a7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a80:	07d0      	lsls	r0, r2, #31
 8007a82:	d404      	bmi.n	8007a8e <_fflush_r+0x32>
 8007a84:	0599      	lsls	r1, r3, #22
 8007a86:	d402      	bmi.n	8007a8e <_fflush_r+0x32>
 8007a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a8a:	f7fe fb2e 	bl	80060ea <__retarget_lock_acquire_recursive>
 8007a8e:	4628      	mov	r0, r5
 8007a90:	4621      	mov	r1, r4
 8007a92:	f7ff ff63 	bl	800795c <__sflush_r>
 8007a96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a98:	4605      	mov	r5, r0
 8007a9a:	07da      	lsls	r2, r3, #31
 8007a9c:	d4e4      	bmi.n	8007a68 <_fflush_r+0xc>
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	059b      	lsls	r3, r3, #22
 8007aa2:	d4e1      	bmi.n	8007a68 <_fflush_r+0xc>
 8007aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aa6:	f7fe fb21 	bl	80060ec <__retarget_lock_release_recursive>
 8007aaa:	e7dd      	b.n	8007a68 <_fflush_r+0xc>

08007aac <memmove>:
 8007aac:	4288      	cmp	r0, r1
 8007aae:	b510      	push	{r4, lr}
 8007ab0:	eb01 0402 	add.w	r4, r1, r2
 8007ab4:	d902      	bls.n	8007abc <memmove+0x10>
 8007ab6:	4284      	cmp	r4, r0
 8007ab8:	4623      	mov	r3, r4
 8007aba:	d807      	bhi.n	8007acc <memmove+0x20>
 8007abc:	1e43      	subs	r3, r0, #1
 8007abe:	42a1      	cmp	r1, r4
 8007ac0:	d008      	beq.n	8007ad4 <memmove+0x28>
 8007ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aca:	e7f8      	b.n	8007abe <memmove+0x12>
 8007acc:	4601      	mov	r1, r0
 8007ace:	4402      	add	r2, r0
 8007ad0:	428a      	cmp	r2, r1
 8007ad2:	d100      	bne.n	8007ad6 <memmove+0x2a>
 8007ad4:	bd10      	pop	{r4, pc}
 8007ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ade:	e7f7      	b.n	8007ad0 <memmove+0x24>

08007ae0 <_sbrk_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4d05      	ldr	r5, [pc, #20]	@ (8007afc <_sbrk_r+0x1c>)
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	4608      	mov	r0, r1
 8007aea:	602b      	str	r3, [r5, #0]
 8007aec:	f7f9 fec2 	bl	8001874 <_sbrk>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_sbrk_r+0x1a>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_sbrk_r+0x1a>
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	200004a8 	.word	0x200004a8

08007b00 <memcpy>:
 8007b00:	440a      	add	r2, r1
 8007b02:	4291      	cmp	r1, r2
 8007b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b08:	d100      	bne.n	8007b0c <memcpy+0xc>
 8007b0a:	4770      	bx	lr
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b12:	4291      	cmp	r1, r2
 8007b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b18:	d1f9      	bne.n	8007b0e <memcpy+0xe>
 8007b1a:	bd10      	pop	{r4, pc}

08007b1c <__assert_func>:
 8007b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b1e:	4614      	mov	r4, r2
 8007b20:	461a      	mov	r2, r3
 8007b22:	4b09      	ldr	r3, [pc, #36]	@ (8007b48 <__assert_func+0x2c>)
 8007b24:	4605      	mov	r5, r0
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68d8      	ldr	r0, [r3, #12]
 8007b2a:	b954      	cbnz	r4, 8007b42 <__assert_func+0x26>
 8007b2c:	4b07      	ldr	r3, [pc, #28]	@ (8007b4c <__assert_func+0x30>)
 8007b2e:	461c      	mov	r4, r3
 8007b30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b34:	9100      	str	r1, [sp, #0]
 8007b36:	462b      	mov	r3, r5
 8007b38:	4905      	ldr	r1, [pc, #20]	@ (8007b50 <__assert_func+0x34>)
 8007b3a:	f000 f86f 	bl	8007c1c <fiprintf>
 8007b3e:	f000 f87f 	bl	8007c40 <abort>
 8007b42:	4b04      	ldr	r3, [pc, #16]	@ (8007b54 <__assert_func+0x38>)
 8007b44:	e7f4      	b.n	8007b30 <__assert_func+0x14>
 8007b46:	bf00      	nop
 8007b48:	20000018 	.word	0x20000018
 8007b4c:	0800848e 	.word	0x0800848e
 8007b50:	08008460 	.word	0x08008460
 8007b54:	08008453 	.word	0x08008453

08007b58 <_calloc_r>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	fba1 5402 	umull	r5, r4, r1, r2
 8007b5e:	b93c      	cbnz	r4, 8007b70 <_calloc_r+0x18>
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7ff f997 	bl	8006e94 <_malloc_r>
 8007b66:	4606      	mov	r6, r0
 8007b68:	b928      	cbnz	r0, 8007b76 <_calloc_r+0x1e>
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}
 8007b70:	220c      	movs	r2, #12
 8007b72:	6002      	str	r2, [r0, #0]
 8007b74:	e7f9      	b.n	8007b6a <_calloc_r+0x12>
 8007b76:	462a      	mov	r2, r5
 8007b78:	4621      	mov	r1, r4
 8007b7a:	f7fe fa39 	bl	8005ff0 <memset>
 8007b7e:	e7f5      	b.n	8007b6c <_calloc_r+0x14>

08007b80 <__ascii_mbtowc>:
 8007b80:	b082      	sub	sp, #8
 8007b82:	b901      	cbnz	r1, 8007b86 <__ascii_mbtowc+0x6>
 8007b84:	a901      	add	r1, sp, #4
 8007b86:	b142      	cbz	r2, 8007b9a <__ascii_mbtowc+0x1a>
 8007b88:	b14b      	cbz	r3, 8007b9e <__ascii_mbtowc+0x1e>
 8007b8a:	7813      	ldrb	r3, [r2, #0]
 8007b8c:	600b      	str	r3, [r1, #0]
 8007b8e:	7812      	ldrb	r2, [r2, #0]
 8007b90:	1e10      	subs	r0, r2, #0
 8007b92:	bf18      	it	ne
 8007b94:	2001      	movne	r0, #1
 8007b96:	b002      	add	sp, #8
 8007b98:	4770      	bx	lr
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	e7fb      	b.n	8007b96 <__ascii_mbtowc+0x16>
 8007b9e:	f06f 0001 	mvn.w	r0, #1
 8007ba2:	e7f8      	b.n	8007b96 <__ascii_mbtowc+0x16>

08007ba4 <_realloc_r>:
 8007ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba8:	4680      	mov	r8, r0
 8007baa:	4615      	mov	r5, r2
 8007bac:	460c      	mov	r4, r1
 8007bae:	b921      	cbnz	r1, 8007bba <_realloc_r+0x16>
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb6:	f7ff b96d 	b.w	8006e94 <_malloc_r>
 8007bba:	b92a      	cbnz	r2, 8007bc8 <_realloc_r+0x24>
 8007bbc:	f7ff f8f8 	bl	8006db0 <_free_r>
 8007bc0:	2400      	movs	r4, #0
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc8:	f000 f841 	bl	8007c4e <_malloc_usable_size_r>
 8007bcc:	4285      	cmp	r5, r0
 8007bce:	4606      	mov	r6, r0
 8007bd0:	d802      	bhi.n	8007bd8 <_realloc_r+0x34>
 8007bd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007bd6:	d8f4      	bhi.n	8007bc2 <_realloc_r+0x1e>
 8007bd8:	4629      	mov	r1, r5
 8007bda:	4640      	mov	r0, r8
 8007bdc:	f7ff f95a 	bl	8006e94 <_malloc_r>
 8007be0:	4607      	mov	r7, r0
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d0ec      	beq.n	8007bc0 <_realloc_r+0x1c>
 8007be6:	42b5      	cmp	r5, r6
 8007be8:	462a      	mov	r2, r5
 8007bea:	4621      	mov	r1, r4
 8007bec:	bf28      	it	cs
 8007bee:	4632      	movcs	r2, r6
 8007bf0:	f7ff ff86 	bl	8007b00 <memcpy>
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	f7ff f8da 	bl	8006db0 <_free_r>
 8007bfc:	463c      	mov	r4, r7
 8007bfe:	e7e0      	b.n	8007bc2 <_realloc_r+0x1e>

08007c00 <__ascii_wctomb>:
 8007c00:	4603      	mov	r3, r0
 8007c02:	4608      	mov	r0, r1
 8007c04:	b141      	cbz	r1, 8007c18 <__ascii_wctomb+0x18>
 8007c06:	2aff      	cmp	r2, #255	@ 0xff
 8007c08:	d904      	bls.n	8007c14 <__ascii_wctomb+0x14>
 8007c0a:	228a      	movs	r2, #138	@ 0x8a
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	4770      	bx	lr
 8007c14:	2001      	movs	r0, #1
 8007c16:	700a      	strb	r2, [r1, #0]
 8007c18:	4770      	bx	lr
	...

08007c1c <fiprintf>:
 8007c1c:	b40e      	push	{r1, r2, r3}
 8007c1e:	b503      	push	{r0, r1, lr}
 8007c20:	4601      	mov	r1, r0
 8007c22:	ab03      	add	r3, sp, #12
 8007c24:	4805      	ldr	r0, [pc, #20]	@ (8007c3c <fiprintf+0x20>)
 8007c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	f000 f83d 	bl	8007cac <_vfiprintf_r>
 8007c32:	b002      	add	sp, #8
 8007c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c38:	b003      	add	sp, #12
 8007c3a:	4770      	bx	lr
 8007c3c:	20000018 	.word	0x20000018

08007c40 <abort>:
 8007c40:	2006      	movs	r0, #6
 8007c42:	b508      	push	{r3, lr}
 8007c44:	f000 fa06 	bl	8008054 <raise>
 8007c48:	2001      	movs	r0, #1
 8007c4a:	f7f9 fd9e 	bl	800178a <_exit>

08007c4e <_malloc_usable_size_r>:
 8007c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c52:	1f18      	subs	r0, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bfbc      	itt	lt
 8007c58:	580b      	ldrlt	r3, [r1, r0]
 8007c5a:	18c0      	addlt	r0, r0, r3
 8007c5c:	4770      	bx	lr

08007c5e <__sfputc_r>:
 8007c5e:	6893      	ldr	r3, [r2, #8]
 8007c60:	b410      	push	{r4}
 8007c62:	3b01      	subs	r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	6093      	str	r3, [r2, #8]
 8007c68:	da07      	bge.n	8007c7a <__sfputc_r+0x1c>
 8007c6a:	6994      	ldr	r4, [r2, #24]
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	db01      	blt.n	8007c74 <__sfputc_r+0x16>
 8007c70:	290a      	cmp	r1, #10
 8007c72:	d102      	bne.n	8007c7a <__sfputc_r+0x1c>
 8007c74:	bc10      	pop	{r4}
 8007c76:	f000 b931 	b.w	8007edc <__swbuf_r>
 8007c7a:	6813      	ldr	r3, [r2, #0]
 8007c7c:	1c58      	adds	r0, r3, #1
 8007c7e:	6010      	str	r0, [r2, #0]
 8007c80:	7019      	strb	r1, [r3, #0]
 8007c82:	4608      	mov	r0, r1
 8007c84:	bc10      	pop	{r4}
 8007c86:	4770      	bx	lr

08007c88 <__sfputs_r>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	460f      	mov	r7, r1
 8007c8e:	4614      	mov	r4, r2
 8007c90:	18d5      	adds	r5, r2, r3
 8007c92:	42ac      	cmp	r4, r5
 8007c94:	d101      	bne.n	8007c9a <__sfputs_r+0x12>
 8007c96:	2000      	movs	r0, #0
 8007c98:	e007      	b.n	8007caa <__sfputs_r+0x22>
 8007c9a:	463a      	mov	r2, r7
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca2:	f7ff ffdc 	bl	8007c5e <__sfputc_r>
 8007ca6:	1c43      	adds	r3, r0, #1
 8007ca8:	d1f3      	bne.n	8007c92 <__sfputs_r+0xa>
 8007caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cac <_vfiprintf_r>:
 8007cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb0:	460d      	mov	r5, r1
 8007cb2:	4614      	mov	r4, r2
 8007cb4:	4698      	mov	r8, r3
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	b09d      	sub	sp, #116	@ 0x74
 8007cba:	b118      	cbz	r0, 8007cc4 <_vfiprintf_r+0x18>
 8007cbc:	6a03      	ldr	r3, [r0, #32]
 8007cbe:	b90b      	cbnz	r3, 8007cc4 <_vfiprintf_r+0x18>
 8007cc0:	f7fe f8e4 	bl	8005e8c <__sinit>
 8007cc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cc6:	07d9      	lsls	r1, r3, #31
 8007cc8:	d405      	bmi.n	8007cd6 <_vfiprintf_r+0x2a>
 8007cca:	89ab      	ldrh	r3, [r5, #12]
 8007ccc:	059a      	lsls	r2, r3, #22
 8007cce:	d402      	bmi.n	8007cd6 <_vfiprintf_r+0x2a>
 8007cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cd2:	f7fe fa0a 	bl	80060ea <__retarget_lock_acquire_recursive>
 8007cd6:	89ab      	ldrh	r3, [r5, #12]
 8007cd8:	071b      	lsls	r3, r3, #28
 8007cda:	d501      	bpl.n	8007ce0 <_vfiprintf_r+0x34>
 8007cdc:	692b      	ldr	r3, [r5, #16]
 8007cde:	b99b      	cbnz	r3, 8007d08 <_vfiprintf_r+0x5c>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f000 f938 	bl	8007f58 <__swsetup_r>
 8007ce8:	b170      	cbz	r0, 8007d08 <_vfiprintf_r+0x5c>
 8007cea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cec:	07dc      	lsls	r4, r3, #31
 8007cee:	d504      	bpl.n	8007cfa <_vfiprintf_r+0x4e>
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf4:	b01d      	add	sp, #116	@ 0x74
 8007cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfa:	89ab      	ldrh	r3, [r5, #12]
 8007cfc:	0598      	lsls	r0, r3, #22
 8007cfe:	d4f7      	bmi.n	8007cf0 <_vfiprintf_r+0x44>
 8007d00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d02:	f7fe f9f3 	bl	80060ec <__retarget_lock_release_recursive>
 8007d06:	e7f3      	b.n	8007cf0 <_vfiprintf_r+0x44>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d0c:	2320      	movs	r3, #32
 8007d0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d12:	2330      	movs	r3, #48	@ 0x30
 8007d14:	f04f 0901 	mov.w	r9, #1
 8007d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d1c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007ec8 <_vfiprintf_r+0x21c>
 8007d20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d24:	4623      	mov	r3, r4
 8007d26:	469a      	mov	sl, r3
 8007d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d2c:	b10a      	cbz	r2, 8007d32 <_vfiprintf_r+0x86>
 8007d2e:	2a25      	cmp	r2, #37	@ 0x25
 8007d30:	d1f9      	bne.n	8007d26 <_vfiprintf_r+0x7a>
 8007d32:	ebba 0b04 	subs.w	fp, sl, r4
 8007d36:	d00b      	beq.n	8007d50 <_vfiprintf_r+0xa4>
 8007d38:	465b      	mov	r3, fp
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ffa2 	bl	8007c88 <__sfputs_r>
 8007d44:	3001      	adds	r0, #1
 8007d46:	f000 80a7 	beq.w	8007e98 <_vfiprintf_r+0x1ec>
 8007d4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d4c:	445a      	add	r2, fp
 8007d4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d50:	f89a 3000 	ldrb.w	r3, [sl]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 809f 	beq.w	8007e98 <_vfiprintf_r+0x1ec>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d64:	f10a 0a01 	add.w	sl, sl, #1
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	9307      	str	r3, [sp, #28]
 8007d6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d70:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d72:	4654      	mov	r4, sl
 8007d74:	2205      	movs	r2, #5
 8007d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d7a:	4853      	ldr	r0, [pc, #332]	@ (8007ec8 <_vfiprintf_r+0x21c>)
 8007d7c:	f7fe f9b7 	bl	80060ee <memchr>
 8007d80:	9a04      	ldr	r2, [sp, #16]
 8007d82:	b9d8      	cbnz	r0, 8007dbc <_vfiprintf_r+0x110>
 8007d84:	06d1      	lsls	r1, r2, #27
 8007d86:	bf44      	itt	mi
 8007d88:	2320      	movmi	r3, #32
 8007d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d8e:	0713      	lsls	r3, r2, #28
 8007d90:	bf44      	itt	mi
 8007d92:	232b      	movmi	r3, #43	@ 0x2b
 8007d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d98:	f89a 3000 	ldrb.w	r3, [sl]
 8007d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d9e:	d015      	beq.n	8007dcc <_vfiprintf_r+0x120>
 8007da0:	4654      	mov	r4, sl
 8007da2:	2000      	movs	r0, #0
 8007da4:	f04f 0c0a 	mov.w	ip, #10
 8007da8:	9a07      	ldr	r2, [sp, #28]
 8007daa:	4621      	mov	r1, r4
 8007dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007db0:	3b30      	subs	r3, #48	@ 0x30
 8007db2:	2b09      	cmp	r3, #9
 8007db4:	d94b      	bls.n	8007e4e <_vfiprintf_r+0x1a2>
 8007db6:	b1b0      	cbz	r0, 8007de6 <_vfiprintf_r+0x13a>
 8007db8:	9207      	str	r2, [sp, #28]
 8007dba:	e014      	b.n	8007de6 <_vfiprintf_r+0x13a>
 8007dbc:	eba0 0308 	sub.w	r3, r0, r8
 8007dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	46a2      	mov	sl, r4
 8007dc8:	9304      	str	r3, [sp, #16]
 8007dca:	e7d2      	b.n	8007d72 <_vfiprintf_r+0xc6>
 8007dcc:	9b03      	ldr	r3, [sp, #12]
 8007dce:	1d19      	adds	r1, r3, #4
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	9103      	str	r1, [sp, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bfbb      	ittet	lt
 8007dd8:	425b      	neglt	r3, r3
 8007dda:	f042 0202 	orrlt.w	r2, r2, #2
 8007dde:	9307      	strge	r3, [sp, #28]
 8007de0:	9307      	strlt	r3, [sp, #28]
 8007de2:	bfb8      	it	lt
 8007de4:	9204      	strlt	r2, [sp, #16]
 8007de6:	7823      	ldrb	r3, [r4, #0]
 8007de8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dea:	d10a      	bne.n	8007e02 <_vfiprintf_r+0x156>
 8007dec:	7863      	ldrb	r3, [r4, #1]
 8007dee:	2b2a      	cmp	r3, #42	@ 0x2a
 8007df0:	d132      	bne.n	8007e58 <_vfiprintf_r+0x1ac>
 8007df2:	9b03      	ldr	r3, [sp, #12]
 8007df4:	3402      	adds	r4, #2
 8007df6:	1d1a      	adds	r2, r3, #4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	9203      	str	r2, [sp, #12]
 8007dfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e00:	9305      	str	r3, [sp, #20]
 8007e02:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007ecc <_vfiprintf_r+0x220>
 8007e06:	2203      	movs	r2, #3
 8007e08:	4650      	mov	r0, sl
 8007e0a:	7821      	ldrb	r1, [r4, #0]
 8007e0c:	f7fe f96f 	bl	80060ee <memchr>
 8007e10:	b138      	cbz	r0, 8007e22 <_vfiprintf_r+0x176>
 8007e12:	2240      	movs	r2, #64	@ 0x40
 8007e14:	9b04      	ldr	r3, [sp, #16]
 8007e16:	eba0 000a 	sub.w	r0, r0, sl
 8007e1a:	4082      	lsls	r2, r0
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	3401      	adds	r4, #1
 8007e20:	9304      	str	r3, [sp, #16]
 8007e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e26:	2206      	movs	r2, #6
 8007e28:	4829      	ldr	r0, [pc, #164]	@ (8007ed0 <_vfiprintf_r+0x224>)
 8007e2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e2e:	f7fe f95e 	bl	80060ee <memchr>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d03f      	beq.n	8007eb6 <_vfiprintf_r+0x20a>
 8007e36:	4b27      	ldr	r3, [pc, #156]	@ (8007ed4 <_vfiprintf_r+0x228>)
 8007e38:	bb1b      	cbnz	r3, 8007e82 <_vfiprintf_r+0x1d6>
 8007e3a:	9b03      	ldr	r3, [sp, #12]
 8007e3c:	3307      	adds	r3, #7
 8007e3e:	f023 0307 	bic.w	r3, r3, #7
 8007e42:	3308      	adds	r3, #8
 8007e44:	9303      	str	r3, [sp, #12]
 8007e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e48:	443b      	add	r3, r7
 8007e4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e4c:	e76a      	b.n	8007d24 <_vfiprintf_r+0x78>
 8007e4e:	460c      	mov	r4, r1
 8007e50:	2001      	movs	r0, #1
 8007e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e56:	e7a8      	b.n	8007daa <_vfiprintf_r+0xfe>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f04f 0c0a 	mov.w	ip, #10
 8007e5e:	4619      	mov	r1, r3
 8007e60:	3401      	adds	r4, #1
 8007e62:	9305      	str	r3, [sp, #20]
 8007e64:	4620      	mov	r0, r4
 8007e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e6a:	3a30      	subs	r2, #48	@ 0x30
 8007e6c:	2a09      	cmp	r2, #9
 8007e6e:	d903      	bls.n	8007e78 <_vfiprintf_r+0x1cc>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0c6      	beq.n	8007e02 <_vfiprintf_r+0x156>
 8007e74:	9105      	str	r1, [sp, #20]
 8007e76:	e7c4      	b.n	8007e02 <_vfiprintf_r+0x156>
 8007e78:	4604      	mov	r4, r0
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e80:	e7f0      	b.n	8007e64 <_vfiprintf_r+0x1b8>
 8007e82:	ab03      	add	r3, sp, #12
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	462a      	mov	r2, r5
 8007e88:	4630      	mov	r0, r6
 8007e8a:	4b13      	ldr	r3, [pc, #76]	@ (8007ed8 <_vfiprintf_r+0x22c>)
 8007e8c:	a904      	add	r1, sp, #16
 8007e8e:	f7fd fbb3 	bl	80055f8 <_printf_float>
 8007e92:	4607      	mov	r7, r0
 8007e94:	1c78      	adds	r0, r7, #1
 8007e96:	d1d6      	bne.n	8007e46 <_vfiprintf_r+0x19a>
 8007e98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e9a:	07d9      	lsls	r1, r3, #31
 8007e9c:	d405      	bmi.n	8007eaa <_vfiprintf_r+0x1fe>
 8007e9e:	89ab      	ldrh	r3, [r5, #12]
 8007ea0:	059a      	lsls	r2, r3, #22
 8007ea2:	d402      	bmi.n	8007eaa <_vfiprintf_r+0x1fe>
 8007ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ea6:	f7fe f921 	bl	80060ec <__retarget_lock_release_recursive>
 8007eaa:	89ab      	ldrh	r3, [r5, #12]
 8007eac:	065b      	lsls	r3, r3, #25
 8007eae:	f53f af1f 	bmi.w	8007cf0 <_vfiprintf_r+0x44>
 8007eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007eb4:	e71e      	b.n	8007cf4 <_vfiprintf_r+0x48>
 8007eb6:	ab03      	add	r3, sp, #12
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	462a      	mov	r2, r5
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	4b06      	ldr	r3, [pc, #24]	@ (8007ed8 <_vfiprintf_r+0x22c>)
 8007ec0:	a904      	add	r1, sp, #16
 8007ec2:	f7fd fe37 	bl	8005b34 <_printf_i>
 8007ec6:	e7e4      	b.n	8007e92 <_vfiprintf_r+0x1e6>
 8007ec8:	08008438 	.word	0x08008438
 8007ecc:	0800843e 	.word	0x0800843e
 8007ed0:	08008442 	.word	0x08008442
 8007ed4:	080055f9 	.word	0x080055f9
 8007ed8:	08007c89 	.word	0x08007c89

08007edc <__swbuf_r>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	460e      	mov	r6, r1
 8007ee0:	4614      	mov	r4, r2
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	b118      	cbz	r0, 8007eee <__swbuf_r+0x12>
 8007ee6:	6a03      	ldr	r3, [r0, #32]
 8007ee8:	b90b      	cbnz	r3, 8007eee <__swbuf_r+0x12>
 8007eea:	f7fd ffcf 	bl	8005e8c <__sinit>
 8007eee:	69a3      	ldr	r3, [r4, #24]
 8007ef0:	60a3      	str	r3, [r4, #8]
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	071a      	lsls	r2, r3, #28
 8007ef6:	d501      	bpl.n	8007efc <__swbuf_r+0x20>
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	b943      	cbnz	r3, 8007f0e <__swbuf_r+0x32>
 8007efc:	4621      	mov	r1, r4
 8007efe:	4628      	mov	r0, r5
 8007f00:	f000 f82a 	bl	8007f58 <__swsetup_r>
 8007f04:	b118      	cbz	r0, 8007f0e <__swbuf_r+0x32>
 8007f06:	f04f 37ff 	mov.w	r7, #4294967295
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	6922      	ldr	r2, [r4, #16]
 8007f12:	b2f6      	uxtb	r6, r6
 8007f14:	1a98      	subs	r0, r3, r2
 8007f16:	6963      	ldr	r3, [r4, #20]
 8007f18:	4637      	mov	r7, r6
 8007f1a:	4283      	cmp	r3, r0
 8007f1c:	dc05      	bgt.n	8007f2a <__swbuf_r+0x4e>
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	f7ff fd9b 	bl	8007a5c <_fflush_r>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d1ed      	bne.n	8007f06 <__swbuf_r+0x2a>
 8007f2a:	68a3      	ldr	r3, [r4, #8]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	60a3      	str	r3, [r4, #8]
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	6022      	str	r2, [r4, #0]
 8007f36:	701e      	strb	r6, [r3, #0]
 8007f38:	6962      	ldr	r2, [r4, #20]
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d004      	beq.n	8007f4a <__swbuf_r+0x6e>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	07db      	lsls	r3, r3, #31
 8007f44:	d5e1      	bpl.n	8007f0a <__swbuf_r+0x2e>
 8007f46:	2e0a      	cmp	r6, #10
 8007f48:	d1df      	bne.n	8007f0a <__swbuf_r+0x2e>
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f7ff fd85 	bl	8007a5c <_fflush_r>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d0d9      	beq.n	8007f0a <__swbuf_r+0x2e>
 8007f56:	e7d6      	b.n	8007f06 <__swbuf_r+0x2a>

08007f58 <__swsetup_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4b29      	ldr	r3, [pc, #164]	@ (8008000 <__swsetup_r+0xa8>)
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	6818      	ldr	r0, [r3, #0]
 8007f60:	460c      	mov	r4, r1
 8007f62:	b118      	cbz	r0, 8007f6c <__swsetup_r+0x14>
 8007f64:	6a03      	ldr	r3, [r0, #32]
 8007f66:	b90b      	cbnz	r3, 8007f6c <__swsetup_r+0x14>
 8007f68:	f7fd ff90 	bl	8005e8c <__sinit>
 8007f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f70:	0719      	lsls	r1, r3, #28
 8007f72:	d422      	bmi.n	8007fba <__swsetup_r+0x62>
 8007f74:	06da      	lsls	r2, r3, #27
 8007f76:	d407      	bmi.n	8007f88 <__swsetup_r+0x30>
 8007f78:	2209      	movs	r2, #9
 8007f7a:	602a      	str	r2, [r5, #0]
 8007f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	e033      	b.n	8007ff0 <__swsetup_r+0x98>
 8007f88:	0758      	lsls	r0, r3, #29
 8007f8a:	d512      	bpl.n	8007fb2 <__swsetup_r+0x5a>
 8007f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f8e:	b141      	cbz	r1, 8007fa2 <__swsetup_r+0x4a>
 8007f90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f94:	4299      	cmp	r1, r3
 8007f96:	d002      	beq.n	8007f9e <__swsetup_r+0x46>
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f7fe ff09 	bl	8006db0 <_free_r>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007fa8:	81a3      	strh	r3, [r4, #12]
 8007faa:	2300      	movs	r3, #0
 8007fac:	6063      	str	r3, [r4, #4]
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	f043 0308 	orr.w	r3, r3, #8
 8007fb8:	81a3      	strh	r3, [r4, #12]
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	b94b      	cbnz	r3, 8007fd2 <__swsetup_r+0x7a>
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fc8:	d003      	beq.n	8007fd2 <__swsetup_r+0x7a>
 8007fca:	4621      	mov	r1, r4
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f000 f882 	bl	80080d6 <__smakebuf_r>
 8007fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd6:	f013 0201 	ands.w	r2, r3, #1
 8007fda:	d00a      	beq.n	8007ff2 <__swsetup_r+0x9a>
 8007fdc:	2200      	movs	r2, #0
 8007fde:	60a2      	str	r2, [r4, #8]
 8007fe0:	6962      	ldr	r2, [r4, #20]
 8007fe2:	4252      	negs	r2, r2
 8007fe4:	61a2      	str	r2, [r4, #24]
 8007fe6:	6922      	ldr	r2, [r4, #16]
 8007fe8:	b942      	cbnz	r2, 8007ffc <__swsetup_r+0xa4>
 8007fea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007fee:	d1c5      	bne.n	8007f7c <__swsetup_r+0x24>
 8007ff0:	bd38      	pop	{r3, r4, r5, pc}
 8007ff2:	0799      	lsls	r1, r3, #30
 8007ff4:	bf58      	it	pl
 8007ff6:	6962      	ldrpl	r2, [r4, #20]
 8007ff8:	60a2      	str	r2, [r4, #8]
 8007ffa:	e7f4      	b.n	8007fe6 <__swsetup_r+0x8e>
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	e7f7      	b.n	8007ff0 <__swsetup_r+0x98>
 8008000:	20000018 	.word	0x20000018

08008004 <_raise_r>:
 8008004:	291f      	cmp	r1, #31
 8008006:	b538      	push	{r3, r4, r5, lr}
 8008008:	4605      	mov	r5, r0
 800800a:	460c      	mov	r4, r1
 800800c:	d904      	bls.n	8008018 <_raise_r+0x14>
 800800e:	2316      	movs	r3, #22
 8008010:	6003      	str	r3, [r0, #0]
 8008012:	f04f 30ff 	mov.w	r0, #4294967295
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800801a:	b112      	cbz	r2, 8008022 <_raise_r+0x1e>
 800801c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008020:	b94b      	cbnz	r3, 8008036 <_raise_r+0x32>
 8008022:	4628      	mov	r0, r5
 8008024:	f000 f830 	bl	8008088 <_getpid_r>
 8008028:	4622      	mov	r2, r4
 800802a:	4601      	mov	r1, r0
 800802c:	4628      	mov	r0, r5
 800802e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008032:	f000 b817 	b.w	8008064 <_kill_r>
 8008036:	2b01      	cmp	r3, #1
 8008038:	d00a      	beq.n	8008050 <_raise_r+0x4c>
 800803a:	1c59      	adds	r1, r3, #1
 800803c:	d103      	bne.n	8008046 <_raise_r+0x42>
 800803e:	2316      	movs	r3, #22
 8008040:	6003      	str	r3, [r0, #0]
 8008042:	2001      	movs	r0, #1
 8008044:	e7e7      	b.n	8008016 <_raise_r+0x12>
 8008046:	2100      	movs	r1, #0
 8008048:	4620      	mov	r0, r4
 800804a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800804e:	4798      	blx	r3
 8008050:	2000      	movs	r0, #0
 8008052:	e7e0      	b.n	8008016 <_raise_r+0x12>

08008054 <raise>:
 8008054:	4b02      	ldr	r3, [pc, #8]	@ (8008060 <raise+0xc>)
 8008056:	4601      	mov	r1, r0
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	f7ff bfd3 	b.w	8008004 <_raise_r>
 800805e:	bf00      	nop
 8008060:	20000018 	.word	0x20000018

08008064 <_kill_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	2300      	movs	r3, #0
 8008068:	4d06      	ldr	r5, [pc, #24]	@ (8008084 <_kill_r+0x20>)
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	4611      	mov	r1, r2
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	f7f9 fb7a 	bl	800176a <_kill>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	d102      	bne.n	8008080 <_kill_r+0x1c>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	b103      	cbz	r3, 8008080 <_kill_r+0x1c>
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	bd38      	pop	{r3, r4, r5, pc}
 8008082:	bf00      	nop
 8008084:	200004a8 	.word	0x200004a8

08008088 <_getpid_r>:
 8008088:	f7f9 bb68 	b.w	800175c <_getpid>

0800808c <__swhatbuf_r>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	460c      	mov	r4, r1
 8008090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008094:	4615      	mov	r5, r2
 8008096:	2900      	cmp	r1, #0
 8008098:	461e      	mov	r6, r3
 800809a:	b096      	sub	sp, #88	@ 0x58
 800809c:	da0c      	bge.n	80080b8 <__swhatbuf_r+0x2c>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	2100      	movs	r1, #0
 80080a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080a6:	bf14      	ite	ne
 80080a8:	2340      	movne	r3, #64	@ 0x40
 80080aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080ae:	2000      	movs	r0, #0
 80080b0:	6031      	str	r1, [r6, #0]
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	b016      	add	sp, #88	@ 0x58
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	466a      	mov	r2, sp
 80080ba:	f000 f849 	bl	8008150 <_fstat_r>
 80080be:	2800      	cmp	r0, #0
 80080c0:	dbed      	blt.n	800809e <__swhatbuf_r+0x12>
 80080c2:	9901      	ldr	r1, [sp, #4]
 80080c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080cc:	4259      	negs	r1, r3
 80080ce:	4159      	adcs	r1, r3
 80080d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080d4:	e7eb      	b.n	80080ae <__swhatbuf_r+0x22>

080080d6 <__smakebuf_r>:
 80080d6:	898b      	ldrh	r3, [r1, #12]
 80080d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080da:	079d      	lsls	r5, r3, #30
 80080dc:	4606      	mov	r6, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	d507      	bpl.n	80080f2 <__smakebuf_r+0x1c>
 80080e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080e6:	6023      	str	r3, [r4, #0]
 80080e8:	6123      	str	r3, [r4, #16]
 80080ea:	2301      	movs	r3, #1
 80080ec:	6163      	str	r3, [r4, #20]
 80080ee:	b003      	add	sp, #12
 80080f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f2:	466a      	mov	r2, sp
 80080f4:	ab01      	add	r3, sp, #4
 80080f6:	f7ff ffc9 	bl	800808c <__swhatbuf_r>
 80080fa:	9f00      	ldr	r7, [sp, #0]
 80080fc:	4605      	mov	r5, r0
 80080fe:	4639      	mov	r1, r7
 8008100:	4630      	mov	r0, r6
 8008102:	f7fe fec7 	bl	8006e94 <_malloc_r>
 8008106:	b948      	cbnz	r0, 800811c <__smakebuf_r+0x46>
 8008108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800810c:	059a      	lsls	r2, r3, #22
 800810e:	d4ee      	bmi.n	80080ee <__smakebuf_r+0x18>
 8008110:	f023 0303 	bic.w	r3, r3, #3
 8008114:	f043 0302 	orr.w	r3, r3, #2
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	e7e2      	b.n	80080e2 <__smakebuf_r+0xc>
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	6020      	str	r0, [r4, #0]
 800812c:	b15b      	cbz	r3, 8008146 <__smakebuf_r+0x70>
 800812e:	4630      	mov	r0, r6
 8008130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008134:	f000 f81e 	bl	8008174 <_isatty_r>
 8008138:	b128      	cbz	r0, 8008146 <__smakebuf_r+0x70>
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	f023 0303 	bic.w	r3, r3, #3
 8008140:	f043 0301 	orr.w	r3, r3, #1
 8008144:	81a3      	strh	r3, [r4, #12]
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	431d      	orrs	r5, r3
 800814a:	81a5      	strh	r5, [r4, #12]
 800814c:	e7cf      	b.n	80080ee <__smakebuf_r+0x18>
	...

08008150 <_fstat_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	2300      	movs	r3, #0
 8008154:	4d06      	ldr	r5, [pc, #24]	@ (8008170 <_fstat_r+0x20>)
 8008156:	4604      	mov	r4, r0
 8008158:	4608      	mov	r0, r1
 800815a:	4611      	mov	r1, r2
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	f7f9 fb63 	bl	8001828 <_fstat>
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	d102      	bne.n	800816c <_fstat_r+0x1c>
 8008166:	682b      	ldr	r3, [r5, #0]
 8008168:	b103      	cbz	r3, 800816c <_fstat_r+0x1c>
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	bd38      	pop	{r3, r4, r5, pc}
 800816e:	bf00      	nop
 8008170:	200004a8 	.word	0x200004a8

08008174 <_isatty_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	2300      	movs	r3, #0
 8008178:	4d05      	ldr	r5, [pc, #20]	@ (8008190 <_isatty_r+0x1c>)
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	f7f9 fb61 	bl	8001846 <_isatty>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_isatty_r+0x1a>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_isatty_r+0x1a>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	200004a8 	.word	0x200004a8

08008194 <_init>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	bf00      	nop
 8008198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819a:	bc08      	pop	{r3}
 800819c:	469e      	mov	lr, r3
 800819e:	4770      	bx	lr

080081a0 <_fini>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	bf00      	nop
 80081a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a6:	bc08      	pop	{r3}
 80081a8:	469e      	mov	lr, r3
 80081aa:	4770      	bx	lr
