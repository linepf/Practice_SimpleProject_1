
practice_SimpleProject_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a64  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08005b78  08005b78  00006b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f28  08005f28  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005f28  08005f28  00006f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f30  08005f30  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f30  08005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f34  08005f34  00006f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005f38  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001d4  0800610c  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  0800610c  00007400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0b3  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002118  00000000  00000000  000112b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  000133c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000705  00000000  00000000  00013d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eea  00000000  00000000  00014415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0dd  00000000  00000000  0002d2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089148  00000000  00000000  0003a3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3524  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f0  00000000  00000000  000c3568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000c6a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b5c 	.word	0x08005b5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005b5c 	.word	0x08005b5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fb60 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f80c 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f918 	bl	8000cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a98:	f000 f8f8 	bl	8000c8c <MX_DMA_Init>
  MX_ADC1_Init();
 8000a9c:	f000 f862 	bl	8000b64 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000aa0:	f000 f8ca 	bl	8000c38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  user_main();
 8000aa4:	f002 f9d8 	bl	8002e58 <user_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <main+0x20>

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b094      	sub	sp, #80	@ 0x50
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ab6:	2228      	movs	r2, #40	@ 0x28
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 ff7c 	bl	80039b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000ae6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000aea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	2301      	movs	r3, #1
 8000aee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af0:	2302      	movs	r3, #2
 8000af2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000afa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 fa87 	bl	8002018 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000b10:	f000 f8fc 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b24:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 fcf3 	bl	800251c <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b3c:	f000 f8e6 	bl	8000d0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b40:	2302      	movs	r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b48:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 fe75 	bl	800283c <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b58:	f000 f8d8 	bl	8000d0c <Error_Handler>
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	3750      	adds	r7, #80	@ 0x50
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b74:	4b2e      	ldr	r3, [pc, #184]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000b76:	4a2f      	ldr	r2, [pc, #188]	@ (8000c34 <MX_ADC1_Init+0xd0>)
 8000b78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b82:	4b2b      	ldr	r3, [pc, #172]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b88:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8e:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000b90:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b96:	4b26      	ldr	r3, [pc, #152]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba2:	4823      	ldr	r0, [pc, #140]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000ba4:	f000 fb5a 	bl	800125c <HAL_ADC_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000bae:	f000 f8ad 	bl	8000d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481b      	ldr	r0, [pc, #108]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000bc4:	f000 fcf4 	bl	80015b0 <HAL_ADC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bce:	f000 f89d 	bl	8000d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4814      	ldr	r0, [pc, #80]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000be0:	f000 fce6 	bl	80015b0 <HAL_ADC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bea:	f000 f88f 	bl	8000d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000bfc:	f000 fcd8 	bl	80015b0 <HAL_ADC_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c06:	f000 f881 	bl	8000d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <MX_ADC1_Init+0xcc>)
 8000c18:	f000 fcca 	bl	80015b0 <HAL_ADC_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c22:	f000 f873 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001f0 	.word	0x200001f0
 8000c34:	40012400 	.word	0x40012400

08000c38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c44:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c70:	f001 fe9a 	bl	80029a8 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c7a:	f000 f847 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000264 	.word	0x20000264
 8000c88:	40013800 	.word	0x40013800

08000c8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_DMA_Init+0x38>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <MX_DMA_Init+0x38>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <MX_DMA_Init+0x38>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	200b      	movs	r0, #11
 8000cb0:	f000 fe97 	bl	80019e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cb4:	200b      	movs	r0, #11
 8000cb6:	f000 feb0 	bl	8001a1a <HAL_NVIC_EnableIRQ>

}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_GPIO_Init+0x40>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <MX_GPIO_Init+0x40>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <MX_GPIO_Init+0x40>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <MX_GPIO_Init+0x40>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <MX_GPIO_Init+0x40>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <MX_GPIO_Init+0x40>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40021000 	.word	0x40021000

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <Error_Handler+0x8>

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <HAL_MspInit+0x5c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_MspInit+0x60>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <HAL_MspInit+0x60>)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000

08000d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a2c      	ldr	r2, [pc, #176]	@ (8000e48 <HAL_ADC_MspInit+0xcc>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d151      	bne.n	8000e40 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <HAL_ADC_MspInit+0xd0>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e4c <HAL_ADC_MspInit+0xd0>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b28      	ldr	r3, [pc, #160]	@ (8000e4c <HAL_ADC_MspInit+0xd0>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b25      	ldr	r3, [pc, #148]	@ (8000e4c <HAL_ADC_MspInit+0xd0>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a24      	ldr	r2, [pc, #144]	@ (8000e4c <HAL_ADC_MspInit+0xd0>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b22      	ldr	r3, [pc, #136]	@ (8000e4c <HAL_ADC_MspInit+0xd0>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	481d      	ldr	r0, [pc, #116]	@ (8000e50 <HAL_ADC_MspInit+0xd4>)
 8000ddc:	f000 ff98 	bl	8001d10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <HAL_ADC_MspInit+0xd8>)
 8000de2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e58 <HAL_ADC_MspInit+0xdc>)
 8000de4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <HAL_ADC_MspInit+0xd8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <HAL_ADC_MspInit+0xd8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000df2:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <HAL_ADC_MspInit+0xd8>)
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000df8:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <HAL_ADC_MspInit+0xd8>)
 8000dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dfe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <HAL_ADC_MspInit+0xd8>)
 8000e02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_ADC_MspInit+0xd8>)
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <HAL_ADC_MspInit+0xd8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e14:	480f      	ldr	r0, [pc, #60]	@ (8000e54 <HAL_ADC_MspInit+0xd8>)
 8000e16:	f000 fe1b 	bl	8001a50 <HAL_DMA_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e20:	f7ff ff74 	bl	8000d0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	@ (8000e54 <HAL_ADC_MspInit+0xd8>)
 8000e28:	621a      	str	r2, [r3, #32]
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <HAL_ADC_MspInit+0xd8>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2012      	movs	r0, #18
 8000e36:	f000 fdd4 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e3a:	2012      	movs	r0, #18
 8000e3c:	f000 fded 	bl	8001a1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40012400 	.word	0x40012400
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010800 	.word	0x40010800
 8000e54:	20000220 	.word	0x20000220
 8000e58:	40020008 	.word	0x40020008

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee8 <HAL_UART_MspInit+0x8c>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d131      	bne.n	8000ee0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <HAL_UART_MspInit+0x90>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a1a      	ldr	r2, [pc, #104]	@ (8000eec <HAL_UART_MspInit+0x90>)
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <HAL_UART_MspInit+0x90>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <HAL_UART_MspInit+0x90>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <HAL_UART_MspInit+0x90>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_UART_MspInit+0x90>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480b      	ldr	r0, [pc, #44]	@ (8000ef0 <HAL_UART_MspInit+0x94>)
 8000ec2:	f000 ff25 	bl	8001d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <HAL_UART_MspInit+0x94>)
 8000edc:	f000 ff18 	bl	8001d10 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 f94a 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <DMA1_Channel1_IRQHandler+0x10>)
 8000f52:	f000 fdd7 	bl	8001b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000220 	.word	0x20000220

08000f60 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <ADC1_2_IRQHandler+0x10>)
 8000f66:	f000 fa51 	bl	800140c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200001f0 	.word	0x200001f0

08000f74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return 1;
 8000f78:	2301      	movs	r3, #1
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <_kill>:

int _kill(int pid, int sig)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f8c:	f002 fd66 	bl	8003a5c <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2216      	movs	r2, #22
 8000f94:	601a      	str	r2, [r3, #0]
  return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_exit>:

void _exit (int status)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000faa:	f04f 31ff 	mov.w	r1, #4294967295
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffe7 	bl	8000f82 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <_exit+0x12>

08000fb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e00a      	b.n	8000fe0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fca:	f3af 8000 	nop.w
 8000fce:	4601      	mov	r1, r0
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	60ba      	str	r2, [r7, #8]
 8000fd6:	b2ca      	uxtb	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dbf0      	blt.n	8000fca <_read+0x12>
  }

  return len;
 8000fe8:	687b      	ldr	r3, [r7, #4]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e009      	b.n	8001018 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf1      	blt.n	8001004 <_write+0x12>
  }
  return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_close>:

int _close(int file)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001050:	605a      	str	r2, [r3, #4]
  return 0;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <_isatty>:

int _isatty(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
	...

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f002 fcce 	bl	8003a5c <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20005000 	.word	0x20005000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	200002ac 	.word	0x200002ac
 80010f4:	20000400 	.word	0x20000400

080010f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001104:	f7ff fff8 	bl	80010f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480b      	ldr	r0, [pc, #44]	@ (8001138 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800110a:	490c      	ldr	r1, [pc, #48]	@ (800113c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800110c:	4a0c      	ldr	r2, [pc, #48]	@ (8001140 <LoopFillZerobss+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a09      	ldr	r2, [pc, #36]	@ (8001144 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001120:	4c09      	ldr	r4, [pc, #36]	@ (8001148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f002 fc9b 	bl	8003a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001132:	f7ff fca9 	bl	8000a88 <main>
  bx lr
 8001136:	4770      	bx	lr
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001140:	08005f38 	.word	0x08005f38
  ldr r2, =_sbss
 8001144:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001148:	20000400 	.word	0x20000400

0800114c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800114c:	e7fe      	b.n	800114c <CAN1_RX1_IRQHandler>
	...

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <HAL_Init+0x28>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <HAL_Init+0x28>)
 800115a:	f043 0310 	orr.w	r3, r3, #16
 800115e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 fc33 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	200f      	movs	r0, #15
 8001168:	f000 f808 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fdd4 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <HAL_InitTick+0x54>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <HAL_InitTick+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fc4b 	bl	8001a36 <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 fc13 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	@ (80011d8 <HAL_InitTick+0x5c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <HAL_IncTick+0x1c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_IncTick+0x20>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a03      	ldr	r2, [pc, #12]	@ (80011fc <HAL_IncTick+0x20>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	20000008 	.word	0x20000008
 80011fc:	200002b0 	.word	0x200002b0

08001200 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b02      	ldr	r3, [pc, #8]	@ (8001210 <HAL_GetTick+0x10>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	200002b0 	.word	0x200002b0

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff fff0 	bl	8001200 <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffe0 	bl	8001200 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e0be      	b.n	80013fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	2b00      	cmp	r3, #0
 800128a:	d109      	bne.n	80012a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fd6e 	bl	8000d7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 fa7d 	bl	80017a0 <ADC_ConversionStop_Disable>
 80012a6:	4603      	mov	r3, r0
 80012a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f040 8099 	bne.w	80013ea <HAL_ADC_Init+0x18e>
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f040 8095 	bne.w	80013ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012c8:	f023 0302 	bic.w	r3, r3, #2
 80012cc:	f043 0202 	orr.w	r2, r3, #2
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7b1b      	ldrb	r3, [r3, #12]
 80012e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012f4:	d003      	beq.n	80012fe <HAL_ADC_Init+0xa2>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d102      	bne.n	8001304 <HAL_ADC_Init+0xa8>
 80012fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001302:	e000      	b.n	8001306 <HAL_ADC_Init+0xaa>
 8001304:	2300      	movs	r3, #0
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7d1b      	ldrb	r3, [r3, #20]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d119      	bne.n	8001348 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7b1b      	ldrb	r3, [r3, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d109      	bne.n	8001330 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	3b01      	subs	r3, #1
 8001322:	035a      	lsls	r2, r3, #13
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	e00b      	b.n	8001348 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001334:	f043 0220 	orr.w	r2, r3, #32
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001340:	f043 0201 	orr.w	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	4b28      	ldr	r3, [pc, #160]	@ (8001404 <HAL_ADC_Init+0x1a8>)
 8001364:	4013      	ands	r3, r2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	68b9      	ldr	r1, [r7, #8]
 800136c:	430b      	orrs	r3, r1
 800136e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001378:	d003      	beq.n	8001382 <HAL_ADC_Init+0x126>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d104      	bne.n	800138c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	3b01      	subs	r3, #1
 8001388:	051b      	lsls	r3, r3, #20
 800138a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001392:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	430a      	orrs	r2, r1
 800139e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <HAL_ADC_Init+0x1ac>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d10b      	bne.n	80013c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ba:	f023 0303 	bic.w	r3, r3, #3
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013c6:	e018      	b.n	80013fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013cc:	f023 0312 	bic.w	r3, r3, #18
 80013d0:	f043 0210 	orr.w	r2, r3, #16
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013dc:	f043 0201 	orr.w	r2, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013e8:	e007      	b.n	80013fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ee:	f043 0210 	orr.w	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	ffe1f7fd 	.word	0xffe1f7fd
 8001408:	ff1f0efe 	.word	0xff1f0efe

0800140c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	2b00      	cmp	r3, #0
 800142c:	d03e      	beq.n	80014ac <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d039      	beq.n	80014ac <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143c:	f003 0310 	and.w	r3, r3, #16
 8001440:	2b00      	cmp	r3, #0
 8001442:	d105      	bne.n	8001450 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001448:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800145a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800145e:	d11d      	bne.n	800149c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001464:	2b00      	cmp	r3, #0
 8001466:	d119      	bne.n	800149c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0220 	bic.w	r2, r2, #32
 8001476:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001488:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f874 	bl	800158a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f06f 0212 	mvn.w	r2, #18
 80014aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d04d      	beq.n	8001552 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d048      	beq.n	8001552 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d105      	bne.n	80014d8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80014e2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80014e6:	d012      	beq.n	800150e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d125      	bne.n	8001542 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001500:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001504:	d11d      	bne.n	8001542 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800150a:	2b00      	cmp	r3, #0
 800150c:	d119      	bne.n	8001542 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800151c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001522:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d105      	bne.n	8001542 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	f043 0201 	orr.w	r2, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f96d 	bl	8001822 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f06f 020c 	mvn.w	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001558:	2b00      	cmp	r3, #0
 800155a:	d012      	beq.n	8001582 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00d      	beq.n	8001582 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f812 	bl	800159c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f06f 0201 	mvn.w	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x20>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e0dc      	b.n	800178a <HAL_ADC_ConfigChannel+0x1da>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b06      	cmp	r3, #6
 80015de:	d81c      	bhi.n	800161a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	3b05      	subs	r3, #5
 80015f2:	221f      	movs	r2, #31
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4019      	ands	r1, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	3b05      	subs	r3, #5
 800160c:	fa00 f203 	lsl.w	r2, r0, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	635a      	str	r2, [r3, #52]	@ 0x34
 8001618:	e03c      	b.n	8001694 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b0c      	cmp	r3, #12
 8001620:	d81c      	bhi.n	800165c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	3b23      	subs	r3, #35	@ 0x23
 8001634:	221f      	movs	r2, #31
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	4019      	ands	r1, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3b23      	subs	r3, #35	@ 0x23
 800164e:	fa00 f203 	lsl.w	r2, r0, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	631a      	str	r2, [r3, #48]	@ 0x30
 800165a:	e01b      	b.n	8001694 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3b41      	subs	r3, #65	@ 0x41
 800166e:	221f      	movs	r2, #31
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	4019      	ands	r1, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3b41      	subs	r3, #65	@ 0x41
 8001688:	fa00 f203 	lsl.w	r2, r0, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b09      	cmp	r3, #9
 800169a:	d91c      	bls.n	80016d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68d9      	ldr	r1, [r3, #12]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	3b1e      	subs	r3, #30
 80016ae:	2207      	movs	r2, #7
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4019      	ands	r1, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	6898      	ldr	r0, [r3, #8]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	3b1e      	subs	r3, #30
 80016c8:	fa00 f203 	lsl.w	r2, r0, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	e019      	b.n	800170a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6919      	ldr	r1, [r3, #16]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	2207      	movs	r2, #7
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4019      	ands	r1, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6898      	ldr	r0, [r3, #8]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b10      	cmp	r3, #16
 8001710:	d003      	beq.n	800171a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001716:	2b11      	cmp	r3, #17
 8001718:	d132      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1d      	ldr	r2, [pc, #116]	@ (8001794 <HAL_ADC_ConfigChannel+0x1e4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d125      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d126      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001740:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b10      	cmp	r3, #16
 8001748:	d11a      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800174a:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <HAL_ADC_ConfigChannel+0x1e8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a13      	ldr	r2, [pc, #76]	@ (800179c <HAL_ADC_ConfigChannel+0x1ec>)
 8001750:	fba2 2303 	umull	r2, r3, r2, r3
 8001754:	0c9a      	lsrs	r2, r3, #18
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001760:	e002      	b.n	8001768 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3b01      	subs	r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f9      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x1b2>
 800176e:	e007      	b.n	8001780 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001774:	f043 0220 	orr.w	r2, r3, #32
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	40012400 	.word	0x40012400
 8001798:	20000000 	.word	0x20000000
 800179c:	431bde83 	.word	0x431bde83

080017a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d12e      	bne.n	8001818 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0201 	bic.w	r2, r2, #1
 80017c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ca:	f7ff fd19 	bl	8001200 <HAL_GetTick>
 80017ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017d0:	e01b      	b.n	800180a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017d2:	f7ff fd15 	bl	8001200 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d914      	bls.n	800180a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d10d      	bne.n	800180a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f2:	f043 0210 	orr.w	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fe:	f043 0201 	orr.w	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e007      	b.n	800181a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d0dc      	beq.n	80017d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4906      	ldr	r1, [pc, #24]	@ (80018cc <__NVIC_EnableIRQ+0x34>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	@ (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	@ (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	@ 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff90 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff2d 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f4:	f7ff ff42 	bl	800187c <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff90 	bl	8001924 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5f 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff35 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffa2 	bl	8001988 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e043      	b.n	8001aee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <HAL_DMA_Init+0xa8>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a22      	ldr	r2, [pc, #136]	@ (8001afc <HAL_DMA_Init+0xac>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	009a      	lsls	r2, r3, #2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a1f      	ldr	r2, [pc, #124]	@ (8001b00 <HAL_DMA_Init+0xb0>)
 8001a82:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a9a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	bffdfff8 	.word	0xbffdfff8
 8001afc:	cccccccd 	.word	0xcccccccd
 8001b00:	40020000 	.word	0x40020000

08001b04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	2204      	movs	r2, #4
 8001b22:	409a      	lsls	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d04f      	beq.n	8001bcc <HAL_DMA_IRQHandler+0xc8>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d04a      	beq.n	8001bcc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d107      	bne.n	8001b54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0204 	bic.w	r2, r2, #4
 8001b52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a66      	ldr	r2, [pc, #408]	@ (8001cf4 <HAL_DMA_IRQHandler+0x1f0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d029      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xae>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a65      	ldr	r2, [pc, #404]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1f4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <HAL_DMA_IRQHandler+0xaa>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a63      	ldr	r2, [pc, #396]	@ (8001cfc <HAL_DMA_IRQHandler+0x1f8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01a      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0xa4>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a62      	ldr	r2, [pc, #392]	@ (8001d00 <HAL_DMA_IRQHandler+0x1fc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d012      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x9e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a60      	ldr	r2, [pc, #384]	@ (8001d04 <HAL_DMA_IRQHandler+0x200>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00a      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x98>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d08 <HAL_DMA_IRQHandler+0x204>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d102      	bne.n	8001b96 <HAL_DMA_IRQHandler+0x92>
 8001b90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b94:	e00e      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001b96:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b9a:	e00b      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001b9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ba0:	e008      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001ba2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ba6:	e005      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001ba8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bac:	e002      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001bae:	2340      	movs	r3, #64	@ 0x40
 8001bb0:	e000      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	4a55      	ldr	r2, [pc, #340]	@ (8001d0c <HAL_DMA_IRQHandler+0x208>)
 8001bb6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 8094 	beq.w	8001cea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bca:	e08e      	b.n	8001cea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d056      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x186>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d051      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10b      	bne.n	8001c0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 020a 	bic.w	r2, r2, #10
 8001c02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a38      	ldr	r2, [pc, #224]	@ (8001cf4 <HAL_DMA_IRQHandler+0x1f0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d029      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x166>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a37      	ldr	r2, [pc, #220]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1f4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d022      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x162>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a35      	ldr	r2, [pc, #212]	@ (8001cfc <HAL_DMA_IRQHandler+0x1f8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01a      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x15c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a34      	ldr	r2, [pc, #208]	@ (8001d00 <HAL_DMA_IRQHandler+0x1fc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d012      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x156>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a32      	ldr	r2, [pc, #200]	@ (8001d04 <HAL_DMA_IRQHandler+0x200>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00a      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x150>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a31      	ldr	r2, [pc, #196]	@ (8001d08 <HAL_DMA_IRQHandler+0x204>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d102      	bne.n	8001c4e <HAL_DMA_IRQHandler+0x14a>
 8001c48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c4c:	e00e      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c52:	e00b      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c58:	e008      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c5e:	e005      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c64:	e002      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c66:	2320      	movs	r3, #32
 8001c68:	e000      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	4a27      	ldr	r2, [pc, #156]	@ (8001d0c <HAL_DMA_IRQHandler+0x208>)
 8001c6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d034      	beq.n	8001cea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c88:	e02f      	b.n	8001cea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	2208      	movs	r2, #8
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d028      	beq.n	8001cec <HAL_DMA_IRQHandler+0x1e8>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d023      	beq.n	8001cec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 020e 	bic.w	r2, r2, #14
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	4798      	blx	r3
    }
  }
  return;
 8001cea:	bf00      	nop
 8001cec:	bf00      	nop
}
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40020008 	.word	0x40020008
 8001cf8:	4002001c 	.word	0x4002001c
 8001cfc:	40020030 	.word	0x40020030
 8001d00:	40020044 	.word	0x40020044
 8001d04:	40020058 	.word	0x40020058
 8001d08:	4002006c 	.word	0x4002006c
 8001d0c:	40020000 	.word	0x40020000

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b08b      	sub	sp, #44	@ 0x2c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e169      	b.n	8001ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d24:	2201      	movs	r2, #1
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8158 	bne.w	8001ff2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4a9a      	ldr	r2, [pc, #616]	@ (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05e      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d4c:	4a98      	ldr	r2, [pc, #608]	@ (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d875      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d52:	4a98      	ldr	r2, [pc, #608]	@ (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d058      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d58:	4a96      	ldr	r2, [pc, #600]	@ (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d86f      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d5e:	4a96      	ldr	r2, [pc, #600]	@ (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d052      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d64:	4a94      	ldr	r2, [pc, #592]	@ (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d869      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d6a:	4a94      	ldr	r2, [pc, #592]	@ (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04c      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d70:	4a92      	ldr	r2, [pc, #584]	@ (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d863      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d76:	4a92      	ldr	r2, [pc, #584]	@ (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d046      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d7c:	4a90      	ldr	r2, [pc, #576]	@ (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d85d      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d82a      	bhi.n	8001ddc <HAL_GPIO_Init+0xcc>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d859      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <HAL_GPIO_Init+0x80>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001de5 	.word	0x08001de5
 8001d98:	08001df7 	.word	0x08001df7
 8001d9c:	08001e39 	.word	0x08001e39
 8001da0:	08001e3f 	.word	0x08001e3f
 8001da4:	08001e3f 	.word	0x08001e3f
 8001da8:	08001e3f 	.word	0x08001e3f
 8001dac:	08001e3f 	.word	0x08001e3f
 8001db0:	08001e3f 	.word	0x08001e3f
 8001db4:	08001e3f 	.word	0x08001e3f
 8001db8:	08001e3f 	.word	0x08001e3f
 8001dbc:	08001e3f 	.word	0x08001e3f
 8001dc0:	08001e3f 	.word	0x08001e3f
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e3f 	.word	0x08001e3f
 8001dcc:	08001e3f 	.word	0x08001e3f
 8001dd0:	08001e3f 	.word	0x08001e3f
 8001dd4:	08001ded 	.word	0x08001ded
 8001dd8:	08001e01 	.word	0x08001e01
 8001ddc:	4a79      	ldr	r2, [pc, #484]	@ (8001fc4 <HAL_GPIO_Init+0x2b4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de2:	e02c      	b.n	8001e3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e029      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e024      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e01f      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	330c      	adds	r3, #12
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e01a      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e12:	2304      	movs	r3, #4
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e013      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	611a      	str	r2, [r3, #16]
          break;
 8001e2a:	e009      	b.n	8001e40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	615a      	str	r2, [r3, #20]
          break;
 8001e36:	e003      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          break;
 8001e3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2bff      	cmp	r3, #255	@ 0xff
 8001e44:	d801      	bhi.n	8001e4a <HAL_GPIO_Init+0x13a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_Init+0x13e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2bff      	cmp	r3, #255	@ 0xff
 8001e54:	d802      	bhi.n	8001e5c <HAL_GPIO_Init+0x14c>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x152>
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5e:	3b08      	subs	r3, #8
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	210f      	movs	r1, #15
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80b1 	beq.w	8001ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e90:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea8:	4a48      	ldr	r2, [pc, #288]	@ (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a40      	ldr	r2, [pc, #256]	@ (8001fd0 <HAL_GPIO_Init+0x2c0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_Init+0x1ec>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3e      	ldr	r2, [pc, #248]	@ (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1e4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	@ (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1e0>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001efc:	2300      	movs	r3, #0
 8001efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0e:	492f      	ldr	r1, [pc, #188]	@ (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f28:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	492c      	ldr	r1, [pc, #176]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f36:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4928      	ldr	r1, [pc, #160]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f50:	4b23      	ldr	r3, [pc, #140]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4922      	ldr	r1, [pc, #136]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60cb      	str	r3, [r1, #12]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f5e:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	491e      	ldr	r1, [pc, #120]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4918      	ldr	r1, [pc, #96]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4914      	ldr	r1, [pc, #80]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d021      	beq.n	8001fe4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	490e      	ldr	r1, [pc, #56]	@ (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
 8001fac:	e021      	b.n	8001ff2 <HAL_GPIO_Init+0x2e2>
 8001fae:	bf00      	nop
 8001fb0:	10320000 	.word	0x10320000
 8001fb4:	10310000 	.word	0x10310000
 8001fb8:	10220000 	.word	0x10220000
 8001fbc:	10210000 	.word	0x10210000
 8001fc0:	10120000 	.word	0x10120000
 8001fc4:	10110000 	.word	0x10110000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40011400 	.word	0x40011400
 8001fe0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <HAL_GPIO_Init+0x304>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4909      	ldr	r1, [pc, #36]	@ (8002014 <HAL_GPIO_Init+0x304>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f47f ae8e 	bne.w	8001d24 <HAL_GPIO_Init+0x14>
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	372c      	adds	r7, #44	@ 0x2c
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e272      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8087 	beq.w	8002146 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002038:	4b92      	ldr	r3, [pc, #584]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b04      	cmp	r3, #4
 8002042:	d00c      	beq.n	800205e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002044:	4b8f      	ldr	r3, [pc, #572]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b08      	cmp	r3, #8
 800204e:	d112      	bne.n	8002076 <HAL_RCC_OscConfig+0x5e>
 8002050:	4b8c      	ldr	r3, [pc, #560]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800205c:	d10b      	bne.n	8002076 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205e:	4b89      	ldr	r3, [pc, #548]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d06c      	beq.n	8002144 <HAL_RCC_OscConfig+0x12c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d168      	bne.n	8002144 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e24c      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x76>
 8002080:	4b80      	ldr	r3, [pc, #512]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a7f      	ldr	r2, [pc, #508]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	e02e      	b.n	80020ec <HAL_RCC_OscConfig+0xd4>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x98>
 8002096:	4b7b      	ldr	r3, [pc, #492]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7a      	ldr	r2, [pc, #488]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b78      	ldr	r3, [pc, #480]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a77      	ldr	r2, [pc, #476]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e01d      	b.n	80020ec <HAL_RCC_OscConfig+0xd4>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0xbc>
 80020ba:	4b72      	ldr	r3, [pc, #456]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a71      	ldr	r2, [pc, #452]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0xd4>
 80020d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b68      	ldr	r3, [pc, #416]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a67      	ldr	r2, [pc, #412]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff f884 	bl	8001200 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7ff f880 	bl	8001200 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	@ 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e200      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b5d      	ldr	r3, [pc, #372]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0xe4>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff f870 	bl	8001200 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff f86c 	bl	8001200 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	@ 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1ec      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b53      	ldr	r3, [pc, #332]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x10c>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d063      	beq.n	800221a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002152:	4b4c      	ldr	r3, [pc, #304]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800215e:	4b49      	ldr	r3, [pc, #292]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b08      	cmp	r3, #8
 8002168:	d11c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x18c>
 800216a:	4b46      	ldr	r3, [pc, #280]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d116      	bne.n	80021a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	4b43      	ldr	r3, [pc, #268]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x176>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e1c0      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4939      	ldr	r1, [pc, #228]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	e03a      	b.n	800221a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ac:	4b36      	ldr	r3, [pc, #216]	@ (8002288 <HAL_RCC_OscConfig+0x270>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7ff f825 	bl	8001200 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ba:	f7ff f821 	bl	8001200 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1a1      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4927      	ldr	r1, [pc, #156]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ee:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <HAL_RCC_OscConfig+0x270>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff f804 	bl	8001200 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fc:	f7ff f800 	bl	8001200 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e180      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d03a      	beq.n	800229c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d019      	beq.n	8002262 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222e:	4b17      	ldr	r3, [pc, #92]	@ (800228c <HAL_RCC_OscConfig+0x274>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002234:	f7fe ffe4 	bl	8001200 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223c:	f7fe ffe0 	bl	8001200 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e160      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800225a:	2001      	movs	r0, #1
 800225c:	f000 fad0 	bl	8002800 <RCC_Delay>
 8002260:	e01c      	b.n	800229c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002262:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <HAL_RCC_OscConfig+0x274>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7fe ffca 	bl	8001200 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226e:	e00f      	b.n	8002290 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002270:	f7fe ffc6 	bl	8001200 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d908      	bls.n	8002290 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e146      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	42420000 	.word	0x42420000
 800228c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	4b92      	ldr	r3, [pc, #584]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1e9      	bne.n	8002270 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80a6 	beq.w	80023f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ae:	4b8b      	ldr	r3, [pc, #556]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10d      	bne.n	80022d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	4b88      	ldr	r3, [pc, #544]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a87      	ldr	r2, [pc, #540]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	61d3      	str	r3, [r2, #28]
 80022c6:	4b85      	ldr	r3, [pc, #532]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d2:	2301      	movs	r3, #1
 80022d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d6:	4b82      	ldr	r3, [pc, #520]	@ (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d118      	bne.n	8002314 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e2:	4b7f      	ldr	r3, [pc, #508]	@ (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7e      	ldr	r2, [pc, #504]	@ (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ee:	f7fe ff87 	bl	8001200 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f6:	f7fe ff83 	bl	8001200 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b64      	cmp	r3, #100	@ 0x64
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e103      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	4b75      	ldr	r3, [pc, #468]	@ (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x312>
 800231c:	4b6f      	ldr	r3, [pc, #444]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a6e      	ldr	r2, [pc, #440]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	e02d      	b.n	8002386 <HAL_RCC_OscConfig+0x36e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0x334>
 8002332:	4b6a      	ldr	r3, [pc, #424]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a69      	ldr	r2, [pc, #420]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6213      	str	r3, [r2, #32]
 800233e:	4b67      	ldr	r3, [pc, #412]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a66      	ldr	r2, [pc, #408]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f023 0304 	bic.w	r3, r3, #4
 8002348:	6213      	str	r3, [r2, #32]
 800234a:	e01c      	b.n	8002386 <HAL_RCC_OscConfig+0x36e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b05      	cmp	r3, #5
 8002352:	d10c      	bne.n	800236e <HAL_RCC_OscConfig+0x356>
 8002354:	4b61      	ldr	r3, [pc, #388]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a60      	ldr	r2, [pc, #384]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	4b5e      	ldr	r3, [pc, #376]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a5d      	ldr	r2, [pc, #372]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	e00b      	b.n	8002386 <HAL_RCC_OscConfig+0x36e>
 800236e:	4b5b      	ldr	r3, [pc, #364]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a5a      	ldr	r2, [pc, #360]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6213      	str	r3, [r2, #32]
 800237a:	4b58      	ldr	r3, [pc, #352]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4a57      	ldr	r2, [pc, #348]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002380:	f023 0304 	bic.w	r3, r3, #4
 8002384:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d015      	beq.n	80023ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7fe ff37 	bl	8001200 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7fe ff33 	bl	8001200 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0b1      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ac:	4b4b      	ldr	r3, [pc, #300]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ee      	beq.n	8002396 <HAL_RCC_OscConfig+0x37e>
 80023b8:	e014      	b.n	80023e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7fe ff21 	bl	8001200 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe ff1d 	bl	8001200 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e09b      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d8:	4b40      	ldr	r3, [pc, #256]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ee      	bne.n	80023c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	4b3c      	ldr	r3, [pc, #240]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4a3b      	ldr	r2, [pc, #236]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8087 	beq.w	800250e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002400:	4b36      	ldr	r3, [pc, #216]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d061      	beq.n	80024d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d146      	bne.n	80024a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002414:	4b33      	ldr	r3, [pc, #204]	@ (80024e4 <HAL_RCC_OscConfig+0x4cc>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7fe fef1 	bl	8001200 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7fe feed 	bl	8001200 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e06d      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002434:	4b29      	ldr	r3, [pc, #164]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002448:	d108      	bne.n	800245c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4921      	ldr	r1, [pc, #132]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800245c:	4b1f      	ldr	r3, [pc, #124]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a19      	ldr	r1, [r3, #32]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	430b      	orrs	r3, r1
 800246e:	491b      	ldr	r1, [pc, #108]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <HAL_RCC_OscConfig+0x4cc>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7fe fec1 	bl	8001200 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002482:	f7fe febd 	bl	8001200 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e03d      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x46a>
 80024a0:	e035      	b.n	800250e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <HAL_RCC_OscConfig+0x4cc>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7fe feaa 	bl	8001200 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe fea6 	bl	8001200 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e026      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x498>
 80024ce:	e01e      	b.n	800250e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e019      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40007000 	.word	0x40007000
 80024e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <HAL_RCC_OscConfig+0x500>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000

0800251c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0d0      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b6a      	ldr	r3, [pc, #424]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b67      	ldr	r3, [pc, #412]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0207 	bic.w	r2, r3, #7
 8002546:	4965      	ldr	r1, [pc, #404]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b63      	ldr	r3, [pc, #396]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002578:	4b59      	ldr	r3, [pc, #356]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4a58      	ldr	r2, [pc, #352]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002582:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002590:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a52      	ldr	r2, [pc, #328]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800259a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b50      	ldr	r3, [pc, #320]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d040      	beq.n	800263c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b47      	ldr	r3, [pc, #284]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d115      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b41      	ldr	r3, [pc, #260]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e073      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b3d      	ldr	r3, [pc, #244]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06b      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4b39      	ldr	r3, [pc, #228]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4936      	ldr	r1, [pc, #216]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800260c:	f7fe fdf8 	bl	8001200 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7fe fdf4 	bl	8001200 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e053      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b2d      	ldr	r3, [pc, #180]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b27      	ldr	r3, [pc, #156]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d210      	bcs.n	800266c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 0207 	bic.w	r2, r3, #7
 8002652:	4922      	ldr	r1, [pc, #136]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002696:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <HAL_RCC_ClockConfig+0x1cc>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_RCC_ClockConfig+0x1d0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fd56 	bl	800117c <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40022000 	.word	0x40022000
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08005b90 	.word	0x08005b90
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800270a:	4b1e      	ldr	r3, [pc, #120]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x94>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d002      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x30>
 800271a:	2b08      	cmp	r3, #8
 800271c:	d003      	beq.n	8002726 <HAL_RCC_GetSysClockFreq+0x36>
 800271e:	e027      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x98>)
 8002722:	613b      	str	r3, [r7, #16]
      break;
 8002724:	e027      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	0c9b      	lsrs	r3, r3, #18
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	4a17      	ldr	r2, [pc, #92]	@ (800278c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002730:	5cd3      	ldrb	r3, [r2, r3]
 8002732:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d010      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800273e:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x94>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	0c5b      	lsrs	r3, r3, #17
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	4a11      	ldr	r2, [pc, #68]	@ (8002790 <HAL_RCC_GetSysClockFreq+0xa0>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a0d      	ldr	r2, [pc, #52]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x98>)
 8002752:	fb03 f202 	mul.w	r2, r3, r2
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	e004      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a0c      	ldr	r2, [pc, #48]	@ (8002794 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002764:	fb02 f303 	mul.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	613b      	str	r3, [r7, #16]
      break;
 800276e:	e002      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002770:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002772:	613b      	str	r3, [r7, #16]
      break;
 8002774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002776:	693b      	ldr	r3, [r7, #16]
}
 8002778:	4618      	mov	r0, r3
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	00f42400 	.word	0x00f42400
 800278c:	08005ba8 	.word	0x08005ba8
 8002790:	08005bb8 	.word	0x08005bb8
 8002794:	003d0900 	.word	0x003d0900
 8002798:	007a1200 	.word	0x007a1200

0800279c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b02      	ldr	r3, [pc, #8]	@ (80027ac <HAL_RCC_GetHCLKFreq+0x10>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	20000000 	.word	0x20000000

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b4:	f7ff fff2 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	@ (80027d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	08005ba0 	.word	0x08005ba0

080027d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027dc:	f7ff ffde 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0adb      	lsrs	r3, r3, #11
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	4903      	ldr	r1, [pc, #12]	@ (80027fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08005ba0 	.word	0x08005ba0

08002800 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002808:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <RCC_Delay+0x34>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0a      	ldr	r2, [pc, #40]	@ (8002838 <RCC_Delay+0x38>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0a5b      	lsrs	r3, r3, #9
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800281c:	bf00      	nop
  }
  while (Delay --);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	60fa      	str	r2, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f9      	bne.n	800281c <RCC_Delay+0x1c>
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20000000 	.word	0x20000000
 8002838:	10624dd3 	.word	0x10624dd3

0800283c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d07d      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002858:	2300      	movs	r3, #0
 800285a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285c:	4b4f      	ldr	r3, [pc, #316]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10d      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002868:	4b4c      	ldr	r3, [pc, #304]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	4a4b      	ldr	r2, [pc, #300]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002872:	61d3      	str	r3, [r2, #28]
 8002874:	4b49      	ldr	r3, [pc, #292]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002880:	2301      	movs	r3, #1
 8002882:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	4b46      	ldr	r3, [pc, #280]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d118      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002890:	4b43      	ldr	r3, [pc, #268]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a42      	ldr	r2, [pc, #264]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800289a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289c:	f7fe fcb0 	bl	8001200 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	e008      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a4:	f7fe fcac 	bl	8001200 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	@ 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e06d      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b6:	4b3a      	ldr	r3, [pc, #232]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028c2:	4b36      	ldr	r3, [pc, #216]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d02e      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d027      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028e0:	4b2e      	ldr	r3, [pc, #184]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ea:	4b2e      	ldr	r3, [pc, #184]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028f0:	4b2c      	ldr	r3, [pc, #176]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028f6:	4a29      	ldr	r2, [pc, #164]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d014      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe fc7b 	bl	8001200 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7fe fc77 	bl	8001200 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e036      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	4b1d      	ldr	r3, [pc, #116]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ee      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002930:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4917      	ldr	r1, [pc, #92]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293e:	4313      	orrs	r3, r2
 8002940:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002942:	7dfb      	ldrb	r3, [r7, #23]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d105      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002948:	4b14      	ldr	r3, [pc, #80]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4a13      	ldr	r2, [pc, #76]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002952:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002960:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	490b      	ldr	r1, [pc, #44]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	4904      	ldr	r1, [pc, #16]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	40007000 	.word	0x40007000
 80029a4:	42420440 	.word	0x42420440

080029a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e042      	b.n	8002a40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fa44 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2224      	movs	r2, #36	@ 0x24
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f971 	bl	8002cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	@ 0x28
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d175      	bne.n	8002b54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_UART_Transmit+0x2c>
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e06e      	b.n	8002b56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2221      	movs	r2, #33	@ 0x21
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a86:	f7fe fbbb 	bl	8001200 <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa0:	d108      	bne.n	8002ab4 <HAL_UART_Transmit+0x6c>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e003      	b.n	8002abc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002abc:	e02e      	b.n	8002b1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2180      	movs	r1, #128	@ 0x80
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f848 	bl	8002b5e <UART_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e03a      	b.n	8002b56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3302      	adds	r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	e007      	b.n	8002b0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1cb      	bne.n	8002abe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2140      	movs	r1, #64	@ 0x40
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f814 	bl	8002b5e <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e006      	b.n	8002b56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6e:	e03b      	b.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b76:	d037      	beq.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b78:	f7fe fb42 	bl	8001200 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	6a3a      	ldr	r2, [r7, #32]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d302      	bcc.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x30>
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e03a      	b.n	8002c08 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d023      	beq.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b80      	cmp	r3, #128	@ 0x80
 8002ba4:	d020      	beq.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b40      	cmp	r3, #64	@ 0x40
 8002baa:	d01d      	beq.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d116      	bne.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f81d 	bl	8002c10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e00f      	b.n	8002c08 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d0b4      	beq.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b095      	sub	sp, #84	@ 0x54
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c22:	e853 3f00 	ldrex	r3, [r3]
 8002c26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c38:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e5      	bne.n	8002c18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3314      	adds	r3, #20
 8002c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	e853 3f00 	ldrex	r3, [r3]
 8002c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e5      	bne.n	8002c4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d119      	bne.n	8002cbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	330c      	adds	r3, #12
 8002c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	e853 3f00 	ldrex	r3, [r3]
 8002c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f023 0310 	bic.w	r3, r3, #16
 8002c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ca8:	61ba      	str	r2, [r7, #24]
 8002caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cac:	6979      	ldr	r1, [r7, #20]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	e841 2300 	strex	r3, r2, [r1]
 8002cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e5      	bne.n	8002c88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002cca:	bf00      	nop
 8002ccc:	3754      	adds	r7, #84	@ 0x54
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002d0e:	f023 030c 	bic.w	r3, r3, #12
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2c      	ldr	r2, [pc, #176]	@ (8002de8 <UART_SetConfig+0x114>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d103      	bne.n	8002d44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d3c:	f7ff fd4c 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	e002      	b.n	8002d4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d44:	f7ff fd34 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8002d48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	009a      	lsls	r2, r3, #2
 8002d54:	441a      	add	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	4a22      	ldr	r2, [pc, #136]	@ (8002dec <UART_SetConfig+0x118>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	0119      	lsls	r1, r3, #4
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	009a      	lsls	r2, r3, #2
 8002d74:	441a      	add	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d80:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <UART_SetConfig+0x118>)
 8002d82:	fba3 0302 	umull	r0, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2064      	movs	r0, #100	@ 0x64
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	3332      	adds	r3, #50	@ 0x32
 8002d94:	4a15      	ldr	r2, [pc, #84]	@ (8002dec <UART_SetConfig+0x118>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002da0:	4419      	add	r1, r3
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009a      	lsls	r2, r3, #2
 8002dac:	441a      	add	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <UART_SetConfig+0x118>)
 8002dba:	fba3 0302 	umull	r0, r3, r3, r2
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2064      	movs	r0, #100	@ 0x64
 8002dc2:	fb00 f303 	mul.w	r3, r0, r3
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	3332      	adds	r3, #50	@ 0x32
 8002dcc:	4a07      	ldr	r2, [pc, #28]	@ (8002dec <UART_SetConfig+0x118>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	440a      	add	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40013800 	.word	0x40013800
 8002dec:	51eb851f 	.word	0x51eb851f

08002df0 <UART_print>:
 *      Author: linep
 */

#include "UART.h"

int UART_print(char *format, ...) {
 8002df0:	b40f      	push	{r0, r1, r2, r3}
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b0c2      	sub	sp, #264	@ 0x108
 8002df6:	af00      	add	r7, sp, #0
    char buffer[256];

    va_list args;
    va_start(args, format);
 8002df8:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e04:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e0e:	f107 0008 	add.w	r0, r7, #8
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002e18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e1c:	f000 fdbe 	bl	800399c <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002e20:	f107 0308 	add.w	r3, r7, #8
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd f993 	bl	8000150 <strlen>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	f107 0108 	add.w	r1, r7, #8
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	4806      	ldr	r0, [pc, #24]	@ (8002e50 <UART_print+0x60>)
 8002e38:	f7ff fe06 	bl	8002a48 <HAL_UART_Transmit>
    return 0;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e4a:	b004      	add	sp, #16
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000264 	.word	0x20000264
 8002e54:	00000000 	.word	0x00000000

08002e58 <user_main>:
#include "UART.h"

struct adc1_structure adc1;


void user_main() {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0

	//float a = 3.12;

	while (1) {

		UART_print("hello %d   test :%.2f \n", 256, 3.2);
 8002e5c:	a306      	add	r3, pc, #24	@ (adr r3, 8002e78 <user_main+0x20>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e66:	4806      	ldr	r0, [pc, #24]	@ (8002e80 <user_main+0x28>)
 8002e68:	f7ff ffc2 	bl	8002df0 <UART_print>
		HAL_Delay(500);
 8002e6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e70:	f7fe f9d0 	bl	8001214 <HAL_Delay>
		UART_print("hello %d   test :%.2f \n", 256, 3.2);
 8002e74:	bf00      	nop
 8002e76:	e7f1      	b.n	8002e5c <user_main+0x4>
 8002e78:	9999999a 	.word	0x9999999a
 8002e7c:	40099999 	.word	0x40099999
 8002e80:	08005b78 	.word	0x08005b78

08002e84 <__cvt>:
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e8a:	461d      	mov	r5, r3
 8002e8c:	bfbb      	ittet	lt
 8002e8e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002e92:	461d      	movlt	r5, r3
 8002e94:	2300      	movge	r3, #0
 8002e96:	232d      	movlt	r3, #45	@ 0x2d
 8002e98:	b088      	sub	sp, #32
 8002e9a:	4614      	mov	r4, r2
 8002e9c:	bfb8      	it	lt
 8002e9e:	4614      	movlt	r4, r2
 8002ea0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002ea2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002ea4:	7013      	strb	r3, [r2, #0]
 8002ea6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002ea8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002eac:	f023 0820 	bic.w	r8, r3, #32
 8002eb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002eb4:	d005      	beq.n	8002ec2 <__cvt+0x3e>
 8002eb6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002eba:	d100      	bne.n	8002ebe <__cvt+0x3a>
 8002ebc:	3601      	adds	r6, #1
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e000      	b.n	8002ec4 <__cvt+0x40>
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	aa07      	add	r2, sp, #28
 8002ec6:	9204      	str	r2, [sp, #16]
 8002ec8:	aa06      	add	r2, sp, #24
 8002eca:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002ece:	e9cd 3600 	strd	r3, r6, [sp]
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	462b      	mov	r3, r5
 8002ed6:	f000 fe87 	bl	8003be8 <_dtoa_r>
 8002eda:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ede:	4607      	mov	r7, r0
 8002ee0:	d119      	bne.n	8002f16 <__cvt+0x92>
 8002ee2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002ee4:	07db      	lsls	r3, r3, #31
 8002ee6:	d50e      	bpl.n	8002f06 <__cvt+0x82>
 8002ee8:	eb00 0906 	add.w	r9, r0, r6
 8002eec:	2200      	movs	r2, #0
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	f7fd fd58 	bl	80009a8 <__aeabi_dcmpeq>
 8002ef8:	b108      	cbz	r0, 8002efe <__cvt+0x7a>
 8002efa:	f8cd 901c 	str.w	r9, [sp, #28]
 8002efe:	2230      	movs	r2, #48	@ 0x30
 8002f00:	9b07      	ldr	r3, [sp, #28]
 8002f02:	454b      	cmp	r3, r9
 8002f04:	d31e      	bcc.n	8002f44 <__cvt+0xc0>
 8002f06:	4638      	mov	r0, r7
 8002f08:	9b07      	ldr	r3, [sp, #28]
 8002f0a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002f0c:	1bdb      	subs	r3, r3, r7
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	b008      	add	sp, #32
 8002f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f16:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002f1a:	eb00 0906 	add.w	r9, r0, r6
 8002f1e:	d1e5      	bne.n	8002eec <__cvt+0x68>
 8002f20:	7803      	ldrb	r3, [r0, #0]
 8002f22:	2b30      	cmp	r3, #48	@ 0x30
 8002f24:	d10a      	bne.n	8002f3c <__cvt+0xb8>
 8002f26:	2200      	movs	r2, #0
 8002f28:	2300      	movs	r3, #0
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd fd3b 	bl	80009a8 <__aeabi_dcmpeq>
 8002f32:	b918      	cbnz	r0, 8002f3c <__cvt+0xb8>
 8002f34:	f1c6 0601 	rsb	r6, r6, #1
 8002f38:	f8ca 6000 	str.w	r6, [sl]
 8002f3c:	f8da 3000 	ldr.w	r3, [sl]
 8002f40:	4499      	add	r9, r3
 8002f42:	e7d3      	b.n	8002eec <__cvt+0x68>
 8002f44:	1c59      	adds	r1, r3, #1
 8002f46:	9107      	str	r1, [sp, #28]
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e7d9      	b.n	8002f00 <__cvt+0x7c>

08002f4c <__exponent>:
 8002f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f4e:	2900      	cmp	r1, #0
 8002f50:	bfb6      	itet	lt
 8002f52:	232d      	movlt	r3, #45	@ 0x2d
 8002f54:	232b      	movge	r3, #43	@ 0x2b
 8002f56:	4249      	neglt	r1, r1
 8002f58:	2909      	cmp	r1, #9
 8002f5a:	7002      	strb	r2, [r0, #0]
 8002f5c:	7043      	strb	r3, [r0, #1]
 8002f5e:	dd29      	ble.n	8002fb4 <__exponent+0x68>
 8002f60:	f10d 0307 	add.w	r3, sp, #7
 8002f64:	461d      	mov	r5, r3
 8002f66:	270a      	movs	r7, #10
 8002f68:	fbb1 f6f7 	udiv	r6, r1, r7
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	fb07 1416 	mls	r4, r7, r6, r1
 8002f72:	3430      	adds	r4, #48	@ 0x30
 8002f74:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002f78:	460c      	mov	r4, r1
 8002f7a:	2c63      	cmp	r4, #99	@ 0x63
 8002f7c:	4631      	mov	r1, r6
 8002f7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002f82:	dcf1      	bgt.n	8002f68 <__exponent+0x1c>
 8002f84:	3130      	adds	r1, #48	@ 0x30
 8002f86:	1e94      	subs	r4, r2, #2
 8002f88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	1c41      	adds	r1, r0, #1
 8002f90:	42ab      	cmp	r3, r5
 8002f92:	d30a      	bcc.n	8002faa <__exponent+0x5e>
 8002f94:	f10d 0309 	add.w	r3, sp, #9
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	42ac      	cmp	r4, r5
 8002f9c:	bf88      	it	hi
 8002f9e:	2300      	movhi	r3, #0
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	4403      	add	r3, r0
 8002fa4:	1a18      	subs	r0, r3, r0
 8002fa6:	b003      	add	sp, #12
 8002fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002faa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002fae:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002fb2:	e7ed      	b.n	8002f90 <__exponent+0x44>
 8002fb4:	2330      	movs	r3, #48	@ 0x30
 8002fb6:	3130      	adds	r1, #48	@ 0x30
 8002fb8:	7083      	strb	r3, [r0, #2]
 8002fba:	70c1      	strb	r1, [r0, #3]
 8002fbc:	1d03      	adds	r3, r0, #4
 8002fbe:	e7f1      	b.n	8002fa4 <__exponent+0x58>

08002fc0 <_printf_float>:
 8002fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc4:	b091      	sub	sp, #68	@ 0x44
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002fcc:	4616      	mov	r6, r2
 8002fce:	461f      	mov	r7, r3
 8002fd0:	4605      	mov	r5, r0
 8002fd2:	f000 fcf9 	bl	80039c8 <_localeconv_r>
 8002fd6:	6803      	ldr	r3, [r0, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	9308      	str	r3, [sp, #32]
 8002fdc:	f7fd f8b8 	bl	8000150 <strlen>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	930e      	str	r3, [sp, #56]	@ 0x38
 8002fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8002fe8:	9009      	str	r0, [sp, #36]	@ 0x24
 8002fea:	3307      	adds	r3, #7
 8002fec:	f023 0307 	bic.w	r3, r3, #7
 8002ff0:	f103 0208 	add.w	r2, r3, #8
 8002ff4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002ff8:	f8d4 b000 	ldr.w	fp, [r4]
 8002ffc:	f8c8 2000 	str.w	r2, [r8]
 8003000:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003004:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800300a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800300e:	f04f 32ff 	mov.w	r2, #4294967295
 8003012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003016:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800301a:	4b9c      	ldr	r3, [pc, #624]	@ (800328c <_printf_float+0x2cc>)
 800301c:	f7fd fcf6 	bl	8000a0c <__aeabi_dcmpun>
 8003020:	bb70      	cbnz	r0, 8003080 <_printf_float+0xc0>
 8003022:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003026:	f04f 32ff 	mov.w	r2, #4294967295
 800302a:	4b98      	ldr	r3, [pc, #608]	@ (800328c <_printf_float+0x2cc>)
 800302c:	f7fd fcd0 	bl	80009d0 <__aeabi_dcmple>
 8003030:	bb30      	cbnz	r0, 8003080 <_printf_float+0xc0>
 8003032:	2200      	movs	r2, #0
 8003034:	2300      	movs	r3, #0
 8003036:	4640      	mov	r0, r8
 8003038:	4649      	mov	r1, r9
 800303a:	f7fd fcbf 	bl	80009bc <__aeabi_dcmplt>
 800303e:	b110      	cbz	r0, 8003046 <_printf_float+0x86>
 8003040:	232d      	movs	r3, #45	@ 0x2d
 8003042:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003046:	4a92      	ldr	r2, [pc, #584]	@ (8003290 <_printf_float+0x2d0>)
 8003048:	4b92      	ldr	r3, [pc, #584]	@ (8003294 <_printf_float+0x2d4>)
 800304a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800304e:	bf94      	ite	ls
 8003050:	4690      	movls	r8, r2
 8003052:	4698      	movhi	r8, r3
 8003054:	2303      	movs	r3, #3
 8003056:	f04f 0900 	mov.w	r9, #0
 800305a:	6123      	str	r3, [r4, #16]
 800305c:	f02b 0304 	bic.w	r3, fp, #4
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	4633      	mov	r3, r6
 8003064:	4621      	mov	r1, r4
 8003066:	4628      	mov	r0, r5
 8003068:	9700      	str	r7, [sp, #0]
 800306a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800306c:	f000 f9d4 	bl	8003418 <_printf_common>
 8003070:	3001      	adds	r0, #1
 8003072:	f040 8090 	bne.w	8003196 <_printf_float+0x1d6>
 8003076:	f04f 30ff 	mov.w	r0, #4294967295
 800307a:	b011      	add	sp, #68	@ 0x44
 800307c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003080:	4642      	mov	r2, r8
 8003082:	464b      	mov	r3, r9
 8003084:	4640      	mov	r0, r8
 8003086:	4649      	mov	r1, r9
 8003088:	f7fd fcc0 	bl	8000a0c <__aeabi_dcmpun>
 800308c:	b148      	cbz	r0, 80030a2 <_printf_float+0xe2>
 800308e:	464b      	mov	r3, r9
 8003090:	2b00      	cmp	r3, #0
 8003092:	bfb8      	it	lt
 8003094:	232d      	movlt	r3, #45	@ 0x2d
 8003096:	4a80      	ldr	r2, [pc, #512]	@ (8003298 <_printf_float+0x2d8>)
 8003098:	bfb8      	it	lt
 800309a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800309e:	4b7f      	ldr	r3, [pc, #508]	@ (800329c <_printf_float+0x2dc>)
 80030a0:	e7d3      	b.n	800304a <_printf_float+0x8a>
 80030a2:	6863      	ldr	r3, [r4, #4]
 80030a4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	d13f      	bne.n	800312c <_printf_float+0x16c>
 80030ac:	2306      	movs	r3, #6
 80030ae:	6063      	str	r3, [r4, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80030b6:	6023      	str	r3, [r4, #0]
 80030b8:	9206      	str	r2, [sp, #24]
 80030ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80030bc:	e9cd a204 	strd	sl, r2, [sp, #16]
 80030c0:	aa0d      	add	r2, sp, #52	@ 0x34
 80030c2:	9203      	str	r2, [sp, #12]
 80030c4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80030c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80030cc:	6863      	ldr	r3, [r4, #4]
 80030ce:	4642      	mov	r2, r8
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	4628      	mov	r0, r5
 80030d4:	464b      	mov	r3, r9
 80030d6:	910a      	str	r1, [sp, #40]	@ 0x28
 80030d8:	f7ff fed4 	bl	8002e84 <__cvt>
 80030dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80030de:	4680      	mov	r8, r0
 80030e0:	2947      	cmp	r1, #71	@ 0x47
 80030e2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80030e4:	d128      	bne.n	8003138 <_printf_float+0x178>
 80030e6:	1cc8      	adds	r0, r1, #3
 80030e8:	db02      	blt.n	80030f0 <_printf_float+0x130>
 80030ea:	6863      	ldr	r3, [r4, #4]
 80030ec:	4299      	cmp	r1, r3
 80030ee:	dd40      	ble.n	8003172 <_printf_float+0x1b2>
 80030f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80030f4:	fa5f fa8a 	uxtb.w	sl, sl
 80030f8:	4652      	mov	r2, sl
 80030fa:	3901      	subs	r1, #1
 80030fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003100:	910d      	str	r1, [sp, #52]	@ 0x34
 8003102:	f7ff ff23 	bl	8002f4c <__exponent>
 8003106:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003108:	4681      	mov	r9, r0
 800310a:	1813      	adds	r3, r2, r0
 800310c:	2a01      	cmp	r2, #1
 800310e:	6123      	str	r3, [r4, #16]
 8003110:	dc02      	bgt.n	8003118 <_printf_float+0x158>
 8003112:	6822      	ldr	r2, [r4, #0]
 8003114:	07d2      	lsls	r2, r2, #31
 8003116:	d501      	bpl.n	800311c <_printf_float+0x15c>
 8003118:	3301      	adds	r3, #1
 800311a:	6123      	str	r3, [r4, #16]
 800311c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003120:	2b00      	cmp	r3, #0
 8003122:	d09e      	beq.n	8003062 <_printf_float+0xa2>
 8003124:	232d      	movs	r3, #45	@ 0x2d
 8003126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800312a:	e79a      	b.n	8003062 <_printf_float+0xa2>
 800312c:	2947      	cmp	r1, #71	@ 0x47
 800312e:	d1bf      	bne.n	80030b0 <_printf_float+0xf0>
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1bd      	bne.n	80030b0 <_printf_float+0xf0>
 8003134:	2301      	movs	r3, #1
 8003136:	e7ba      	b.n	80030ae <_printf_float+0xee>
 8003138:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800313c:	d9dc      	bls.n	80030f8 <_printf_float+0x138>
 800313e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003142:	d118      	bne.n	8003176 <_printf_float+0x1b6>
 8003144:	2900      	cmp	r1, #0
 8003146:	6863      	ldr	r3, [r4, #4]
 8003148:	dd0b      	ble.n	8003162 <_printf_float+0x1a2>
 800314a:	6121      	str	r1, [r4, #16]
 800314c:	b913      	cbnz	r3, 8003154 <_printf_float+0x194>
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	07d0      	lsls	r0, r2, #31
 8003152:	d502      	bpl.n	800315a <_printf_float+0x19a>
 8003154:	3301      	adds	r3, #1
 8003156:	440b      	add	r3, r1
 8003158:	6123      	str	r3, [r4, #16]
 800315a:	f04f 0900 	mov.w	r9, #0
 800315e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003160:	e7dc      	b.n	800311c <_printf_float+0x15c>
 8003162:	b913      	cbnz	r3, 800316a <_printf_float+0x1aa>
 8003164:	6822      	ldr	r2, [r4, #0]
 8003166:	07d2      	lsls	r2, r2, #31
 8003168:	d501      	bpl.n	800316e <_printf_float+0x1ae>
 800316a:	3302      	adds	r3, #2
 800316c:	e7f4      	b.n	8003158 <_printf_float+0x198>
 800316e:	2301      	movs	r3, #1
 8003170:	e7f2      	b.n	8003158 <_printf_float+0x198>
 8003172:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003178:	4299      	cmp	r1, r3
 800317a:	db05      	blt.n	8003188 <_printf_float+0x1c8>
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	6121      	str	r1, [r4, #16]
 8003180:	07d8      	lsls	r0, r3, #31
 8003182:	d5ea      	bpl.n	800315a <_printf_float+0x19a>
 8003184:	1c4b      	adds	r3, r1, #1
 8003186:	e7e7      	b.n	8003158 <_printf_float+0x198>
 8003188:	2900      	cmp	r1, #0
 800318a:	bfcc      	ite	gt
 800318c:	2201      	movgt	r2, #1
 800318e:	f1c1 0202 	rsble	r2, r1, #2
 8003192:	4413      	add	r3, r2
 8003194:	e7e0      	b.n	8003158 <_printf_float+0x198>
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	055a      	lsls	r2, r3, #21
 800319a:	d407      	bmi.n	80031ac <_printf_float+0x1ec>
 800319c:	6923      	ldr	r3, [r4, #16]
 800319e:	4642      	mov	r2, r8
 80031a0:	4631      	mov	r1, r6
 80031a2:	4628      	mov	r0, r5
 80031a4:	47b8      	blx	r7
 80031a6:	3001      	adds	r0, #1
 80031a8:	d12b      	bne.n	8003202 <_printf_float+0x242>
 80031aa:	e764      	b.n	8003076 <_printf_float+0xb6>
 80031ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80031b0:	f240 80dc 	bls.w	800336c <_printf_float+0x3ac>
 80031b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80031b8:	2200      	movs	r2, #0
 80031ba:	2300      	movs	r3, #0
 80031bc:	f7fd fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d033      	beq.n	800322c <_printf_float+0x26c>
 80031c4:	2301      	movs	r3, #1
 80031c6:	4631      	mov	r1, r6
 80031c8:	4628      	mov	r0, r5
 80031ca:	4a35      	ldr	r2, [pc, #212]	@ (80032a0 <_printf_float+0x2e0>)
 80031cc:	47b8      	blx	r7
 80031ce:	3001      	adds	r0, #1
 80031d0:	f43f af51 	beq.w	8003076 <_printf_float+0xb6>
 80031d4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80031d8:	4543      	cmp	r3, r8
 80031da:	db02      	blt.n	80031e2 <_printf_float+0x222>
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	07d8      	lsls	r0, r3, #31
 80031e0:	d50f      	bpl.n	8003202 <_printf_float+0x242>
 80031e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80031e6:	4631      	mov	r1, r6
 80031e8:	4628      	mov	r0, r5
 80031ea:	47b8      	blx	r7
 80031ec:	3001      	adds	r0, #1
 80031ee:	f43f af42 	beq.w	8003076 <_printf_float+0xb6>
 80031f2:	f04f 0900 	mov.w	r9, #0
 80031f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80031fa:	f104 0a1a 	add.w	sl, r4, #26
 80031fe:	45c8      	cmp	r8, r9
 8003200:	dc09      	bgt.n	8003216 <_printf_float+0x256>
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	079b      	lsls	r3, r3, #30
 8003206:	f100 8102 	bmi.w	800340e <_printf_float+0x44e>
 800320a:	68e0      	ldr	r0, [r4, #12]
 800320c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800320e:	4298      	cmp	r0, r3
 8003210:	bfb8      	it	lt
 8003212:	4618      	movlt	r0, r3
 8003214:	e731      	b.n	800307a <_printf_float+0xba>
 8003216:	2301      	movs	r3, #1
 8003218:	4652      	mov	r2, sl
 800321a:	4631      	mov	r1, r6
 800321c:	4628      	mov	r0, r5
 800321e:	47b8      	blx	r7
 8003220:	3001      	adds	r0, #1
 8003222:	f43f af28 	beq.w	8003076 <_printf_float+0xb6>
 8003226:	f109 0901 	add.w	r9, r9, #1
 800322a:	e7e8      	b.n	80031fe <_printf_float+0x23e>
 800322c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800322e:	2b00      	cmp	r3, #0
 8003230:	dc38      	bgt.n	80032a4 <_printf_float+0x2e4>
 8003232:	2301      	movs	r3, #1
 8003234:	4631      	mov	r1, r6
 8003236:	4628      	mov	r0, r5
 8003238:	4a19      	ldr	r2, [pc, #100]	@ (80032a0 <_printf_float+0x2e0>)
 800323a:	47b8      	blx	r7
 800323c:	3001      	adds	r0, #1
 800323e:	f43f af1a 	beq.w	8003076 <_printf_float+0xb6>
 8003242:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003246:	ea59 0303 	orrs.w	r3, r9, r3
 800324a:	d102      	bne.n	8003252 <_printf_float+0x292>
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	07d9      	lsls	r1, r3, #31
 8003250:	d5d7      	bpl.n	8003202 <_printf_float+0x242>
 8003252:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003256:	4631      	mov	r1, r6
 8003258:	4628      	mov	r0, r5
 800325a:	47b8      	blx	r7
 800325c:	3001      	adds	r0, #1
 800325e:	f43f af0a 	beq.w	8003076 <_printf_float+0xb6>
 8003262:	f04f 0a00 	mov.w	sl, #0
 8003266:	f104 0b1a 	add.w	fp, r4, #26
 800326a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800326c:	425b      	negs	r3, r3
 800326e:	4553      	cmp	r3, sl
 8003270:	dc01      	bgt.n	8003276 <_printf_float+0x2b6>
 8003272:	464b      	mov	r3, r9
 8003274:	e793      	b.n	800319e <_printf_float+0x1de>
 8003276:	2301      	movs	r3, #1
 8003278:	465a      	mov	r2, fp
 800327a:	4631      	mov	r1, r6
 800327c:	4628      	mov	r0, r5
 800327e:	47b8      	blx	r7
 8003280:	3001      	adds	r0, #1
 8003282:	f43f aef8 	beq.w	8003076 <_printf_float+0xb6>
 8003286:	f10a 0a01 	add.w	sl, sl, #1
 800328a:	e7ee      	b.n	800326a <_printf_float+0x2aa>
 800328c:	7fefffff 	.word	0x7fefffff
 8003290:	08005bba 	.word	0x08005bba
 8003294:	08005bbe 	.word	0x08005bbe
 8003298:	08005bc2 	.word	0x08005bc2
 800329c:	08005bc6 	.word	0x08005bc6
 80032a0:	08005bca 	.word	0x08005bca
 80032a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032a6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80032aa:	4553      	cmp	r3, sl
 80032ac:	bfa8      	it	ge
 80032ae:	4653      	movge	r3, sl
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	4699      	mov	r9, r3
 80032b4:	dc36      	bgt.n	8003324 <_printf_float+0x364>
 80032b6:	f04f 0b00 	mov.w	fp, #0
 80032ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032be:	f104 021a 	add.w	r2, r4, #26
 80032c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80032c6:	eba3 0309 	sub.w	r3, r3, r9
 80032ca:	455b      	cmp	r3, fp
 80032cc:	dc31      	bgt.n	8003332 <_printf_float+0x372>
 80032ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032d0:	459a      	cmp	sl, r3
 80032d2:	dc3a      	bgt.n	800334a <_printf_float+0x38a>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	07da      	lsls	r2, r3, #31
 80032d8:	d437      	bmi.n	800334a <_printf_float+0x38a>
 80032da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032dc:	ebaa 0903 	sub.w	r9, sl, r3
 80032e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80032e2:	ebaa 0303 	sub.w	r3, sl, r3
 80032e6:	4599      	cmp	r9, r3
 80032e8:	bfa8      	it	ge
 80032ea:	4699      	movge	r9, r3
 80032ec:	f1b9 0f00 	cmp.w	r9, #0
 80032f0:	dc33      	bgt.n	800335a <_printf_float+0x39a>
 80032f2:	f04f 0800 	mov.w	r8, #0
 80032f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032fa:	f104 0b1a 	add.w	fp, r4, #26
 80032fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003300:	ebaa 0303 	sub.w	r3, sl, r3
 8003304:	eba3 0309 	sub.w	r3, r3, r9
 8003308:	4543      	cmp	r3, r8
 800330a:	f77f af7a 	ble.w	8003202 <_printf_float+0x242>
 800330e:	2301      	movs	r3, #1
 8003310:	465a      	mov	r2, fp
 8003312:	4631      	mov	r1, r6
 8003314:	4628      	mov	r0, r5
 8003316:	47b8      	blx	r7
 8003318:	3001      	adds	r0, #1
 800331a:	f43f aeac 	beq.w	8003076 <_printf_float+0xb6>
 800331e:	f108 0801 	add.w	r8, r8, #1
 8003322:	e7ec      	b.n	80032fe <_printf_float+0x33e>
 8003324:	4642      	mov	r2, r8
 8003326:	4631      	mov	r1, r6
 8003328:	4628      	mov	r0, r5
 800332a:	47b8      	blx	r7
 800332c:	3001      	adds	r0, #1
 800332e:	d1c2      	bne.n	80032b6 <_printf_float+0x2f6>
 8003330:	e6a1      	b.n	8003076 <_printf_float+0xb6>
 8003332:	2301      	movs	r3, #1
 8003334:	4631      	mov	r1, r6
 8003336:	4628      	mov	r0, r5
 8003338:	920a      	str	r2, [sp, #40]	@ 0x28
 800333a:	47b8      	blx	r7
 800333c:	3001      	adds	r0, #1
 800333e:	f43f ae9a 	beq.w	8003076 <_printf_float+0xb6>
 8003342:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003344:	f10b 0b01 	add.w	fp, fp, #1
 8003348:	e7bb      	b.n	80032c2 <_printf_float+0x302>
 800334a:	4631      	mov	r1, r6
 800334c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003350:	4628      	mov	r0, r5
 8003352:	47b8      	blx	r7
 8003354:	3001      	adds	r0, #1
 8003356:	d1c0      	bne.n	80032da <_printf_float+0x31a>
 8003358:	e68d      	b.n	8003076 <_printf_float+0xb6>
 800335a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800335c:	464b      	mov	r3, r9
 800335e:	4631      	mov	r1, r6
 8003360:	4628      	mov	r0, r5
 8003362:	4442      	add	r2, r8
 8003364:	47b8      	blx	r7
 8003366:	3001      	adds	r0, #1
 8003368:	d1c3      	bne.n	80032f2 <_printf_float+0x332>
 800336a:	e684      	b.n	8003076 <_printf_float+0xb6>
 800336c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003370:	f1ba 0f01 	cmp.w	sl, #1
 8003374:	dc01      	bgt.n	800337a <_printf_float+0x3ba>
 8003376:	07db      	lsls	r3, r3, #31
 8003378:	d536      	bpl.n	80033e8 <_printf_float+0x428>
 800337a:	2301      	movs	r3, #1
 800337c:	4642      	mov	r2, r8
 800337e:	4631      	mov	r1, r6
 8003380:	4628      	mov	r0, r5
 8003382:	47b8      	blx	r7
 8003384:	3001      	adds	r0, #1
 8003386:	f43f ae76 	beq.w	8003076 <_printf_float+0xb6>
 800338a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800338e:	4631      	mov	r1, r6
 8003390:	4628      	mov	r0, r5
 8003392:	47b8      	blx	r7
 8003394:	3001      	adds	r0, #1
 8003396:	f43f ae6e 	beq.w	8003076 <_printf_float+0xb6>
 800339a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800339e:	2200      	movs	r2, #0
 80033a0:	2300      	movs	r3, #0
 80033a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033a6:	f7fd faff 	bl	80009a8 <__aeabi_dcmpeq>
 80033aa:	b9c0      	cbnz	r0, 80033de <_printf_float+0x41e>
 80033ac:	4653      	mov	r3, sl
 80033ae:	f108 0201 	add.w	r2, r8, #1
 80033b2:	4631      	mov	r1, r6
 80033b4:	4628      	mov	r0, r5
 80033b6:	47b8      	blx	r7
 80033b8:	3001      	adds	r0, #1
 80033ba:	d10c      	bne.n	80033d6 <_printf_float+0x416>
 80033bc:	e65b      	b.n	8003076 <_printf_float+0xb6>
 80033be:	2301      	movs	r3, #1
 80033c0:	465a      	mov	r2, fp
 80033c2:	4631      	mov	r1, r6
 80033c4:	4628      	mov	r0, r5
 80033c6:	47b8      	blx	r7
 80033c8:	3001      	adds	r0, #1
 80033ca:	f43f ae54 	beq.w	8003076 <_printf_float+0xb6>
 80033ce:	f108 0801 	add.w	r8, r8, #1
 80033d2:	45d0      	cmp	r8, sl
 80033d4:	dbf3      	blt.n	80033be <_printf_float+0x3fe>
 80033d6:	464b      	mov	r3, r9
 80033d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80033dc:	e6e0      	b.n	80031a0 <_printf_float+0x1e0>
 80033de:	f04f 0800 	mov.w	r8, #0
 80033e2:	f104 0b1a 	add.w	fp, r4, #26
 80033e6:	e7f4      	b.n	80033d2 <_printf_float+0x412>
 80033e8:	2301      	movs	r3, #1
 80033ea:	4642      	mov	r2, r8
 80033ec:	e7e1      	b.n	80033b2 <_printf_float+0x3f2>
 80033ee:	2301      	movs	r3, #1
 80033f0:	464a      	mov	r2, r9
 80033f2:	4631      	mov	r1, r6
 80033f4:	4628      	mov	r0, r5
 80033f6:	47b8      	blx	r7
 80033f8:	3001      	adds	r0, #1
 80033fa:	f43f ae3c 	beq.w	8003076 <_printf_float+0xb6>
 80033fe:	f108 0801 	add.w	r8, r8, #1
 8003402:	68e3      	ldr	r3, [r4, #12]
 8003404:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003406:	1a5b      	subs	r3, r3, r1
 8003408:	4543      	cmp	r3, r8
 800340a:	dcf0      	bgt.n	80033ee <_printf_float+0x42e>
 800340c:	e6fd      	b.n	800320a <_printf_float+0x24a>
 800340e:	f04f 0800 	mov.w	r8, #0
 8003412:	f104 0919 	add.w	r9, r4, #25
 8003416:	e7f4      	b.n	8003402 <_printf_float+0x442>

08003418 <_printf_common>:
 8003418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800341c:	4616      	mov	r6, r2
 800341e:	4698      	mov	r8, r3
 8003420:	688a      	ldr	r2, [r1, #8]
 8003422:	690b      	ldr	r3, [r1, #16]
 8003424:	4607      	mov	r7, r0
 8003426:	4293      	cmp	r3, r2
 8003428:	bfb8      	it	lt
 800342a:	4613      	movlt	r3, r2
 800342c:	6033      	str	r3, [r6, #0]
 800342e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003432:	460c      	mov	r4, r1
 8003434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003438:	b10a      	cbz	r2, 800343e <_printf_common+0x26>
 800343a:	3301      	adds	r3, #1
 800343c:	6033      	str	r3, [r6, #0]
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	0699      	lsls	r1, r3, #26
 8003442:	bf42      	ittt	mi
 8003444:	6833      	ldrmi	r3, [r6, #0]
 8003446:	3302      	addmi	r3, #2
 8003448:	6033      	strmi	r3, [r6, #0]
 800344a:	6825      	ldr	r5, [r4, #0]
 800344c:	f015 0506 	ands.w	r5, r5, #6
 8003450:	d106      	bne.n	8003460 <_printf_common+0x48>
 8003452:	f104 0a19 	add.w	sl, r4, #25
 8003456:	68e3      	ldr	r3, [r4, #12]
 8003458:	6832      	ldr	r2, [r6, #0]
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	42ab      	cmp	r3, r5
 800345e:	dc2b      	bgt.n	80034b8 <_printf_common+0xa0>
 8003460:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	3b00      	subs	r3, #0
 8003468:	bf18      	it	ne
 800346a:	2301      	movne	r3, #1
 800346c:	0692      	lsls	r2, r2, #26
 800346e:	d430      	bmi.n	80034d2 <_printf_common+0xba>
 8003470:	4641      	mov	r1, r8
 8003472:	4638      	mov	r0, r7
 8003474:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003478:	47c8      	blx	r9
 800347a:	3001      	adds	r0, #1
 800347c:	d023      	beq.n	80034c6 <_printf_common+0xae>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	6922      	ldr	r2, [r4, #16]
 8003482:	f003 0306 	and.w	r3, r3, #6
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf14      	ite	ne
 800348a:	2500      	movne	r5, #0
 800348c:	6833      	ldreq	r3, [r6, #0]
 800348e:	f04f 0600 	mov.w	r6, #0
 8003492:	bf08      	it	eq
 8003494:	68e5      	ldreq	r5, [r4, #12]
 8003496:	f104 041a 	add.w	r4, r4, #26
 800349a:	bf08      	it	eq
 800349c:	1aed      	subeq	r5, r5, r3
 800349e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034a2:	bf08      	it	eq
 80034a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034a8:	4293      	cmp	r3, r2
 80034aa:	bfc4      	itt	gt
 80034ac:	1a9b      	subgt	r3, r3, r2
 80034ae:	18ed      	addgt	r5, r5, r3
 80034b0:	42b5      	cmp	r5, r6
 80034b2:	d11a      	bne.n	80034ea <_printf_common+0xd2>
 80034b4:	2000      	movs	r0, #0
 80034b6:	e008      	b.n	80034ca <_printf_common+0xb2>
 80034b8:	2301      	movs	r3, #1
 80034ba:	4652      	mov	r2, sl
 80034bc:	4641      	mov	r1, r8
 80034be:	4638      	mov	r0, r7
 80034c0:	47c8      	blx	r9
 80034c2:	3001      	adds	r0, #1
 80034c4:	d103      	bne.n	80034ce <_printf_common+0xb6>
 80034c6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ce:	3501      	adds	r5, #1
 80034d0:	e7c1      	b.n	8003456 <_printf_common+0x3e>
 80034d2:	2030      	movs	r0, #48	@ 0x30
 80034d4:	18e1      	adds	r1, r4, r3
 80034d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034e0:	4422      	add	r2, r4
 80034e2:	3302      	adds	r3, #2
 80034e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034e8:	e7c2      	b.n	8003470 <_printf_common+0x58>
 80034ea:	2301      	movs	r3, #1
 80034ec:	4622      	mov	r2, r4
 80034ee:	4641      	mov	r1, r8
 80034f0:	4638      	mov	r0, r7
 80034f2:	47c8      	blx	r9
 80034f4:	3001      	adds	r0, #1
 80034f6:	d0e6      	beq.n	80034c6 <_printf_common+0xae>
 80034f8:	3601      	adds	r6, #1
 80034fa:	e7d9      	b.n	80034b0 <_printf_common+0x98>

080034fc <_printf_i>:
 80034fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003500:	7e0f      	ldrb	r7, [r1, #24]
 8003502:	4691      	mov	r9, r2
 8003504:	2f78      	cmp	r7, #120	@ 0x78
 8003506:	4680      	mov	r8, r0
 8003508:	460c      	mov	r4, r1
 800350a:	469a      	mov	sl, r3
 800350c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800350e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003512:	d807      	bhi.n	8003524 <_printf_i+0x28>
 8003514:	2f62      	cmp	r7, #98	@ 0x62
 8003516:	d80a      	bhi.n	800352e <_printf_i+0x32>
 8003518:	2f00      	cmp	r7, #0
 800351a:	f000 80d3 	beq.w	80036c4 <_printf_i+0x1c8>
 800351e:	2f58      	cmp	r7, #88	@ 0x58
 8003520:	f000 80ba 	beq.w	8003698 <_printf_i+0x19c>
 8003524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800352c:	e03a      	b.n	80035a4 <_printf_i+0xa8>
 800352e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003532:	2b15      	cmp	r3, #21
 8003534:	d8f6      	bhi.n	8003524 <_printf_i+0x28>
 8003536:	a101      	add	r1, pc, #4	@ (adr r1, 800353c <_printf_i+0x40>)
 8003538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800353c:	08003595 	.word	0x08003595
 8003540:	080035a9 	.word	0x080035a9
 8003544:	08003525 	.word	0x08003525
 8003548:	08003525 	.word	0x08003525
 800354c:	08003525 	.word	0x08003525
 8003550:	08003525 	.word	0x08003525
 8003554:	080035a9 	.word	0x080035a9
 8003558:	08003525 	.word	0x08003525
 800355c:	08003525 	.word	0x08003525
 8003560:	08003525 	.word	0x08003525
 8003564:	08003525 	.word	0x08003525
 8003568:	080036ab 	.word	0x080036ab
 800356c:	080035d3 	.word	0x080035d3
 8003570:	08003665 	.word	0x08003665
 8003574:	08003525 	.word	0x08003525
 8003578:	08003525 	.word	0x08003525
 800357c:	080036cd 	.word	0x080036cd
 8003580:	08003525 	.word	0x08003525
 8003584:	080035d3 	.word	0x080035d3
 8003588:	08003525 	.word	0x08003525
 800358c:	08003525 	.word	0x08003525
 8003590:	0800366d 	.word	0x0800366d
 8003594:	6833      	ldr	r3, [r6, #0]
 8003596:	1d1a      	adds	r2, r3, #4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6032      	str	r2, [r6, #0]
 800359c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035a4:	2301      	movs	r3, #1
 80035a6:	e09e      	b.n	80036e6 <_printf_i+0x1ea>
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	6820      	ldr	r0, [r4, #0]
 80035ac:	1d19      	adds	r1, r3, #4
 80035ae:	6031      	str	r1, [r6, #0]
 80035b0:	0606      	lsls	r6, r0, #24
 80035b2:	d501      	bpl.n	80035b8 <_printf_i+0xbc>
 80035b4:	681d      	ldr	r5, [r3, #0]
 80035b6:	e003      	b.n	80035c0 <_printf_i+0xc4>
 80035b8:	0645      	lsls	r5, r0, #25
 80035ba:	d5fb      	bpl.n	80035b4 <_printf_i+0xb8>
 80035bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035c0:	2d00      	cmp	r5, #0
 80035c2:	da03      	bge.n	80035cc <_printf_i+0xd0>
 80035c4:	232d      	movs	r3, #45	@ 0x2d
 80035c6:	426d      	negs	r5, r5
 80035c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035cc:	230a      	movs	r3, #10
 80035ce:	4859      	ldr	r0, [pc, #356]	@ (8003734 <_printf_i+0x238>)
 80035d0:	e011      	b.n	80035f6 <_printf_i+0xfa>
 80035d2:	6821      	ldr	r1, [r4, #0]
 80035d4:	6833      	ldr	r3, [r6, #0]
 80035d6:	0608      	lsls	r0, r1, #24
 80035d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80035dc:	d402      	bmi.n	80035e4 <_printf_i+0xe8>
 80035de:	0649      	lsls	r1, r1, #25
 80035e0:	bf48      	it	mi
 80035e2:	b2ad      	uxthmi	r5, r5
 80035e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80035e6:	6033      	str	r3, [r6, #0]
 80035e8:	bf14      	ite	ne
 80035ea:	230a      	movne	r3, #10
 80035ec:	2308      	moveq	r3, #8
 80035ee:	4851      	ldr	r0, [pc, #324]	@ (8003734 <_printf_i+0x238>)
 80035f0:	2100      	movs	r1, #0
 80035f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035f6:	6866      	ldr	r6, [r4, #4]
 80035f8:	2e00      	cmp	r6, #0
 80035fa:	bfa8      	it	ge
 80035fc:	6821      	ldrge	r1, [r4, #0]
 80035fe:	60a6      	str	r6, [r4, #8]
 8003600:	bfa4      	itt	ge
 8003602:	f021 0104 	bicge.w	r1, r1, #4
 8003606:	6021      	strge	r1, [r4, #0]
 8003608:	b90d      	cbnz	r5, 800360e <_printf_i+0x112>
 800360a:	2e00      	cmp	r6, #0
 800360c:	d04b      	beq.n	80036a6 <_printf_i+0x1aa>
 800360e:	4616      	mov	r6, r2
 8003610:	fbb5 f1f3 	udiv	r1, r5, r3
 8003614:	fb03 5711 	mls	r7, r3, r1, r5
 8003618:	5dc7      	ldrb	r7, [r0, r7]
 800361a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800361e:	462f      	mov	r7, r5
 8003620:	42bb      	cmp	r3, r7
 8003622:	460d      	mov	r5, r1
 8003624:	d9f4      	bls.n	8003610 <_printf_i+0x114>
 8003626:	2b08      	cmp	r3, #8
 8003628:	d10b      	bne.n	8003642 <_printf_i+0x146>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	07df      	lsls	r7, r3, #31
 800362e:	d508      	bpl.n	8003642 <_printf_i+0x146>
 8003630:	6923      	ldr	r3, [r4, #16]
 8003632:	6861      	ldr	r1, [r4, #4]
 8003634:	4299      	cmp	r1, r3
 8003636:	bfde      	ittt	le
 8003638:	2330      	movle	r3, #48	@ 0x30
 800363a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800363e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003642:	1b92      	subs	r2, r2, r6
 8003644:	6122      	str	r2, [r4, #16]
 8003646:	464b      	mov	r3, r9
 8003648:	4621      	mov	r1, r4
 800364a:	4640      	mov	r0, r8
 800364c:	f8cd a000 	str.w	sl, [sp]
 8003650:	aa03      	add	r2, sp, #12
 8003652:	f7ff fee1 	bl	8003418 <_printf_common>
 8003656:	3001      	adds	r0, #1
 8003658:	d14a      	bne.n	80036f0 <_printf_i+0x1f4>
 800365a:	f04f 30ff 	mov.w	r0, #4294967295
 800365e:	b004      	add	sp, #16
 8003660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	f043 0320 	orr.w	r3, r3, #32
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	2778      	movs	r7, #120	@ 0x78
 800366e:	4832      	ldr	r0, [pc, #200]	@ (8003738 <_printf_i+0x23c>)
 8003670:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	6831      	ldr	r1, [r6, #0]
 8003678:	061f      	lsls	r7, r3, #24
 800367a:	f851 5b04 	ldr.w	r5, [r1], #4
 800367e:	d402      	bmi.n	8003686 <_printf_i+0x18a>
 8003680:	065f      	lsls	r7, r3, #25
 8003682:	bf48      	it	mi
 8003684:	b2ad      	uxthmi	r5, r5
 8003686:	6031      	str	r1, [r6, #0]
 8003688:	07d9      	lsls	r1, r3, #31
 800368a:	bf44      	itt	mi
 800368c:	f043 0320 	orrmi.w	r3, r3, #32
 8003690:	6023      	strmi	r3, [r4, #0]
 8003692:	b11d      	cbz	r5, 800369c <_printf_i+0x1a0>
 8003694:	2310      	movs	r3, #16
 8003696:	e7ab      	b.n	80035f0 <_printf_i+0xf4>
 8003698:	4826      	ldr	r0, [pc, #152]	@ (8003734 <_printf_i+0x238>)
 800369a:	e7e9      	b.n	8003670 <_printf_i+0x174>
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	f023 0320 	bic.w	r3, r3, #32
 80036a2:	6023      	str	r3, [r4, #0]
 80036a4:	e7f6      	b.n	8003694 <_printf_i+0x198>
 80036a6:	4616      	mov	r6, r2
 80036a8:	e7bd      	b.n	8003626 <_printf_i+0x12a>
 80036aa:	6833      	ldr	r3, [r6, #0]
 80036ac:	6825      	ldr	r5, [r4, #0]
 80036ae:	1d18      	adds	r0, r3, #4
 80036b0:	6961      	ldr	r1, [r4, #20]
 80036b2:	6030      	str	r0, [r6, #0]
 80036b4:	062e      	lsls	r6, r5, #24
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	d501      	bpl.n	80036be <_printf_i+0x1c2>
 80036ba:	6019      	str	r1, [r3, #0]
 80036bc:	e002      	b.n	80036c4 <_printf_i+0x1c8>
 80036be:	0668      	lsls	r0, r5, #25
 80036c0:	d5fb      	bpl.n	80036ba <_printf_i+0x1be>
 80036c2:	8019      	strh	r1, [r3, #0]
 80036c4:	2300      	movs	r3, #0
 80036c6:	4616      	mov	r6, r2
 80036c8:	6123      	str	r3, [r4, #16]
 80036ca:	e7bc      	b.n	8003646 <_printf_i+0x14a>
 80036cc:	6833      	ldr	r3, [r6, #0]
 80036ce:	2100      	movs	r1, #0
 80036d0:	1d1a      	adds	r2, r3, #4
 80036d2:	6032      	str	r2, [r6, #0]
 80036d4:	681e      	ldr	r6, [r3, #0]
 80036d6:	6862      	ldr	r2, [r4, #4]
 80036d8:	4630      	mov	r0, r6
 80036da:	f000 f9ec 	bl	8003ab6 <memchr>
 80036de:	b108      	cbz	r0, 80036e4 <_printf_i+0x1e8>
 80036e0:	1b80      	subs	r0, r0, r6
 80036e2:	6060      	str	r0, [r4, #4]
 80036e4:	6863      	ldr	r3, [r4, #4]
 80036e6:	6123      	str	r3, [r4, #16]
 80036e8:	2300      	movs	r3, #0
 80036ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036ee:	e7aa      	b.n	8003646 <_printf_i+0x14a>
 80036f0:	4632      	mov	r2, r6
 80036f2:	4649      	mov	r1, r9
 80036f4:	4640      	mov	r0, r8
 80036f6:	6923      	ldr	r3, [r4, #16]
 80036f8:	47d0      	blx	sl
 80036fa:	3001      	adds	r0, #1
 80036fc:	d0ad      	beq.n	800365a <_printf_i+0x15e>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	079b      	lsls	r3, r3, #30
 8003702:	d413      	bmi.n	800372c <_printf_i+0x230>
 8003704:	68e0      	ldr	r0, [r4, #12]
 8003706:	9b03      	ldr	r3, [sp, #12]
 8003708:	4298      	cmp	r0, r3
 800370a:	bfb8      	it	lt
 800370c:	4618      	movlt	r0, r3
 800370e:	e7a6      	b.n	800365e <_printf_i+0x162>
 8003710:	2301      	movs	r3, #1
 8003712:	4632      	mov	r2, r6
 8003714:	4649      	mov	r1, r9
 8003716:	4640      	mov	r0, r8
 8003718:	47d0      	blx	sl
 800371a:	3001      	adds	r0, #1
 800371c:	d09d      	beq.n	800365a <_printf_i+0x15e>
 800371e:	3501      	adds	r5, #1
 8003720:	68e3      	ldr	r3, [r4, #12]
 8003722:	9903      	ldr	r1, [sp, #12]
 8003724:	1a5b      	subs	r3, r3, r1
 8003726:	42ab      	cmp	r3, r5
 8003728:	dcf2      	bgt.n	8003710 <_printf_i+0x214>
 800372a:	e7eb      	b.n	8003704 <_printf_i+0x208>
 800372c:	2500      	movs	r5, #0
 800372e:	f104 0619 	add.w	r6, r4, #25
 8003732:	e7f5      	b.n	8003720 <_printf_i+0x224>
 8003734:	08005bcc 	.word	0x08005bcc
 8003738:	08005bdd 	.word	0x08005bdd

0800373c <std>:
 800373c:	2300      	movs	r3, #0
 800373e:	b510      	push	{r4, lr}
 8003740:	4604      	mov	r4, r0
 8003742:	e9c0 3300 	strd	r3, r3, [r0]
 8003746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800374a:	6083      	str	r3, [r0, #8]
 800374c:	8181      	strh	r1, [r0, #12]
 800374e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003750:	81c2      	strh	r2, [r0, #14]
 8003752:	6183      	str	r3, [r0, #24]
 8003754:	4619      	mov	r1, r3
 8003756:	2208      	movs	r2, #8
 8003758:	305c      	adds	r0, #92	@ 0x5c
 800375a:	f000 f92d 	bl	80039b8 <memset>
 800375e:	4b0d      	ldr	r3, [pc, #52]	@ (8003794 <std+0x58>)
 8003760:	6224      	str	r4, [r4, #32]
 8003762:	6263      	str	r3, [r4, #36]	@ 0x24
 8003764:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <std+0x5c>)
 8003766:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003768:	4b0c      	ldr	r3, [pc, #48]	@ (800379c <std+0x60>)
 800376a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <std+0x64>)
 800376e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003770:	4b0c      	ldr	r3, [pc, #48]	@ (80037a4 <std+0x68>)
 8003772:	429c      	cmp	r4, r3
 8003774:	d006      	beq.n	8003784 <std+0x48>
 8003776:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800377a:	4294      	cmp	r4, r2
 800377c:	d002      	beq.n	8003784 <std+0x48>
 800377e:	33d0      	adds	r3, #208	@ 0xd0
 8003780:	429c      	cmp	r4, r3
 8003782:	d105      	bne.n	8003790 <std+0x54>
 8003784:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800378c:	f000 b990 	b.w	8003ab0 <__retarget_lock_init_recursive>
 8003790:	bd10      	pop	{r4, pc}
 8003792:	bf00      	nop
 8003794:	080038c1 	.word	0x080038c1
 8003798:	080038e3 	.word	0x080038e3
 800379c:	0800391b 	.word	0x0800391b
 80037a0:	0800393f 	.word	0x0800393f
 80037a4:	200002b4 	.word	0x200002b4

080037a8 <stdio_exit_handler>:
 80037a8:	4a02      	ldr	r2, [pc, #8]	@ (80037b4 <stdio_exit_handler+0xc>)
 80037aa:	4903      	ldr	r1, [pc, #12]	@ (80037b8 <stdio_exit_handler+0x10>)
 80037ac:	4803      	ldr	r0, [pc, #12]	@ (80037bc <stdio_exit_handler+0x14>)
 80037ae:	f000 b869 	b.w	8003884 <_fwalk_sglue>
 80037b2:	bf00      	nop
 80037b4:	2000000c 	.word	0x2000000c
 80037b8:	08005425 	.word	0x08005425
 80037bc:	2000001c 	.word	0x2000001c

080037c0 <cleanup_stdio>:
 80037c0:	6841      	ldr	r1, [r0, #4]
 80037c2:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <cleanup_stdio+0x34>)
 80037c4:	b510      	push	{r4, lr}
 80037c6:	4299      	cmp	r1, r3
 80037c8:	4604      	mov	r4, r0
 80037ca:	d001      	beq.n	80037d0 <cleanup_stdio+0x10>
 80037cc:	f001 fe2a 	bl	8005424 <_fflush_r>
 80037d0:	68a1      	ldr	r1, [r4, #8]
 80037d2:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <cleanup_stdio+0x38>)
 80037d4:	4299      	cmp	r1, r3
 80037d6:	d002      	beq.n	80037de <cleanup_stdio+0x1e>
 80037d8:	4620      	mov	r0, r4
 80037da:	f001 fe23 	bl	8005424 <_fflush_r>
 80037de:	68e1      	ldr	r1, [r4, #12]
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <cleanup_stdio+0x3c>)
 80037e2:	4299      	cmp	r1, r3
 80037e4:	d004      	beq.n	80037f0 <cleanup_stdio+0x30>
 80037e6:	4620      	mov	r0, r4
 80037e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037ec:	f001 be1a 	b.w	8005424 <_fflush_r>
 80037f0:	bd10      	pop	{r4, pc}
 80037f2:	bf00      	nop
 80037f4:	200002b4 	.word	0x200002b4
 80037f8:	2000031c 	.word	0x2000031c
 80037fc:	20000384 	.word	0x20000384

08003800 <global_stdio_init.part.0>:
 8003800:	b510      	push	{r4, lr}
 8003802:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <global_stdio_init.part.0+0x30>)
 8003804:	4c0b      	ldr	r4, [pc, #44]	@ (8003834 <global_stdio_init.part.0+0x34>)
 8003806:	4a0c      	ldr	r2, [pc, #48]	@ (8003838 <global_stdio_init.part.0+0x38>)
 8003808:	4620      	mov	r0, r4
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	2104      	movs	r1, #4
 800380e:	2200      	movs	r2, #0
 8003810:	f7ff ff94 	bl	800373c <std>
 8003814:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003818:	2201      	movs	r2, #1
 800381a:	2109      	movs	r1, #9
 800381c:	f7ff ff8e 	bl	800373c <std>
 8003820:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003824:	2202      	movs	r2, #2
 8003826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800382a:	2112      	movs	r1, #18
 800382c:	f7ff bf86 	b.w	800373c <std>
 8003830:	200003ec 	.word	0x200003ec
 8003834:	200002b4 	.word	0x200002b4
 8003838:	080037a9 	.word	0x080037a9

0800383c <__sfp_lock_acquire>:
 800383c:	4801      	ldr	r0, [pc, #4]	@ (8003844 <__sfp_lock_acquire+0x8>)
 800383e:	f000 b938 	b.w	8003ab2 <__retarget_lock_acquire_recursive>
 8003842:	bf00      	nop
 8003844:	200003f5 	.word	0x200003f5

08003848 <__sfp_lock_release>:
 8003848:	4801      	ldr	r0, [pc, #4]	@ (8003850 <__sfp_lock_release+0x8>)
 800384a:	f000 b933 	b.w	8003ab4 <__retarget_lock_release_recursive>
 800384e:	bf00      	nop
 8003850:	200003f5 	.word	0x200003f5

08003854 <__sinit>:
 8003854:	b510      	push	{r4, lr}
 8003856:	4604      	mov	r4, r0
 8003858:	f7ff fff0 	bl	800383c <__sfp_lock_acquire>
 800385c:	6a23      	ldr	r3, [r4, #32]
 800385e:	b11b      	cbz	r3, 8003868 <__sinit+0x14>
 8003860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003864:	f7ff bff0 	b.w	8003848 <__sfp_lock_release>
 8003868:	4b04      	ldr	r3, [pc, #16]	@ (800387c <__sinit+0x28>)
 800386a:	6223      	str	r3, [r4, #32]
 800386c:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <__sinit+0x2c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f5      	bne.n	8003860 <__sinit+0xc>
 8003874:	f7ff ffc4 	bl	8003800 <global_stdio_init.part.0>
 8003878:	e7f2      	b.n	8003860 <__sinit+0xc>
 800387a:	bf00      	nop
 800387c:	080037c1 	.word	0x080037c1
 8003880:	200003ec 	.word	0x200003ec

08003884 <_fwalk_sglue>:
 8003884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003888:	4607      	mov	r7, r0
 800388a:	4688      	mov	r8, r1
 800388c:	4614      	mov	r4, r2
 800388e:	2600      	movs	r6, #0
 8003890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003894:	f1b9 0901 	subs.w	r9, r9, #1
 8003898:	d505      	bpl.n	80038a6 <_fwalk_sglue+0x22>
 800389a:	6824      	ldr	r4, [r4, #0]
 800389c:	2c00      	cmp	r4, #0
 800389e:	d1f7      	bne.n	8003890 <_fwalk_sglue+0xc>
 80038a0:	4630      	mov	r0, r6
 80038a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a6:	89ab      	ldrh	r3, [r5, #12]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d907      	bls.n	80038bc <_fwalk_sglue+0x38>
 80038ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038b0:	3301      	adds	r3, #1
 80038b2:	d003      	beq.n	80038bc <_fwalk_sglue+0x38>
 80038b4:	4629      	mov	r1, r5
 80038b6:	4638      	mov	r0, r7
 80038b8:	47c0      	blx	r8
 80038ba:	4306      	orrs	r6, r0
 80038bc:	3568      	adds	r5, #104	@ 0x68
 80038be:	e7e9      	b.n	8003894 <_fwalk_sglue+0x10>

080038c0 <__sread>:
 80038c0:	b510      	push	{r4, lr}
 80038c2:	460c      	mov	r4, r1
 80038c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c8:	f000 f8a4 	bl	8003a14 <_read_r>
 80038cc:	2800      	cmp	r0, #0
 80038ce:	bfab      	itete	ge
 80038d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80038d2:	89a3      	ldrhlt	r3, [r4, #12]
 80038d4:	181b      	addge	r3, r3, r0
 80038d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80038da:	bfac      	ite	ge
 80038dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80038de:	81a3      	strhlt	r3, [r4, #12]
 80038e0:	bd10      	pop	{r4, pc}

080038e2 <__swrite>:
 80038e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e6:	461f      	mov	r7, r3
 80038e8:	898b      	ldrh	r3, [r1, #12]
 80038ea:	4605      	mov	r5, r0
 80038ec:	05db      	lsls	r3, r3, #23
 80038ee:	460c      	mov	r4, r1
 80038f0:	4616      	mov	r6, r2
 80038f2:	d505      	bpl.n	8003900 <__swrite+0x1e>
 80038f4:	2302      	movs	r3, #2
 80038f6:	2200      	movs	r2, #0
 80038f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038fc:	f000 f878 	bl	80039f0 <_lseek_r>
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	4632      	mov	r2, r6
 8003904:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003908:	81a3      	strh	r3, [r4, #12]
 800390a:	4628      	mov	r0, r5
 800390c:	463b      	mov	r3, r7
 800390e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003916:	f000 b88f 	b.w	8003a38 <_write_r>

0800391a <__sseek>:
 800391a:	b510      	push	{r4, lr}
 800391c:	460c      	mov	r4, r1
 800391e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003922:	f000 f865 	bl	80039f0 <_lseek_r>
 8003926:	1c43      	adds	r3, r0, #1
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	bf15      	itete	ne
 800392c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800392e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003936:	81a3      	strheq	r3, [r4, #12]
 8003938:	bf18      	it	ne
 800393a:	81a3      	strhne	r3, [r4, #12]
 800393c:	bd10      	pop	{r4, pc}

0800393e <__sclose>:
 800393e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003942:	f000 b845 	b.w	80039d0 <_close_r>

08003946 <_vsniprintf_r>:
 8003946:	b530      	push	{r4, r5, lr}
 8003948:	4614      	mov	r4, r2
 800394a:	2c00      	cmp	r4, #0
 800394c:	4605      	mov	r5, r0
 800394e:	461a      	mov	r2, r3
 8003950:	b09b      	sub	sp, #108	@ 0x6c
 8003952:	da05      	bge.n	8003960 <_vsniprintf_r+0x1a>
 8003954:	238b      	movs	r3, #139	@ 0x8b
 8003956:	6003      	str	r3, [r0, #0]
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	b01b      	add	sp, #108	@ 0x6c
 800395e:	bd30      	pop	{r4, r5, pc}
 8003960:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003964:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003968:	bf0c      	ite	eq
 800396a:	4623      	moveq	r3, r4
 800396c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003970:	9302      	str	r3, [sp, #8]
 8003972:	9305      	str	r3, [sp, #20]
 8003974:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003978:	9100      	str	r1, [sp, #0]
 800397a:	9104      	str	r1, [sp, #16]
 800397c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003980:	4669      	mov	r1, sp
 8003982:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003984:	f001 fbd2 	bl	800512c <_svfiprintf_r>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	bfbc      	itt	lt
 800398c:	238b      	movlt	r3, #139	@ 0x8b
 800398e:	602b      	strlt	r3, [r5, #0]
 8003990:	2c00      	cmp	r4, #0
 8003992:	d0e3      	beq.n	800395c <_vsniprintf_r+0x16>
 8003994:	2200      	movs	r2, #0
 8003996:	9b00      	ldr	r3, [sp, #0]
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e7df      	b.n	800395c <_vsniprintf_r+0x16>

0800399c <vsniprintf>:
 800399c:	b507      	push	{r0, r1, r2, lr}
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	4613      	mov	r3, r2
 80039a2:	460a      	mov	r2, r1
 80039a4:	4601      	mov	r1, r0
 80039a6:	4803      	ldr	r0, [pc, #12]	@ (80039b4 <vsniprintf+0x18>)
 80039a8:	6800      	ldr	r0, [r0, #0]
 80039aa:	f7ff ffcc 	bl	8003946 <_vsniprintf_r>
 80039ae:	b003      	add	sp, #12
 80039b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80039b4:	20000018 	.word	0x20000018

080039b8 <memset>:
 80039b8:	4603      	mov	r3, r0
 80039ba:	4402      	add	r2, r0
 80039bc:	4293      	cmp	r3, r2
 80039be:	d100      	bne.n	80039c2 <memset+0xa>
 80039c0:	4770      	bx	lr
 80039c2:	f803 1b01 	strb.w	r1, [r3], #1
 80039c6:	e7f9      	b.n	80039bc <memset+0x4>

080039c8 <_localeconv_r>:
 80039c8:	4800      	ldr	r0, [pc, #0]	@ (80039cc <_localeconv_r+0x4>)
 80039ca:	4770      	bx	lr
 80039cc:	20000158 	.word	0x20000158

080039d0 <_close_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	2300      	movs	r3, #0
 80039d4:	4d05      	ldr	r5, [pc, #20]	@ (80039ec <_close_r+0x1c>)
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	f7fd fb25 	bl	800102a <_close>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d102      	bne.n	80039ea <_close_r+0x1a>
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	b103      	cbz	r3, 80039ea <_close_r+0x1a>
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	200003f0 	.word	0x200003f0

080039f0 <_lseek_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	4604      	mov	r4, r0
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	2200      	movs	r2, #0
 80039fa:	4d05      	ldr	r5, [pc, #20]	@ (8003a10 <_lseek_r+0x20>)
 80039fc:	602a      	str	r2, [r5, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f7fd fb37 	bl	8001072 <_lseek>
 8003a04:	1c43      	adds	r3, r0, #1
 8003a06:	d102      	bne.n	8003a0e <_lseek_r+0x1e>
 8003a08:	682b      	ldr	r3, [r5, #0]
 8003a0a:	b103      	cbz	r3, 8003a0e <_lseek_r+0x1e>
 8003a0c:	6023      	str	r3, [r4, #0]
 8003a0e:	bd38      	pop	{r3, r4, r5, pc}
 8003a10:	200003f0 	.word	0x200003f0

08003a14 <_read_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4604      	mov	r4, r0
 8003a18:	4608      	mov	r0, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4d05      	ldr	r5, [pc, #20]	@ (8003a34 <_read_r+0x20>)
 8003a20:	602a      	str	r2, [r5, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f7fd fac8 	bl	8000fb8 <_read>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_read_r+0x1e>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_read_r+0x1e>
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	200003f0 	.word	0x200003f0

08003a38 <_write_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	2200      	movs	r2, #0
 8003a42:	4d05      	ldr	r5, [pc, #20]	@ (8003a58 <_write_r+0x20>)
 8003a44:	602a      	str	r2, [r5, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f7fd fad3 	bl	8000ff2 <_write>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	d102      	bne.n	8003a56 <_write_r+0x1e>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	b103      	cbz	r3, 8003a56 <_write_r+0x1e>
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
 8003a58:	200003f0 	.word	0x200003f0

08003a5c <__errno>:
 8003a5c:	4b01      	ldr	r3, [pc, #4]	@ (8003a64 <__errno+0x8>)
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000018 	.word	0x20000018

08003a68 <__libc_init_array>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	2600      	movs	r6, #0
 8003a6c:	4d0c      	ldr	r5, [pc, #48]	@ (8003aa0 <__libc_init_array+0x38>)
 8003a6e:	4c0d      	ldr	r4, [pc, #52]	@ (8003aa4 <__libc_init_array+0x3c>)
 8003a70:	1b64      	subs	r4, r4, r5
 8003a72:	10a4      	asrs	r4, r4, #2
 8003a74:	42a6      	cmp	r6, r4
 8003a76:	d109      	bne.n	8003a8c <__libc_init_array+0x24>
 8003a78:	f002 f870 	bl	8005b5c <_init>
 8003a7c:	2600      	movs	r6, #0
 8003a7e:	4d0a      	ldr	r5, [pc, #40]	@ (8003aa8 <__libc_init_array+0x40>)
 8003a80:	4c0a      	ldr	r4, [pc, #40]	@ (8003aac <__libc_init_array+0x44>)
 8003a82:	1b64      	subs	r4, r4, r5
 8003a84:	10a4      	asrs	r4, r4, #2
 8003a86:	42a6      	cmp	r6, r4
 8003a88:	d105      	bne.n	8003a96 <__libc_init_array+0x2e>
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a90:	4798      	blx	r3
 8003a92:	3601      	adds	r6, #1
 8003a94:	e7ee      	b.n	8003a74 <__libc_init_array+0xc>
 8003a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9a:	4798      	blx	r3
 8003a9c:	3601      	adds	r6, #1
 8003a9e:	e7f2      	b.n	8003a86 <__libc_init_array+0x1e>
 8003aa0:	08005f30 	.word	0x08005f30
 8003aa4:	08005f30 	.word	0x08005f30
 8003aa8:	08005f30 	.word	0x08005f30
 8003aac:	08005f34 	.word	0x08005f34

08003ab0 <__retarget_lock_init_recursive>:
 8003ab0:	4770      	bx	lr

08003ab2 <__retarget_lock_acquire_recursive>:
 8003ab2:	4770      	bx	lr

08003ab4 <__retarget_lock_release_recursive>:
 8003ab4:	4770      	bx	lr

08003ab6 <memchr>:
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	b2c9      	uxtb	r1, r1
 8003abc:	4402      	add	r2, r0
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	d101      	bne.n	8003ac8 <memchr+0x12>
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	e003      	b.n	8003ad0 <memchr+0x1a>
 8003ac8:	7804      	ldrb	r4, [r0, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	428c      	cmp	r4, r1
 8003ace:	d1f6      	bne.n	8003abe <memchr+0x8>
 8003ad0:	bd10      	pop	{r4, pc}

08003ad2 <quorem>:
 8003ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad6:	6903      	ldr	r3, [r0, #16]
 8003ad8:	690c      	ldr	r4, [r1, #16]
 8003ada:	4607      	mov	r7, r0
 8003adc:	42a3      	cmp	r3, r4
 8003ade:	db7e      	blt.n	8003bde <quorem+0x10c>
 8003ae0:	3c01      	subs	r4, #1
 8003ae2:	00a3      	lsls	r3, r4, #2
 8003ae4:	f100 0514 	add.w	r5, r0, #20
 8003ae8:	f101 0814 	add.w	r8, r1, #20
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003af8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003afc:	3301      	adds	r3, #1
 8003afe:	429a      	cmp	r2, r3
 8003b00:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b08:	d32e      	bcc.n	8003b68 <quorem+0x96>
 8003b0a:	f04f 0a00 	mov.w	sl, #0
 8003b0e:	46c4      	mov	ip, r8
 8003b10:	46ae      	mov	lr, r5
 8003b12:	46d3      	mov	fp, sl
 8003b14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003b18:	b298      	uxth	r0, r3
 8003b1a:	fb06 a000 	mla	r0, r6, r0, sl
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	0c02      	lsrs	r2, r0, #16
 8003b22:	fb06 2303 	mla	r3, r6, r3, r2
 8003b26:	f8de 2000 	ldr.w	r2, [lr]
 8003b2a:	b280      	uxth	r0, r0
 8003b2c:	b292      	uxth	r2, r2
 8003b2e:	1a12      	subs	r2, r2, r0
 8003b30:	445a      	add	r2, fp
 8003b32:	f8de 0000 	ldr.w	r0, [lr]
 8003b36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003b40:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003b44:	b292      	uxth	r2, r2
 8003b46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003b4a:	45e1      	cmp	r9, ip
 8003b4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003b50:	f84e 2b04 	str.w	r2, [lr], #4
 8003b54:	d2de      	bcs.n	8003b14 <quorem+0x42>
 8003b56:	9b00      	ldr	r3, [sp, #0]
 8003b58:	58eb      	ldr	r3, [r5, r3]
 8003b5a:	b92b      	cbnz	r3, 8003b68 <quorem+0x96>
 8003b5c:	9b01      	ldr	r3, [sp, #4]
 8003b5e:	3b04      	subs	r3, #4
 8003b60:	429d      	cmp	r5, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	d32f      	bcc.n	8003bc6 <quorem+0xf4>
 8003b66:	613c      	str	r4, [r7, #16]
 8003b68:	4638      	mov	r0, r7
 8003b6a:	f001 f97b 	bl	8004e64 <__mcmp>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	db25      	blt.n	8003bbe <quorem+0xec>
 8003b72:	4629      	mov	r1, r5
 8003b74:	2000      	movs	r0, #0
 8003b76:	f858 2b04 	ldr.w	r2, [r8], #4
 8003b7a:	f8d1 c000 	ldr.w	ip, [r1]
 8003b7e:	fa1f fe82 	uxth.w	lr, r2
 8003b82:	fa1f f38c 	uxth.w	r3, ip
 8003b86:	eba3 030e 	sub.w	r3, r3, lr
 8003b8a:	4403      	add	r3, r0
 8003b8c:	0c12      	lsrs	r2, r2, #16
 8003b8e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003b92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b9c:	45c1      	cmp	r9, r8
 8003b9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003ba2:	f841 3b04 	str.w	r3, [r1], #4
 8003ba6:	d2e6      	bcs.n	8003b76 <quorem+0xa4>
 8003ba8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bb0:	b922      	cbnz	r2, 8003bbc <quorem+0xea>
 8003bb2:	3b04      	subs	r3, #4
 8003bb4:	429d      	cmp	r5, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	d30b      	bcc.n	8003bd2 <quorem+0x100>
 8003bba:	613c      	str	r4, [r7, #16]
 8003bbc:	3601      	adds	r6, #1
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	b003      	add	sp, #12
 8003bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	3b04      	subs	r3, #4
 8003bca:	2a00      	cmp	r2, #0
 8003bcc:	d1cb      	bne.n	8003b66 <quorem+0x94>
 8003bce:	3c01      	subs	r4, #1
 8003bd0:	e7c6      	b.n	8003b60 <quorem+0x8e>
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	3b04      	subs	r3, #4
 8003bd6:	2a00      	cmp	r2, #0
 8003bd8:	d1ef      	bne.n	8003bba <quorem+0xe8>
 8003bda:	3c01      	subs	r4, #1
 8003bdc:	e7ea      	b.n	8003bb4 <quorem+0xe2>
 8003bde:	2000      	movs	r0, #0
 8003be0:	e7ee      	b.n	8003bc0 <quorem+0xee>
 8003be2:	0000      	movs	r0, r0
 8003be4:	0000      	movs	r0, r0
	...

08003be8 <_dtoa_r>:
 8003be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bec:	4614      	mov	r4, r2
 8003bee:	461d      	mov	r5, r3
 8003bf0:	69c7      	ldr	r7, [r0, #28]
 8003bf2:	b097      	sub	sp, #92	@ 0x5c
 8003bf4:	4683      	mov	fp, r0
 8003bf6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003bfa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003bfc:	b97f      	cbnz	r7, 8003c1e <_dtoa_r+0x36>
 8003bfe:	2010      	movs	r0, #16
 8003c00:	f000 fe02 	bl	8004808 <malloc>
 8003c04:	4602      	mov	r2, r0
 8003c06:	f8cb 001c 	str.w	r0, [fp, #28]
 8003c0a:	b920      	cbnz	r0, 8003c16 <_dtoa_r+0x2e>
 8003c0c:	21ef      	movs	r1, #239	@ 0xef
 8003c0e:	4ba8      	ldr	r3, [pc, #672]	@ (8003eb0 <_dtoa_r+0x2c8>)
 8003c10:	48a8      	ldr	r0, [pc, #672]	@ (8003eb4 <_dtoa_r+0x2cc>)
 8003c12:	f001 fc67 	bl	80054e4 <__assert_func>
 8003c16:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003c1a:	6007      	str	r7, [r0, #0]
 8003c1c:	60c7      	str	r7, [r0, #12]
 8003c1e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	b159      	cbz	r1, 8003c3e <_dtoa_r+0x56>
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	2301      	movs	r3, #1
 8003c2a:	4093      	lsls	r3, r2
 8003c2c:	604a      	str	r2, [r1, #4]
 8003c2e:	608b      	str	r3, [r1, #8]
 8003c30:	4658      	mov	r0, fp
 8003c32:	f000 fedf 	bl	80049f4 <_Bfree>
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	1e2b      	subs	r3, r5, #0
 8003c40:	bfaf      	iteee	ge
 8003c42:	2300      	movge	r3, #0
 8003c44:	2201      	movlt	r2, #1
 8003c46:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003c4a:	9303      	strlt	r3, [sp, #12]
 8003c4c:	bfa8      	it	ge
 8003c4e:	6033      	strge	r3, [r6, #0]
 8003c50:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003c54:	4b98      	ldr	r3, [pc, #608]	@ (8003eb8 <_dtoa_r+0x2d0>)
 8003c56:	bfb8      	it	lt
 8003c58:	6032      	strlt	r2, [r6, #0]
 8003c5a:	ea33 0308 	bics.w	r3, r3, r8
 8003c5e:	d112      	bne.n	8003c86 <_dtoa_r+0x9e>
 8003c60:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003c64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003c6c:	4323      	orrs	r3, r4
 8003c6e:	f000 8550 	beq.w	8004712 <_dtoa_r+0xb2a>
 8003c72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003c74:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003ebc <_dtoa_r+0x2d4>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8552 	beq.w	8004722 <_dtoa_r+0xb3a>
 8003c7e:	f10a 0303 	add.w	r3, sl, #3
 8003c82:	f000 bd4c 	b.w	800471e <_dtoa_r+0xb36>
 8003c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c92:	2200      	movs	r2, #0
 8003c94:	2300      	movs	r3, #0
 8003c96:	f7fc fe87 	bl	80009a8 <__aeabi_dcmpeq>
 8003c9a:	4607      	mov	r7, r0
 8003c9c:	b158      	cbz	r0, 8003cb6 <_dtoa_r+0xce>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003ca6:	b113      	cbz	r3, 8003cae <_dtoa_r+0xc6>
 8003ca8:	4b85      	ldr	r3, [pc, #532]	@ (8003ec0 <_dtoa_r+0x2d8>)
 8003caa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003ec4 <_dtoa_r+0x2dc>
 8003cb2:	f000 bd36 	b.w	8004722 <_dtoa_r+0xb3a>
 8003cb6:	ab14      	add	r3, sp, #80	@ 0x50
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	ab15      	add	r3, sp, #84	@ 0x54
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	4658      	mov	r0, fp
 8003cc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003cc4:	f001 f97e 	bl	8004fc4 <__d2b>
 8003cc8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003ccc:	4681      	mov	r9, r0
 8003cce:	2e00      	cmp	r6, #0
 8003cd0:	d077      	beq.n	8003dc2 <_dtoa_r+0x1da>
 8003cd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003cd8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003ce4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003ce8:	9712      	str	r7, [sp, #72]	@ 0x48
 8003cea:	4619      	mov	r1, r3
 8003cec:	2200      	movs	r2, #0
 8003cee:	4b76      	ldr	r3, [pc, #472]	@ (8003ec8 <_dtoa_r+0x2e0>)
 8003cf0:	f7fc fa3a 	bl	8000168 <__aeabi_dsub>
 8003cf4:	a368      	add	r3, pc, #416	@ (adr r3, 8003e98 <_dtoa_r+0x2b0>)
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f7fc fbed 	bl	80004d8 <__aeabi_dmul>
 8003cfe:	a368      	add	r3, pc, #416	@ (adr r3, 8003ea0 <_dtoa_r+0x2b8>)
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f7fc fa32 	bl	800016c <__adddf3>
 8003d08:	4604      	mov	r4, r0
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	460d      	mov	r5, r1
 8003d0e:	f7fc fb79 	bl	8000404 <__aeabi_i2d>
 8003d12:	a365      	add	r3, pc, #404	@ (adr r3, 8003ea8 <_dtoa_r+0x2c0>)
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f7fc fbde 	bl	80004d8 <__aeabi_dmul>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4620      	mov	r0, r4
 8003d22:	4629      	mov	r1, r5
 8003d24:	f7fc fa22 	bl	800016c <__adddf3>
 8003d28:	4604      	mov	r4, r0
 8003d2a:	460d      	mov	r5, r1
 8003d2c:	f7fc fe84 	bl	8000a38 <__aeabi_d2iz>
 8003d30:	2200      	movs	r2, #0
 8003d32:	4607      	mov	r7, r0
 8003d34:	2300      	movs	r3, #0
 8003d36:	4620      	mov	r0, r4
 8003d38:	4629      	mov	r1, r5
 8003d3a:	f7fc fe3f 	bl	80009bc <__aeabi_dcmplt>
 8003d3e:	b140      	cbz	r0, 8003d52 <_dtoa_r+0x16a>
 8003d40:	4638      	mov	r0, r7
 8003d42:	f7fc fb5f 	bl	8000404 <__aeabi_i2d>
 8003d46:	4622      	mov	r2, r4
 8003d48:	462b      	mov	r3, r5
 8003d4a:	f7fc fe2d 	bl	80009a8 <__aeabi_dcmpeq>
 8003d4e:	b900      	cbnz	r0, 8003d52 <_dtoa_r+0x16a>
 8003d50:	3f01      	subs	r7, #1
 8003d52:	2f16      	cmp	r7, #22
 8003d54:	d853      	bhi.n	8003dfe <_dtoa_r+0x216>
 8003d56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ecc <_dtoa_r+0x2e4>)
 8003d5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc fe2a 	bl	80009bc <__aeabi_dcmplt>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d04a      	beq.n	8003e02 <_dtoa_r+0x21a>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	3f01      	subs	r7, #1
 8003d70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003d72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d74:	1b9b      	subs	r3, r3, r6
 8003d76:	1e5a      	subs	r2, r3, #1
 8003d78:	bf46      	itte	mi
 8003d7a:	f1c3 0801 	rsbmi	r8, r3, #1
 8003d7e:	2300      	movmi	r3, #0
 8003d80:	f04f 0800 	movpl.w	r8, #0
 8003d84:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d86:	bf48      	it	mi
 8003d88:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003d8a:	2f00      	cmp	r7, #0
 8003d8c:	db3b      	blt.n	8003e06 <_dtoa_r+0x21e>
 8003d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d90:	970e      	str	r7, [sp, #56]	@ 0x38
 8003d92:	443b      	add	r3, r7
 8003d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d96:	2300      	movs	r3, #0
 8003d98:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d9c:	2b09      	cmp	r3, #9
 8003d9e:	d866      	bhi.n	8003e6e <_dtoa_r+0x286>
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	bfc4      	itt	gt
 8003da4:	3b04      	subgt	r3, #4
 8003da6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003da8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003daa:	bfc8      	it	gt
 8003dac:	2400      	movgt	r4, #0
 8003dae:	f1a3 0302 	sub.w	r3, r3, #2
 8003db2:	bfd8      	it	le
 8003db4:	2401      	movle	r4, #1
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d864      	bhi.n	8003e84 <_dtoa_r+0x29c>
 8003dba:	e8df f003 	tbb	[pc, r3]
 8003dbe:	382b      	.short	0x382b
 8003dc0:	5636      	.short	0x5636
 8003dc2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003dc6:	441e      	add	r6, r3
 8003dc8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	bfc1      	itttt	gt
 8003dd0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003dd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8003dd8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003ddc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003de0:	bfd6      	itet	le
 8003de2:	f1c3 0320 	rsble	r3, r3, #32
 8003de6:	ea48 0003 	orrgt.w	r0, r8, r3
 8003dea:	fa04 f003 	lslle.w	r0, r4, r3
 8003dee:	f7fc faf9 	bl	80003e4 <__aeabi_ui2d>
 8003df2:	2201      	movs	r2, #1
 8003df4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003df8:	3e01      	subs	r6, #1
 8003dfa:	9212      	str	r2, [sp, #72]	@ 0x48
 8003dfc:	e775      	b.n	8003cea <_dtoa_r+0x102>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e7b6      	b.n	8003d70 <_dtoa_r+0x188>
 8003e02:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003e04:	e7b5      	b.n	8003d72 <_dtoa_r+0x18a>
 8003e06:	427b      	negs	r3, r7
 8003e08:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	eba8 0807 	sub.w	r8, r8, r7
 8003e10:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e12:	e7c2      	b.n	8003d9a <_dtoa_r+0x1b2>
 8003e14:	2300      	movs	r3, #0
 8003e16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	dc35      	bgt.n	8003e8a <_dtoa_r+0x2a2>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	461a      	mov	r2, r3
 8003e22:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e26:	9221      	str	r2, [sp, #132]	@ 0x84
 8003e28:	e00b      	b.n	8003e42 <_dtoa_r+0x25a>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e7f3      	b.n	8003e16 <_dtoa_r+0x22e>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	9308      	str	r3, [sp, #32]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	9307      	str	r3, [sp, #28]
 8003e3e:	bfb8      	it	lt
 8003e40:	2301      	movlt	r3, #1
 8003e42:	2100      	movs	r1, #0
 8003e44:	2204      	movs	r2, #4
 8003e46:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003e4a:	f102 0514 	add.w	r5, r2, #20
 8003e4e:	429d      	cmp	r5, r3
 8003e50:	d91f      	bls.n	8003e92 <_dtoa_r+0x2aa>
 8003e52:	6041      	str	r1, [r0, #4]
 8003e54:	4658      	mov	r0, fp
 8003e56:	f000 fd8d 	bl	8004974 <_Balloc>
 8003e5a:	4682      	mov	sl, r0
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d139      	bne.n	8003ed4 <_dtoa_r+0x2ec>
 8003e60:	4602      	mov	r2, r0
 8003e62:	f240 11af 	movw	r1, #431	@ 0x1af
 8003e66:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed0 <_dtoa_r+0x2e8>)
 8003e68:	e6d2      	b.n	8003c10 <_dtoa_r+0x28>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e7e0      	b.n	8003e30 <_dtoa_r+0x248>
 8003e6e:	2401      	movs	r4, #1
 8003e70:	2300      	movs	r3, #0
 8003e72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003e74:	9320      	str	r3, [sp, #128]	@ 0x80
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e80:	2312      	movs	r3, #18
 8003e82:	e7d0      	b.n	8003e26 <_dtoa_r+0x23e>
 8003e84:	2301      	movs	r3, #1
 8003e86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e88:	e7f5      	b.n	8003e76 <_dtoa_r+0x28e>
 8003e8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e90:	e7d7      	b.n	8003e42 <_dtoa_r+0x25a>
 8003e92:	3101      	adds	r1, #1
 8003e94:	0052      	lsls	r2, r2, #1
 8003e96:	e7d8      	b.n	8003e4a <_dtoa_r+0x262>
 8003e98:	636f4361 	.word	0x636f4361
 8003e9c:	3fd287a7 	.word	0x3fd287a7
 8003ea0:	8b60c8b3 	.word	0x8b60c8b3
 8003ea4:	3fc68a28 	.word	0x3fc68a28
 8003ea8:	509f79fb 	.word	0x509f79fb
 8003eac:	3fd34413 	.word	0x3fd34413
 8003eb0:	08005bfb 	.word	0x08005bfb
 8003eb4:	08005c12 	.word	0x08005c12
 8003eb8:	7ff00000 	.word	0x7ff00000
 8003ebc:	08005bf7 	.word	0x08005bf7
 8003ec0:	08005bcb 	.word	0x08005bcb
 8003ec4:	08005bca 	.word	0x08005bca
 8003ec8:	3ff80000 	.word	0x3ff80000
 8003ecc:	08005d08 	.word	0x08005d08
 8003ed0:	08005c6a 	.word	0x08005c6a
 8003ed4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003ed8:	6018      	str	r0, [r3, #0]
 8003eda:	9b07      	ldr	r3, [sp, #28]
 8003edc:	2b0e      	cmp	r3, #14
 8003ede:	f200 80a4 	bhi.w	800402a <_dtoa_r+0x442>
 8003ee2:	2c00      	cmp	r4, #0
 8003ee4:	f000 80a1 	beq.w	800402a <_dtoa_r+0x442>
 8003ee8:	2f00      	cmp	r7, #0
 8003eea:	dd33      	ble.n	8003f54 <_dtoa_r+0x36c>
 8003eec:	4b86      	ldr	r3, [pc, #536]	@ (8004108 <_dtoa_r+0x520>)
 8003eee:	f007 020f 	and.w	r2, r7, #15
 8003ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ef6:	05f8      	lsls	r0, r7, #23
 8003ef8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003efc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003f04:	d516      	bpl.n	8003f34 <_dtoa_r+0x34c>
 8003f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f0a:	4b80      	ldr	r3, [pc, #512]	@ (800410c <_dtoa_r+0x524>)
 8003f0c:	2603      	movs	r6, #3
 8003f0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f12:	f7fc fc0b 	bl	800072c <__aeabi_ddiv>
 8003f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f1a:	f004 040f 	and.w	r4, r4, #15
 8003f1e:	4d7b      	ldr	r5, [pc, #492]	@ (800410c <_dtoa_r+0x524>)
 8003f20:	b954      	cbnz	r4, 8003f38 <_dtoa_r+0x350>
 8003f22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f2a:	f7fc fbff 	bl	800072c <__aeabi_ddiv>
 8003f2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f32:	e028      	b.n	8003f86 <_dtoa_r+0x39e>
 8003f34:	2602      	movs	r6, #2
 8003f36:	e7f2      	b.n	8003f1e <_dtoa_r+0x336>
 8003f38:	07e1      	lsls	r1, r4, #31
 8003f3a:	d508      	bpl.n	8003f4e <_dtoa_r+0x366>
 8003f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f44:	f7fc fac8 	bl	80004d8 <__aeabi_dmul>
 8003f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f4c:	3601      	adds	r6, #1
 8003f4e:	1064      	asrs	r4, r4, #1
 8003f50:	3508      	adds	r5, #8
 8003f52:	e7e5      	b.n	8003f20 <_dtoa_r+0x338>
 8003f54:	f000 80d2 	beq.w	80040fc <_dtoa_r+0x514>
 8003f58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f5c:	427c      	negs	r4, r7
 8003f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004108 <_dtoa_r+0x520>)
 8003f60:	f004 020f 	and.w	r2, r4, #15
 8003f64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc fab4 	bl	80004d8 <__aeabi_dmul>
 8003f70:	2602      	movs	r6, #2
 8003f72:	2300      	movs	r3, #0
 8003f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f78:	4d64      	ldr	r5, [pc, #400]	@ (800410c <_dtoa_r+0x524>)
 8003f7a:	1124      	asrs	r4, r4, #4
 8003f7c:	2c00      	cmp	r4, #0
 8003f7e:	f040 80b2 	bne.w	80040e6 <_dtoa_r+0x4fe>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1d3      	bne.n	8003f2e <_dtoa_r+0x346>
 8003f86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003f8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80b7 	beq.w	8004100 <_dtoa_r+0x518>
 8003f92:	2200      	movs	r2, #0
 8003f94:	4620      	mov	r0, r4
 8003f96:	4629      	mov	r1, r5
 8003f98:	4b5d      	ldr	r3, [pc, #372]	@ (8004110 <_dtoa_r+0x528>)
 8003f9a:	f7fc fd0f 	bl	80009bc <__aeabi_dcmplt>
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	f000 80ae 	beq.w	8004100 <_dtoa_r+0x518>
 8003fa4:	9b07      	ldr	r3, [sp, #28]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80aa 	beq.w	8004100 <_dtoa_r+0x518>
 8003fac:	9b08      	ldr	r3, [sp, #32]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	dd37      	ble.n	8004022 <_dtoa_r+0x43a>
 8003fb2:	1e7b      	subs	r3, r7, #1
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4b55      	ldr	r3, [pc, #340]	@ (8004114 <_dtoa_r+0x52c>)
 8003fbe:	f7fc fa8b 	bl	80004d8 <__aeabi_dmul>
 8003fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fc6:	9c08      	ldr	r4, [sp, #32]
 8003fc8:	3601      	adds	r6, #1
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f7fc fa1a 	bl	8000404 <__aeabi_i2d>
 8003fd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fd4:	f7fc fa80 	bl	80004d8 <__aeabi_dmul>
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4b4f      	ldr	r3, [pc, #316]	@ (8004118 <_dtoa_r+0x530>)
 8003fdc:	f7fc f8c6 	bl	800016c <__adddf3>
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003fe6:	2c00      	cmp	r4, #0
 8003fe8:	f040 809a 	bne.w	8004120 <_dtoa_r+0x538>
 8003fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800411c <_dtoa_r+0x534>)
 8003ff4:	f7fc f8b8 	bl	8000168 <__aeabi_dsub>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004000:	462a      	mov	r2, r5
 8004002:	4633      	mov	r3, r6
 8004004:	f7fc fcf8 	bl	80009f8 <__aeabi_dcmpgt>
 8004008:	2800      	cmp	r0, #0
 800400a:	f040 828e 	bne.w	800452a <_dtoa_r+0x942>
 800400e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004012:	462a      	mov	r2, r5
 8004014:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004018:	f7fc fcd0 	bl	80009bc <__aeabi_dcmplt>
 800401c:	2800      	cmp	r0, #0
 800401e:	f040 8127 	bne.w	8004270 <_dtoa_r+0x688>
 8004022:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004026:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800402a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800402c:	2b00      	cmp	r3, #0
 800402e:	f2c0 8163 	blt.w	80042f8 <_dtoa_r+0x710>
 8004032:	2f0e      	cmp	r7, #14
 8004034:	f300 8160 	bgt.w	80042f8 <_dtoa_r+0x710>
 8004038:	4b33      	ldr	r3, [pc, #204]	@ (8004108 <_dtoa_r+0x520>)
 800403a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800403e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004042:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004046:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004048:	2b00      	cmp	r3, #0
 800404a:	da03      	bge.n	8004054 <_dtoa_r+0x46c>
 800404c:	9b07      	ldr	r3, [sp, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f340 8100 	ble.w	8004254 <_dtoa_r+0x66c>
 8004054:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004058:	4656      	mov	r6, sl
 800405a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800405e:	4620      	mov	r0, r4
 8004060:	4629      	mov	r1, r5
 8004062:	f7fc fb63 	bl	800072c <__aeabi_ddiv>
 8004066:	f7fc fce7 	bl	8000a38 <__aeabi_d2iz>
 800406a:	4680      	mov	r8, r0
 800406c:	f7fc f9ca 	bl	8000404 <__aeabi_i2d>
 8004070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004074:	f7fc fa30 	bl	80004d8 <__aeabi_dmul>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4620      	mov	r0, r4
 800407e:	4629      	mov	r1, r5
 8004080:	f7fc f872 	bl	8000168 <__aeabi_dsub>
 8004084:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004088:	9d07      	ldr	r5, [sp, #28]
 800408a:	f806 4b01 	strb.w	r4, [r6], #1
 800408e:	eba6 040a 	sub.w	r4, r6, sl
 8004092:	42a5      	cmp	r5, r4
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	f040 8116 	bne.w	80042c8 <_dtoa_r+0x6e0>
 800409c:	f7fc f866 	bl	800016c <__adddf3>
 80040a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040a4:	4604      	mov	r4, r0
 80040a6:	460d      	mov	r5, r1
 80040a8:	f7fc fca6 	bl	80009f8 <__aeabi_dcmpgt>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	f040 80f8 	bne.w	80042a2 <_dtoa_r+0x6ba>
 80040b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040b6:	4620      	mov	r0, r4
 80040b8:	4629      	mov	r1, r5
 80040ba:	f7fc fc75 	bl	80009a8 <__aeabi_dcmpeq>
 80040be:	b118      	cbz	r0, 80040c8 <_dtoa_r+0x4e0>
 80040c0:	f018 0f01 	tst.w	r8, #1
 80040c4:	f040 80ed 	bne.w	80042a2 <_dtoa_r+0x6ba>
 80040c8:	4649      	mov	r1, r9
 80040ca:	4658      	mov	r0, fp
 80040cc:	f000 fc92 	bl	80049f4 <_Bfree>
 80040d0:	2300      	movs	r3, #0
 80040d2:	7033      	strb	r3, [r6, #0]
 80040d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80040d6:	3701      	adds	r7, #1
 80040d8:	601f      	str	r7, [r3, #0]
 80040da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8320 	beq.w	8004722 <_dtoa_r+0xb3a>
 80040e2:	601e      	str	r6, [r3, #0]
 80040e4:	e31d      	b.n	8004722 <_dtoa_r+0xb3a>
 80040e6:	07e2      	lsls	r2, r4, #31
 80040e8:	d505      	bpl.n	80040f6 <_dtoa_r+0x50e>
 80040ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040ee:	f7fc f9f3 	bl	80004d8 <__aeabi_dmul>
 80040f2:	2301      	movs	r3, #1
 80040f4:	3601      	adds	r6, #1
 80040f6:	1064      	asrs	r4, r4, #1
 80040f8:	3508      	adds	r5, #8
 80040fa:	e73f      	b.n	8003f7c <_dtoa_r+0x394>
 80040fc:	2602      	movs	r6, #2
 80040fe:	e742      	b.n	8003f86 <_dtoa_r+0x39e>
 8004100:	9c07      	ldr	r4, [sp, #28]
 8004102:	9704      	str	r7, [sp, #16]
 8004104:	e761      	b.n	8003fca <_dtoa_r+0x3e2>
 8004106:	bf00      	nop
 8004108:	08005d08 	.word	0x08005d08
 800410c:	08005ce0 	.word	0x08005ce0
 8004110:	3ff00000 	.word	0x3ff00000
 8004114:	40240000 	.word	0x40240000
 8004118:	401c0000 	.word	0x401c0000
 800411c:	40140000 	.word	0x40140000
 8004120:	4b70      	ldr	r3, [pc, #448]	@ (80042e4 <_dtoa_r+0x6fc>)
 8004122:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004128:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800412c:	4454      	add	r4, sl
 800412e:	2900      	cmp	r1, #0
 8004130:	d045      	beq.n	80041be <_dtoa_r+0x5d6>
 8004132:	2000      	movs	r0, #0
 8004134:	496c      	ldr	r1, [pc, #432]	@ (80042e8 <_dtoa_r+0x700>)
 8004136:	f7fc faf9 	bl	800072c <__aeabi_ddiv>
 800413a:	4633      	mov	r3, r6
 800413c:	462a      	mov	r2, r5
 800413e:	f7fc f813 	bl	8000168 <__aeabi_dsub>
 8004142:	4656      	mov	r6, sl
 8004144:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800414c:	f7fc fc74 	bl	8000a38 <__aeabi_d2iz>
 8004150:	4605      	mov	r5, r0
 8004152:	f7fc f957 	bl	8000404 <__aeabi_i2d>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800415e:	f7fc f803 	bl	8000168 <__aeabi_dsub>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	3530      	adds	r5, #48	@ 0x30
 8004168:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800416c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004170:	f806 5b01 	strb.w	r5, [r6], #1
 8004174:	f7fc fc22 	bl	80009bc <__aeabi_dcmplt>
 8004178:	2800      	cmp	r0, #0
 800417a:	d163      	bne.n	8004244 <_dtoa_r+0x65c>
 800417c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004180:	2000      	movs	r0, #0
 8004182:	495a      	ldr	r1, [pc, #360]	@ (80042ec <_dtoa_r+0x704>)
 8004184:	f7fb fff0 	bl	8000168 <__aeabi_dsub>
 8004188:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800418c:	f7fc fc16 	bl	80009bc <__aeabi_dcmplt>
 8004190:	2800      	cmp	r0, #0
 8004192:	f040 8087 	bne.w	80042a4 <_dtoa_r+0x6bc>
 8004196:	42a6      	cmp	r6, r4
 8004198:	f43f af43 	beq.w	8004022 <_dtoa_r+0x43a>
 800419c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80041a0:	2200      	movs	r2, #0
 80041a2:	4b53      	ldr	r3, [pc, #332]	@ (80042f0 <_dtoa_r+0x708>)
 80041a4:	f7fc f998 	bl	80004d8 <__aeabi_dmul>
 80041a8:	2200      	movs	r2, #0
 80041aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80041ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041b2:	4b4f      	ldr	r3, [pc, #316]	@ (80042f0 <_dtoa_r+0x708>)
 80041b4:	f7fc f990 	bl	80004d8 <__aeabi_dmul>
 80041b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041bc:	e7c4      	b.n	8004148 <_dtoa_r+0x560>
 80041be:	4631      	mov	r1, r6
 80041c0:	4628      	mov	r0, r5
 80041c2:	f7fc f989 	bl	80004d8 <__aeabi_dmul>
 80041c6:	4656      	mov	r6, sl
 80041c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80041cc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80041ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041d2:	f7fc fc31 	bl	8000a38 <__aeabi_d2iz>
 80041d6:	4605      	mov	r5, r0
 80041d8:	f7fc f914 	bl	8000404 <__aeabi_i2d>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041e4:	f7fb ffc0 	bl	8000168 <__aeabi_dsub>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	3530      	adds	r5, #48	@ 0x30
 80041ee:	f806 5b01 	strb.w	r5, [r6], #1
 80041f2:	42a6      	cmp	r6, r4
 80041f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	d124      	bne.n	8004248 <_dtoa_r+0x660>
 80041fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004202:	4b39      	ldr	r3, [pc, #228]	@ (80042e8 <_dtoa_r+0x700>)
 8004204:	f7fb ffb2 	bl	800016c <__adddf3>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004210:	f7fc fbf2 	bl	80009f8 <__aeabi_dcmpgt>
 8004214:	2800      	cmp	r0, #0
 8004216:	d145      	bne.n	80042a4 <_dtoa_r+0x6bc>
 8004218:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800421c:	2000      	movs	r0, #0
 800421e:	4932      	ldr	r1, [pc, #200]	@ (80042e8 <_dtoa_r+0x700>)
 8004220:	f7fb ffa2 	bl	8000168 <__aeabi_dsub>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800422c:	f7fc fbc6 	bl	80009bc <__aeabi_dcmplt>
 8004230:	2800      	cmp	r0, #0
 8004232:	f43f aef6 	beq.w	8004022 <_dtoa_r+0x43a>
 8004236:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004238:	1e73      	subs	r3, r6, #1
 800423a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800423c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004240:	2b30      	cmp	r3, #48	@ 0x30
 8004242:	d0f8      	beq.n	8004236 <_dtoa_r+0x64e>
 8004244:	9f04      	ldr	r7, [sp, #16]
 8004246:	e73f      	b.n	80040c8 <_dtoa_r+0x4e0>
 8004248:	4b29      	ldr	r3, [pc, #164]	@ (80042f0 <_dtoa_r+0x708>)
 800424a:	f7fc f945 	bl	80004d8 <__aeabi_dmul>
 800424e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004252:	e7bc      	b.n	80041ce <_dtoa_r+0x5e6>
 8004254:	d10c      	bne.n	8004270 <_dtoa_r+0x688>
 8004256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800425a:	2200      	movs	r2, #0
 800425c:	4b25      	ldr	r3, [pc, #148]	@ (80042f4 <_dtoa_r+0x70c>)
 800425e:	f7fc f93b 	bl	80004d8 <__aeabi_dmul>
 8004262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004266:	f7fc fbbd 	bl	80009e4 <__aeabi_dcmpge>
 800426a:	2800      	cmp	r0, #0
 800426c:	f000 815b 	beq.w	8004526 <_dtoa_r+0x93e>
 8004270:	2400      	movs	r4, #0
 8004272:	4625      	mov	r5, r4
 8004274:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004276:	4656      	mov	r6, sl
 8004278:	43db      	mvns	r3, r3
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	2700      	movs	r7, #0
 800427e:	4621      	mov	r1, r4
 8004280:	4658      	mov	r0, fp
 8004282:	f000 fbb7 	bl	80049f4 <_Bfree>
 8004286:	2d00      	cmp	r5, #0
 8004288:	d0dc      	beq.n	8004244 <_dtoa_r+0x65c>
 800428a:	b12f      	cbz	r7, 8004298 <_dtoa_r+0x6b0>
 800428c:	42af      	cmp	r7, r5
 800428e:	d003      	beq.n	8004298 <_dtoa_r+0x6b0>
 8004290:	4639      	mov	r1, r7
 8004292:	4658      	mov	r0, fp
 8004294:	f000 fbae 	bl	80049f4 <_Bfree>
 8004298:	4629      	mov	r1, r5
 800429a:	4658      	mov	r0, fp
 800429c:	f000 fbaa 	bl	80049f4 <_Bfree>
 80042a0:	e7d0      	b.n	8004244 <_dtoa_r+0x65c>
 80042a2:	9704      	str	r7, [sp, #16]
 80042a4:	4633      	mov	r3, r6
 80042a6:	461e      	mov	r6, r3
 80042a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80042ac:	2a39      	cmp	r2, #57	@ 0x39
 80042ae:	d107      	bne.n	80042c0 <_dtoa_r+0x6d8>
 80042b0:	459a      	cmp	sl, r3
 80042b2:	d1f8      	bne.n	80042a6 <_dtoa_r+0x6be>
 80042b4:	9a04      	ldr	r2, [sp, #16]
 80042b6:	3201      	adds	r2, #1
 80042b8:	9204      	str	r2, [sp, #16]
 80042ba:	2230      	movs	r2, #48	@ 0x30
 80042bc:	f88a 2000 	strb.w	r2, [sl]
 80042c0:	781a      	ldrb	r2, [r3, #0]
 80042c2:	3201      	adds	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e7bd      	b.n	8004244 <_dtoa_r+0x65c>
 80042c8:	2200      	movs	r2, #0
 80042ca:	4b09      	ldr	r3, [pc, #36]	@ (80042f0 <_dtoa_r+0x708>)
 80042cc:	f7fc f904 	bl	80004d8 <__aeabi_dmul>
 80042d0:	2200      	movs	r2, #0
 80042d2:	2300      	movs	r3, #0
 80042d4:	4604      	mov	r4, r0
 80042d6:	460d      	mov	r5, r1
 80042d8:	f7fc fb66 	bl	80009a8 <__aeabi_dcmpeq>
 80042dc:	2800      	cmp	r0, #0
 80042de:	f43f aebc 	beq.w	800405a <_dtoa_r+0x472>
 80042e2:	e6f1      	b.n	80040c8 <_dtoa_r+0x4e0>
 80042e4:	08005d08 	.word	0x08005d08
 80042e8:	3fe00000 	.word	0x3fe00000
 80042ec:	3ff00000 	.word	0x3ff00000
 80042f0:	40240000 	.word	0x40240000
 80042f4:	40140000 	.word	0x40140000
 80042f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80042fa:	2a00      	cmp	r2, #0
 80042fc:	f000 80db 	beq.w	80044b6 <_dtoa_r+0x8ce>
 8004300:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004302:	2a01      	cmp	r2, #1
 8004304:	f300 80bf 	bgt.w	8004486 <_dtoa_r+0x89e>
 8004308:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800430a:	2a00      	cmp	r2, #0
 800430c:	f000 80b7 	beq.w	800447e <_dtoa_r+0x896>
 8004310:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004314:	4646      	mov	r6, r8
 8004316:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800431a:	2101      	movs	r1, #1
 800431c:	441a      	add	r2, r3
 800431e:	4658      	mov	r0, fp
 8004320:	4498      	add	r8, r3
 8004322:	9209      	str	r2, [sp, #36]	@ 0x24
 8004324:	f000 fc1a 	bl	8004b5c <__i2b>
 8004328:	4605      	mov	r5, r0
 800432a:	b15e      	cbz	r6, 8004344 <_dtoa_r+0x75c>
 800432c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	dd08      	ble.n	8004344 <_dtoa_r+0x75c>
 8004332:	42b3      	cmp	r3, r6
 8004334:	bfa8      	it	ge
 8004336:	4633      	movge	r3, r6
 8004338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800433a:	eba8 0803 	sub.w	r8, r8, r3
 800433e:	1af6      	subs	r6, r6, r3
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	9309      	str	r3, [sp, #36]	@ 0x24
 8004344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004346:	b1f3      	cbz	r3, 8004386 <_dtoa_r+0x79e>
 8004348:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80b7 	beq.w	80044be <_dtoa_r+0x8d6>
 8004350:	b18c      	cbz	r4, 8004376 <_dtoa_r+0x78e>
 8004352:	4629      	mov	r1, r5
 8004354:	4622      	mov	r2, r4
 8004356:	4658      	mov	r0, fp
 8004358:	f000 fcbe 	bl	8004cd8 <__pow5mult>
 800435c:	464a      	mov	r2, r9
 800435e:	4601      	mov	r1, r0
 8004360:	4605      	mov	r5, r0
 8004362:	4658      	mov	r0, fp
 8004364:	f000 fc10 	bl	8004b88 <__multiply>
 8004368:	4649      	mov	r1, r9
 800436a:	9004      	str	r0, [sp, #16]
 800436c:	4658      	mov	r0, fp
 800436e:	f000 fb41 	bl	80049f4 <_Bfree>
 8004372:	9b04      	ldr	r3, [sp, #16]
 8004374:	4699      	mov	r9, r3
 8004376:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004378:	1b1a      	subs	r2, r3, r4
 800437a:	d004      	beq.n	8004386 <_dtoa_r+0x79e>
 800437c:	4649      	mov	r1, r9
 800437e:	4658      	mov	r0, fp
 8004380:	f000 fcaa 	bl	8004cd8 <__pow5mult>
 8004384:	4681      	mov	r9, r0
 8004386:	2101      	movs	r1, #1
 8004388:	4658      	mov	r0, fp
 800438a:	f000 fbe7 	bl	8004b5c <__i2b>
 800438e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004390:	4604      	mov	r4, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 81c9 	beq.w	800472a <_dtoa_r+0xb42>
 8004398:	461a      	mov	r2, r3
 800439a:	4601      	mov	r1, r0
 800439c:	4658      	mov	r0, fp
 800439e:	f000 fc9b 	bl	8004cd8 <__pow5mult>
 80043a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043a4:	4604      	mov	r4, r0
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	f300 808f 	bgt.w	80044ca <_dtoa_r+0x8e2>
 80043ac:	9b02      	ldr	r3, [sp, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 8087 	bne.w	80044c2 <_dtoa_r+0x8da>
 80043b4:	9b03      	ldr	r3, [sp, #12]
 80043b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 8083 	bne.w	80044c6 <_dtoa_r+0x8de>
 80043c0:	9b03      	ldr	r3, [sp, #12]
 80043c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043c6:	0d1b      	lsrs	r3, r3, #20
 80043c8:	051b      	lsls	r3, r3, #20
 80043ca:	b12b      	cbz	r3, 80043d8 <_dtoa_r+0x7f0>
 80043cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ce:	f108 0801 	add.w	r8, r8, #1
 80043d2:	3301      	adds	r3, #1
 80043d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80043d6:	2301      	movs	r3, #1
 80043d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80043da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 81aa 	beq.w	8004736 <_dtoa_r+0xb4e>
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80043e8:	6918      	ldr	r0, [r3, #16]
 80043ea:	f000 fb6b 	bl	8004ac4 <__hi0bits>
 80043ee:	f1c0 0020 	rsb	r0, r0, #32
 80043f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043f4:	4418      	add	r0, r3
 80043f6:	f010 001f 	ands.w	r0, r0, #31
 80043fa:	d071      	beq.n	80044e0 <_dtoa_r+0x8f8>
 80043fc:	f1c0 0320 	rsb	r3, r0, #32
 8004400:	2b04      	cmp	r3, #4
 8004402:	dd65      	ble.n	80044d0 <_dtoa_r+0x8e8>
 8004404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004406:	f1c0 001c 	rsb	r0, r0, #28
 800440a:	4403      	add	r3, r0
 800440c:	4480      	add	r8, r0
 800440e:	4406      	add	r6, r0
 8004410:	9309      	str	r3, [sp, #36]	@ 0x24
 8004412:	f1b8 0f00 	cmp.w	r8, #0
 8004416:	dd05      	ble.n	8004424 <_dtoa_r+0x83c>
 8004418:	4649      	mov	r1, r9
 800441a:	4642      	mov	r2, r8
 800441c:	4658      	mov	r0, fp
 800441e:	f000 fcb5 	bl	8004d8c <__lshift>
 8004422:	4681      	mov	r9, r0
 8004424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	dd05      	ble.n	8004436 <_dtoa_r+0x84e>
 800442a:	4621      	mov	r1, r4
 800442c:	461a      	mov	r2, r3
 800442e:	4658      	mov	r0, fp
 8004430:	f000 fcac 	bl	8004d8c <__lshift>
 8004434:	4604      	mov	r4, r0
 8004436:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d053      	beq.n	80044e4 <_dtoa_r+0x8fc>
 800443c:	4621      	mov	r1, r4
 800443e:	4648      	mov	r0, r9
 8004440:	f000 fd10 	bl	8004e64 <__mcmp>
 8004444:	2800      	cmp	r0, #0
 8004446:	da4d      	bge.n	80044e4 <_dtoa_r+0x8fc>
 8004448:	1e7b      	subs	r3, r7, #1
 800444a:	4649      	mov	r1, r9
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	220a      	movs	r2, #10
 8004450:	2300      	movs	r3, #0
 8004452:	4658      	mov	r0, fp
 8004454:	f000 faf0 	bl	8004a38 <__multadd>
 8004458:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800445a:	4681      	mov	r9, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 816c 	beq.w	800473a <_dtoa_r+0xb52>
 8004462:	2300      	movs	r3, #0
 8004464:	4629      	mov	r1, r5
 8004466:	220a      	movs	r2, #10
 8004468:	4658      	mov	r0, fp
 800446a:	f000 fae5 	bl	8004a38 <__multadd>
 800446e:	9b08      	ldr	r3, [sp, #32]
 8004470:	4605      	mov	r5, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	dc61      	bgt.n	800453a <_dtoa_r+0x952>
 8004476:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004478:	2b02      	cmp	r3, #2
 800447a:	dc3b      	bgt.n	80044f4 <_dtoa_r+0x90c>
 800447c:	e05d      	b.n	800453a <_dtoa_r+0x952>
 800447e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004480:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004484:	e746      	b.n	8004314 <_dtoa_r+0x72c>
 8004486:	9b07      	ldr	r3, [sp, #28]
 8004488:	1e5c      	subs	r4, r3, #1
 800448a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800448c:	42a3      	cmp	r3, r4
 800448e:	bfbf      	itttt	lt
 8004490:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004492:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004494:	1ae3      	sublt	r3, r4, r3
 8004496:	18d2      	addlt	r2, r2, r3
 8004498:	bfa8      	it	ge
 800449a:	1b1c      	subge	r4, r3, r4
 800449c:	9b07      	ldr	r3, [sp, #28]
 800449e:	bfbe      	ittt	lt
 80044a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80044a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80044a4:	2400      	movlt	r4, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bfb5      	itete	lt
 80044aa:	eba8 0603 	sublt.w	r6, r8, r3
 80044ae:	4646      	movge	r6, r8
 80044b0:	2300      	movlt	r3, #0
 80044b2:	9b07      	ldrge	r3, [sp, #28]
 80044b4:	e730      	b.n	8004318 <_dtoa_r+0x730>
 80044b6:	4646      	mov	r6, r8
 80044b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80044ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80044bc:	e735      	b.n	800432a <_dtoa_r+0x742>
 80044be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044c0:	e75c      	b.n	800437c <_dtoa_r+0x794>
 80044c2:	2300      	movs	r3, #0
 80044c4:	e788      	b.n	80043d8 <_dtoa_r+0x7f0>
 80044c6:	9b02      	ldr	r3, [sp, #8]
 80044c8:	e786      	b.n	80043d8 <_dtoa_r+0x7f0>
 80044ca:	2300      	movs	r3, #0
 80044cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80044ce:	e788      	b.n	80043e2 <_dtoa_r+0x7fa>
 80044d0:	d09f      	beq.n	8004412 <_dtoa_r+0x82a>
 80044d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044d4:	331c      	adds	r3, #28
 80044d6:	441a      	add	r2, r3
 80044d8:	4498      	add	r8, r3
 80044da:	441e      	add	r6, r3
 80044dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80044de:	e798      	b.n	8004412 <_dtoa_r+0x82a>
 80044e0:	4603      	mov	r3, r0
 80044e2:	e7f6      	b.n	80044d2 <_dtoa_r+0x8ea>
 80044e4:	9b07      	ldr	r3, [sp, #28]
 80044e6:	9704      	str	r7, [sp, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dc20      	bgt.n	800452e <_dtoa_r+0x946>
 80044ec:	9308      	str	r3, [sp, #32]
 80044ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	dd1e      	ble.n	8004532 <_dtoa_r+0x94a>
 80044f4:	9b08      	ldr	r3, [sp, #32]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f47f aebc 	bne.w	8004274 <_dtoa_r+0x68c>
 80044fc:	4621      	mov	r1, r4
 80044fe:	2205      	movs	r2, #5
 8004500:	4658      	mov	r0, fp
 8004502:	f000 fa99 	bl	8004a38 <__multadd>
 8004506:	4601      	mov	r1, r0
 8004508:	4604      	mov	r4, r0
 800450a:	4648      	mov	r0, r9
 800450c:	f000 fcaa 	bl	8004e64 <__mcmp>
 8004510:	2800      	cmp	r0, #0
 8004512:	f77f aeaf 	ble.w	8004274 <_dtoa_r+0x68c>
 8004516:	2331      	movs	r3, #49	@ 0x31
 8004518:	4656      	mov	r6, sl
 800451a:	f806 3b01 	strb.w	r3, [r6], #1
 800451e:	9b04      	ldr	r3, [sp, #16]
 8004520:	3301      	adds	r3, #1
 8004522:	9304      	str	r3, [sp, #16]
 8004524:	e6aa      	b.n	800427c <_dtoa_r+0x694>
 8004526:	9c07      	ldr	r4, [sp, #28]
 8004528:	9704      	str	r7, [sp, #16]
 800452a:	4625      	mov	r5, r4
 800452c:	e7f3      	b.n	8004516 <_dtoa_r+0x92e>
 800452e:	9b07      	ldr	r3, [sp, #28]
 8004530:	9308      	str	r3, [sp, #32]
 8004532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8104 	beq.w	8004742 <_dtoa_r+0xb5a>
 800453a:	2e00      	cmp	r6, #0
 800453c:	dd05      	ble.n	800454a <_dtoa_r+0x962>
 800453e:	4629      	mov	r1, r5
 8004540:	4632      	mov	r2, r6
 8004542:	4658      	mov	r0, fp
 8004544:	f000 fc22 	bl	8004d8c <__lshift>
 8004548:	4605      	mov	r5, r0
 800454a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800454c:	2b00      	cmp	r3, #0
 800454e:	d05a      	beq.n	8004606 <_dtoa_r+0xa1e>
 8004550:	4658      	mov	r0, fp
 8004552:	6869      	ldr	r1, [r5, #4]
 8004554:	f000 fa0e 	bl	8004974 <_Balloc>
 8004558:	4606      	mov	r6, r0
 800455a:	b928      	cbnz	r0, 8004568 <_dtoa_r+0x980>
 800455c:	4602      	mov	r2, r0
 800455e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004562:	4b83      	ldr	r3, [pc, #524]	@ (8004770 <_dtoa_r+0xb88>)
 8004564:	f7ff bb54 	b.w	8003c10 <_dtoa_r+0x28>
 8004568:	692a      	ldr	r2, [r5, #16]
 800456a:	f105 010c 	add.w	r1, r5, #12
 800456e:	3202      	adds	r2, #2
 8004570:	0092      	lsls	r2, r2, #2
 8004572:	300c      	adds	r0, #12
 8004574:	f000 ffa8 	bl	80054c8 <memcpy>
 8004578:	2201      	movs	r2, #1
 800457a:	4631      	mov	r1, r6
 800457c:	4658      	mov	r0, fp
 800457e:	f000 fc05 	bl	8004d8c <__lshift>
 8004582:	462f      	mov	r7, r5
 8004584:	4605      	mov	r5, r0
 8004586:	f10a 0301 	add.w	r3, sl, #1
 800458a:	9307      	str	r3, [sp, #28]
 800458c:	9b08      	ldr	r3, [sp, #32]
 800458e:	4453      	add	r3, sl
 8004590:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004592:	9b02      	ldr	r3, [sp, #8]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	930a      	str	r3, [sp, #40]	@ 0x28
 800459a:	9b07      	ldr	r3, [sp, #28]
 800459c:	4621      	mov	r1, r4
 800459e:	3b01      	subs	r3, #1
 80045a0:	4648      	mov	r0, r9
 80045a2:	9302      	str	r3, [sp, #8]
 80045a4:	f7ff fa95 	bl	8003ad2 <quorem>
 80045a8:	4639      	mov	r1, r7
 80045aa:	9008      	str	r0, [sp, #32]
 80045ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80045b0:	4648      	mov	r0, r9
 80045b2:	f000 fc57 	bl	8004e64 <__mcmp>
 80045b6:	462a      	mov	r2, r5
 80045b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80045ba:	4621      	mov	r1, r4
 80045bc:	4658      	mov	r0, fp
 80045be:	f000 fc6d 	bl	8004e9c <__mdiff>
 80045c2:	68c2      	ldr	r2, [r0, #12]
 80045c4:	4606      	mov	r6, r0
 80045c6:	bb02      	cbnz	r2, 800460a <_dtoa_r+0xa22>
 80045c8:	4601      	mov	r1, r0
 80045ca:	4648      	mov	r0, r9
 80045cc:	f000 fc4a 	bl	8004e64 <__mcmp>
 80045d0:	4602      	mov	r2, r0
 80045d2:	4631      	mov	r1, r6
 80045d4:	4658      	mov	r0, fp
 80045d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80045d8:	f000 fa0c 	bl	80049f4 <_Bfree>
 80045dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80045de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80045e0:	9e07      	ldr	r6, [sp, #28]
 80045e2:	ea43 0102 	orr.w	r1, r3, r2
 80045e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045e8:	4319      	orrs	r1, r3
 80045ea:	d110      	bne.n	800460e <_dtoa_r+0xa26>
 80045ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80045f0:	d029      	beq.n	8004646 <_dtoa_r+0xa5e>
 80045f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	dd02      	ble.n	80045fe <_dtoa_r+0xa16>
 80045f8:	9b08      	ldr	r3, [sp, #32]
 80045fa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80045fe:	9b02      	ldr	r3, [sp, #8]
 8004600:	f883 8000 	strb.w	r8, [r3]
 8004604:	e63b      	b.n	800427e <_dtoa_r+0x696>
 8004606:	4628      	mov	r0, r5
 8004608:	e7bb      	b.n	8004582 <_dtoa_r+0x99a>
 800460a:	2201      	movs	r2, #1
 800460c:	e7e1      	b.n	80045d2 <_dtoa_r+0x9ea>
 800460e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	db04      	blt.n	800461e <_dtoa_r+0xa36>
 8004614:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004616:	430b      	orrs	r3, r1
 8004618:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800461a:	430b      	orrs	r3, r1
 800461c:	d120      	bne.n	8004660 <_dtoa_r+0xa78>
 800461e:	2a00      	cmp	r2, #0
 8004620:	dded      	ble.n	80045fe <_dtoa_r+0xa16>
 8004622:	4649      	mov	r1, r9
 8004624:	2201      	movs	r2, #1
 8004626:	4658      	mov	r0, fp
 8004628:	f000 fbb0 	bl	8004d8c <__lshift>
 800462c:	4621      	mov	r1, r4
 800462e:	4681      	mov	r9, r0
 8004630:	f000 fc18 	bl	8004e64 <__mcmp>
 8004634:	2800      	cmp	r0, #0
 8004636:	dc03      	bgt.n	8004640 <_dtoa_r+0xa58>
 8004638:	d1e1      	bne.n	80045fe <_dtoa_r+0xa16>
 800463a:	f018 0f01 	tst.w	r8, #1
 800463e:	d0de      	beq.n	80045fe <_dtoa_r+0xa16>
 8004640:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004644:	d1d8      	bne.n	80045f8 <_dtoa_r+0xa10>
 8004646:	2339      	movs	r3, #57	@ 0x39
 8004648:	9a02      	ldr	r2, [sp, #8]
 800464a:	7013      	strb	r3, [r2, #0]
 800464c:	4633      	mov	r3, r6
 800464e:	461e      	mov	r6, r3
 8004650:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004654:	3b01      	subs	r3, #1
 8004656:	2a39      	cmp	r2, #57	@ 0x39
 8004658:	d052      	beq.n	8004700 <_dtoa_r+0xb18>
 800465a:	3201      	adds	r2, #1
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	e60e      	b.n	800427e <_dtoa_r+0x696>
 8004660:	2a00      	cmp	r2, #0
 8004662:	dd07      	ble.n	8004674 <_dtoa_r+0xa8c>
 8004664:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004668:	d0ed      	beq.n	8004646 <_dtoa_r+0xa5e>
 800466a:	9a02      	ldr	r2, [sp, #8]
 800466c:	f108 0301 	add.w	r3, r8, #1
 8004670:	7013      	strb	r3, [r2, #0]
 8004672:	e604      	b.n	800427e <_dtoa_r+0x696>
 8004674:	9b07      	ldr	r3, [sp, #28]
 8004676:	9a07      	ldr	r2, [sp, #28]
 8004678:	f803 8c01 	strb.w	r8, [r3, #-1]
 800467c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800467e:	4293      	cmp	r3, r2
 8004680:	d028      	beq.n	80046d4 <_dtoa_r+0xaec>
 8004682:	4649      	mov	r1, r9
 8004684:	2300      	movs	r3, #0
 8004686:	220a      	movs	r2, #10
 8004688:	4658      	mov	r0, fp
 800468a:	f000 f9d5 	bl	8004a38 <__multadd>
 800468e:	42af      	cmp	r7, r5
 8004690:	4681      	mov	r9, r0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	f04f 020a 	mov.w	r2, #10
 800469a:	4639      	mov	r1, r7
 800469c:	4658      	mov	r0, fp
 800469e:	d107      	bne.n	80046b0 <_dtoa_r+0xac8>
 80046a0:	f000 f9ca 	bl	8004a38 <__multadd>
 80046a4:	4607      	mov	r7, r0
 80046a6:	4605      	mov	r5, r0
 80046a8:	9b07      	ldr	r3, [sp, #28]
 80046aa:	3301      	adds	r3, #1
 80046ac:	9307      	str	r3, [sp, #28]
 80046ae:	e774      	b.n	800459a <_dtoa_r+0x9b2>
 80046b0:	f000 f9c2 	bl	8004a38 <__multadd>
 80046b4:	4629      	mov	r1, r5
 80046b6:	4607      	mov	r7, r0
 80046b8:	2300      	movs	r3, #0
 80046ba:	220a      	movs	r2, #10
 80046bc:	4658      	mov	r0, fp
 80046be:	f000 f9bb 	bl	8004a38 <__multadd>
 80046c2:	4605      	mov	r5, r0
 80046c4:	e7f0      	b.n	80046a8 <_dtoa_r+0xac0>
 80046c6:	9b08      	ldr	r3, [sp, #32]
 80046c8:	2700      	movs	r7, #0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bfcc      	ite	gt
 80046ce:	461e      	movgt	r6, r3
 80046d0:	2601      	movle	r6, #1
 80046d2:	4456      	add	r6, sl
 80046d4:	4649      	mov	r1, r9
 80046d6:	2201      	movs	r2, #1
 80046d8:	4658      	mov	r0, fp
 80046da:	f000 fb57 	bl	8004d8c <__lshift>
 80046de:	4621      	mov	r1, r4
 80046e0:	4681      	mov	r9, r0
 80046e2:	f000 fbbf 	bl	8004e64 <__mcmp>
 80046e6:	2800      	cmp	r0, #0
 80046e8:	dcb0      	bgt.n	800464c <_dtoa_r+0xa64>
 80046ea:	d102      	bne.n	80046f2 <_dtoa_r+0xb0a>
 80046ec:	f018 0f01 	tst.w	r8, #1
 80046f0:	d1ac      	bne.n	800464c <_dtoa_r+0xa64>
 80046f2:	4633      	mov	r3, r6
 80046f4:	461e      	mov	r6, r3
 80046f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046fa:	2a30      	cmp	r2, #48	@ 0x30
 80046fc:	d0fa      	beq.n	80046f4 <_dtoa_r+0xb0c>
 80046fe:	e5be      	b.n	800427e <_dtoa_r+0x696>
 8004700:	459a      	cmp	sl, r3
 8004702:	d1a4      	bne.n	800464e <_dtoa_r+0xa66>
 8004704:	9b04      	ldr	r3, [sp, #16]
 8004706:	3301      	adds	r3, #1
 8004708:	9304      	str	r3, [sp, #16]
 800470a:	2331      	movs	r3, #49	@ 0x31
 800470c:	f88a 3000 	strb.w	r3, [sl]
 8004710:	e5b5      	b.n	800427e <_dtoa_r+0x696>
 8004712:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004714:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004774 <_dtoa_r+0xb8c>
 8004718:	b11b      	cbz	r3, 8004722 <_dtoa_r+0xb3a>
 800471a:	f10a 0308 	add.w	r3, sl, #8
 800471e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4650      	mov	r0, sl
 8004724:	b017      	add	sp, #92	@ 0x5c
 8004726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800472c:	2b01      	cmp	r3, #1
 800472e:	f77f ae3d 	ble.w	80043ac <_dtoa_r+0x7c4>
 8004732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004734:	930a      	str	r3, [sp, #40]	@ 0x28
 8004736:	2001      	movs	r0, #1
 8004738:	e65b      	b.n	80043f2 <_dtoa_r+0x80a>
 800473a:	9b08      	ldr	r3, [sp, #32]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f77f aed6 	ble.w	80044ee <_dtoa_r+0x906>
 8004742:	4656      	mov	r6, sl
 8004744:	4621      	mov	r1, r4
 8004746:	4648      	mov	r0, r9
 8004748:	f7ff f9c3 	bl	8003ad2 <quorem>
 800474c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004750:	9b08      	ldr	r3, [sp, #32]
 8004752:	f806 8b01 	strb.w	r8, [r6], #1
 8004756:	eba6 020a 	sub.w	r2, r6, sl
 800475a:	4293      	cmp	r3, r2
 800475c:	ddb3      	ble.n	80046c6 <_dtoa_r+0xade>
 800475e:	4649      	mov	r1, r9
 8004760:	2300      	movs	r3, #0
 8004762:	220a      	movs	r2, #10
 8004764:	4658      	mov	r0, fp
 8004766:	f000 f967 	bl	8004a38 <__multadd>
 800476a:	4681      	mov	r9, r0
 800476c:	e7ea      	b.n	8004744 <_dtoa_r+0xb5c>
 800476e:	bf00      	nop
 8004770:	08005c6a 	.word	0x08005c6a
 8004774:	08005bee 	.word	0x08005bee

08004778 <_free_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4605      	mov	r5, r0
 800477c:	2900      	cmp	r1, #0
 800477e:	d040      	beq.n	8004802 <_free_r+0x8a>
 8004780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004784:	1f0c      	subs	r4, r1, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	bfb8      	it	lt
 800478a:	18e4      	addlt	r4, r4, r3
 800478c:	f000 f8e6 	bl	800495c <__malloc_lock>
 8004790:	4a1c      	ldr	r2, [pc, #112]	@ (8004804 <_free_r+0x8c>)
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	b933      	cbnz	r3, 80047a4 <_free_r+0x2c>
 8004796:	6063      	str	r3, [r4, #4]
 8004798:	6014      	str	r4, [r2, #0]
 800479a:	4628      	mov	r0, r5
 800479c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047a0:	f000 b8e2 	b.w	8004968 <__malloc_unlock>
 80047a4:	42a3      	cmp	r3, r4
 80047a6:	d908      	bls.n	80047ba <_free_r+0x42>
 80047a8:	6820      	ldr	r0, [r4, #0]
 80047aa:	1821      	adds	r1, r4, r0
 80047ac:	428b      	cmp	r3, r1
 80047ae:	bf01      	itttt	eq
 80047b0:	6819      	ldreq	r1, [r3, #0]
 80047b2:	685b      	ldreq	r3, [r3, #4]
 80047b4:	1809      	addeq	r1, r1, r0
 80047b6:	6021      	streq	r1, [r4, #0]
 80047b8:	e7ed      	b.n	8004796 <_free_r+0x1e>
 80047ba:	461a      	mov	r2, r3
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	b10b      	cbz	r3, 80047c4 <_free_r+0x4c>
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	d9fa      	bls.n	80047ba <_free_r+0x42>
 80047c4:	6811      	ldr	r1, [r2, #0]
 80047c6:	1850      	adds	r0, r2, r1
 80047c8:	42a0      	cmp	r0, r4
 80047ca:	d10b      	bne.n	80047e4 <_free_r+0x6c>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	4401      	add	r1, r0
 80047d0:	1850      	adds	r0, r2, r1
 80047d2:	4283      	cmp	r3, r0
 80047d4:	6011      	str	r1, [r2, #0]
 80047d6:	d1e0      	bne.n	800479a <_free_r+0x22>
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4408      	add	r0, r1
 80047de:	6010      	str	r0, [r2, #0]
 80047e0:	6053      	str	r3, [r2, #4]
 80047e2:	e7da      	b.n	800479a <_free_r+0x22>
 80047e4:	d902      	bls.n	80047ec <_free_r+0x74>
 80047e6:	230c      	movs	r3, #12
 80047e8:	602b      	str	r3, [r5, #0]
 80047ea:	e7d6      	b.n	800479a <_free_r+0x22>
 80047ec:	6820      	ldr	r0, [r4, #0]
 80047ee:	1821      	adds	r1, r4, r0
 80047f0:	428b      	cmp	r3, r1
 80047f2:	bf01      	itttt	eq
 80047f4:	6819      	ldreq	r1, [r3, #0]
 80047f6:	685b      	ldreq	r3, [r3, #4]
 80047f8:	1809      	addeq	r1, r1, r0
 80047fa:	6021      	streq	r1, [r4, #0]
 80047fc:	6063      	str	r3, [r4, #4]
 80047fe:	6054      	str	r4, [r2, #4]
 8004800:	e7cb      	b.n	800479a <_free_r+0x22>
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	200003fc 	.word	0x200003fc

08004808 <malloc>:
 8004808:	4b02      	ldr	r3, [pc, #8]	@ (8004814 <malloc+0xc>)
 800480a:	4601      	mov	r1, r0
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	f000 b825 	b.w	800485c <_malloc_r>
 8004812:	bf00      	nop
 8004814:	20000018 	.word	0x20000018

08004818 <sbrk_aligned>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	4e0f      	ldr	r6, [pc, #60]	@ (8004858 <sbrk_aligned+0x40>)
 800481c:	460c      	mov	r4, r1
 800481e:	6831      	ldr	r1, [r6, #0]
 8004820:	4605      	mov	r5, r0
 8004822:	b911      	cbnz	r1, 800482a <sbrk_aligned+0x12>
 8004824:	f000 fe40 	bl	80054a8 <_sbrk_r>
 8004828:	6030      	str	r0, [r6, #0]
 800482a:	4621      	mov	r1, r4
 800482c:	4628      	mov	r0, r5
 800482e:	f000 fe3b 	bl	80054a8 <_sbrk_r>
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	d103      	bne.n	800483e <sbrk_aligned+0x26>
 8004836:	f04f 34ff 	mov.w	r4, #4294967295
 800483a:	4620      	mov	r0, r4
 800483c:	bd70      	pop	{r4, r5, r6, pc}
 800483e:	1cc4      	adds	r4, r0, #3
 8004840:	f024 0403 	bic.w	r4, r4, #3
 8004844:	42a0      	cmp	r0, r4
 8004846:	d0f8      	beq.n	800483a <sbrk_aligned+0x22>
 8004848:	1a21      	subs	r1, r4, r0
 800484a:	4628      	mov	r0, r5
 800484c:	f000 fe2c 	bl	80054a8 <_sbrk_r>
 8004850:	3001      	adds	r0, #1
 8004852:	d1f2      	bne.n	800483a <sbrk_aligned+0x22>
 8004854:	e7ef      	b.n	8004836 <sbrk_aligned+0x1e>
 8004856:	bf00      	nop
 8004858:	200003f8 	.word	0x200003f8

0800485c <_malloc_r>:
 800485c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004860:	1ccd      	adds	r5, r1, #3
 8004862:	f025 0503 	bic.w	r5, r5, #3
 8004866:	3508      	adds	r5, #8
 8004868:	2d0c      	cmp	r5, #12
 800486a:	bf38      	it	cc
 800486c:	250c      	movcc	r5, #12
 800486e:	2d00      	cmp	r5, #0
 8004870:	4606      	mov	r6, r0
 8004872:	db01      	blt.n	8004878 <_malloc_r+0x1c>
 8004874:	42a9      	cmp	r1, r5
 8004876:	d904      	bls.n	8004882 <_malloc_r+0x26>
 8004878:	230c      	movs	r3, #12
 800487a:	6033      	str	r3, [r6, #0]
 800487c:	2000      	movs	r0, #0
 800487e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004958 <_malloc_r+0xfc>
 8004886:	f000 f869 	bl	800495c <__malloc_lock>
 800488a:	f8d8 3000 	ldr.w	r3, [r8]
 800488e:	461c      	mov	r4, r3
 8004890:	bb44      	cbnz	r4, 80048e4 <_malloc_r+0x88>
 8004892:	4629      	mov	r1, r5
 8004894:	4630      	mov	r0, r6
 8004896:	f7ff ffbf 	bl	8004818 <sbrk_aligned>
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	4604      	mov	r4, r0
 800489e:	d158      	bne.n	8004952 <_malloc_r+0xf6>
 80048a0:	f8d8 4000 	ldr.w	r4, [r8]
 80048a4:	4627      	mov	r7, r4
 80048a6:	2f00      	cmp	r7, #0
 80048a8:	d143      	bne.n	8004932 <_malloc_r+0xd6>
 80048aa:	2c00      	cmp	r4, #0
 80048ac:	d04b      	beq.n	8004946 <_malloc_r+0xea>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	4639      	mov	r1, r7
 80048b2:	4630      	mov	r0, r6
 80048b4:	eb04 0903 	add.w	r9, r4, r3
 80048b8:	f000 fdf6 	bl	80054a8 <_sbrk_r>
 80048bc:	4581      	cmp	r9, r0
 80048be:	d142      	bne.n	8004946 <_malloc_r+0xea>
 80048c0:	6821      	ldr	r1, [r4, #0]
 80048c2:	4630      	mov	r0, r6
 80048c4:	1a6d      	subs	r5, r5, r1
 80048c6:	4629      	mov	r1, r5
 80048c8:	f7ff ffa6 	bl	8004818 <sbrk_aligned>
 80048cc:	3001      	adds	r0, #1
 80048ce:	d03a      	beq.n	8004946 <_malloc_r+0xea>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	442b      	add	r3, r5
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	f8d8 3000 	ldr.w	r3, [r8]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	bb62      	cbnz	r2, 8004938 <_malloc_r+0xdc>
 80048de:	f8c8 7000 	str.w	r7, [r8]
 80048e2:	e00f      	b.n	8004904 <_malloc_r+0xa8>
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	1b52      	subs	r2, r2, r5
 80048e8:	d420      	bmi.n	800492c <_malloc_r+0xd0>
 80048ea:	2a0b      	cmp	r2, #11
 80048ec:	d917      	bls.n	800491e <_malloc_r+0xc2>
 80048ee:	1961      	adds	r1, r4, r5
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	6025      	str	r5, [r4, #0]
 80048f4:	bf18      	it	ne
 80048f6:	6059      	strne	r1, [r3, #4]
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	bf08      	it	eq
 80048fc:	f8c8 1000 	streq.w	r1, [r8]
 8004900:	5162      	str	r2, [r4, r5]
 8004902:	604b      	str	r3, [r1, #4]
 8004904:	4630      	mov	r0, r6
 8004906:	f000 f82f 	bl	8004968 <__malloc_unlock>
 800490a:	f104 000b 	add.w	r0, r4, #11
 800490e:	1d23      	adds	r3, r4, #4
 8004910:	f020 0007 	bic.w	r0, r0, #7
 8004914:	1ac2      	subs	r2, r0, r3
 8004916:	bf1c      	itt	ne
 8004918:	1a1b      	subne	r3, r3, r0
 800491a:	50a3      	strne	r3, [r4, r2]
 800491c:	e7af      	b.n	800487e <_malloc_r+0x22>
 800491e:	6862      	ldr	r2, [r4, #4]
 8004920:	42a3      	cmp	r3, r4
 8004922:	bf0c      	ite	eq
 8004924:	f8c8 2000 	streq.w	r2, [r8]
 8004928:	605a      	strne	r2, [r3, #4]
 800492a:	e7eb      	b.n	8004904 <_malloc_r+0xa8>
 800492c:	4623      	mov	r3, r4
 800492e:	6864      	ldr	r4, [r4, #4]
 8004930:	e7ae      	b.n	8004890 <_malloc_r+0x34>
 8004932:	463c      	mov	r4, r7
 8004934:	687f      	ldr	r7, [r7, #4]
 8004936:	e7b6      	b.n	80048a6 <_malloc_r+0x4a>
 8004938:	461a      	mov	r2, r3
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	42a3      	cmp	r3, r4
 800493e:	d1fb      	bne.n	8004938 <_malloc_r+0xdc>
 8004940:	2300      	movs	r3, #0
 8004942:	6053      	str	r3, [r2, #4]
 8004944:	e7de      	b.n	8004904 <_malloc_r+0xa8>
 8004946:	230c      	movs	r3, #12
 8004948:	4630      	mov	r0, r6
 800494a:	6033      	str	r3, [r6, #0]
 800494c:	f000 f80c 	bl	8004968 <__malloc_unlock>
 8004950:	e794      	b.n	800487c <_malloc_r+0x20>
 8004952:	6005      	str	r5, [r0, #0]
 8004954:	e7d6      	b.n	8004904 <_malloc_r+0xa8>
 8004956:	bf00      	nop
 8004958:	200003fc 	.word	0x200003fc

0800495c <__malloc_lock>:
 800495c:	4801      	ldr	r0, [pc, #4]	@ (8004964 <__malloc_lock+0x8>)
 800495e:	f7ff b8a8 	b.w	8003ab2 <__retarget_lock_acquire_recursive>
 8004962:	bf00      	nop
 8004964:	200003f4 	.word	0x200003f4

08004968 <__malloc_unlock>:
 8004968:	4801      	ldr	r0, [pc, #4]	@ (8004970 <__malloc_unlock+0x8>)
 800496a:	f7ff b8a3 	b.w	8003ab4 <__retarget_lock_release_recursive>
 800496e:	bf00      	nop
 8004970:	200003f4 	.word	0x200003f4

08004974 <_Balloc>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	69c6      	ldr	r6, [r0, #28]
 8004978:	4604      	mov	r4, r0
 800497a:	460d      	mov	r5, r1
 800497c:	b976      	cbnz	r6, 800499c <_Balloc+0x28>
 800497e:	2010      	movs	r0, #16
 8004980:	f7ff ff42 	bl	8004808 <malloc>
 8004984:	4602      	mov	r2, r0
 8004986:	61e0      	str	r0, [r4, #28]
 8004988:	b920      	cbnz	r0, 8004994 <_Balloc+0x20>
 800498a:	216b      	movs	r1, #107	@ 0x6b
 800498c:	4b17      	ldr	r3, [pc, #92]	@ (80049ec <_Balloc+0x78>)
 800498e:	4818      	ldr	r0, [pc, #96]	@ (80049f0 <_Balloc+0x7c>)
 8004990:	f000 fda8 	bl	80054e4 <__assert_func>
 8004994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004998:	6006      	str	r6, [r0, #0]
 800499a:	60c6      	str	r6, [r0, #12]
 800499c:	69e6      	ldr	r6, [r4, #28]
 800499e:	68f3      	ldr	r3, [r6, #12]
 80049a0:	b183      	cbz	r3, 80049c4 <_Balloc+0x50>
 80049a2:	69e3      	ldr	r3, [r4, #28]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80049aa:	b9b8      	cbnz	r0, 80049dc <_Balloc+0x68>
 80049ac:	2101      	movs	r1, #1
 80049ae:	fa01 f605 	lsl.w	r6, r1, r5
 80049b2:	1d72      	adds	r2, r6, #5
 80049b4:	4620      	mov	r0, r4
 80049b6:	0092      	lsls	r2, r2, #2
 80049b8:	f000 fdb2 	bl	8005520 <_calloc_r>
 80049bc:	b160      	cbz	r0, 80049d8 <_Balloc+0x64>
 80049be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80049c2:	e00e      	b.n	80049e2 <_Balloc+0x6e>
 80049c4:	2221      	movs	r2, #33	@ 0x21
 80049c6:	2104      	movs	r1, #4
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 fda9 	bl	8005520 <_calloc_r>
 80049ce:	69e3      	ldr	r3, [r4, #28]
 80049d0:	60f0      	str	r0, [r6, #12]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e4      	bne.n	80049a2 <_Balloc+0x2e>
 80049d8:	2000      	movs	r0, #0
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	6802      	ldr	r2, [r0, #0]
 80049de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80049e2:	2300      	movs	r3, #0
 80049e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80049e8:	e7f7      	b.n	80049da <_Balloc+0x66>
 80049ea:	bf00      	nop
 80049ec:	08005bfb 	.word	0x08005bfb
 80049f0:	08005c7b 	.word	0x08005c7b

080049f4 <_Bfree>:
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	69c6      	ldr	r6, [r0, #28]
 80049f8:	4605      	mov	r5, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	b976      	cbnz	r6, 8004a1c <_Bfree+0x28>
 80049fe:	2010      	movs	r0, #16
 8004a00:	f7ff ff02 	bl	8004808 <malloc>
 8004a04:	4602      	mov	r2, r0
 8004a06:	61e8      	str	r0, [r5, #28]
 8004a08:	b920      	cbnz	r0, 8004a14 <_Bfree+0x20>
 8004a0a:	218f      	movs	r1, #143	@ 0x8f
 8004a0c:	4b08      	ldr	r3, [pc, #32]	@ (8004a30 <_Bfree+0x3c>)
 8004a0e:	4809      	ldr	r0, [pc, #36]	@ (8004a34 <_Bfree+0x40>)
 8004a10:	f000 fd68 	bl	80054e4 <__assert_func>
 8004a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a18:	6006      	str	r6, [r0, #0]
 8004a1a:	60c6      	str	r6, [r0, #12]
 8004a1c:	b13c      	cbz	r4, 8004a2e <_Bfree+0x3a>
 8004a1e:	69eb      	ldr	r3, [r5, #28]
 8004a20:	6862      	ldr	r2, [r4, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a28:	6021      	str	r1, [r4, #0]
 8004a2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	08005bfb 	.word	0x08005bfb
 8004a34:	08005c7b 	.word	0x08005c7b

08004a38 <__multadd>:
 8004a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a3c:	4607      	mov	r7, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	461e      	mov	r6, r3
 8004a42:	2000      	movs	r0, #0
 8004a44:	690d      	ldr	r5, [r1, #16]
 8004a46:	f101 0c14 	add.w	ip, r1, #20
 8004a4a:	f8dc 3000 	ldr.w	r3, [ip]
 8004a4e:	3001      	adds	r0, #1
 8004a50:	b299      	uxth	r1, r3
 8004a52:	fb02 6101 	mla	r1, r2, r1, r6
 8004a56:	0c1e      	lsrs	r6, r3, #16
 8004a58:	0c0b      	lsrs	r3, r1, #16
 8004a5a:	fb02 3306 	mla	r3, r2, r6, r3
 8004a5e:	b289      	uxth	r1, r1
 8004a60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004a64:	4285      	cmp	r5, r0
 8004a66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004a6a:	f84c 1b04 	str.w	r1, [ip], #4
 8004a6e:	dcec      	bgt.n	8004a4a <__multadd+0x12>
 8004a70:	b30e      	cbz	r6, 8004ab6 <__multadd+0x7e>
 8004a72:	68a3      	ldr	r3, [r4, #8]
 8004a74:	42ab      	cmp	r3, r5
 8004a76:	dc19      	bgt.n	8004aac <__multadd+0x74>
 8004a78:	6861      	ldr	r1, [r4, #4]
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	3101      	adds	r1, #1
 8004a7e:	f7ff ff79 	bl	8004974 <_Balloc>
 8004a82:	4680      	mov	r8, r0
 8004a84:	b928      	cbnz	r0, 8004a92 <__multadd+0x5a>
 8004a86:	4602      	mov	r2, r0
 8004a88:	21ba      	movs	r1, #186	@ 0xba
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004abc <__multadd+0x84>)
 8004a8c:	480c      	ldr	r0, [pc, #48]	@ (8004ac0 <__multadd+0x88>)
 8004a8e:	f000 fd29 	bl	80054e4 <__assert_func>
 8004a92:	6922      	ldr	r2, [r4, #16]
 8004a94:	f104 010c 	add.w	r1, r4, #12
 8004a98:	3202      	adds	r2, #2
 8004a9a:	0092      	lsls	r2, r2, #2
 8004a9c:	300c      	adds	r0, #12
 8004a9e:	f000 fd13 	bl	80054c8 <memcpy>
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	f7ff ffa5 	bl	80049f4 <_Bfree>
 8004aaa:	4644      	mov	r4, r8
 8004aac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ab0:	3501      	adds	r5, #1
 8004ab2:	615e      	str	r6, [r3, #20]
 8004ab4:	6125      	str	r5, [r4, #16]
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004abc:	08005c6a 	.word	0x08005c6a
 8004ac0:	08005c7b 	.word	0x08005c7b

08004ac4 <__hi0bits>:
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004aca:	bf3a      	itte	cc
 8004acc:	0403      	lslcc	r3, r0, #16
 8004ace:	2010      	movcc	r0, #16
 8004ad0:	2000      	movcs	r0, #0
 8004ad2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ad6:	bf3c      	itt	cc
 8004ad8:	021b      	lslcc	r3, r3, #8
 8004ada:	3008      	addcc	r0, #8
 8004adc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ae0:	bf3c      	itt	cc
 8004ae2:	011b      	lslcc	r3, r3, #4
 8004ae4:	3004      	addcc	r0, #4
 8004ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aea:	bf3c      	itt	cc
 8004aec:	009b      	lslcc	r3, r3, #2
 8004aee:	3002      	addcc	r0, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	db05      	blt.n	8004b00 <__hi0bits+0x3c>
 8004af4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004af8:	f100 0001 	add.w	r0, r0, #1
 8004afc:	bf08      	it	eq
 8004afe:	2020      	moveq	r0, #32
 8004b00:	4770      	bx	lr

08004b02 <__lo0bits>:
 8004b02:	6803      	ldr	r3, [r0, #0]
 8004b04:	4602      	mov	r2, r0
 8004b06:	f013 0007 	ands.w	r0, r3, #7
 8004b0a:	d00b      	beq.n	8004b24 <__lo0bits+0x22>
 8004b0c:	07d9      	lsls	r1, r3, #31
 8004b0e:	d421      	bmi.n	8004b54 <__lo0bits+0x52>
 8004b10:	0798      	lsls	r0, r3, #30
 8004b12:	bf49      	itett	mi
 8004b14:	085b      	lsrmi	r3, r3, #1
 8004b16:	089b      	lsrpl	r3, r3, #2
 8004b18:	2001      	movmi	r0, #1
 8004b1a:	6013      	strmi	r3, [r2, #0]
 8004b1c:	bf5c      	itt	pl
 8004b1e:	2002      	movpl	r0, #2
 8004b20:	6013      	strpl	r3, [r2, #0]
 8004b22:	4770      	bx	lr
 8004b24:	b299      	uxth	r1, r3
 8004b26:	b909      	cbnz	r1, 8004b2c <__lo0bits+0x2a>
 8004b28:	2010      	movs	r0, #16
 8004b2a:	0c1b      	lsrs	r3, r3, #16
 8004b2c:	b2d9      	uxtb	r1, r3
 8004b2e:	b909      	cbnz	r1, 8004b34 <__lo0bits+0x32>
 8004b30:	3008      	adds	r0, #8
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	0719      	lsls	r1, r3, #28
 8004b36:	bf04      	itt	eq
 8004b38:	091b      	lsreq	r3, r3, #4
 8004b3a:	3004      	addeq	r0, #4
 8004b3c:	0799      	lsls	r1, r3, #30
 8004b3e:	bf04      	itt	eq
 8004b40:	089b      	lsreq	r3, r3, #2
 8004b42:	3002      	addeq	r0, #2
 8004b44:	07d9      	lsls	r1, r3, #31
 8004b46:	d403      	bmi.n	8004b50 <__lo0bits+0x4e>
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	f100 0001 	add.w	r0, r0, #1
 8004b4e:	d003      	beq.n	8004b58 <__lo0bits+0x56>
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4770      	bx	lr
 8004b54:	2000      	movs	r0, #0
 8004b56:	4770      	bx	lr
 8004b58:	2020      	movs	r0, #32
 8004b5a:	4770      	bx	lr

08004b5c <__i2b>:
 8004b5c:	b510      	push	{r4, lr}
 8004b5e:	460c      	mov	r4, r1
 8004b60:	2101      	movs	r1, #1
 8004b62:	f7ff ff07 	bl	8004974 <_Balloc>
 8004b66:	4602      	mov	r2, r0
 8004b68:	b928      	cbnz	r0, 8004b76 <__i2b+0x1a>
 8004b6a:	f240 1145 	movw	r1, #325	@ 0x145
 8004b6e:	4b04      	ldr	r3, [pc, #16]	@ (8004b80 <__i2b+0x24>)
 8004b70:	4804      	ldr	r0, [pc, #16]	@ (8004b84 <__i2b+0x28>)
 8004b72:	f000 fcb7 	bl	80054e4 <__assert_func>
 8004b76:	2301      	movs	r3, #1
 8004b78:	6144      	str	r4, [r0, #20]
 8004b7a:	6103      	str	r3, [r0, #16]
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	bf00      	nop
 8004b80:	08005c6a 	.word	0x08005c6a
 8004b84:	08005c7b 	.word	0x08005c7b

08004b88 <__multiply>:
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	4614      	mov	r4, r2
 8004b8e:	690a      	ldr	r2, [r1, #16]
 8004b90:	6923      	ldr	r3, [r4, #16]
 8004b92:	460f      	mov	r7, r1
 8004b94:	429a      	cmp	r2, r3
 8004b96:	bfa2      	ittt	ge
 8004b98:	4623      	movge	r3, r4
 8004b9a:	460c      	movge	r4, r1
 8004b9c:	461f      	movge	r7, r3
 8004b9e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004ba2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004ba6:	68a3      	ldr	r3, [r4, #8]
 8004ba8:	6861      	ldr	r1, [r4, #4]
 8004baa:	eb0a 0609 	add.w	r6, sl, r9
 8004bae:	42b3      	cmp	r3, r6
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	bfb8      	it	lt
 8004bb4:	3101      	addlt	r1, #1
 8004bb6:	f7ff fedd 	bl	8004974 <_Balloc>
 8004bba:	b930      	cbnz	r0, 8004bca <__multiply+0x42>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004bc2:	4b43      	ldr	r3, [pc, #268]	@ (8004cd0 <__multiply+0x148>)
 8004bc4:	4843      	ldr	r0, [pc, #268]	@ (8004cd4 <__multiply+0x14c>)
 8004bc6:	f000 fc8d 	bl	80054e4 <__assert_func>
 8004bca:	f100 0514 	add.w	r5, r0, #20
 8004bce:	462b      	mov	r3, r5
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004bd6:	4543      	cmp	r3, r8
 8004bd8:	d321      	bcc.n	8004c1e <__multiply+0x96>
 8004bda:	f107 0114 	add.w	r1, r7, #20
 8004bde:	f104 0214 	add.w	r2, r4, #20
 8004be2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004be6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004bea:	9302      	str	r3, [sp, #8]
 8004bec:	1b13      	subs	r3, r2, r4
 8004bee:	3b15      	subs	r3, #21
 8004bf0:	f023 0303 	bic.w	r3, r3, #3
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	f104 0715 	add.w	r7, r4, #21
 8004bfa:	42ba      	cmp	r2, r7
 8004bfc:	bf38      	it	cc
 8004bfe:	2304      	movcc	r3, #4
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	9b02      	ldr	r3, [sp, #8]
 8004c04:	9103      	str	r1, [sp, #12]
 8004c06:	428b      	cmp	r3, r1
 8004c08:	d80c      	bhi.n	8004c24 <__multiply+0x9c>
 8004c0a:	2e00      	cmp	r6, #0
 8004c0c:	dd03      	ble.n	8004c16 <__multiply+0x8e>
 8004c0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d05a      	beq.n	8004ccc <__multiply+0x144>
 8004c16:	6106      	str	r6, [r0, #16]
 8004c18:	b005      	add	sp, #20
 8004c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1e:	f843 2b04 	str.w	r2, [r3], #4
 8004c22:	e7d8      	b.n	8004bd6 <__multiply+0x4e>
 8004c24:	f8b1 a000 	ldrh.w	sl, [r1]
 8004c28:	f1ba 0f00 	cmp.w	sl, #0
 8004c2c:	d023      	beq.n	8004c76 <__multiply+0xee>
 8004c2e:	46a9      	mov	r9, r5
 8004c30:	f04f 0c00 	mov.w	ip, #0
 8004c34:	f104 0e14 	add.w	lr, r4, #20
 8004c38:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004c3c:	f8d9 3000 	ldr.w	r3, [r9]
 8004c40:	fa1f fb87 	uxth.w	fp, r7
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	fb0a 330b 	mla	r3, sl, fp, r3
 8004c4a:	4463      	add	r3, ip
 8004c4c:	f8d9 c000 	ldr.w	ip, [r9]
 8004c50:	0c3f      	lsrs	r7, r7, #16
 8004c52:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004c56:	fb0a c707 	mla	r7, sl, r7, ip
 8004c5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004c64:	4572      	cmp	r2, lr
 8004c66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004c6a:	f849 3b04 	str.w	r3, [r9], #4
 8004c6e:	d8e3      	bhi.n	8004c38 <__multiply+0xb0>
 8004c70:	9b01      	ldr	r3, [sp, #4]
 8004c72:	f845 c003 	str.w	ip, [r5, r3]
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	3104      	adds	r1, #4
 8004c7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004c7e:	f1b9 0f00 	cmp.w	r9, #0
 8004c82:	d021      	beq.n	8004cc8 <__multiply+0x140>
 8004c84:	46ae      	mov	lr, r5
 8004c86:	f04f 0a00 	mov.w	sl, #0
 8004c8a:	682b      	ldr	r3, [r5, #0]
 8004c8c:	f104 0c14 	add.w	ip, r4, #20
 8004c90:	f8bc b000 	ldrh.w	fp, [ip]
 8004c94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	fb09 770b 	mla	r7, r9, fp, r7
 8004c9e:	4457      	add	r7, sl
 8004ca0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004ca4:	f84e 3b04 	str.w	r3, [lr], #4
 8004ca8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004cac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004cb0:	f8be 3000 	ldrh.w	r3, [lr]
 8004cb4:	4562      	cmp	r2, ip
 8004cb6:	fb09 330a 	mla	r3, r9, sl, r3
 8004cba:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004cbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004cc2:	d8e5      	bhi.n	8004c90 <__multiply+0x108>
 8004cc4:	9f01      	ldr	r7, [sp, #4]
 8004cc6:	51eb      	str	r3, [r5, r7]
 8004cc8:	3504      	adds	r5, #4
 8004cca:	e79a      	b.n	8004c02 <__multiply+0x7a>
 8004ccc:	3e01      	subs	r6, #1
 8004cce:	e79c      	b.n	8004c0a <__multiply+0x82>
 8004cd0:	08005c6a 	.word	0x08005c6a
 8004cd4:	08005c7b 	.word	0x08005c7b

08004cd8 <__pow5mult>:
 8004cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cdc:	4615      	mov	r5, r2
 8004cde:	f012 0203 	ands.w	r2, r2, #3
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	460e      	mov	r6, r1
 8004ce6:	d007      	beq.n	8004cf8 <__pow5mult+0x20>
 8004ce8:	4c25      	ldr	r4, [pc, #148]	@ (8004d80 <__pow5mult+0xa8>)
 8004cea:	3a01      	subs	r2, #1
 8004cec:	2300      	movs	r3, #0
 8004cee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004cf2:	f7ff fea1 	bl	8004a38 <__multadd>
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	10ad      	asrs	r5, r5, #2
 8004cfa:	d03d      	beq.n	8004d78 <__pow5mult+0xa0>
 8004cfc:	69fc      	ldr	r4, [r7, #28]
 8004cfe:	b97c      	cbnz	r4, 8004d20 <__pow5mult+0x48>
 8004d00:	2010      	movs	r0, #16
 8004d02:	f7ff fd81 	bl	8004808 <malloc>
 8004d06:	4602      	mov	r2, r0
 8004d08:	61f8      	str	r0, [r7, #28]
 8004d0a:	b928      	cbnz	r0, 8004d18 <__pow5mult+0x40>
 8004d0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004d10:	4b1c      	ldr	r3, [pc, #112]	@ (8004d84 <__pow5mult+0xac>)
 8004d12:	481d      	ldr	r0, [pc, #116]	@ (8004d88 <__pow5mult+0xb0>)
 8004d14:	f000 fbe6 	bl	80054e4 <__assert_func>
 8004d18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d1c:	6004      	str	r4, [r0, #0]
 8004d1e:	60c4      	str	r4, [r0, #12]
 8004d20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004d24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004d28:	b94c      	cbnz	r4, 8004d3e <__pow5mult+0x66>
 8004d2a:	f240 2171 	movw	r1, #625	@ 0x271
 8004d2e:	4638      	mov	r0, r7
 8004d30:	f7ff ff14 	bl	8004b5c <__i2b>
 8004d34:	2300      	movs	r3, #0
 8004d36:	4604      	mov	r4, r0
 8004d38:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d3c:	6003      	str	r3, [r0, #0]
 8004d3e:	f04f 0900 	mov.w	r9, #0
 8004d42:	07eb      	lsls	r3, r5, #31
 8004d44:	d50a      	bpl.n	8004d5c <__pow5mult+0x84>
 8004d46:	4631      	mov	r1, r6
 8004d48:	4622      	mov	r2, r4
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	f7ff ff1c 	bl	8004b88 <__multiply>
 8004d50:	4680      	mov	r8, r0
 8004d52:	4631      	mov	r1, r6
 8004d54:	4638      	mov	r0, r7
 8004d56:	f7ff fe4d 	bl	80049f4 <_Bfree>
 8004d5a:	4646      	mov	r6, r8
 8004d5c:	106d      	asrs	r5, r5, #1
 8004d5e:	d00b      	beq.n	8004d78 <__pow5mult+0xa0>
 8004d60:	6820      	ldr	r0, [r4, #0]
 8004d62:	b938      	cbnz	r0, 8004d74 <__pow5mult+0x9c>
 8004d64:	4622      	mov	r2, r4
 8004d66:	4621      	mov	r1, r4
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f7ff ff0d 	bl	8004b88 <__multiply>
 8004d6e:	6020      	str	r0, [r4, #0]
 8004d70:	f8c0 9000 	str.w	r9, [r0]
 8004d74:	4604      	mov	r4, r0
 8004d76:	e7e4      	b.n	8004d42 <__pow5mult+0x6a>
 8004d78:	4630      	mov	r0, r6
 8004d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d7e:	bf00      	nop
 8004d80:	08005cd4 	.word	0x08005cd4
 8004d84:	08005bfb 	.word	0x08005bfb
 8004d88:	08005c7b 	.word	0x08005c7b

08004d8c <__lshift>:
 8004d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d90:	460c      	mov	r4, r1
 8004d92:	4607      	mov	r7, r0
 8004d94:	4691      	mov	r9, r2
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	6849      	ldr	r1, [r1, #4]
 8004d9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d9e:	68a3      	ldr	r3, [r4, #8]
 8004da0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004da4:	f108 0601 	add.w	r6, r8, #1
 8004da8:	42b3      	cmp	r3, r6
 8004daa:	db0b      	blt.n	8004dc4 <__lshift+0x38>
 8004dac:	4638      	mov	r0, r7
 8004dae:	f7ff fde1 	bl	8004974 <_Balloc>
 8004db2:	4605      	mov	r5, r0
 8004db4:	b948      	cbnz	r0, 8004dca <__lshift+0x3e>
 8004db6:	4602      	mov	r2, r0
 8004db8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004dbc:	4b27      	ldr	r3, [pc, #156]	@ (8004e5c <__lshift+0xd0>)
 8004dbe:	4828      	ldr	r0, [pc, #160]	@ (8004e60 <__lshift+0xd4>)
 8004dc0:	f000 fb90 	bl	80054e4 <__assert_func>
 8004dc4:	3101      	adds	r1, #1
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	e7ee      	b.n	8004da8 <__lshift+0x1c>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f100 0114 	add.w	r1, r0, #20
 8004dd0:	f100 0210 	add.w	r2, r0, #16
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	4553      	cmp	r3, sl
 8004dd8:	db33      	blt.n	8004e42 <__lshift+0xb6>
 8004dda:	6920      	ldr	r0, [r4, #16]
 8004ddc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004de0:	f104 0314 	add.w	r3, r4, #20
 8004de4:	f019 091f 	ands.w	r9, r9, #31
 8004de8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004dec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004df0:	d02b      	beq.n	8004e4a <__lshift+0xbe>
 8004df2:	468a      	mov	sl, r1
 8004df4:	2200      	movs	r2, #0
 8004df6:	f1c9 0e20 	rsb	lr, r9, #32
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	fa00 f009 	lsl.w	r0, r0, r9
 8004e00:	4310      	orrs	r0, r2
 8004e02:	f84a 0b04 	str.w	r0, [sl], #4
 8004e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e0a:	459c      	cmp	ip, r3
 8004e0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004e10:	d8f3      	bhi.n	8004dfa <__lshift+0x6e>
 8004e12:	ebac 0304 	sub.w	r3, ip, r4
 8004e16:	3b15      	subs	r3, #21
 8004e18:	f023 0303 	bic.w	r3, r3, #3
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	f104 0015 	add.w	r0, r4, #21
 8004e22:	4584      	cmp	ip, r0
 8004e24:	bf38      	it	cc
 8004e26:	2304      	movcc	r3, #4
 8004e28:	50ca      	str	r2, [r1, r3]
 8004e2a:	b10a      	cbz	r2, 8004e30 <__lshift+0xa4>
 8004e2c:	f108 0602 	add.w	r6, r8, #2
 8004e30:	3e01      	subs	r6, #1
 8004e32:	4638      	mov	r0, r7
 8004e34:	4621      	mov	r1, r4
 8004e36:	612e      	str	r6, [r5, #16]
 8004e38:	f7ff fddc 	bl	80049f4 <_Bfree>
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e42:	f842 0f04 	str.w	r0, [r2, #4]!
 8004e46:	3301      	adds	r3, #1
 8004e48:	e7c5      	b.n	8004dd6 <__lshift+0x4a>
 8004e4a:	3904      	subs	r1, #4
 8004e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e50:	459c      	cmp	ip, r3
 8004e52:	f841 2f04 	str.w	r2, [r1, #4]!
 8004e56:	d8f9      	bhi.n	8004e4c <__lshift+0xc0>
 8004e58:	e7ea      	b.n	8004e30 <__lshift+0xa4>
 8004e5a:	bf00      	nop
 8004e5c:	08005c6a 	.word	0x08005c6a
 8004e60:	08005c7b 	.word	0x08005c7b

08004e64 <__mcmp>:
 8004e64:	4603      	mov	r3, r0
 8004e66:	690a      	ldr	r2, [r1, #16]
 8004e68:	6900      	ldr	r0, [r0, #16]
 8004e6a:	b530      	push	{r4, r5, lr}
 8004e6c:	1a80      	subs	r0, r0, r2
 8004e6e:	d10e      	bne.n	8004e8e <__mcmp+0x2a>
 8004e70:	3314      	adds	r3, #20
 8004e72:	3114      	adds	r1, #20
 8004e74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004e78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004e7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e84:	4295      	cmp	r5, r2
 8004e86:	d003      	beq.n	8004e90 <__mcmp+0x2c>
 8004e88:	d205      	bcs.n	8004e96 <__mcmp+0x32>
 8004e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8e:	bd30      	pop	{r4, r5, pc}
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	d3f3      	bcc.n	8004e7c <__mcmp+0x18>
 8004e94:	e7fb      	b.n	8004e8e <__mcmp+0x2a>
 8004e96:	2001      	movs	r0, #1
 8004e98:	e7f9      	b.n	8004e8e <__mcmp+0x2a>
	...

08004e9c <__mdiff>:
 8004e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea0:	4689      	mov	r9, r1
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4648      	mov	r0, r9
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	f7ff ffdb 	bl	8004e64 <__mcmp>
 8004eae:	1e05      	subs	r5, r0, #0
 8004eb0:	d112      	bne.n	8004ed8 <__mdiff+0x3c>
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	f7ff fd5d 	bl	8004974 <_Balloc>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	b928      	cbnz	r0, 8004eca <__mdiff+0x2e>
 8004ebe:	f240 2137 	movw	r1, #567	@ 0x237
 8004ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fbc <__mdiff+0x120>)
 8004ec4:	483e      	ldr	r0, [pc, #248]	@ (8004fc0 <__mdiff+0x124>)
 8004ec6:	f000 fb0d 	bl	80054e4 <__assert_func>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	b003      	add	sp, #12
 8004ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed8:	bfbc      	itt	lt
 8004eda:	464b      	movlt	r3, r9
 8004edc:	46a1      	movlt	r9, r4
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004ee4:	bfba      	itte	lt
 8004ee6:	461c      	movlt	r4, r3
 8004ee8:	2501      	movlt	r5, #1
 8004eea:	2500      	movge	r5, #0
 8004eec:	f7ff fd42 	bl	8004974 <_Balloc>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	b918      	cbnz	r0, 8004efc <__mdiff+0x60>
 8004ef4:	f240 2145 	movw	r1, #581	@ 0x245
 8004ef8:	4b30      	ldr	r3, [pc, #192]	@ (8004fbc <__mdiff+0x120>)
 8004efa:	e7e3      	b.n	8004ec4 <__mdiff+0x28>
 8004efc:	f100 0b14 	add.w	fp, r0, #20
 8004f00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004f04:	f109 0310 	add.w	r3, r9, #16
 8004f08:	60c5      	str	r5, [r0, #12]
 8004f0a:	f04f 0c00 	mov.w	ip, #0
 8004f0e:	f109 0514 	add.w	r5, r9, #20
 8004f12:	46d9      	mov	r9, fp
 8004f14:	6926      	ldr	r6, [r4, #16]
 8004f16:	f104 0e14 	add.w	lr, r4, #20
 8004f1a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004f1e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	9b01      	ldr	r3, [sp, #4]
 8004f26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004f2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004f2e:	b281      	uxth	r1, r0
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	fa1f f38a 	uxth.w	r3, sl
 8004f36:	1a5b      	subs	r3, r3, r1
 8004f38:	0c00      	lsrs	r0, r0, #16
 8004f3a:	4463      	add	r3, ip
 8004f3c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004f40:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004f4a:	4576      	cmp	r6, lr
 8004f4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004f50:	f849 3b04 	str.w	r3, [r9], #4
 8004f54:	d8e6      	bhi.n	8004f24 <__mdiff+0x88>
 8004f56:	1b33      	subs	r3, r6, r4
 8004f58:	3b15      	subs	r3, #21
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	3415      	adds	r4, #21
 8004f60:	3304      	adds	r3, #4
 8004f62:	42a6      	cmp	r6, r4
 8004f64:	bf38      	it	cc
 8004f66:	2304      	movcc	r3, #4
 8004f68:	441d      	add	r5, r3
 8004f6a:	445b      	add	r3, fp
 8004f6c:	461e      	mov	r6, r3
 8004f6e:	462c      	mov	r4, r5
 8004f70:	4544      	cmp	r4, r8
 8004f72:	d30e      	bcc.n	8004f92 <__mdiff+0xf6>
 8004f74:	f108 0103 	add.w	r1, r8, #3
 8004f78:	1b49      	subs	r1, r1, r5
 8004f7a:	f021 0103 	bic.w	r1, r1, #3
 8004f7e:	3d03      	subs	r5, #3
 8004f80:	45a8      	cmp	r8, r5
 8004f82:	bf38      	it	cc
 8004f84:	2100      	movcc	r1, #0
 8004f86:	440b      	add	r3, r1
 8004f88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004f8c:	b199      	cbz	r1, 8004fb6 <__mdiff+0x11a>
 8004f8e:	6117      	str	r7, [r2, #16]
 8004f90:	e79e      	b.n	8004ed0 <__mdiff+0x34>
 8004f92:	46e6      	mov	lr, ip
 8004f94:	f854 1b04 	ldr.w	r1, [r4], #4
 8004f98:	fa1f fc81 	uxth.w	ip, r1
 8004f9c:	44f4      	add	ip, lr
 8004f9e:	0c08      	lsrs	r0, r1, #16
 8004fa0:	4471      	add	r1, lr
 8004fa2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004fa6:	b289      	uxth	r1, r1
 8004fa8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004fac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004fb0:	f846 1b04 	str.w	r1, [r6], #4
 8004fb4:	e7dc      	b.n	8004f70 <__mdiff+0xd4>
 8004fb6:	3f01      	subs	r7, #1
 8004fb8:	e7e6      	b.n	8004f88 <__mdiff+0xec>
 8004fba:	bf00      	nop
 8004fbc:	08005c6a 	.word	0x08005c6a
 8004fc0:	08005c7b 	.word	0x08005c7b

08004fc4 <__d2b>:
 8004fc4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004fc8:	2101      	movs	r1, #1
 8004fca:	4690      	mov	r8, r2
 8004fcc:	4699      	mov	r9, r3
 8004fce:	9e08      	ldr	r6, [sp, #32]
 8004fd0:	f7ff fcd0 	bl	8004974 <_Balloc>
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	b930      	cbnz	r0, 8004fe6 <__d2b+0x22>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	f240 310f 	movw	r1, #783	@ 0x30f
 8004fde:	4b23      	ldr	r3, [pc, #140]	@ (800506c <__d2b+0xa8>)
 8004fe0:	4823      	ldr	r0, [pc, #140]	@ (8005070 <__d2b+0xac>)
 8004fe2:	f000 fa7f 	bl	80054e4 <__assert_func>
 8004fe6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004fea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004fee:	b10d      	cbz	r5, 8004ff4 <__d2b+0x30>
 8004ff0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	f1b8 0300 	subs.w	r3, r8, #0
 8004ffa:	d024      	beq.n	8005046 <__d2b+0x82>
 8004ffc:	4668      	mov	r0, sp
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	f7ff fd7f 	bl	8004b02 <__lo0bits>
 8005004:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005008:	b1d8      	cbz	r0, 8005042 <__d2b+0x7e>
 800500a:	f1c0 0320 	rsb	r3, r0, #32
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	430b      	orrs	r3, r1
 8005014:	40c2      	lsrs	r2, r0
 8005016:	6163      	str	r3, [r4, #20]
 8005018:	9201      	str	r2, [sp, #4]
 800501a:	9b01      	ldr	r3, [sp, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf0c      	ite	eq
 8005020:	2201      	moveq	r2, #1
 8005022:	2202      	movne	r2, #2
 8005024:	61a3      	str	r3, [r4, #24]
 8005026:	6122      	str	r2, [r4, #16]
 8005028:	b1ad      	cbz	r5, 8005056 <__d2b+0x92>
 800502a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800502e:	4405      	add	r5, r0
 8005030:	6035      	str	r5, [r6, #0]
 8005032:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005038:	6018      	str	r0, [r3, #0]
 800503a:	4620      	mov	r0, r4
 800503c:	b002      	add	sp, #8
 800503e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005042:	6161      	str	r1, [r4, #20]
 8005044:	e7e9      	b.n	800501a <__d2b+0x56>
 8005046:	a801      	add	r0, sp, #4
 8005048:	f7ff fd5b 	bl	8004b02 <__lo0bits>
 800504c:	9b01      	ldr	r3, [sp, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	6163      	str	r3, [r4, #20]
 8005052:	3020      	adds	r0, #32
 8005054:	e7e7      	b.n	8005026 <__d2b+0x62>
 8005056:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800505a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800505e:	6030      	str	r0, [r6, #0]
 8005060:	6918      	ldr	r0, [r3, #16]
 8005062:	f7ff fd2f 	bl	8004ac4 <__hi0bits>
 8005066:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800506a:	e7e4      	b.n	8005036 <__d2b+0x72>
 800506c:	08005c6a 	.word	0x08005c6a
 8005070:	08005c7b 	.word	0x08005c7b

08005074 <__ssputs_r>:
 8005074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	461f      	mov	r7, r3
 800507a:	688e      	ldr	r6, [r1, #8]
 800507c:	4682      	mov	sl, r0
 800507e:	42be      	cmp	r6, r7
 8005080:	460c      	mov	r4, r1
 8005082:	4690      	mov	r8, r2
 8005084:	680b      	ldr	r3, [r1, #0]
 8005086:	d82d      	bhi.n	80050e4 <__ssputs_r+0x70>
 8005088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800508c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005090:	d026      	beq.n	80050e0 <__ssputs_r+0x6c>
 8005092:	6965      	ldr	r5, [r4, #20]
 8005094:	6909      	ldr	r1, [r1, #16]
 8005096:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800509a:	eba3 0901 	sub.w	r9, r3, r1
 800509e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050a2:	1c7b      	adds	r3, r7, #1
 80050a4:	444b      	add	r3, r9
 80050a6:	106d      	asrs	r5, r5, #1
 80050a8:	429d      	cmp	r5, r3
 80050aa:	bf38      	it	cc
 80050ac:	461d      	movcc	r5, r3
 80050ae:	0553      	lsls	r3, r2, #21
 80050b0:	d527      	bpl.n	8005102 <__ssputs_r+0x8e>
 80050b2:	4629      	mov	r1, r5
 80050b4:	f7ff fbd2 	bl	800485c <_malloc_r>
 80050b8:	4606      	mov	r6, r0
 80050ba:	b360      	cbz	r0, 8005116 <__ssputs_r+0xa2>
 80050bc:	464a      	mov	r2, r9
 80050be:	6921      	ldr	r1, [r4, #16]
 80050c0:	f000 fa02 	bl	80054c8 <memcpy>
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ce:	81a3      	strh	r3, [r4, #12]
 80050d0:	6126      	str	r6, [r4, #16]
 80050d2:	444e      	add	r6, r9
 80050d4:	6026      	str	r6, [r4, #0]
 80050d6:	463e      	mov	r6, r7
 80050d8:	6165      	str	r5, [r4, #20]
 80050da:	eba5 0509 	sub.w	r5, r5, r9
 80050de:	60a5      	str	r5, [r4, #8]
 80050e0:	42be      	cmp	r6, r7
 80050e2:	d900      	bls.n	80050e6 <__ssputs_r+0x72>
 80050e4:	463e      	mov	r6, r7
 80050e6:	4632      	mov	r2, r6
 80050e8:	4641      	mov	r1, r8
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	f000 f9c2 	bl	8005474 <memmove>
 80050f0:	2000      	movs	r0, #0
 80050f2:	68a3      	ldr	r3, [r4, #8]
 80050f4:	1b9b      	subs	r3, r3, r6
 80050f6:	60a3      	str	r3, [r4, #8]
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	4433      	add	r3, r6
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005102:	462a      	mov	r2, r5
 8005104:	f000 fa32 	bl	800556c <_realloc_r>
 8005108:	4606      	mov	r6, r0
 800510a:	2800      	cmp	r0, #0
 800510c:	d1e0      	bne.n	80050d0 <__ssputs_r+0x5c>
 800510e:	4650      	mov	r0, sl
 8005110:	6921      	ldr	r1, [r4, #16]
 8005112:	f7ff fb31 	bl	8004778 <_free_r>
 8005116:	230c      	movs	r3, #12
 8005118:	f8ca 3000 	str.w	r3, [sl]
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	f04f 30ff 	mov.w	r0, #4294967295
 8005122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005126:	81a3      	strh	r3, [r4, #12]
 8005128:	e7e9      	b.n	80050fe <__ssputs_r+0x8a>
	...

0800512c <_svfiprintf_r>:
 800512c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005130:	4698      	mov	r8, r3
 8005132:	898b      	ldrh	r3, [r1, #12]
 8005134:	4607      	mov	r7, r0
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	460d      	mov	r5, r1
 800513a:	4614      	mov	r4, r2
 800513c:	b09d      	sub	sp, #116	@ 0x74
 800513e:	d510      	bpl.n	8005162 <_svfiprintf_r+0x36>
 8005140:	690b      	ldr	r3, [r1, #16]
 8005142:	b973      	cbnz	r3, 8005162 <_svfiprintf_r+0x36>
 8005144:	2140      	movs	r1, #64	@ 0x40
 8005146:	f7ff fb89 	bl	800485c <_malloc_r>
 800514a:	6028      	str	r0, [r5, #0]
 800514c:	6128      	str	r0, [r5, #16]
 800514e:	b930      	cbnz	r0, 800515e <_svfiprintf_r+0x32>
 8005150:	230c      	movs	r3, #12
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	b01d      	add	sp, #116	@ 0x74
 800515a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515e:	2340      	movs	r3, #64	@ 0x40
 8005160:	616b      	str	r3, [r5, #20]
 8005162:	2300      	movs	r3, #0
 8005164:	9309      	str	r3, [sp, #36]	@ 0x24
 8005166:	2320      	movs	r3, #32
 8005168:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800516c:	2330      	movs	r3, #48	@ 0x30
 800516e:	f04f 0901 	mov.w	r9, #1
 8005172:	f8cd 800c 	str.w	r8, [sp, #12]
 8005176:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005310 <_svfiprintf_r+0x1e4>
 800517a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800517e:	4623      	mov	r3, r4
 8005180:	469a      	mov	sl, r3
 8005182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005186:	b10a      	cbz	r2, 800518c <_svfiprintf_r+0x60>
 8005188:	2a25      	cmp	r2, #37	@ 0x25
 800518a:	d1f9      	bne.n	8005180 <_svfiprintf_r+0x54>
 800518c:	ebba 0b04 	subs.w	fp, sl, r4
 8005190:	d00b      	beq.n	80051aa <_svfiprintf_r+0x7e>
 8005192:	465b      	mov	r3, fp
 8005194:	4622      	mov	r2, r4
 8005196:	4629      	mov	r1, r5
 8005198:	4638      	mov	r0, r7
 800519a:	f7ff ff6b 	bl	8005074 <__ssputs_r>
 800519e:	3001      	adds	r0, #1
 80051a0:	f000 80a7 	beq.w	80052f2 <_svfiprintf_r+0x1c6>
 80051a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051a6:	445a      	add	r2, fp
 80051a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80051aa:	f89a 3000 	ldrb.w	r3, [sl]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 809f 	beq.w	80052f2 <_svfiprintf_r+0x1c6>
 80051b4:	2300      	movs	r3, #0
 80051b6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051be:	f10a 0a01 	add.w	sl, sl, #1
 80051c2:	9304      	str	r3, [sp, #16]
 80051c4:	9307      	str	r3, [sp, #28]
 80051c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80051cc:	4654      	mov	r4, sl
 80051ce:	2205      	movs	r2, #5
 80051d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d4:	484e      	ldr	r0, [pc, #312]	@ (8005310 <_svfiprintf_r+0x1e4>)
 80051d6:	f7fe fc6e 	bl	8003ab6 <memchr>
 80051da:	9a04      	ldr	r2, [sp, #16]
 80051dc:	b9d8      	cbnz	r0, 8005216 <_svfiprintf_r+0xea>
 80051de:	06d0      	lsls	r0, r2, #27
 80051e0:	bf44      	itt	mi
 80051e2:	2320      	movmi	r3, #32
 80051e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051e8:	0711      	lsls	r1, r2, #28
 80051ea:	bf44      	itt	mi
 80051ec:	232b      	movmi	r3, #43	@ 0x2b
 80051ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051f2:	f89a 3000 	ldrb.w	r3, [sl]
 80051f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80051f8:	d015      	beq.n	8005226 <_svfiprintf_r+0xfa>
 80051fa:	4654      	mov	r4, sl
 80051fc:	2000      	movs	r0, #0
 80051fe:	f04f 0c0a 	mov.w	ip, #10
 8005202:	9a07      	ldr	r2, [sp, #28]
 8005204:	4621      	mov	r1, r4
 8005206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800520a:	3b30      	subs	r3, #48	@ 0x30
 800520c:	2b09      	cmp	r3, #9
 800520e:	d94b      	bls.n	80052a8 <_svfiprintf_r+0x17c>
 8005210:	b1b0      	cbz	r0, 8005240 <_svfiprintf_r+0x114>
 8005212:	9207      	str	r2, [sp, #28]
 8005214:	e014      	b.n	8005240 <_svfiprintf_r+0x114>
 8005216:	eba0 0308 	sub.w	r3, r0, r8
 800521a:	fa09 f303 	lsl.w	r3, r9, r3
 800521e:	4313      	orrs	r3, r2
 8005220:	46a2      	mov	sl, r4
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	e7d2      	b.n	80051cc <_svfiprintf_r+0xa0>
 8005226:	9b03      	ldr	r3, [sp, #12]
 8005228:	1d19      	adds	r1, r3, #4
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	9103      	str	r1, [sp, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	bfbb      	ittet	lt
 8005232:	425b      	neglt	r3, r3
 8005234:	f042 0202 	orrlt.w	r2, r2, #2
 8005238:	9307      	strge	r3, [sp, #28]
 800523a:	9307      	strlt	r3, [sp, #28]
 800523c:	bfb8      	it	lt
 800523e:	9204      	strlt	r2, [sp, #16]
 8005240:	7823      	ldrb	r3, [r4, #0]
 8005242:	2b2e      	cmp	r3, #46	@ 0x2e
 8005244:	d10a      	bne.n	800525c <_svfiprintf_r+0x130>
 8005246:	7863      	ldrb	r3, [r4, #1]
 8005248:	2b2a      	cmp	r3, #42	@ 0x2a
 800524a:	d132      	bne.n	80052b2 <_svfiprintf_r+0x186>
 800524c:	9b03      	ldr	r3, [sp, #12]
 800524e:	3402      	adds	r4, #2
 8005250:	1d1a      	adds	r2, r3, #4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	9203      	str	r2, [sp, #12]
 8005256:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800525a:	9305      	str	r3, [sp, #20]
 800525c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005314 <_svfiprintf_r+0x1e8>
 8005260:	2203      	movs	r2, #3
 8005262:	4650      	mov	r0, sl
 8005264:	7821      	ldrb	r1, [r4, #0]
 8005266:	f7fe fc26 	bl	8003ab6 <memchr>
 800526a:	b138      	cbz	r0, 800527c <_svfiprintf_r+0x150>
 800526c:	2240      	movs	r2, #64	@ 0x40
 800526e:	9b04      	ldr	r3, [sp, #16]
 8005270:	eba0 000a 	sub.w	r0, r0, sl
 8005274:	4082      	lsls	r2, r0
 8005276:	4313      	orrs	r3, r2
 8005278:	3401      	adds	r4, #1
 800527a:	9304      	str	r3, [sp, #16]
 800527c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005280:	2206      	movs	r2, #6
 8005282:	4825      	ldr	r0, [pc, #148]	@ (8005318 <_svfiprintf_r+0x1ec>)
 8005284:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005288:	f7fe fc15 	bl	8003ab6 <memchr>
 800528c:	2800      	cmp	r0, #0
 800528e:	d036      	beq.n	80052fe <_svfiprintf_r+0x1d2>
 8005290:	4b22      	ldr	r3, [pc, #136]	@ (800531c <_svfiprintf_r+0x1f0>)
 8005292:	bb1b      	cbnz	r3, 80052dc <_svfiprintf_r+0x1b0>
 8005294:	9b03      	ldr	r3, [sp, #12]
 8005296:	3307      	adds	r3, #7
 8005298:	f023 0307 	bic.w	r3, r3, #7
 800529c:	3308      	adds	r3, #8
 800529e:	9303      	str	r3, [sp, #12]
 80052a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a2:	4433      	add	r3, r6
 80052a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052a6:	e76a      	b.n	800517e <_svfiprintf_r+0x52>
 80052a8:	460c      	mov	r4, r1
 80052aa:	2001      	movs	r0, #1
 80052ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80052b0:	e7a8      	b.n	8005204 <_svfiprintf_r+0xd8>
 80052b2:	2300      	movs	r3, #0
 80052b4:	f04f 0c0a 	mov.w	ip, #10
 80052b8:	4619      	mov	r1, r3
 80052ba:	3401      	adds	r4, #1
 80052bc:	9305      	str	r3, [sp, #20]
 80052be:	4620      	mov	r0, r4
 80052c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052c4:	3a30      	subs	r2, #48	@ 0x30
 80052c6:	2a09      	cmp	r2, #9
 80052c8:	d903      	bls.n	80052d2 <_svfiprintf_r+0x1a6>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0c6      	beq.n	800525c <_svfiprintf_r+0x130>
 80052ce:	9105      	str	r1, [sp, #20]
 80052d0:	e7c4      	b.n	800525c <_svfiprintf_r+0x130>
 80052d2:	4604      	mov	r4, r0
 80052d4:	2301      	movs	r3, #1
 80052d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052da:	e7f0      	b.n	80052be <_svfiprintf_r+0x192>
 80052dc:	ab03      	add	r3, sp, #12
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	462a      	mov	r2, r5
 80052e2:	4638      	mov	r0, r7
 80052e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005320 <_svfiprintf_r+0x1f4>)
 80052e6:	a904      	add	r1, sp, #16
 80052e8:	f7fd fe6a 	bl	8002fc0 <_printf_float>
 80052ec:	1c42      	adds	r2, r0, #1
 80052ee:	4606      	mov	r6, r0
 80052f0:	d1d6      	bne.n	80052a0 <_svfiprintf_r+0x174>
 80052f2:	89ab      	ldrh	r3, [r5, #12]
 80052f4:	065b      	lsls	r3, r3, #25
 80052f6:	f53f af2d 	bmi.w	8005154 <_svfiprintf_r+0x28>
 80052fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052fc:	e72c      	b.n	8005158 <_svfiprintf_r+0x2c>
 80052fe:	ab03      	add	r3, sp, #12
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	462a      	mov	r2, r5
 8005304:	4638      	mov	r0, r7
 8005306:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <_svfiprintf_r+0x1f4>)
 8005308:	a904      	add	r1, sp, #16
 800530a:	f7fe f8f7 	bl	80034fc <_printf_i>
 800530e:	e7ed      	b.n	80052ec <_svfiprintf_r+0x1c0>
 8005310:	08005dd0 	.word	0x08005dd0
 8005314:	08005dd6 	.word	0x08005dd6
 8005318:	08005dda 	.word	0x08005dda
 800531c:	08002fc1 	.word	0x08002fc1
 8005320:	08005075 	.word	0x08005075

08005324 <__sflush_r>:
 8005324:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	0716      	lsls	r6, r2, #28
 800532c:	4605      	mov	r5, r0
 800532e:	460c      	mov	r4, r1
 8005330:	d454      	bmi.n	80053dc <__sflush_r+0xb8>
 8005332:	684b      	ldr	r3, [r1, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	dc02      	bgt.n	800533e <__sflush_r+0x1a>
 8005338:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	dd48      	ble.n	80053d0 <__sflush_r+0xac>
 800533e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005340:	2e00      	cmp	r6, #0
 8005342:	d045      	beq.n	80053d0 <__sflush_r+0xac>
 8005344:	2300      	movs	r3, #0
 8005346:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800534a:	682f      	ldr	r7, [r5, #0]
 800534c:	6a21      	ldr	r1, [r4, #32]
 800534e:	602b      	str	r3, [r5, #0]
 8005350:	d030      	beq.n	80053b4 <__sflush_r+0x90>
 8005352:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	0759      	lsls	r1, r3, #29
 8005358:	d505      	bpl.n	8005366 <__sflush_r+0x42>
 800535a:	6863      	ldr	r3, [r4, #4]
 800535c:	1ad2      	subs	r2, r2, r3
 800535e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005360:	b10b      	cbz	r3, 8005366 <__sflush_r+0x42>
 8005362:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005364:	1ad2      	subs	r2, r2, r3
 8005366:	2300      	movs	r3, #0
 8005368:	4628      	mov	r0, r5
 800536a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800536c:	6a21      	ldr	r1, [r4, #32]
 800536e:	47b0      	blx	r6
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	d106      	bne.n	8005384 <__sflush_r+0x60>
 8005376:	6829      	ldr	r1, [r5, #0]
 8005378:	291d      	cmp	r1, #29
 800537a:	d82b      	bhi.n	80053d4 <__sflush_r+0xb0>
 800537c:	4a28      	ldr	r2, [pc, #160]	@ (8005420 <__sflush_r+0xfc>)
 800537e:	410a      	asrs	r2, r1
 8005380:	07d6      	lsls	r6, r2, #31
 8005382:	d427      	bmi.n	80053d4 <__sflush_r+0xb0>
 8005384:	2200      	movs	r2, #0
 8005386:	6062      	str	r2, [r4, #4]
 8005388:	6922      	ldr	r2, [r4, #16]
 800538a:	04d9      	lsls	r1, r3, #19
 800538c:	6022      	str	r2, [r4, #0]
 800538e:	d504      	bpl.n	800539a <__sflush_r+0x76>
 8005390:	1c42      	adds	r2, r0, #1
 8005392:	d101      	bne.n	8005398 <__sflush_r+0x74>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	b903      	cbnz	r3, 800539a <__sflush_r+0x76>
 8005398:	6560      	str	r0, [r4, #84]	@ 0x54
 800539a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800539c:	602f      	str	r7, [r5, #0]
 800539e:	b1b9      	cbz	r1, 80053d0 <__sflush_r+0xac>
 80053a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053a4:	4299      	cmp	r1, r3
 80053a6:	d002      	beq.n	80053ae <__sflush_r+0x8a>
 80053a8:	4628      	mov	r0, r5
 80053aa:	f7ff f9e5 	bl	8004778 <_free_r>
 80053ae:	2300      	movs	r3, #0
 80053b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80053b2:	e00d      	b.n	80053d0 <__sflush_r+0xac>
 80053b4:	2301      	movs	r3, #1
 80053b6:	4628      	mov	r0, r5
 80053b8:	47b0      	blx	r6
 80053ba:	4602      	mov	r2, r0
 80053bc:	1c50      	adds	r0, r2, #1
 80053be:	d1c9      	bne.n	8005354 <__sflush_r+0x30>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0c6      	beq.n	8005354 <__sflush_r+0x30>
 80053c6:	2b1d      	cmp	r3, #29
 80053c8:	d001      	beq.n	80053ce <__sflush_r+0xaa>
 80053ca:	2b16      	cmp	r3, #22
 80053cc:	d11d      	bne.n	800540a <__sflush_r+0xe6>
 80053ce:	602f      	str	r7, [r5, #0]
 80053d0:	2000      	movs	r0, #0
 80053d2:	e021      	b.n	8005418 <__sflush_r+0xf4>
 80053d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053d8:	b21b      	sxth	r3, r3
 80053da:	e01a      	b.n	8005412 <__sflush_r+0xee>
 80053dc:	690f      	ldr	r7, [r1, #16]
 80053de:	2f00      	cmp	r7, #0
 80053e0:	d0f6      	beq.n	80053d0 <__sflush_r+0xac>
 80053e2:	0793      	lsls	r3, r2, #30
 80053e4:	bf18      	it	ne
 80053e6:	2300      	movne	r3, #0
 80053e8:	680e      	ldr	r6, [r1, #0]
 80053ea:	bf08      	it	eq
 80053ec:	694b      	ldreq	r3, [r1, #20]
 80053ee:	1bf6      	subs	r6, r6, r7
 80053f0:	600f      	str	r7, [r1, #0]
 80053f2:	608b      	str	r3, [r1, #8]
 80053f4:	2e00      	cmp	r6, #0
 80053f6:	ddeb      	ble.n	80053d0 <__sflush_r+0xac>
 80053f8:	4633      	mov	r3, r6
 80053fa:	463a      	mov	r2, r7
 80053fc:	4628      	mov	r0, r5
 80053fe:	6a21      	ldr	r1, [r4, #32]
 8005400:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005404:	47e0      	blx	ip
 8005406:	2800      	cmp	r0, #0
 8005408:	dc07      	bgt.n	800541a <__sflush_r+0xf6>
 800540a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800540e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005412:	f04f 30ff 	mov.w	r0, #4294967295
 8005416:	81a3      	strh	r3, [r4, #12]
 8005418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800541a:	4407      	add	r7, r0
 800541c:	1a36      	subs	r6, r6, r0
 800541e:	e7e9      	b.n	80053f4 <__sflush_r+0xd0>
 8005420:	dfbffffe 	.word	0xdfbffffe

08005424 <_fflush_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	690b      	ldr	r3, [r1, #16]
 8005428:	4605      	mov	r5, r0
 800542a:	460c      	mov	r4, r1
 800542c:	b913      	cbnz	r3, 8005434 <_fflush_r+0x10>
 800542e:	2500      	movs	r5, #0
 8005430:	4628      	mov	r0, r5
 8005432:	bd38      	pop	{r3, r4, r5, pc}
 8005434:	b118      	cbz	r0, 800543e <_fflush_r+0x1a>
 8005436:	6a03      	ldr	r3, [r0, #32]
 8005438:	b90b      	cbnz	r3, 800543e <_fflush_r+0x1a>
 800543a:	f7fe fa0b 	bl	8003854 <__sinit>
 800543e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f3      	beq.n	800542e <_fflush_r+0xa>
 8005446:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005448:	07d0      	lsls	r0, r2, #31
 800544a:	d404      	bmi.n	8005456 <_fflush_r+0x32>
 800544c:	0599      	lsls	r1, r3, #22
 800544e:	d402      	bmi.n	8005456 <_fflush_r+0x32>
 8005450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005452:	f7fe fb2e 	bl	8003ab2 <__retarget_lock_acquire_recursive>
 8005456:	4628      	mov	r0, r5
 8005458:	4621      	mov	r1, r4
 800545a:	f7ff ff63 	bl	8005324 <__sflush_r>
 800545e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005460:	4605      	mov	r5, r0
 8005462:	07da      	lsls	r2, r3, #31
 8005464:	d4e4      	bmi.n	8005430 <_fflush_r+0xc>
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	059b      	lsls	r3, r3, #22
 800546a:	d4e1      	bmi.n	8005430 <_fflush_r+0xc>
 800546c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800546e:	f7fe fb21 	bl	8003ab4 <__retarget_lock_release_recursive>
 8005472:	e7dd      	b.n	8005430 <_fflush_r+0xc>

08005474 <memmove>:
 8005474:	4288      	cmp	r0, r1
 8005476:	b510      	push	{r4, lr}
 8005478:	eb01 0402 	add.w	r4, r1, r2
 800547c:	d902      	bls.n	8005484 <memmove+0x10>
 800547e:	4284      	cmp	r4, r0
 8005480:	4623      	mov	r3, r4
 8005482:	d807      	bhi.n	8005494 <memmove+0x20>
 8005484:	1e43      	subs	r3, r0, #1
 8005486:	42a1      	cmp	r1, r4
 8005488:	d008      	beq.n	800549c <memmove+0x28>
 800548a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800548e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005492:	e7f8      	b.n	8005486 <memmove+0x12>
 8005494:	4601      	mov	r1, r0
 8005496:	4402      	add	r2, r0
 8005498:	428a      	cmp	r2, r1
 800549a:	d100      	bne.n	800549e <memmove+0x2a>
 800549c:	bd10      	pop	{r4, pc}
 800549e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054a6:	e7f7      	b.n	8005498 <memmove+0x24>

080054a8 <_sbrk_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	2300      	movs	r3, #0
 80054ac:	4d05      	ldr	r5, [pc, #20]	@ (80054c4 <_sbrk_r+0x1c>)
 80054ae:	4604      	mov	r4, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	602b      	str	r3, [r5, #0]
 80054b4:	f7fb fdea 	bl	800108c <_sbrk>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d102      	bne.n	80054c2 <_sbrk_r+0x1a>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	b103      	cbz	r3, 80054c2 <_sbrk_r+0x1a>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	200003f0 	.word	0x200003f0

080054c8 <memcpy>:
 80054c8:	440a      	add	r2, r1
 80054ca:	4291      	cmp	r1, r2
 80054cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80054d0:	d100      	bne.n	80054d4 <memcpy+0xc>
 80054d2:	4770      	bx	lr
 80054d4:	b510      	push	{r4, lr}
 80054d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054da:	4291      	cmp	r1, r2
 80054dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e0:	d1f9      	bne.n	80054d6 <memcpy+0xe>
 80054e2:	bd10      	pop	{r4, pc}

080054e4 <__assert_func>:
 80054e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054e6:	4614      	mov	r4, r2
 80054e8:	461a      	mov	r2, r3
 80054ea:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <__assert_func+0x2c>)
 80054ec:	4605      	mov	r5, r0
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68d8      	ldr	r0, [r3, #12]
 80054f2:	b954      	cbnz	r4, 800550a <__assert_func+0x26>
 80054f4:	4b07      	ldr	r3, [pc, #28]	@ (8005514 <__assert_func+0x30>)
 80054f6:	461c      	mov	r4, r3
 80054f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054fc:	9100      	str	r1, [sp, #0]
 80054fe:	462b      	mov	r3, r5
 8005500:	4905      	ldr	r1, [pc, #20]	@ (8005518 <__assert_func+0x34>)
 8005502:	f000 f86f 	bl	80055e4 <fiprintf>
 8005506:	f000 f87f 	bl	8005608 <abort>
 800550a:	4b04      	ldr	r3, [pc, #16]	@ (800551c <__assert_func+0x38>)
 800550c:	e7f4      	b.n	80054f8 <__assert_func+0x14>
 800550e:	bf00      	nop
 8005510:	20000018 	.word	0x20000018
 8005514:	08005e26 	.word	0x08005e26
 8005518:	08005df8 	.word	0x08005df8
 800551c:	08005deb 	.word	0x08005deb

08005520 <_calloc_r>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	fba1 5402 	umull	r5, r4, r1, r2
 8005526:	b93c      	cbnz	r4, 8005538 <_calloc_r+0x18>
 8005528:	4629      	mov	r1, r5
 800552a:	f7ff f997 	bl	800485c <_malloc_r>
 800552e:	4606      	mov	r6, r0
 8005530:	b928      	cbnz	r0, 800553e <_calloc_r+0x1e>
 8005532:	2600      	movs	r6, #0
 8005534:	4630      	mov	r0, r6
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	220c      	movs	r2, #12
 800553a:	6002      	str	r2, [r0, #0]
 800553c:	e7f9      	b.n	8005532 <_calloc_r+0x12>
 800553e:	462a      	mov	r2, r5
 8005540:	4621      	mov	r1, r4
 8005542:	f7fe fa39 	bl	80039b8 <memset>
 8005546:	e7f5      	b.n	8005534 <_calloc_r+0x14>

08005548 <__ascii_mbtowc>:
 8005548:	b082      	sub	sp, #8
 800554a:	b901      	cbnz	r1, 800554e <__ascii_mbtowc+0x6>
 800554c:	a901      	add	r1, sp, #4
 800554e:	b142      	cbz	r2, 8005562 <__ascii_mbtowc+0x1a>
 8005550:	b14b      	cbz	r3, 8005566 <__ascii_mbtowc+0x1e>
 8005552:	7813      	ldrb	r3, [r2, #0]
 8005554:	600b      	str	r3, [r1, #0]
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	1e10      	subs	r0, r2, #0
 800555a:	bf18      	it	ne
 800555c:	2001      	movne	r0, #1
 800555e:	b002      	add	sp, #8
 8005560:	4770      	bx	lr
 8005562:	4610      	mov	r0, r2
 8005564:	e7fb      	b.n	800555e <__ascii_mbtowc+0x16>
 8005566:	f06f 0001 	mvn.w	r0, #1
 800556a:	e7f8      	b.n	800555e <__ascii_mbtowc+0x16>

0800556c <_realloc_r>:
 800556c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005570:	4680      	mov	r8, r0
 8005572:	4615      	mov	r5, r2
 8005574:	460c      	mov	r4, r1
 8005576:	b921      	cbnz	r1, 8005582 <_realloc_r+0x16>
 8005578:	4611      	mov	r1, r2
 800557a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800557e:	f7ff b96d 	b.w	800485c <_malloc_r>
 8005582:	b92a      	cbnz	r2, 8005590 <_realloc_r+0x24>
 8005584:	f7ff f8f8 	bl	8004778 <_free_r>
 8005588:	2400      	movs	r4, #0
 800558a:	4620      	mov	r0, r4
 800558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005590:	f000 f841 	bl	8005616 <_malloc_usable_size_r>
 8005594:	4285      	cmp	r5, r0
 8005596:	4606      	mov	r6, r0
 8005598:	d802      	bhi.n	80055a0 <_realloc_r+0x34>
 800559a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800559e:	d8f4      	bhi.n	800558a <_realloc_r+0x1e>
 80055a0:	4629      	mov	r1, r5
 80055a2:	4640      	mov	r0, r8
 80055a4:	f7ff f95a 	bl	800485c <_malloc_r>
 80055a8:	4607      	mov	r7, r0
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d0ec      	beq.n	8005588 <_realloc_r+0x1c>
 80055ae:	42b5      	cmp	r5, r6
 80055b0:	462a      	mov	r2, r5
 80055b2:	4621      	mov	r1, r4
 80055b4:	bf28      	it	cs
 80055b6:	4632      	movcs	r2, r6
 80055b8:	f7ff ff86 	bl	80054c8 <memcpy>
 80055bc:	4621      	mov	r1, r4
 80055be:	4640      	mov	r0, r8
 80055c0:	f7ff f8da 	bl	8004778 <_free_r>
 80055c4:	463c      	mov	r4, r7
 80055c6:	e7e0      	b.n	800558a <_realloc_r+0x1e>

080055c8 <__ascii_wctomb>:
 80055c8:	4603      	mov	r3, r0
 80055ca:	4608      	mov	r0, r1
 80055cc:	b141      	cbz	r1, 80055e0 <__ascii_wctomb+0x18>
 80055ce:	2aff      	cmp	r2, #255	@ 0xff
 80055d0:	d904      	bls.n	80055dc <__ascii_wctomb+0x14>
 80055d2:	228a      	movs	r2, #138	@ 0x8a
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	4770      	bx	lr
 80055dc:	2001      	movs	r0, #1
 80055de:	700a      	strb	r2, [r1, #0]
 80055e0:	4770      	bx	lr
	...

080055e4 <fiprintf>:
 80055e4:	b40e      	push	{r1, r2, r3}
 80055e6:	b503      	push	{r0, r1, lr}
 80055e8:	4601      	mov	r1, r0
 80055ea:	ab03      	add	r3, sp, #12
 80055ec:	4805      	ldr	r0, [pc, #20]	@ (8005604 <fiprintf+0x20>)
 80055ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f2:	6800      	ldr	r0, [r0, #0]
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	f000 f83d 	bl	8005674 <_vfiprintf_r>
 80055fa:	b002      	add	sp, #8
 80055fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005600:	b003      	add	sp, #12
 8005602:	4770      	bx	lr
 8005604:	20000018 	.word	0x20000018

08005608 <abort>:
 8005608:	2006      	movs	r0, #6
 800560a:	b508      	push	{r3, lr}
 800560c:	f000 fa06 	bl	8005a1c <raise>
 8005610:	2001      	movs	r0, #1
 8005612:	f7fb fcc6 	bl	8000fa2 <_exit>

08005616 <_malloc_usable_size_r>:
 8005616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800561a:	1f18      	subs	r0, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	bfbc      	itt	lt
 8005620:	580b      	ldrlt	r3, [r1, r0]
 8005622:	18c0      	addlt	r0, r0, r3
 8005624:	4770      	bx	lr

08005626 <__sfputc_r>:
 8005626:	6893      	ldr	r3, [r2, #8]
 8005628:	b410      	push	{r4}
 800562a:	3b01      	subs	r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	6093      	str	r3, [r2, #8]
 8005630:	da07      	bge.n	8005642 <__sfputc_r+0x1c>
 8005632:	6994      	ldr	r4, [r2, #24]
 8005634:	42a3      	cmp	r3, r4
 8005636:	db01      	blt.n	800563c <__sfputc_r+0x16>
 8005638:	290a      	cmp	r1, #10
 800563a:	d102      	bne.n	8005642 <__sfputc_r+0x1c>
 800563c:	bc10      	pop	{r4}
 800563e:	f000 b931 	b.w	80058a4 <__swbuf_r>
 8005642:	6813      	ldr	r3, [r2, #0]
 8005644:	1c58      	adds	r0, r3, #1
 8005646:	6010      	str	r0, [r2, #0]
 8005648:	7019      	strb	r1, [r3, #0]
 800564a:	4608      	mov	r0, r1
 800564c:	bc10      	pop	{r4}
 800564e:	4770      	bx	lr

08005650 <__sfputs_r>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	4606      	mov	r6, r0
 8005654:	460f      	mov	r7, r1
 8005656:	4614      	mov	r4, r2
 8005658:	18d5      	adds	r5, r2, r3
 800565a:	42ac      	cmp	r4, r5
 800565c:	d101      	bne.n	8005662 <__sfputs_r+0x12>
 800565e:	2000      	movs	r0, #0
 8005660:	e007      	b.n	8005672 <__sfputs_r+0x22>
 8005662:	463a      	mov	r2, r7
 8005664:	4630      	mov	r0, r6
 8005666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800566a:	f7ff ffdc 	bl	8005626 <__sfputc_r>
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	d1f3      	bne.n	800565a <__sfputs_r+0xa>
 8005672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005674 <_vfiprintf_r>:
 8005674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	460d      	mov	r5, r1
 800567a:	4614      	mov	r4, r2
 800567c:	4698      	mov	r8, r3
 800567e:	4606      	mov	r6, r0
 8005680:	b09d      	sub	sp, #116	@ 0x74
 8005682:	b118      	cbz	r0, 800568c <_vfiprintf_r+0x18>
 8005684:	6a03      	ldr	r3, [r0, #32]
 8005686:	b90b      	cbnz	r3, 800568c <_vfiprintf_r+0x18>
 8005688:	f7fe f8e4 	bl	8003854 <__sinit>
 800568c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800568e:	07d9      	lsls	r1, r3, #31
 8005690:	d405      	bmi.n	800569e <_vfiprintf_r+0x2a>
 8005692:	89ab      	ldrh	r3, [r5, #12]
 8005694:	059a      	lsls	r2, r3, #22
 8005696:	d402      	bmi.n	800569e <_vfiprintf_r+0x2a>
 8005698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800569a:	f7fe fa0a 	bl	8003ab2 <__retarget_lock_acquire_recursive>
 800569e:	89ab      	ldrh	r3, [r5, #12]
 80056a0:	071b      	lsls	r3, r3, #28
 80056a2:	d501      	bpl.n	80056a8 <_vfiprintf_r+0x34>
 80056a4:	692b      	ldr	r3, [r5, #16]
 80056a6:	b99b      	cbnz	r3, 80056d0 <_vfiprintf_r+0x5c>
 80056a8:	4629      	mov	r1, r5
 80056aa:	4630      	mov	r0, r6
 80056ac:	f000 f938 	bl	8005920 <__swsetup_r>
 80056b0:	b170      	cbz	r0, 80056d0 <_vfiprintf_r+0x5c>
 80056b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056b4:	07dc      	lsls	r4, r3, #31
 80056b6:	d504      	bpl.n	80056c2 <_vfiprintf_r+0x4e>
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	b01d      	add	sp, #116	@ 0x74
 80056be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c2:	89ab      	ldrh	r3, [r5, #12]
 80056c4:	0598      	lsls	r0, r3, #22
 80056c6:	d4f7      	bmi.n	80056b8 <_vfiprintf_r+0x44>
 80056c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056ca:	f7fe f9f3 	bl	8003ab4 <__retarget_lock_release_recursive>
 80056ce:	e7f3      	b.n	80056b8 <_vfiprintf_r+0x44>
 80056d0:	2300      	movs	r3, #0
 80056d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80056d4:	2320      	movs	r3, #32
 80056d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056da:	2330      	movs	r3, #48	@ 0x30
 80056dc:	f04f 0901 	mov.w	r9, #1
 80056e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80056e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005890 <_vfiprintf_r+0x21c>
 80056e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056ec:	4623      	mov	r3, r4
 80056ee:	469a      	mov	sl, r3
 80056f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056f4:	b10a      	cbz	r2, 80056fa <_vfiprintf_r+0x86>
 80056f6:	2a25      	cmp	r2, #37	@ 0x25
 80056f8:	d1f9      	bne.n	80056ee <_vfiprintf_r+0x7a>
 80056fa:	ebba 0b04 	subs.w	fp, sl, r4
 80056fe:	d00b      	beq.n	8005718 <_vfiprintf_r+0xa4>
 8005700:	465b      	mov	r3, fp
 8005702:	4622      	mov	r2, r4
 8005704:	4629      	mov	r1, r5
 8005706:	4630      	mov	r0, r6
 8005708:	f7ff ffa2 	bl	8005650 <__sfputs_r>
 800570c:	3001      	adds	r0, #1
 800570e:	f000 80a7 	beq.w	8005860 <_vfiprintf_r+0x1ec>
 8005712:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005714:	445a      	add	r2, fp
 8005716:	9209      	str	r2, [sp, #36]	@ 0x24
 8005718:	f89a 3000 	ldrb.w	r3, [sl]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 809f 	beq.w	8005860 <_vfiprintf_r+0x1ec>
 8005722:	2300      	movs	r3, #0
 8005724:	f04f 32ff 	mov.w	r2, #4294967295
 8005728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800572c:	f10a 0a01 	add.w	sl, sl, #1
 8005730:	9304      	str	r3, [sp, #16]
 8005732:	9307      	str	r3, [sp, #28]
 8005734:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005738:	931a      	str	r3, [sp, #104]	@ 0x68
 800573a:	4654      	mov	r4, sl
 800573c:	2205      	movs	r2, #5
 800573e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005742:	4853      	ldr	r0, [pc, #332]	@ (8005890 <_vfiprintf_r+0x21c>)
 8005744:	f7fe f9b7 	bl	8003ab6 <memchr>
 8005748:	9a04      	ldr	r2, [sp, #16]
 800574a:	b9d8      	cbnz	r0, 8005784 <_vfiprintf_r+0x110>
 800574c:	06d1      	lsls	r1, r2, #27
 800574e:	bf44      	itt	mi
 8005750:	2320      	movmi	r3, #32
 8005752:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005756:	0713      	lsls	r3, r2, #28
 8005758:	bf44      	itt	mi
 800575a:	232b      	movmi	r3, #43	@ 0x2b
 800575c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005760:	f89a 3000 	ldrb.w	r3, [sl]
 8005764:	2b2a      	cmp	r3, #42	@ 0x2a
 8005766:	d015      	beq.n	8005794 <_vfiprintf_r+0x120>
 8005768:	4654      	mov	r4, sl
 800576a:	2000      	movs	r0, #0
 800576c:	f04f 0c0a 	mov.w	ip, #10
 8005770:	9a07      	ldr	r2, [sp, #28]
 8005772:	4621      	mov	r1, r4
 8005774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005778:	3b30      	subs	r3, #48	@ 0x30
 800577a:	2b09      	cmp	r3, #9
 800577c:	d94b      	bls.n	8005816 <_vfiprintf_r+0x1a2>
 800577e:	b1b0      	cbz	r0, 80057ae <_vfiprintf_r+0x13a>
 8005780:	9207      	str	r2, [sp, #28]
 8005782:	e014      	b.n	80057ae <_vfiprintf_r+0x13a>
 8005784:	eba0 0308 	sub.w	r3, r0, r8
 8005788:	fa09 f303 	lsl.w	r3, r9, r3
 800578c:	4313      	orrs	r3, r2
 800578e:	46a2      	mov	sl, r4
 8005790:	9304      	str	r3, [sp, #16]
 8005792:	e7d2      	b.n	800573a <_vfiprintf_r+0xc6>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	1d19      	adds	r1, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	9103      	str	r1, [sp, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	bfbb      	ittet	lt
 80057a0:	425b      	neglt	r3, r3
 80057a2:	f042 0202 	orrlt.w	r2, r2, #2
 80057a6:	9307      	strge	r3, [sp, #28]
 80057a8:	9307      	strlt	r3, [sp, #28]
 80057aa:	bfb8      	it	lt
 80057ac:	9204      	strlt	r2, [sp, #16]
 80057ae:	7823      	ldrb	r3, [r4, #0]
 80057b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80057b2:	d10a      	bne.n	80057ca <_vfiprintf_r+0x156>
 80057b4:	7863      	ldrb	r3, [r4, #1]
 80057b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80057b8:	d132      	bne.n	8005820 <_vfiprintf_r+0x1ac>
 80057ba:	9b03      	ldr	r3, [sp, #12]
 80057bc:	3402      	adds	r4, #2
 80057be:	1d1a      	adds	r2, r3, #4
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	9203      	str	r2, [sp, #12]
 80057c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057c8:	9305      	str	r3, [sp, #20]
 80057ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005894 <_vfiprintf_r+0x220>
 80057ce:	2203      	movs	r2, #3
 80057d0:	4650      	mov	r0, sl
 80057d2:	7821      	ldrb	r1, [r4, #0]
 80057d4:	f7fe f96f 	bl	8003ab6 <memchr>
 80057d8:	b138      	cbz	r0, 80057ea <_vfiprintf_r+0x176>
 80057da:	2240      	movs	r2, #64	@ 0x40
 80057dc:	9b04      	ldr	r3, [sp, #16]
 80057de:	eba0 000a 	sub.w	r0, r0, sl
 80057e2:	4082      	lsls	r2, r0
 80057e4:	4313      	orrs	r3, r2
 80057e6:	3401      	adds	r4, #1
 80057e8:	9304      	str	r3, [sp, #16]
 80057ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ee:	2206      	movs	r2, #6
 80057f0:	4829      	ldr	r0, [pc, #164]	@ (8005898 <_vfiprintf_r+0x224>)
 80057f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057f6:	f7fe f95e 	bl	8003ab6 <memchr>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d03f      	beq.n	800587e <_vfiprintf_r+0x20a>
 80057fe:	4b27      	ldr	r3, [pc, #156]	@ (800589c <_vfiprintf_r+0x228>)
 8005800:	bb1b      	cbnz	r3, 800584a <_vfiprintf_r+0x1d6>
 8005802:	9b03      	ldr	r3, [sp, #12]
 8005804:	3307      	adds	r3, #7
 8005806:	f023 0307 	bic.w	r3, r3, #7
 800580a:	3308      	adds	r3, #8
 800580c:	9303      	str	r3, [sp, #12]
 800580e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005810:	443b      	add	r3, r7
 8005812:	9309      	str	r3, [sp, #36]	@ 0x24
 8005814:	e76a      	b.n	80056ec <_vfiprintf_r+0x78>
 8005816:	460c      	mov	r4, r1
 8005818:	2001      	movs	r0, #1
 800581a:	fb0c 3202 	mla	r2, ip, r2, r3
 800581e:	e7a8      	b.n	8005772 <_vfiprintf_r+0xfe>
 8005820:	2300      	movs	r3, #0
 8005822:	f04f 0c0a 	mov.w	ip, #10
 8005826:	4619      	mov	r1, r3
 8005828:	3401      	adds	r4, #1
 800582a:	9305      	str	r3, [sp, #20]
 800582c:	4620      	mov	r0, r4
 800582e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005832:	3a30      	subs	r2, #48	@ 0x30
 8005834:	2a09      	cmp	r2, #9
 8005836:	d903      	bls.n	8005840 <_vfiprintf_r+0x1cc>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0c6      	beq.n	80057ca <_vfiprintf_r+0x156>
 800583c:	9105      	str	r1, [sp, #20]
 800583e:	e7c4      	b.n	80057ca <_vfiprintf_r+0x156>
 8005840:	4604      	mov	r4, r0
 8005842:	2301      	movs	r3, #1
 8005844:	fb0c 2101 	mla	r1, ip, r1, r2
 8005848:	e7f0      	b.n	800582c <_vfiprintf_r+0x1b8>
 800584a:	ab03      	add	r3, sp, #12
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	462a      	mov	r2, r5
 8005850:	4630      	mov	r0, r6
 8005852:	4b13      	ldr	r3, [pc, #76]	@ (80058a0 <_vfiprintf_r+0x22c>)
 8005854:	a904      	add	r1, sp, #16
 8005856:	f7fd fbb3 	bl	8002fc0 <_printf_float>
 800585a:	4607      	mov	r7, r0
 800585c:	1c78      	adds	r0, r7, #1
 800585e:	d1d6      	bne.n	800580e <_vfiprintf_r+0x19a>
 8005860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005862:	07d9      	lsls	r1, r3, #31
 8005864:	d405      	bmi.n	8005872 <_vfiprintf_r+0x1fe>
 8005866:	89ab      	ldrh	r3, [r5, #12]
 8005868:	059a      	lsls	r2, r3, #22
 800586a:	d402      	bmi.n	8005872 <_vfiprintf_r+0x1fe>
 800586c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800586e:	f7fe f921 	bl	8003ab4 <__retarget_lock_release_recursive>
 8005872:	89ab      	ldrh	r3, [r5, #12]
 8005874:	065b      	lsls	r3, r3, #25
 8005876:	f53f af1f 	bmi.w	80056b8 <_vfiprintf_r+0x44>
 800587a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800587c:	e71e      	b.n	80056bc <_vfiprintf_r+0x48>
 800587e:	ab03      	add	r3, sp, #12
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	462a      	mov	r2, r5
 8005884:	4630      	mov	r0, r6
 8005886:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <_vfiprintf_r+0x22c>)
 8005888:	a904      	add	r1, sp, #16
 800588a:	f7fd fe37 	bl	80034fc <_printf_i>
 800588e:	e7e4      	b.n	800585a <_vfiprintf_r+0x1e6>
 8005890:	08005dd0 	.word	0x08005dd0
 8005894:	08005dd6 	.word	0x08005dd6
 8005898:	08005dda 	.word	0x08005dda
 800589c:	08002fc1 	.word	0x08002fc1
 80058a0:	08005651 	.word	0x08005651

080058a4 <__swbuf_r>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	460e      	mov	r6, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	4605      	mov	r5, r0
 80058ac:	b118      	cbz	r0, 80058b6 <__swbuf_r+0x12>
 80058ae:	6a03      	ldr	r3, [r0, #32]
 80058b0:	b90b      	cbnz	r3, 80058b6 <__swbuf_r+0x12>
 80058b2:	f7fd ffcf 	bl	8003854 <__sinit>
 80058b6:	69a3      	ldr	r3, [r4, #24]
 80058b8:	60a3      	str	r3, [r4, #8]
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	071a      	lsls	r2, r3, #28
 80058be:	d501      	bpl.n	80058c4 <__swbuf_r+0x20>
 80058c0:	6923      	ldr	r3, [r4, #16]
 80058c2:	b943      	cbnz	r3, 80058d6 <__swbuf_r+0x32>
 80058c4:	4621      	mov	r1, r4
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 f82a 	bl	8005920 <__swsetup_r>
 80058cc:	b118      	cbz	r0, 80058d6 <__swbuf_r+0x32>
 80058ce:	f04f 37ff 	mov.w	r7, #4294967295
 80058d2:	4638      	mov	r0, r7
 80058d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	6922      	ldr	r2, [r4, #16]
 80058da:	b2f6      	uxtb	r6, r6
 80058dc:	1a98      	subs	r0, r3, r2
 80058de:	6963      	ldr	r3, [r4, #20]
 80058e0:	4637      	mov	r7, r6
 80058e2:	4283      	cmp	r3, r0
 80058e4:	dc05      	bgt.n	80058f2 <__swbuf_r+0x4e>
 80058e6:	4621      	mov	r1, r4
 80058e8:	4628      	mov	r0, r5
 80058ea:	f7ff fd9b 	bl	8005424 <_fflush_r>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d1ed      	bne.n	80058ce <__swbuf_r+0x2a>
 80058f2:	68a3      	ldr	r3, [r4, #8]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	60a3      	str	r3, [r4, #8]
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	6022      	str	r2, [r4, #0]
 80058fe:	701e      	strb	r6, [r3, #0]
 8005900:	6962      	ldr	r2, [r4, #20]
 8005902:	1c43      	adds	r3, r0, #1
 8005904:	429a      	cmp	r2, r3
 8005906:	d004      	beq.n	8005912 <__swbuf_r+0x6e>
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	07db      	lsls	r3, r3, #31
 800590c:	d5e1      	bpl.n	80058d2 <__swbuf_r+0x2e>
 800590e:	2e0a      	cmp	r6, #10
 8005910:	d1df      	bne.n	80058d2 <__swbuf_r+0x2e>
 8005912:	4621      	mov	r1, r4
 8005914:	4628      	mov	r0, r5
 8005916:	f7ff fd85 	bl	8005424 <_fflush_r>
 800591a:	2800      	cmp	r0, #0
 800591c:	d0d9      	beq.n	80058d2 <__swbuf_r+0x2e>
 800591e:	e7d6      	b.n	80058ce <__swbuf_r+0x2a>

08005920 <__swsetup_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4b29      	ldr	r3, [pc, #164]	@ (80059c8 <__swsetup_r+0xa8>)
 8005924:	4605      	mov	r5, r0
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	460c      	mov	r4, r1
 800592a:	b118      	cbz	r0, 8005934 <__swsetup_r+0x14>
 800592c:	6a03      	ldr	r3, [r0, #32]
 800592e:	b90b      	cbnz	r3, 8005934 <__swsetup_r+0x14>
 8005930:	f7fd ff90 	bl	8003854 <__sinit>
 8005934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005938:	0719      	lsls	r1, r3, #28
 800593a:	d422      	bmi.n	8005982 <__swsetup_r+0x62>
 800593c:	06da      	lsls	r2, r3, #27
 800593e:	d407      	bmi.n	8005950 <__swsetup_r+0x30>
 8005940:	2209      	movs	r2, #9
 8005942:	602a      	str	r2, [r5, #0]
 8005944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005948:	f04f 30ff 	mov.w	r0, #4294967295
 800594c:	81a3      	strh	r3, [r4, #12]
 800594e:	e033      	b.n	80059b8 <__swsetup_r+0x98>
 8005950:	0758      	lsls	r0, r3, #29
 8005952:	d512      	bpl.n	800597a <__swsetup_r+0x5a>
 8005954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005956:	b141      	cbz	r1, 800596a <__swsetup_r+0x4a>
 8005958:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800595c:	4299      	cmp	r1, r3
 800595e:	d002      	beq.n	8005966 <__swsetup_r+0x46>
 8005960:	4628      	mov	r0, r5
 8005962:	f7fe ff09 	bl	8004778 <_free_r>
 8005966:	2300      	movs	r3, #0
 8005968:	6363      	str	r3, [r4, #52]	@ 0x34
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005970:	81a3      	strh	r3, [r4, #12]
 8005972:	2300      	movs	r3, #0
 8005974:	6063      	str	r3, [r4, #4]
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	f043 0308 	orr.w	r3, r3, #8
 8005980:	81a3      	strh	r3, [r4, #12]
 8005982:	6923      	ldr	r3, [r4, #16]
 8005984:	b94b      	cbnz	r3, 800599a <__swsetup_r+0x7a>
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800598c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005990:	d003      	beq.n	800599a <__swsetup_r+0x7a>
 8005992:	4621      	mov	r1, r4
 8005994:	4628      	mov	r0, r5
 8005996:	f000 f882 	bl	8005a9e <__smakebuf_r>
 800599a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800599e:	f013 0201 	ands.w	r2, r3, #1
 80059a2:	d00a      	beq.n	80059ba <__swsetup_r+0x9a>
 80059a4:	2200      	movs	r2, #0
 80059a6:	60a2      	str	r2, [r4, #8]
 80059a8:	6962      	ldr	r2, [r4, #20]
 80059aa:	4252      	negs	r2, r2
 80059ac:	61a2      	str	r2, [r4, #24]
 80059ae:	6922      	ldr	r2, [r4, #16]
 80059b0:	b942      	cbnz	r2, 80059c4 <__swsetup_r+0xa4>
 80059b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059b6:	d1c5      	bne.n	8005944 <__swsetup_r+0x24>
 80059b8:	bd38      	pop	{r3, r4, r5, pc}
 80059ba:	0799      	lsls	r1, r3, #30
 80059bc:	bf58      	it	pl
 80059be:	6962      	ldrpl	r2, [r4, #20]
 80059c0:	60a2      	str	r2, [r4, #8]
 80059c2:	e7f4      	b.n	80059ae <__swsetup_r+0x8e>
 80059c4:	2000      	movs	r0, #0
 80059c6:	e7f7      	b.n	80059b8 <__swsetup_r+0x98>
 80059c8:	20000018 	.word	0x20000018

080059cc <_raise_r>:
 80059cc:	291f      	cmp	r1, #31
 80059ce:	b538      	push	{r3, r4, r5, lr}
 80059d0:	4605      	mov	r5, r0
 80059d2:	460c      	mov	r4, r1
 80059d4:	d904      	bls.n	80059e0 <_raise_r+0x14>
 80059d6:	2316      	movs	r3, #22
 80059d8:	6003      	str	r3, [r0, #0]
 80059da:	f04f 30ff 	mov.w	r0, #4294967295
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80059e2:	b112      	cbz	r2, 80059ea <_raise_r+0x1e>
 80059e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059e8:	b94b      	cbnz	r3, 80059fe <_raise_r+0x32>
 80059ea:	4628      	mov	r0, r5
 80059ec:	f000 f830 	bl	8005a50 <_getpid_r>
 80059f0:	4622      	mov	r2, r4
 80059f2:	4601      	mov	r1, r0
 80059f4:	4628      	mov	r0, r5
 80059f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059fa:	f000 b817 	b.w	8005a2c <_kill_r>
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d00a      	beq.n	8005a18 <_raise_r+0x4c>
 8005a02:	1c59      	adds	r1, r3, #1
 8005a04:	d103      	bne.n	8005a0e <_raise_r+0x42>
 8005a06:	2316      	movs	r3, #22
 8005a08:	6003      	str	r3, [r0, #0]
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	e7e7      	b.n	80059de <_raise_r+0x12>
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4620      	mov	r0, r4
 8005a12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a16:	4798      	blx	r3
 8005a18:	2000      	movs	r0, #0
 8005a1a:	e7e0      	b.n	80059de <_raise_r+0x12>

08005a1c <raise>:
 8005a1c:	4b02      	ldr	r3, [pc, #8]	@ (8005a28 <raise+0xc>)
 8005a1e:	4601      	mov	r1, r0
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	f7ff bfd3 	b.w	80059cc <_raise_r>
 8005a26:	bf00      	nop
 8005a28:	20000018 	.word	0x20000018

08005a2c <_kill_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	2300      	movs	r3, #0
 8005a30:	4d06      	ldr	r5, [pc, #24]	@ (8005a4c <_kill_r+0x20>)
 8005a32:	4604      	mov	r4, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	602b      	str	r3, [r5, #0]
 8005a3a:	f7fb faa2 	bl	8000f82 <_kill>
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	d102      	bne.n	8005a48 <_kill_r+0x1c>
 8005a42:	682b      	ldr	r3, [r5, #0]
 8005a44:	b103      	cbz	r3, 8005a48 <_kill_r+0x1c>
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	bd38      	pop	{r3, r4, r5, pc}
 8005a4a:	bf00      	nop
 8005a4c:	200003f0 	.word	0x200003f0

08005a50 <_getpid_r>:
 8005a50:	f7fb ba90 	b.w	8000f74 <_getpid>

08005a54 <__swhatbuf_r>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	460c      	mov	r4, r1
 8005a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5c:	4615      	mov	r5, r2
 8005a5e:	2900      	cmp	r1, #0
 8005a60:	461e      	mov	r6, r3
 8005a62:	b096      	sub	sp, #88	@ 0x58
 8005a64:	da0c      	bge.n	8005a80 <__swhatbuf_r+0x2c>
 8005a66:	89a3      	ldrh	r3, [r4, #12]
 8005a68:	2100      	movs	r1, #0
 8005a6a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a6e:	bf14      	ite	ne
 8005a70:	2340      	movne	r3, #64	@ 0x40
 8005a72:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a76:	2000      	movs	r0, #0
 8005a78:	6031      	str	r1, [r6, #0]
 8005a7a:	602b      	str	r3, [r5, #0]
 8005a7c:	b016      	add	sp, #88	@ 0x58
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	466a      	mov	r2, sp
 8005a82:	f000 f849 	bl	8005b18 <_fstat_r>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	dbed      	blt.n	8005a66 <__swhatbuf_r+0x12>
 8005a8a:	9901      	ldr	r1, [sp, #4]
 8005a8c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a90:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a94:	4259      	negs	r1, r3
 8005a96:	4159      	adcs	r1, r3
 8005a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a9c:	e7eb      	b.n	8005a76 <__swhatbuf_r+0x22>

08005a9e <__smakebuf_r>:
 8005a9e:	898b      	ldrh	r3, [r1, #12]
 8005aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aa2:	079d      	lsls	r5, r3, #30
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	d507      	bpl.n	8005aba <__smakebuf_r+0x1c>
 8005aaa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005aae:	6023      	str	r3, [r4, #0]
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	6163      	str	r3, [r4, #20]
 8005ab6:	b003      	add	sp, #12
 8005ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aba:	466a      	mov	r2, sp
 8005abc:	ab01      	add	r3, sp, #4
 8005abe:	f7ff ffc9 	bl	8005a54 <__swhatbuf_r>
 8005ac2:	9f00      	ldr	r7, [sp, #0]
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f7fe fec7 	bl	800485c <_malloc_r>
 8005ace:	b948      	cbnz	r0, 8005ae4 <__smakebuf_r+0x46>
 8005ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad4:	059a      	lsls	r2, r3, #22
 8005ad6:	d4ee      	bmi.n	8005ab6 <__smakebuf_r+0x18>
 8005ad8:	f023 0303 	bic.w	r3, r3, #3
 8005adc:	f043 0302 	orr.w	r3, r3, #2
 8005ae0:	81a3      	strh	r3, [r4, #12]
 8005ae2:	e7e2      	b.n	8005aaa <__smakebuf_r+0xc>
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aee:	81a3      	strh	r3, [r4, #12]
 8005af0:	9b01      	ldr	r3, [sp, #4]
 8005af2:	6020      	str	r0, [r4, #0]
 8005af4:	b15b      	cbz	r3, 8005b0e <__smakebuf_r+0x70>
 8005af6:	4630      	mov	r0, r6
 8005af8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005afc:	f000 f81e 	bl	8005b3c <_isatty_r>
 8005b00:	b128      	cbz	r0, 8005b0e <__smakebuf_r+0x70>
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f023 0303 	bic.w	r3, r3, #3
 8005b08:	f043 0301 	orr.w	r3, r3, #1
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	431d      	orrs	r5, r3
 8005b12:	81a5      	strh	r5, [r4, #12]
 8005b14:	e7cf      	b.n	8005ab6 <__smakebuf_r+0x18>
	...

08005b18 <_fstat_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	4d06      	ldr	r5, [pc, #24]	@ (8005b38 <_fstat_r+0x20>)
 8005b1e:	4604      	mov	r4, r0
 8005b20:	4608      	mov	r0, r1
 8005b22:	4611      	mov	r1, r2
 8005b24:	602b      	str	r3, [r5, #0]
 8005b26:	f7fb fa8b 	bl	8001040 <_fstat>
 8005b2a:	1c43      	adds	r3, r0, #1
 8005b2c:	d102      	bne.n	8005b34 <_fstat_r+0x1c>
 8005b2e:	682b      	ldr	r3, [r5, #0]
 8005b30:	b103      	cbz	r3, 8005b34 <_fstat_r+0x1c>
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	bd38      	pop	{r3, r4, r5, pc}
 8005b36:	bf00      	nop
 8005b38:	200003f0 	.word	0x200003f0

08005b3c <_isatty_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	2300      	movs	r3, #0
 8005b40:	4d05      	ldr	r5, [pc, #20]	@ (8005b58 <_isatty_r+0x1c>)
 8005b42:	4604      	mov	r4, r0
 8005b44:	4608      	mov	r0, r1
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	f7fb fa89 	bl	800105e <_isatty>
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	d102      	bne.n	8005b56 <_isatty_r+0x1a>
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	b103      	cbz	r3, 8005b56 <_isatty_r+0x1a>
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
 8005b58:	200003f0 	.word	0x200003f0

08005b5c <_init>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	bf00      	nop
 8005b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b62:	bc08      	pop	{r3}
 8005b64:	469e      	mov	lr, r3
 8005b66:	4770      	bx	lr

08005b68 <_fini>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	bf00      	nop
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr
