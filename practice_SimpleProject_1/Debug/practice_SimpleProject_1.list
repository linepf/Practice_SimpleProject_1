
practice_SimpleProject_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006334  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08006448  08006448  00007448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006800  08006800  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006800  08006800  00007800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006808  08006808  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006808  08006808  00007808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800680c  0800680c  0000780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006810  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200001d4  080069e4  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  080069e4  00008454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd17  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002400  00000000  00000000  00014f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00017318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000978  00000000  00000000  00017f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019495  00000000  00000000  000188c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011242  00000000  00000000  00031d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b8ed  00000000  00000000  00042f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce88c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a4  00000000  00000000  000ce8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d2b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800642c 	.word	0x0800642c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800642c 	.word	0x0800642c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fbda 	bl	8001244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f80e 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f948 	bl	8000d28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a98:	f000 f928 	bl	8000cec <MX_DMA_Init>
  MX_ADC1_Init();
 8000a9c:	f000 f864 	bl	8000b68 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000aa0:	f000 f8fa 	bl	8000c98 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000aa4:	f000 f8ca 	bl	8000c3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  user_main();
 8000aa8:	f002 fe42 	bl	8003730 <user_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <main+0x24>

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	@ 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aba:	2228      	movs	r2, #40	@ 0x28
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f003 fbe2 	bl	8004288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000aea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000aee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000afe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 ff9b 	bl	8002a44 <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000b14:	f000 f936 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b28:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	2102      	movs	r1, #2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fa07 	bl	8002f48 <HAL_RCC_ClockConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b40:	f000 f920 	bl	8000d84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b44:	2302      	movs	r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b4c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fb89 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b5c:	f000 f912 	bl	8000d84 <Error_Handler>
  }
}
 8000b60:	bf00      	nop
 8000b62:	3750      	adds	r7, #80	@ 0x50
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b78:	4b2e      	ldr	r3, [pc, #184]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <MX_ADC1_Init+0xd0>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b86:	4b2b      	ldr	r3, [pc, #172]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8c:	4b29      	ldr	r3, [pc, #164]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b92:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000b94:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000ba0:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba6:	4823      	ldr	r0, [pc, #140]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000ba8:	f000 fbd2 	bl	8001350 <HAL_ADC_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000bb2:	f000 f8e7 	bl	8000d84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481b      	ldr	r0, [pc, #108]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000bc8:	f000 fd6c 	bl	80016a4 <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 f8d7 	bl	8000d84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4814      	ldr	r0, [pc, #80]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000be4:	f000 fd5e 	bl	80016a4 <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bee:	f000 f8c9 	bl	8000d84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000c00:	f000 fd50 	bl	80016a4 <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c0a:	f000 f8bb 	bl	8000d84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c0e:	2310      	movs	r3, #16
 8000c10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c12:	2304      	movs	r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <MX_ADC1_Init+0xcc>)
 8000c1c:	f000 fd42 	bl	80016a4 <HAL_ADC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c26:	f000 f8ad 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200001f0 	.word	0x200001f0
 8000c38:	40012400 	.word	0x40012400

08000c3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c42:	4a13      	ldr	r2, [pc, #76]	@ (8000c90 <MX_I2C1_Init+0x54>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c48:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <MX_I2C1_Init+0x58>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <MX_I2C1_Init+0x50>)
 8000c7a:	f001 fa47 	bl	800210c <HAL_I2C_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c84:	f000 f87e 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000264 	.word	0x20000264
 8000c90:	40005400 	.word	0x40005400
 8000c94:	000186a0 	.word	0x000186a0

08000c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <MX_USART1_UART_Init+0x50>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	f002 fb80 	bl	80033d4 <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cda:	f000 f853 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200002b8 	.word	0x200002b8
 8000ce8:	40013800 	.word	0x40013800

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <MX_DMA_Init+0x38>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8000d24 <MX_DMA_Init+0x38>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6153      	str	r3, [r2, #20]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <MX_DMA_Init+0x38>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	200b      	movs	r0, #11
 8000d10:	f000 fee1 	bl	8001ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d14:	200b      	movs	r0, #11
 8000d16:	f000 fefa 	bl	8001b0e <HAL_NVIC_EnableIRQ>

}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <MX_GPIO_Init+0x58>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a13      	ldr	r2, [pc, #76]	@ (8000d80 <MX_GPIO_Init+0x58>)
 8000d34:	f043 0320 	orr.w	r3, r3, #32
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <MX_GPIO_Init+0x58>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0320 	and.w	r3, r3, #32
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <MX_GPIO_Init+0x58>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <MX_GPIO_Init+0x58>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <MX_GPIO_Init+0x58>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <MX_GPIO_Init+0x58>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <MX_GPIO_Init+0x58>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <MX_GPIO_Init+0x58>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	40021000 	.word	0x40021000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <Error_Handler+0x8>

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_MspInit+0x5c>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	@ (8000dec <HAL_MspInit+0x5c>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <HAL_MspInit+0x5c>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a0e      	ldr	r2, [pc, #56]	@ (8000dec <HAL_MspInit+0x5c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <HAL_MspInit+0x5c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_MspInit+0x60>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <HAL_MspInit+0x60>)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000

08000df4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec0 <HAL_ADC_MspInit+0xcc>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d151      	bne.n	8000eb8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e14:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec4 <HAL_ADC_MspInit+0xd0>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a2a      	ldr	r2, [pc, #168]	@ (8000ec4 <HAL_ADC_MspInit+0xd0>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <HAL_ADC_MspInit+0xd0>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <HAL_ADC_MspInit+0xd0>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a24      	ldr	r2, [pc, #144]	@ (8000ec4 <HAL_ADC_MspInit+0xd0>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <HAL_ADC_MspInit+0xd0>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e44:	2307      	movs	r3, #7
 8000e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	481d      	ldr	r0, [pc, #116]	@ (8000ec8 <HAL_ADC_MspInit+0xd4>)
 8000e54:	f000 ffd6 	bl	8001e04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed0 <HAL_ADC_MspInit+0xdc>)
 8000e5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000e6c:	2280      	movs	r2, #128	@ 0x80
 8000e6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e78:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000e7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e7e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000e82:	2220      	movs	r2, #32
 8000e84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e8c:	480f      	ldr	r0, [pc, #60]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000e8e:	f000 fe59 	bl	8001b44 <HAL_DMA_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e98:	f7ff ff74 	bl	8000d84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000ea0:	621a      	str	r2, [r3, #32]
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <HAL_ADC_MspInit+0xd8>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2012      	movs	r0, #18
 8000eae:	f000 fe12 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000eb2:	2012      	movs	r0, #18
 8000eb4:	f000 fe2b 	bl	8001b0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40012400 	.word	0x40012400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	20000220 	.word	0x20000220
 8000ed0:	40020008 	.word	0x40020008

08000ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a15      	ldr	r2, [pc, #84]	@ (8000f44 <HAL_I2C_MspInit+0x70>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d123      	bne.n	8000f3c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_I2C_MspInit+0x74>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <HAL_I2C_MspInit+0x74>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_I2C_MspInit+0x74>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f0c:	23c0      	movs	r3, #192	@ 0xc0
 8000f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f10:	2312      	movs	r3, #18
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <HAL_I2C_MspInit+0x78>)
 8000f20:	f000 ff70 	bl	8001e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_I2C_MspInit+0x74>)
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	4a07      	ldr	r2, [pc, #28]	@ (8000f48 <HAL_I2C_MspInit+0x74>)
 8000f2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f2e:	61d3      	str	r3, [r2, #28]
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <HAL_I2C_MspInit+0x74>)
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40005400 	.word	0x40005400
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010c00 	.word	0x40010c00

08000f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fdc <HAL_UART_MspInit+0x8c>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d131      	bne.n	8000fd4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <HAL_UART_MspInit+0x90>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a1a      	ldr	r2, [pc, #104]	@ (8000fe0 <HAL_UART_MspInit+0x90>)
 8000f76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <HAL_UART_MspInit+0x90>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_UART_MspInit+0x90>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a14      	ldr	r2, [pc, #80]	@ (8000fe0 <HAL_UART_MspInit+0x90>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <HAL_UART_MspInit+0x90>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <HAL_UART_MspInit+0x94>)
 8000fb6:	f000 ff25 	bl	8001e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <HAL_UART_MspInit+0x94>)
 8000fd0:	f000 ff18 	bl	8001e04 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010800 	.word	0x40010800

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <MemManage_Handler+0x4>

08001000 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <UsageFault_Handler+0x4>

08001010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 f94a 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <DMA1_Channel1_IRQHandler+0x10>)
 8001046:	f000 fdd7 	bl	8001bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000220 	.word	0x20000220

08001054 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <ADC1_2_IRQHandler+0x10>)
 800105a:	f000 fa51 	bl	8001500 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200001f0 	.word	0x200001f0

08001068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return 1;
 800106c:	2301      	movs	r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <_kill>:

int _kill(int pid, int sig)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001080:	f003 f954 	bl	800432c <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	2216      	movs	r2, #22
 8001088:	601a      	str	r2, [r3, #0]
  return -1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_exit>:

void _exit (int status)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800109e:	f04f 31ff 	mov.w	r1, #4294967295
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffe7 	bl	8001076 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <_exit+0x12>

080010ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e00a      	b.n	80010d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010be:	f3af 8000 	nop.w
 80010c2:	4601      	mov	r1, r0
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	60ba      	str	r2, [r7, #8]
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf0      	blt.n	80010be <_read+0x12>
  }

  return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e009      	b.n	800110c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60ba      	str	r2, [r7, #8]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbf1      	blt.n	80010f8 <_write+0x12>
  }
  return len;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_close>:

int _close(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001144:	605a      	str	r2, [r3, #4]
  return 0;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <_isatty>:

int _isatty(int file)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001166:	b480      	push	{r7}
 8001168:	b085      	sub	sp, #20
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
	...

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f003 f8bc 	bl	800432c <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20005000 	.word	0x20005000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	20000300 	.word	0x20000300
 80011e8:	20000458 	.word	0x20000458

080011ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f8:	f7ff fff8 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011fc:	480b      	ldr	r0, [pc, #44]	@ (800122c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011fe:	490c      	ldr	r1, [pc, #48]	@ (8001230 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001200:	4a0c      	ldr	r2, [pc, #48]	@ (8001234 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a09      	ldr	r2, [pc, #36]	@ (8001238 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001214:	4c09      	ldr	r4, [pc, #36]	@ (800123c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f003 f889 	bl	8004338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001226:	f7ff fc2f 	bl	8000a88 <main>
  bx lr
 800122a:	4770      	bx	lr
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001234:	08006810 	.word	0x08006810
  ldr r2, =_sbss
 8001238:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800123c:	20000454 	.word	0x20000454

08001240 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <CAN1_RX1_IRQHandler>
	...

08001244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <HAL_Init+0x28>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	@ (800126c <HAL_Init+0x28>)
 800124e:	f043 0310 	orr.w	r3, r3, #16
 8001252:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 fc33 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125a:	200f      	movs	r0, #15
 800125c:	f000 f808 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001260:	f7ff fd96 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40022000 	.word	0x40022000

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_InitTick+0x54>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_InitTick+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001286:	fbb3 f3f1 	udiv	r3, r3, r1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fc4b 	bl	8001b2a <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00e      	b.n	80012bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d80a      	bhi.n	80012ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f000 fc13 	bl	8001ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4a06      	ldr	r2, [pc, #24]	@ (80012cc <HAL_InitTick+0x5c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_IncTick+0x1c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <HAL_IncTick+0x20>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a03      	ldr	r2, [pc, #12]	@ (80012f0 <HAL_IncTick+0x20>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000304 	.word	0x20000304

080012f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b02      	ldr	r3, [pc, #8]	@ (8001304 <HAL_GetTick+0x10>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	20000304 	.word	0x20000304

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff fff0 	bl	80012f4 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffe0 	bl	80012f4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008

08001350 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e0be      	b.n	80014f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137c:	2b00      	cmp	r3, #0
 800137e:	d109      	bne.n	8001394 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fd30 	bl	8000df4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fa7d 	bl	8001894 <ADC_ConversionStop_Disable>
 800139a:	4603      	mov	r3, r0
 800139c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 8099 	bne.w	80014de <HAL_ADC_Init+0x18e>
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 8095 	bne.w	80014de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013bc:	f023 0302 	bic.w	r3, r3, #2
 80013c0:	f043 0202 	orr.w	r2, r3, #2
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7b1b      	ldrb	r3, [r3, #12]
 80013d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	4313      	orrs	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013e8:	d003      	beq.n	80013f2 <HAL_ADC_Init+0xa2>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d102      	bne.n	80013f8 <HAL_ADC_Init+0xa8>
 80013f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f6:	e000      	b.n	80013fa <HAL_ADC_Init+0xaa>
 80013f8:	2300      	movs	r3, #0
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7d1b      	ldrb	r3, [r3, #20]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d119      	bne.n	800143c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7b1b      	ldrb	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d109      	bne.n	8001424 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	3b01      	subs	r3, #1
 8001416:	035a      	lsls	r2, r3, #13
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	e00b      	b.n	800143c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001428:	f043 0220 	orr.w	r2, r3, #32
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001434:	f043 0201 	orr.w	r2, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	430a      	orrs	r2, r1
 800144e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <HAL_ADC_Init+0x1a8>)
 8001458:	4013      	ands	r3, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	430b      	orrs	r3, r1
 8001462:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800146c:	d003      	beq.n	8001476 <HAL_ADC_Init+0x126>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d104      	bne.n	8001480 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	3b01      	subs	r3, #1
 800147c:	051b      	lsls	r3, r3, #20
 800147e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001486:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	430a      	orrs	r2, r1
 8001492:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <HAL_ADC_Init+0x1ac>)
 800149c:	4013      	ands	r3, r2
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d10b      	bne.n	80014bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ae:	f023 0303 	bic.w	r3, r3, #3
 80014b2:	f043 0201 	orr.w	r2, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014ba:	e018      	b.n	80014ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c0:	f023 0312 	bic.w	r3, r3, #18
 80014c4:	f043 0210 	orr.w	r2, r3, #16
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d0:	f043 0201 	orr.w	r2, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014dc:	e007      	b.n	80014ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e2:	f043 0210 	orr.w	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	ffe1f7fd 	.word	0xffe1f7fd
 80014fc:	ff1f0efe 	.word	0xff1f0efe

08001500 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	2b00      	cmp	r3, #0
 8001520:	d03e      	beq.n	80015a0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d039      	beq.n	80015a0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800154e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001552:	d11d      	bne.n	8001590 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001558:	2b00      	cmp	r3, #0
 800155a:	d119      	bne.n	8001590 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0220 	bic.w	r2, r2, #32
 800156a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001570:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d105      	bne.n	8001590 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	f043 0201 	orr.w	r2, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f874 	bl	800167e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f06f 0212 	mvn.w	r2, #18
 800159e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d04d      	beq.n	8001646 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d048      	beq.n	8001646 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80015d6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80015da:	d012      	beq.n	8001602 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d125      	bne.n	8001636 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80015f4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015f8:	d11d      	bne.n	8001636 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d119      	bne.n	8001636 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001610:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001616:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d105      	bne.n	8001636 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162e:	f043 0201 	orr.w	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f96d 	bl	8001916 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f06f 020c 	mvn.w	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800164c:	2b00      	cmp	r3, #0
 800164e:	d012      	beq.n	8001676 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00d      	beq.n	8001676 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f812 	bl	8001690 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f06f 0201 	mvn.w	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x20>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e0dc      	b.n	800187e <HAL_ADC_ConfigChannel+0x1da>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d81c      	bhi.n	800170e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3b05      	subs	r3, #5
 80016e6:	221f      	movs	r2, #31
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4019      	ands	r1, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b05      	subs	r3, #5
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	635a      	str	r2, [r3, #52]	@ 0x34
 800170c:	e03c      	b.n	8001788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b0c      	cmp	r3, #12
 8001714:	d81c      	bhi.n	8001750 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3b23      	subs	r3, #35	@ 0x23
 8001728:	221f      	movs	r2, #31
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	4019      	ands	r1, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b23      	subs	r3, #35	@ 0x23
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	631a      	str	r2, [r3, #48]	@ 0x30
 800174e:	e01b      	b.n	8001788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b41      	subs	r3, #65	@ 0x41
 8001762:	221f      	movs	r2, #31
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	4019      	ands	r1, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b41      	subs	r3, #65	@ 0x41
 800177c:	fa00 f203 	lsl.w	r2, r0, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b09      	cmp	r3, #9
 800178e:	d91c      	bls.n	80017ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68d9      	ldr	r1, [r3, #12]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	3b1e      	subs	r3, #30
 80017a2:	2207      	movs	r2, #7
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4019      	ands	r1, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6898      	ldr	r0, [r3, #8]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	3b1e      	subs	r3, #30
 80017bc:	fa00 f203 	lsl.w	r2, r0, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	e019      	b.n	80017fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6919      	ldr	r1, [r3, #16]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	2207      	movs	r2, #7
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4019      	ands	r1, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6898      	ldr	r0, [r3, #8]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	fa00 f203 	lsl.w	r2, r0, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b10      	cmp	r3, #16
 8001804:	d003      	beq.n	800180e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800180a:	2b11      	cmp	r3, #17
 800180c:	d132      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1d      	ldr	r2, [pc, #116]	@ (8001888 <HAL_ADC_ConfigChannel+0x1e4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d125      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d126      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001834:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b10      	cmp	r3, #16
 800183c:	d11a      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800183e:	4b13      	ldr	r3, [pc, #76]	@ (800188c <HAL_ADC_ConfigChannel+0x1e8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a13      	ldr	r2, [pc, #76]	@ (8001890 <HAL_ADC_ConfigChannel+0x1ec>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	0c9a      	lsrs	r2, r3, #18
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001854:	e002      	b.n	800185c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3b01      	subs	r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f9      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x1b2>
 8001862:	e007      	b.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001868:	f043 0220 	orr.w	r2, r3, #32
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40012400 	.word	0x40012400
 800188c:	20000000 	.word	0x20000000
 8001890:	431bde83 	.word	0x431bde83

08001894 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d12e      	bne.n	800190c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0201 	bic.w	r2, r2, #1
 80018bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018be:	f7ff fd19 	bl	80012f4 <HAL_GetTick>
 80018c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018c4:	e01b      	b.n	80018fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018c6:	f7ff fd15 	bl	80012f4 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d914      	bls.n	80018fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10d      	bne.n	80018fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	f043 0210 	orr.w	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e007      	b.n	800190e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d0dc      	beq.n	80018c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001950:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	@ (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4906      	ldr	r1, [pc, #24]	@ (80019c0 <__NVIC_EnableIRQ+0x34>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100

080019c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	@ (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	@ (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	@ 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1c3 0307 	rsb	r3, r3, #7
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	bf28      	it	cs
 8001a36:	2304      	movcs	r3, #4
 8001a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d902      	bls.n	8001a48 <NVIC_EncodePriority+0x30>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3b03      	subs	r3, #3
 8001a46:	e000      	b.n	8001a4a <NVIC_EncodePriority+0x32>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	4313      	orrs	r3, r2
         );
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	@ 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f7ff ff90 	bl	80019c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff2d 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae8:	f7ff ff42 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f7ff ff90 	bl	8001a18 <NVIC_EncodePriority>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff5f 	bl	80019c4 <__NVIC_SetPriority>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff35 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffa2 	bl	8001a7c <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e043      	b.n	8001be2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <HAL_DMA_Init+0xa8>)
 8001b62:	4413      	add	r3, r2
 8001b64:	4a22      	ldr	r2, [pc, #136]	@ (8001bf0 <HAL_DMA_Init+0xac>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	009a      	lsls	r2, r3, #2
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf4 <HAL_DMA_Init+0xb0>)
 8001b76:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b8e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001b92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	bffdfff8 	.word	0xbffdfff8
 8001bf0:	cccccccd 	.word	0xcccccccd
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	2204      	movs	r2, #4
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d04f      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xc8>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d04a      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d107      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0204 	bic.w	r2, r2, #4
 8001c46:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a66      	ldr	r2, [pc, #408]	@ (8001de8 <HAL_DMA_IRQHandler+0x1f0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d029      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0xae>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a65      	ldr	r2, [pc, #404]	@ (8001dec <HAL_DMA_IRQHandler+0x1f4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d022      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0xaa>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a63      	ldr	r2, [pc, #396]	@ (8001df0 <HAL_DMA_IRQHandler+0x1f8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01a      	beq.n	8001c9c <HAL_DMA_IRQHandler+0xa4>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a62      	ldr	r2, [pc, #392]	@ (8001df4 <HAL_DMA_IRQHandler+0x1fc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d012      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x9e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a60      	ldr	r2, [pc, #384]	@ (8001df8 <HAL_DMA_IRQHandler+0x200>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00a      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x98>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8001dfc <HAL_DMA_IRQHandler+0x204>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d102      	bne.n	8001c8a <HAL_DMA_IRQHandler+0x92>
 8001c84:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c88:	e00e      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001c8a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c8e:	e00b      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001c90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c94:	e008      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001c96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c9a:	e005      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001c9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ca0:	e002      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001ca2:	2340      	movs	r3, #64	@ 0x40
 8001ca4:	e000      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	4a55      	ldr	r2, [pc, #340]	@ (8001e00 <HAL_DMA_IRQHandler+0x208>)
 8001caa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8094 	beq.w	8001dde <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cbe:	e08e      	b.n	8001dde <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d056      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x186>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d051      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10b      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 020a 	bic.w	r2, r2, #10
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a38      	ldr	r2, [pc, #224]	@ (8001de8 <HAL_DMA_IRQHandler+0x1f0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d029      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x166>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a37      	ldr	r2, [pc, #220]	@ (8001dec <HAL_DMA_IRQHandler+0x1f4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d022      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x162>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a35      	ldr	r2, [pc, #212]	@ (8001df0 <HAL_DMA_IRQHandler+0x1f8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01a      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x15c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a34      	ldr	r2, [pc, #208]	@ (8001df4 <HAL_DMA_IRQHandler+0x1fc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d012      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x156>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a32      	ldr	r2, [pc, #200]	@ (8001df8 <HAL_DMA_IRQHandler+0x200>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00a      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x150>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a31      	ldr	r2, [pc, #196]	@ (8001dfc <HAL_DMA_IRQHandler+0x204>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d102      	bne.n	8001d42 <HAL_DMA_IRQHandler+0x14a>
 8001d3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d40:	e00e      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d46:	e00b      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d4c:	e008      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d52:	e005      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d58:	e002      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e000      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	4a27      	ldr	r2, [pc, #156]	@ (8001e00 <HAL_DMA_IRQHandler+0x208>)
 8001d62:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d034      	beq.n	8001dde <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d7c:	e02f      	b.n	8001dde <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	2208      	movs	r2, #8
 8001d84:	409a      	lsls	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d028      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x1e8>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d023      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 020e 	bic.w	r2, r2, #14
 8001da6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f202 	lsl.w	r2, r1, r2
 8001db6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	4798      	blx	r3
    }
  }
  return;
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
}
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40020008 	.word	0x40020008
 8001dec:	4002001c 	.word	0x4002001c
 8001df0:	40020030 	.word	0x40020030
 8001df4:	40020044 	.word	0x40020044
 8001df8:	40020058 	.word	0x40020058
 8001dfc:	4002006c 	.word	0x4002006c
 8001e00:	40020000 	.word	0x40020000

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b08b      	sub	sp, #44	@ 0x2c
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e16:	e169      	b.n	80020ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f040 8158 	bne.w	80020e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4a9a      	ldr	r2, [pc, #616]	@ (80020a4 <HAL_GPIO_Init+0x2a0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d05e      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e40:	4a98      	ldr	r2, [pc, #608]	@ (80020a4 <HAL_GPIO_Init+0x2a0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d875      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e46:	4a98      	ldr	r2, [pc, #608]	@ (80020a8 <HAL_GPIO_Init+0x2a4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d058      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e4c:	4a96      	ldr	r2, [pc, #600]	@ (80020a8 <HAL_GPIO_Init+0x2a4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d86f      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e52:	4a96      	ldr	r2, [pc, #600]	@ (80020ac <HAL_GPIO_Init+0x2a8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d052      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e58:	4a94      	ldr	r2, [pc, #592]	@ (80020ac <HAL_GPIO_Init+0x2a8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d869      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e5e:	4a94      	ldr	r2, [pc, #592]	@ (80020b0 <HAL_GPIO_Init+0x2ac>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d04c      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e64:	4a92      	ldr	r2, [pc, #584]	@ (80020b0 <HAL_GPIO_Init+0x2ac>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d863      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e6a:	4a92      	ldr	r2, [pc, #584]	@ (80020b4 <HAL_GPIO_Init+0x2b0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d046      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e70:	4a90      	ldr	r2, [pc, #576]	@ (80020b4 <HAL_GPIO_Init+0x2b0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d85d      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d82a      	bhi.n	8001ed0 <HAL_GPIO_Init+0xcc>
 8001e7a:	2b12      	cmp	r3, #18
 8001e7c:	d859      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e84 <HAL_GPIO_Init+0x80>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001eff 	.word	0x08001eff
 8001e88:	08001ed9 	.word	0x08001ed9
 8001e8c:	08001eeb 	.word	0x08001eeb
 8001e90:	08001f2d 	.word	0x08001f2d
 8001e94:	08001f33 	.word	0x08001f33
 8001e98:	08001f33 	.word	0x08001f33
 8001e9c:	08001f33 	.word	0x08001f33
 8001ea0:	08001f33 	.word	0x08001f33
 8001ea4:	08001f33 	.word	0x08001f33
 8001ea8:	08001f33 	.word	0x08001f33
 8001eac:	08001f33 	.word	0x08001f33
 8001eb0:	08001f33 	.word	0x08001f33
 8001eb4:	08001f33 	.word	0x08001f33
 8001eb8:	08001f33 	.word	0x08001f33
 8001ebc:	08001f33 	.word	0x08001f33
 8001ec0:	08001f33 	.word	0x08001f33
 8001ec4:	08001f33 	.word	0x08001f33
 8001ec8:	08001ee1 	.word	0x08001ee1
 8001ecc:	08001ef5 	.word	0x08001ef5
 8001ed0:	4a79      	ldr	r2, [pc, #484]	@ (80020b8 <HAL_GPIO_Init+0x2b4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ed6:	e02c      	b.n	8001f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e029      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e024      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	3308      	adds	r3, #8
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e01f      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	330c      	adds	r3, #12
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e01a      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f06:	2304      	movs	r3, #4
 8001f08:	623b      	str	r3, [r7, #32]
          break;
 8001f0a:	e013      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f14:	2308      	movs	r3, #8
 8001f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	611a      	str	r2, [r3, #16]
          break;
 8001f1e:	e009      	b.n	8001f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f20:	2308      	movs	r3, #8
 8001f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	615a      	str	r2, [r3, #20]
          break;
 8001f2a:	e003      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
          break;
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          break;
 8001f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2bff      	cmp	r3, #255	@ 0xff
 8001f38:	d801      	bhi.n	8001f3e <HAL_GPIO_Init+0x13a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_Init+0x13e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2bff      	cmp	r3, #255	@ 0xff
 8001f48:	d802      	bhi.n	8001f50 <HAL_GPIO_Init+0x14c>
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	e002      	b.n	8001f56 <HAL_GPIO_Init+0x152>
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	3b08      	subs	r3, #8
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	210f      	movs	r1, #15
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	6a39      	ldr	r1, [r7, #32]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80b1 	beq.w	80020e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f84:	4b4d      	ldr	r3, [pc, #308]	@ (80020bc <HAL_GPIO_Init+0x2b8>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a4c      	ldr	r2, [pc, #304]	@ (80020bc <HAL_GPIO_Init+0x2b8>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b4a      	ldr	r3, [pc, #296]	@ (80020bc <HAL_GPIO_Init+0x2b8>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f9c:	4a48      	ldr	r2, [pc, #288]	@ (80020c0 <HAL_GPIO_Init+0x2bc>)
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a40      	ldr	r2, [pc, #256]	@ (80020c4 <HAL_GPIO_Init+0x2c0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_GPIO_Init+0x1ec>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3f      	ldr	r2, [pc, #252]	@ (80020c8 <HAL_GPIO_Init+0x2c4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00d      	beq.n	8001fec <HAL_GPIO_Init+0x1e8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80020cc <HAL_GPIO_Init+0x2c8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <HAL_GPIO_Init+0x1e4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3d      	ldr	r2, [pc, #244]	@ (80020d0 <HAL_GPIO_Init+0x2cc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d101      	bne.n	8001fe4 <HAL_GPIO_Init+0x1e0>
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e006      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	e004      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e002      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff4:	f002 0203 	and.w	r2, r2, #3
 8001ff8:	0092      	lsls	r2, r2, #2
 8001ffa:	4093      	lsls	r3, r2
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002002:	492f      	ldr	r1, [pc, #188]	@ (80020c0 <HAL_GPIO_Init+0x2bc>)
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800201c:	4b2d      	ldr	r3, [pc, #180]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	492c      	ldr	r1, [pc, #176]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800202a:	4b2a      	ldr	r3, [pc, #168]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	4928      	ldr	r1, [pc, #160]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002034:	4013      	ands	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002044:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	4922      	ldr	r1, [pc, #136]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002052:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	43db      	mvns	r3, r3
 800205a:	491e      	ldr	r1, [pc, #120]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 800205c:	4013      	ands	r3, r2
 800205e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800206c:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4918      	ldr	r1, [pc, #96]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800207a:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	43db      	mvns	r3, r3
 8002082:	4914      	ldr	r1, [pc, #80]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002084:	4013      	ands	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d021      	beq.n	80020d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002094:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	490e      	ldr	r1, [pc, #56]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
 80020a0:	e021      	b.n	80020e6 <HAL_GPIO_Init+0x2e2>
 80020a2:	bf00      	nop
 80020a4:	10320000 	.word	0x10320000
 80020a8:	10310000 	.word	0x10310000
 80020ac:	10220000 	.word	0x10220000
 80020b0:	10210000 	.word	0x10210000
 80020b4:	10120000 	.word	0x10120000
 80020b8:	10110000 	.word	0x10110000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40010800 	.word	0x40010800
 80020c8:	40010c00 	.word	0x40010c00
 80020cc:	40011000 	.word	0x40011000
 80020d0:	40011400 	.word	0x40011400
 80020d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_GPIO_Init+0x304>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	43db      	mvns	r3, r3
 80020e0:	4909      	ldr	r1, [pc, #36]	@ (8002108 <HAL_GPIO_Init+0x304>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	3301      	adds	r3, #1
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f47f ae8e 	bne.w	8001e18 <HAL_GPIO_Init+0x14>
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	372c      	adds	r7, #44	@ 0x2c
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	40010400 	.word	0x40010400

0800210c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e12b      	b.n	8002376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fece 	bl	8000ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	@ 0x24
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800215e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800216e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002170:	f001 f834 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8002174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a81      	ldr	r2, [pc, #516]	@ (8002380 <HAL_I2C_Init+0x274>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d807      	bhi.n	8002190 <HAL_I2C_Init+0x84>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a80      	ldr	r2, [pc, #512]	@ (8002384 <HAL_I2C_Init+0x278>)
 8002184:	4293      	cmp	r3, r2
 8002186:	bf94      	ite	ls
 8002188:	2301      	movls	r3, #1
 800218a:	2300      	movhi	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e006      	b.n	800219e <HAL_I2C_Init+0x92>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4a7d      	ldr	r2, [pc, #500]	@ (8002388 <HAL_I2C_Init+0x27c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	bf94      	ite	ls
 8002198:	2301      	movls	r3, #1
 800219a:	2300      	movhi	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0e7      	b.n	8002376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a78      	ldr	r2, [pc, #480]	@ (800238c <HAL_I2C_Init+0x280>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9b      	lsrs	r3, r3, #18
 80021b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002380 <HAL_I2C_Init+0x274>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d802      	bhi.n	80021e0 <HAL_I2C_Init+0xd4>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3301      	adds	r3, #1
 80021de:	e009      	b.n	80021f4 <HAL_I2C_Init+0xe8>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	4a69      	ldr	r2, [pc, #420]	@ (8002390 <HAL_I2C_Init+0x284>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	3301      	adds	r3, #1
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002206:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	495c      	ldr	r1, [pc, #368]	@ (8002380 <HAL_I2C_Init+0x274>)
 8002210:	428b      	cmp	r3, r1
 8002212:	d819      	bhi.n	8002248 <HAL_I2C_Init+0x13c>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e59      	subs	r1, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002222:	1c59      	adds	r1, r3, #1
 8002224:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002228:	400b      	ands	r3, r1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_I2C_Init+0x138>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1e59      	subs	r1, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fbb1 f3f3 	udiv	r3, r1, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002242:	e051      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002244:	2304      	movs	r3, #4
 8002246:	e04f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d111      	bne.n	8002274 <HAL_I2C_Init+0x168>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1e58      	subs	r0, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	440b      	add	r3, r1
 800225e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002262:	3301      	adds	r3, #1
 8002264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e012      	b.n	800229a <HAL_I2C_Init+0x18e>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e58      	subs	r0, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	0099      	lsls	r1, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Init+0x196>
 800229e:	2301      	movs	r3, #1
 80022a0:	e022      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10e      	bne.n	80022c8 <HAL_I2C_Init+0x1bc>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1e58      	subs	r0, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022c6:	e00f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	6809      	ldr	r1, [r1, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002316:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6911      	ldr	r1, [r2, #16]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68d2      	ldr	r2, [r2, #12]
 8002322:	4311      	orrs	r1, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	430b      	orrs	r3, r1
 800232a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	000186a0 	.word	0x000186a0
 8002384:	001e847f 	.word	0x001e847f
 8002388:	003d08ff 	.word	0x003d08ff
 800238c:	431bde83 	.word	0x431bde83
 8002390:	10624dd3 	.word	0x10624dd3

08002394 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	460b      	mov	r3, r1
 80023a2:	817b      	strh	r3, [r7, #10]
 80023a4:	4613      	mov	r3, r2
 80023a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7fe ffa4 	bl	80012f4 <HAL_GetTick>
 80023ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	f040 80e0 	bne.w	800257c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2319      	movs	r3, #25
 80023c2:	2201      	movs	r2, #1
 80023c4:	4970      	ldr	r1, [pc, #448]	@ (8002588 <HAL_I2C_Master_Transmit+0x1f4>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f964 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0d3      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_I2C_Master_Transmit+0x50>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0cc      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d007      	beq.n	800240a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002418:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2221      	movs	r2, #33	@ 0x21
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2210      	movs	r2, #16
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	893a      	ldrh	r2, [r7, #8]
 800243a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a50      	ldr	r2, [pc, #320]	@ (800258c <HAL_I2C_Master_Transmit+0x1f8>)
 800244a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800244c:	8979      	ldrh	r1, [r7, #10]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6a3a      	ldr	r2, [r7, #32]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f89c 	bl	8002590 <I2C_MasterRequestWrite>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e08d      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002478:	e066      	b.n	8002548 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	6a39      	ldr	r1, [r7, #32]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fa22 	bl	80028c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	2b04      	cmp	r3, #4
 8002490:	d107      	bne.n	80024a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06b      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d11b      	bne.n	800251c <HAL_I2C_Master_Transmit+0x188>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d017      	beq.n	800251c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	6a39      	ldr	r1, [r7, #32]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fa19 	bl	8002958 <I2C_WaitOnBTFFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	2b04      	cmp	r3, #4
 8002532:	d107      	bne.n	8002544 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002542:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e01a      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	d194      	bne.n	800247a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	00100002 	.word	0x00100002
 800258c:	ffff0000 	.word	0xffff0000

08002590 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	460b      	mov	r3, r1
 800259e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d006      	beq.n	80025ba <I2C_MasterRequestWrite+0x2a>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d003      	beq.n	80025ba <I2C_MasterRequestWrite+0x2a>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025b8:	d108      	bne.n	80025cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e00b      	b.n	80025e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	2b12      	cmp	r3, #18
 80025d2:	d107      	bne.n	80025e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f84f 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00d      	beq.n	8002618 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800260a:	d103      	bne.n	8002614 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002612:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e035      	b.n	8002684 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002620:	d108      	bne.n	8002634 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002630:	611a      	str	r2, [r3, #16]
 8002632:	e01b      	b.n	800266c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002634:	897b      	ldrh	r3, [r7, #10]
 8002636:	11db      	asrs	r3, r3, #7
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f003 0306 	and.w	r3, r3, #6
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f063 030f 	orn	r3, r3, #15
 8002644:	b2da      	uxtb	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	490e      	ldr	r1, [pc, #56]	@ (800268c <I2C_MasterRequestWrite+0xfc>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f898 	bl	8002788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e010      	b.n	8002684 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4907      	ldr	r1, [pc, #28]	@ (8002690 <I2C_MasterRequestWrite+0x100>)
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f888 	bl	8002788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	00010008 	.word	0x00010008
 8002690:	00010002 	.word	0x00010002

08002694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026a4:	e048      	b.n	8002738 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d044      	beq.n	8002738 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7fe fe21 	bl	80012f4 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d139      	bne.n	8002738 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	0c1b      	lsrs	r3, r3, #16
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d10d      	bne.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	43da      	mvns	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4013      	ands	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	e00c      	b.n	8002704 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	43da      	mvns	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	4013      	ands	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	429a      	cmp	r2, r3
 8002708:	d116      	bne.n	8002738 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e023      	b.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	0c1b      	lsrs	r3, r3, #16
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d10d      	bne.n	800275e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	43da      	mvns	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4013      	ands	r3, r2
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	e00c      	b.n	8002778 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	43da      	mvns	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4013      	ands	r3, r2
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	429a      	cmp	r2, r3
 800277c:	d093      	beq.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002796:	e071      	b.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027a6:	d123      	bne.n	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	f043 0204 	orr.w	r2, r3, #4
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e067      	b.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f6:	d041      	beq.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f8:	f7fe fd7c 	bl	80012f4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	d302      	bcc.n	800280e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d136      	bne.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10c      	bne.n	8002832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	2300      	moveq	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	e00b      	b.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	43da      	mvns	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4013      	ands	r3, r2
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e021      	b.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	0c1b      	lsrs	r3, r3, #16
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d10c      	bne.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	43da      	mvns	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4013      	ands	r3, r2
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e00b      	b.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4013      	ands	r3, r2
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f47f af6d 	bne.w	8002798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d4:	e034      	b.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f886 	bl	80029e8 <I2C_IsAcknowledgeFailed>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e034      	b.n	8002950 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d028      	beq.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ee:	f7fe fd01 	bl	80012f4 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d11d      	bne.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800290e:	2b80      	cmp	r3, #128	@ 0x80
 8002910:	d016      	beq.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e007      	b.n	8002950 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294a:	2b80      	cmp	r3, #128	@ 0x80
 800294c:	d1c3      	bne.n	80028d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002964:	e034      	b.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f83e 	bl	80029e8 <I2C_IsAcknowledgeFailed>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e034      	b.n	80029e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d028      	beq.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7fe fcb9 	bl	80012f4 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d11d      	bne.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d016      	beq.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e007      	b.n	80029e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d1c3      	bne.n	8002966 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029fe:	d11b      	bne.n	8002a38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e272      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8087 	beq.w	8002b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a64:	4b92      	ldr	r3, [pc, #584]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d00c      	beq.n	8002a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a70:	4b8f      	ldr	r3, [pc, #572]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d112      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5e>
 8002a7c:	4b8c      	ldr	r3, [pc, #560]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a88:	d10b      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8a:	4b89      	ldr	r3, [pc, #548]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d06c      	beq.n	8002b70 <HAL_RCC_OscConfig+0x12c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d168      	bne.n	8002b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e24c      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x76>
 8002aac:	4b80      	ldr	r3, [pc, #512]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a7f      	ldr	r2, [pc, #508]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	e02e      	b.n	8002b18 <HAL_RCC_OscConfig+0xd4>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x98>
 8002ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7a      	ldr	r2, [pc, #488]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b78      	ldr	r3, [pc, #480]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a77      	ldr	r2, [pc, #476]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e01d      	b.n	8002b18 <HAL_RCC_OscConfig+0xd4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0xbc>
 8002ae6:	4b72      	ldr	r3, [pc, #456]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a71      	ldr	r2, [pc, #452]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a6e      	ldr	r2, [pc, #440]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0xd4>
 8002b00:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6a      	ldr	r2, [pc, #424]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b68      	ldr	r3, [pc, #416]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a67      	ldr	r2, [pc, #412]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe fbe8 	bl	80012f4 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe fbe4 	bl	80012f4 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	@ 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e200      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0xe4>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe fbd4 	bl	80012f4 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe fbd0 	bl	80012f4 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e1ec      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	4b53      	ldr	r3, [pc, #332]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x10c>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d063      	beq.n	8002c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b8a:	4b49      	ldr	r3, [pc, #292]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d11c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x18c>
 8002b96:	4b46      	ldr	r3, [pc, #280]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	4b43      	ldr	r3, [pc, #268]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_RCC_OscConfig+0x176>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e1c0      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4939      	ldr	r1, [pc, #228]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	e03a      	b.n	8002c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd8:	4b36      	ldr	r3, [pc, #216]	@ (8002cb4 <HAL_RCC_OscConfig+0x270>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fb89 	bl	80012f4 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe fb85 	bl	80012f4 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1a1      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4927      	ldr	r1, [pc, #156]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1a:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe fb68 	bl	80012f4 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe fb64 	bl	80012f4 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e180      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d03a      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d019      	beq.n	8002c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5a:	4b17      	ldr	r3, [pc, #92]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe fb48 	bl	80012f4 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe fb44 	bl	80012f4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e160      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c86:	2001      	movs	r0, #1
 8002c88:	f000 fad0 	bl	800322c <RCC_Delay>
 8002c8c:	e01c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7fe fb2e 	bl	80012f4 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9a:	e00f      	b.n	8002cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9c:	f7fe fb2a 	bl	80012f4 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d908      	bls.n	8002cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e146      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	42420000 	.word	0x42420000
 8002cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	4b92      	ldr	r3, [pc, #584]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e9      	bne.n	8002c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a6 	beq.w	8002e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cda:	4b8b      	ldr	r3, [pc, #556]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10d      	bne.n	8002d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b88      	ldr	r3, [pc, #544]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	4a87      	ldr	r2, [pc, #540]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	61d3      	str	r3, [r2, #28]
 8002cf2:	4b85      	ldr	r3, [pc, #532]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d02:	4b82      	ldr	r3, [pc, #520]	@ (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d118      	bne.n	8002d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7e      	ldr	r2, [pc, #504]	@ (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe faeb 	bl	80012f4 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7fe fae7 	bl	80012f4 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b64      	cmp	r3, #100	@ 0x64
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e103      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	4b75      	ldr	r3, [pc, #468]	@ (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x312>
 8002d48:	4b6f      	ldr	r3, [pc, #444]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6213      	str	r3, [r2, #32]
 8002d54:	e02d      	b.n	8002db2 <HAL_RCC_OscConfig+0x36e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x334>
 8002d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a69      	ldr	r2, [pc, #420]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	4b67      	ldr	r3, [pc, #412]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a66      	ldr	r2, [pc, #408]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6213      	str	r3, [r2, #32]
 8002d76:	e01c      	b.n	8002db2 <HAL_RCC_OscConfig+0x36e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCC_OscConfig+0x356>
 8002d80:	4b61      	ldr	r3, [pc, #388]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4a60      	ldr	r2, [pc, #384]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	6213      	str	r3, [r2, #32]
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4a5d      	ldr	r2, [pc, #372]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6213      	str	r3, [r2, #32]
 8002d98:	e00b      	b.n	8002db2 <HAL_RCC_OscConfig+0x36e>
 8002d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	6213      	str	r3, [r2, #32]
 8002da6:	4b58      	ldr	r3, [pc, #352]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4a57      	ldr	r2, [pc, #348]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d015      	beq.n	8002de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fa9b 	bl	80012f4 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe fa97 	bl	80012f4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0b1      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ee      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x37e>
 8002de4:	e014      	b.n	8002e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe fa85 	bl	80012f4 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe fa81 	bl	80012f4 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e09b      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	4b40      	ldr	r3, [pc, #256]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ee      	bne.n	8002dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b3c      	ldr	r3, [pc, #240]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8087 	beq.w	8002f3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e2c:	4b36      	ldr	r3, [pc, #216]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d061      	beq.n	8002efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d146      	bne.n	8002ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b33      	ldr	r3, [pc, #204]	@ (8002f10 <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fe fa55 	bl	80012f4 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fe fa51 	bl	80012f4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e06d      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e60:	4b29      	ldr	r3, [pc, #164]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e74:	d108      	bne.n	8002e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e76:	4b24      	ldr	r3, [pc, #144]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	4921      	ldr	r1, [pc, #132]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e88:	4b1f      	ldr	r3, [pc, #124]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a19      	ldr	r1, [r3, #32]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	491b      	ldr	r1, [pc, #108]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fa25 	bl	80012f4 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fe fa21 	bl	80012f4 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e03d      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec0:	4b11      	ldr	r3, [pc, #68]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x46a>
 8002ecc:	e035      	b.n	8002f3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <HAL_RCC_OscConfig+0x4cc>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fa0e 	bl	80012f4 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe fa0a 	bl	80012f4 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e026      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x498>
 8002efa:	e01e      	b.n	8002f3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e019      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f14:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_RCC_OscConfig+0x500>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000

08002f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0d0      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d910      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b67      	ldr	r3, [pc, #412]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 0207 	bic.w	r2, r3, #7
 8002f72:	4965      	ldr	r1, [pc, #404]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b63      	ldr	r3, [pc, #396]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0b8      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa4:	4b59      	ldr	r3, [pc, #356]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a58      	ldr	r2, [pc, #352]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fbc:	4b53      	ldr	r3, [pc, #332]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc8:	4b50      	ldr	r3, [pc, #320]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	494d      	ldr	r1, [pc, #308]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d040      	beq.n	8003068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b47      	ldr	r3, [pc, #284]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d115      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	4b41      	ldr	r3, [pc, #260]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e073      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	4b3d      	ldr	r3, [pc, #244]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e06b      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003026:	4b39      	ldr	r3, [pc, #228]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4936      	ldr	r1, [pc, #216]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003038:	f7fe f95c 	bl	80012f4 <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	e00a      	b.n	8003056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003040:	f7fe f958 	bl	80012f4 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e053      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	4b2d      	ldr	r3, [pc, #180]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 020c 	and.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	429a      	cmp	r2, r3
 8003066:	d1eb      	bne.n	8003040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003068:	4b27      	ldr	r3, [pc, #156]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d210      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 0207 	bic.w	r2, r3, #7
 800307e:	4922      	ldr	r1, [pc, #136]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e032      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b19      	ldr	r3, [pc, #100]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4916      	ldr	r1, [pc, #88]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030c2:	4b12      	ldr	r3, [pc, #72]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	490e      	ldr	r1, [pc, #56]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030d6:	f000 f821 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80030da:	4602      	mov	r2, r0
 80030dc:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	490a      	ldr	r1, [pc, #40]	@ (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030e8:	5ccb      	ldrb	r3, [r1, r3]
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	4a09      	ldr	r2, [pc, #36]	@ (8003114 <HAL_RCC_ClockConfig+0x1cc>)
 80030f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030f2:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <HAL_RCC_ClockConfig+0x1d0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe f8ba 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40022000 	.word	0x40022000
 800310c:	40021000 	.word	0x40021000
 8003110:	08006468 	.word	0x08006468
 8003114:	20000000 	.word	0x20000000
 8003118:	20000004 	.word	0x20000004

0800311c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003136:	4b1e      	ldr	r3, [pc, #120]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b04      	cmp	r3, #4
 8003144:	d002      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x30>
 8003146:	2b08      	cmp	r3, #8
 8003148:	d003      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x36>
 800314a:	e027      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800314c:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800314e:	613b      	str	r3, [r7, #16]
      break;
 8003150:	e027      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0c9b      	lsrs	r3, r3, #18
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800316a:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	0c5b      	lsrs	r3, r3, #17
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	4a11      	ldr	r2, [pc, #68]	@ (80031bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a0d      	ldr	r2, [pc, #52]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800317e:	fb03 f202 	mul.w	r2, r3, r2
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e004      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a0c      	ldr	r2, [pc, #48]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	613b      	str	r3, [r7, #16]
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800319e:	613b      	str	r3, [r7, #16]
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	693b      	ldr	r3, [r7, #16]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	00f42400 	.word	0x00f42400
 80031b8:	08006480 	.word	0x08006480
 80031bc:	08006490 	.word	0x08006490
 80031c0:	003d0900 	.word	0x003d0900
 80031c4:	007a1200 	.word	0x007a1200

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031cc:	4b02      	ldr	r3, [pc, #8]	@ (80031d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	20000000 	.word	0x20000000

080031dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031e0:	f7ff fff2 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4903      	ldr	r1, [pc, #12]	@ (8003200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	08006478 	.word	0x08006478

08003204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003208:	f7ff ffde 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	0adb      	lsrs	r3, r3, #11
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	@ (8003228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	08006478 	.word	0x08006478

0800322c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003234:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <RCC_Delay+0x34>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a0a      	ldr	r2, [pc, #40]	@ (8003264 <RCC_Delay+0x38>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0a5b      	lsrs	r3, r3, #9
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003248:	bf00      	nop
  }
  while (Delay --);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	60fa      	str	r2, [r7, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f9      	bne.n	8003248 <RCC_Delay+0x1c>
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	20000000 	.word	0x20000000
 8003264:	10624dd3 	.word	0x10624dd3

08003268 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d07d      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003284:	2300      	movs	r3, #0
 8003286:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003288:	4b4f      	ldr	r3, [pc, #316]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10d      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4b4c      	ldr	r3, [pc, #304]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4a4b      	ldr	r2, [pc, #300]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329e:	61d3      	str	r3, [r2, #28]
 80032a0:	4b49      	ldr	r3, [pc, #292]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ac:	2301      	movs	r3, #1
 80032ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b0:	4b46      	ldr	r3, [pc, #280]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d118      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032bc:	4b43      	ldr	r3, [pc, #268]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a42      	ldr	r2, [pc, #264]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c8:	f7fe f814 	bl	80012f4 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ce:	e008      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d0:	f7fe f810 	bl	80012f4 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	@ 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e06d      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	4b3a      	ldr	r3, [pc, #232]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ee:	4b36      	ldr	r3, [pc, #216]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d02e      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	429a      	cmp	r2, r3
 800330a:	d027      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800330c:	4b2e      	ldr	r3, [pc, #184]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003314:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003316:	4b2e      	ldr	r3, [pc, #184]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800331c:	4b2c      	ldr	r3, [pc, #176]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003322:	4a29      	ldr	r2, [pc, #164]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d014      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fd ffdf 	bl	80012f4 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fd ffdb 	bl	80012f4 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e036      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ee      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800335c:	4b1a      	ldr	r3, [pc, #104]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4917      	ldr	r1, [pc, #92]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	4313      	orrs	r3, r2
 800336c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003374:	4b14      	ldr	r3, [pc, #80]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	4a13      	ldr	r2, [pc, #76]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800337e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800338c:	4b0e      	ldr	r3, [pc, #56]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	490b      	ldr	r1, [pc, #44]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033aa:	4b07      	ldr	r3, [pc, #28]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40007000 	.word	0x40007000
 80033d0:	42420440 	.word	0x42420440

080033d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e042      	b.n	800346c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fd fda8 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2224      	movs	r2, #36	@ 0x24
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f82b 	bl	8003474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800342c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800343c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800344c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80034ae:	f023 030c 	bic.w	r3, r3, #12
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003588 <UART_SetConfig+0x114>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d103      	bne.n	80034e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034dc:	f7ff fe92 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	e002      	b.n	80034ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034e4:	f7ff fe7a 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 80034e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	009a      	lsls	r2, r3, #2
 80034f4:	441a      	add	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	4a22      	ldr	r2, [pc, #136]	@ (800358c <UART_SetConfig+0x118>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	0119      	lsls	r1, r3, #4
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009a      	lsls	r2, r3, #2
 8003514:	441a      	add	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003520:	4b1a      	ldr	r3, [pc, #104]	@ (800358c <UART_SetConfig+0x118>)
 8003522:	fba3 0302 	umull	r0, r3, r3, r2
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2064      	movs	r0, #100	@ 0x64
 800352a:	fb00 f303 	mul.w	r3, r0, r3
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	3332      	adds	r3, #50	@ 0x32
 8003534:	4a15      	ldr	r2, [pc, #84]	@ (800358c <UART_SetConfig+0x118>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003540:	4419      	add	r1, r3
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	009a      	lsls	r2, r3, #2
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fbb2 f2f3 	udiv	r2, r2, r3
 8003558:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <UART_SetConfig+0x118>)
 800355a:	fba3 0302 	umull	r0, r3, r3, r2
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	2064      	movs	r0, #100	@ 0x64
 8003562:	fb00 f303 	mul.w	r3, r0, r3
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	3332      	adds	r3, #50	@ 0x32
 800356c:	4a07      	ldr	r2, [pc, #28]	@ (800358c <UART_SetConfig+0x118>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	f003 020f 	and.w	r2, r3, #15
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	440a      	add	r2, r1
 800357e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40013800 	.word	0x40013800
 800358c:	51eb851f 	.word	0x51eb851f

08003590 <LCD_SendInternal>:
* @details
* @param	cmd, flag
* @return	viod
*/
void LCD_SendInternal(uint8_t cmd, uint8_t flag)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	4603      	mov	r3, r0
 8003598:	460a      	mov	r2, r1
 800359a:	71fb      	strb	r3, [r7, #7]
 800359c:	4613      	mov	r3, r2
 800359e:	71bb      	strb	r3, [r7, #6]
  uint8_t data_u, data_l;
  uint8_t data_t[4];

  data_u = (cmd & 0xf0);
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	f023 030f 	bic.w	r3, r3, #15
 80035a6:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd<<4) & 0xf0);
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	73bb      	strb	r3, [r7, #14]
  data_t[0] = data_u|flag|0x0C;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	79bb      	ldrb	r3, [r7, #6]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f043 030c 	orr.w	r3, r3, #12
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u|flag|0x08;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	79bb      	ldrb	r3, [r7, #6]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f043 0308 	orr.w	r3, r3, #8
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l|flag|0x0C;
 80035ce:	7bba      	ldrb	r2, [r7, #14]
 80035d0:	79bb      	ldrb	r3, [r7, #6]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f043 030c 	orr.w	r3, r3, #12
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l|flag|0x08;
 80035de:	7bba      	ldrb	r2, [r7, #14]
 80035e0:	79bb      	ldrb	r3, [r7, #6]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f043 0308 	orr.w	r3, r3, #8
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit (&hi2c1, LCD_ADDR,data_t, sizeof(data_t), HAL_MAX_DELAY);
 80035ee:	f107 0208 	add.w	r2, r7, #8
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2304      	movs	r3, #4
 80035fa:	217e      	movs	r1, #126	@ 0x7e
 80035fc:	4804      	ldr	r0, [pc, #16]	@ (8003610 <LCD_SendInternal+0x80>)
 80035fe:	f7fe fec9 	bl	8002394 <HAL_I2C_Master_Transmit>
  HAL_Delay(5);
 8003602:	2005      	movs	r0, #5
 8003604:	f7fd fe80 	bl	8001308 <HAL_Delay>
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000264 	.word	0x20000264

08003614 <LCD_print_Cmd>:
* @brief	명령어를 LCD로 출력하는 함수
* @details	내부적으로 LCD_SendData로 명령어 전송
* @param	cmd
* @return	viod
*/
void LCD_print_Cmd(uint8_t cmd) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]
  LCD_SendInternal(cmd, 0x00);
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ffb4 	bl	8003590 <LCD_SendInternal>
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <LCD_print_String>:
* @brief	글자를 출력하는 함수
* @details	글자를 받아서 내부적으로 LCD_SendData로 한 워드씩 출력
* @param	str
* @return	viod
*/
void LCD_print_String(char *format, ...) {
 8003630:	b40f      	push	{r0, r1, r2, r3}
 8003632:	b580      	push	{r7, lr}
 8003634:	b0c2      	sub	sp, #264	@ 0x108
 8003636:	af00      	add	r7, sp, #0
	char buffer[256];

	va_list args;
	va_start(args, format);
 8003638:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800363c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003644:	601a      	str	r2, [r3, #0]
	vsnprintf(buffer, sizeof(buffer), format, args);
 8003646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800364a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800364e:	1d38      	adds	r0, r7, #4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003656:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800365a:	f000 fe07 	bl	800426c <vsniprintf>
	va_end(args);

	char *temp = buffer;
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    while(*temp) {
 8003664:	e008      	b.n	8003678 <LCD_print_String+0x48>
    	LCD_SendData(*temp++);
 8003666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f80e 	bl	8003694 <LCD_SendData>
    while(*temp) {
 8003678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f1      	bne.n	8003666 <LCD_print_String+0x36>
    }
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800368a:	46bd      	mov	sp, r7
 800368c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003690:	b004      	add	sp, #16
 8003692:	4770      	bx	lr

08003694 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  LCD_SendInternal(data, 0x01);
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	2101      	movs	r1, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff74 	bl	8003590 <LCD_SendInternal>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <LCD_Init>:
* @brief	LCD를 처음 켤때 초기화 해주는 함수
* @details	글자크기, 커서표시여부, 비트수, 백라이트 설정등을 제어
* @param	void
* @return	void
*/
void LCD_Init(void) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  // LCD_FUNCTIONSET, 8-bit mode, 2 lines, 5x8 format
	LCD_print_Cmd(0x38); // 0b00111000
 80036b4:	2038      	movs	r0, #56	@ 0x38
 80036b6:	f7ff ffad 	bl	8003614 <LCD_print_Cmd>
  // display & cursor home
	LCD_print_Cmd(0x02); // 0b00000010
 80036ba:	2002      	movs	r0, #2
 80036bc:	f7ff ffaa 	bl	8003614 <LCD_print_Cmd>
  // display on, right shift, underline off, blink off
	LCD_print_Cmd(0x0C); // 0b00001100
 80036c0:	200c      	movs	r0, #12
 80036c2:	f7ff ffa7 	bl	8003614 <LCD_print_Cmd>
  // clear display (optional here)
	LCD_print_Cmd(0x01); // 0b00000001
 80036c6:	2001      	movs	r0, #1
 80036c8:	f7ff ffa4 	bl	8003614 <LCD_print_Cmd>
  // LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDEC
	LCD_print_Cmd(0x06); // 0b00000110
 80036cc:	2006      	movs	r0, #6
 80036ce:	f7ff ffa1 	bl	8003614 <LCD_print_Cmd>
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <LCD_setCursor>:
* @brief	LCD의 커서 위치제어 함수
* @details	본 LCD는 16*2 크기이다.
* @param	width(가로), length(세로)
* @return	void
*/
void LCD_setCursor(uint8_t col, uint8_t row){
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	460a      	mov	r2, r1
 80036e2:	71fb      	strb	r3, [r7, #7]
 80036e4:	4613      	mov	r3, r2
 80036e6:	71bb      	strb	r3, [r7, #6]
    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80036e8:	4b10      	ldr	r3, [pc, #64]	@ (800372c <LCD_setCursor+0x54>)
 80036ea:	f107 0408 	add.w	r4, r7, #8
 80036ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if ( row > LCD_LINES ) {
 80036f4:	79bb      	ldrb	r3, [r7, #6]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <LCD_setCursor+0x26>
        row = LCD_LINES-1;
 80036fa:	2301      	movs	r3, #1
 80036fc:	71bb      	strb	r3, [r7, #6]
    }
    LCD_print_Cmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80036fe:	79bb      	ldrb	r3, [r7, #6]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	3318      	adds	r3, #24
 8003704:	443b      	add	r3, r7
 8003706:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800370a:	b2da      	uxtb	r2, r3
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	4413      	add	r3, r2
 8003710:	b2db      	uxtb	r3, r3
 8003712:	b25b      	sxtb	r3, r3
 8003714:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003718:	b25b      	sxtb	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff79 	bl	8003614 <LCD_print_Cmd>
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	bf00      	nop
 800372c:	08006448 	.word	0x08006448

08003730 <user_main>:


#include "user_main.h"
#include "UART.h"

void user_main() {
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0

      LCD_Init();
 8003734:	f7ff ffbc 	bl	80036b0 <LCD_Init>
	  LCD_setCursor(0,0);
 8003738:	2100      	movs	r1, #0
 800373a:	2000      	movs	r0, #0
 800373c:	f7ff ffcc 	bl	80036d8 <LCD_setCursor>
	  LCD_print_String(">> Hlhhdd%d -%d",1,90);
 8003740:	225a      	movs	r2, #90	@ 0x5a
 8003742:	2101      	movs	r1, #1
 8003744:	4802      	ldr	r0, [pc, #8]	@ (8003750 <user_main+0x20>)
 8003746:	f7ff ff73 	bl	8003630 <LCD_print_String>

	while (1) {
 800374a:	bf00      	nop
 800374c:	e7fd      	b.n	800374a <user_main+0x1a>
 800374e:	bf00      	nop
 8003750:	08006458 	.word	0x08006458

08003754 <__cvt>:
 8003754:	2b00      	cmp	r3, #0
 8003756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800375a:	461d      	mov	r5, r3
 800375c:	bfbb      	ittet	lt
 800375e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003762:	461d      	movlt	r5, r3
 8003764:	2300      	movge	r3, #0
 8003766:	232d      	movlt	r3, #45	@ 0x2d
 8003768:	b088      	sub	sp, #32
 800376a:	4614      	mov	r4, r2
 800376c:	bfb8      	it	lt
 800376e:	4614      	movlt	r4, r2
 8003770:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003772:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003774:	7013      	strb	r3, [r2, #0]
 8003776:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003778:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800377c:	f023 0820 	bic.w	r8, r3, #32
 8003780:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003784:	d005      	beq.n	8003792 <__cvt+0x3e>
 8003786:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800378a:	d100      	bne.n	800378e <__cvt+0x3a>
 800378c:	3601      	adds	r6, #1
 800378e:	2302      	movs	r3, #2
 8003790:	e000      	b.n	8003794 <__cvt+0x40>
 8003792:	2303      	movs	r3, #3
 8003794:	aa07      	add	r2, sp, #28
 8003796:	9204      	str	r2, [sp, #16]
 8003798:	aa06      	add	r2, sp, #24
 800379a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800379e:	e9cd 3600 	strd	r3, r6, [sp]
 80037a2:	4622      	mov	r2, r4
 80037a4:	462b      	mov	r3, r5
 80037a6:	f000 fe87 	bl	80044b8 <_dtoa_r>
 80037aa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80037ae:	4607      	mov	r7, r0
 80037b0:	d119      	bne.n	80037e6 <__cvt+0x92>
 80037b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80037b4:	07db      	lsls	r3, r3, #31
 80037b6:	d50e      	bpl.n	80037d6 <__cvt+0x82>
 80037b8:	eb00 0906 	add.w	r9, r0, r6
 80037bc:	2200      	movs	r2, #0
 80037be:	2300      	movs	r3, #0
 80037c0:	4620      	mov	r0, r4
 80037c2:	4629      	mov	r1, r5
 80037c4:	f7fd f8f0 	bl	80009a8 <__aeabi_dcmpeq>
 80037c8:	b108      	cbz	r0, 80037ce <__cvt+0x7a>
 80037ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80037ce:	2230      	movs	r2, #48	@ 0x30
 80037d0:	9b07      	ldr	r3, [sp, #28]
 80037d2:	454b      	cmp	r3, r9
 80037d4:	d31e      	bcc.n	8003814 <__cvt+0xc0>
 80037d6:	4638      	mov	r0, r7
 80037d8:	9b07      	ldr	r3, [sp, #28]
 80037da:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80037dc:	1bdb      	subs	r3, r3, r7
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	b008      	add	sp, #32
 80037e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80037ea:	eb00 0906 	add.w	r9, r0, r6
 80037ee:	d1e5      	bne.n	80037bc <__cvt+0x68>
 80037f0:	7803      	ldrb	r3, [r0, #0]
 80037f2:	2b30      	cmp	r3, #48	@ 0x30
 80037f4:	d10a      	bne.n	800380c <__cvt+0xb8>
 80037f6:	2200      	movs	r2, #0
 80037f8:	2300      	movs	r3, #0
 80037fa:	4620      	mov	r0, r4
 80037fc:	4629      	mov	r1, r5
 80037fe:	f7fd f8d3 	bl	80009a8 <__aeabi_dcmpeq>
 8003802:	b918      	cbnz	r0, 800380c <__cvt+0xb8>
 8003804:	f1c6 0601 	rsb	r6, r6, #1
 8003808:	f8ca 6000 	str.w	r6, [sl]
 800380c:	f8da 3000 	ldr.w	r3, [sl]
 8003810:	4499      	add	r9, r3
 8003812:	e7d3      	b.n	80037bc <__cvt+0x68>
 8003814:	1c59      	adds	r1, r3, #1
 8003816:	9107      	str	r1, [sp, #28]
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e7d9      	b.n	80037d0 <__cvt+0x7c>

0800381c <__exponent>:
 800381c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800381e:	2900      	cmp	r1, #0
 8003820:	bfb6      	itet	lt
 8003822:	232d      	movlt	r3, #45	@ 0x2d
 8003824:	232b      	movge	r3, #43	@ 0x2b
 8003826:	4249      	neglt	r1, r1
 8003828:	2909      	cmp	r1, #9
 800382a:	7002      	strb	r2, [r0, #0]
 800382c:	7043      	strb	r3, [r0, #1]
 800382e:	dd29      	ble.n	8003884 <__exponent+0x68>
 8003830:	f10d 0307 	add.w	r3, sp, #7
 8003834:	461d      	mov	r5, r3
 8003836:	270a      	movs	r7, #10
 8003838:	fbb1 f6f7 	udiv	r6, r1, r7
 800383c:	461a      	mov	r2, r3
 800383e:	fb07 1416 	mls	r4, r7, r6, r1
 8003842:	3430      	adds	r4, #48	@ 0x30
 8003844:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003848:	460c      	mov	r4, r1
 800384a:	2c63      	cmp	r4, #99	@ 0x63
 800384c:	4631      	mov	r1, r6
 800384e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003852:	dcf1      	bgt.n	8003838 <__exponent+0x1c>
 8003854:	3130      	adds	r1, #48	@ 0x30
 8003856:	1e94      	subs	r4, r2, #2
 8003858:	f803 1c01 	strb.w	r1, [r3, #-1]
 800385c:	4623      	mov	r3, r4
 800385e:	1c41      	adds	r1, r0, #1
 8003860:	42ab      	cmp	r3, r5
 8003862:	d30a      	bcc.n	800387a <__exponent+0x5e>
 8003864:	f10d 0309 	add.w	r3, sp, #9
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	42ac      	cmp	r4, r5
 800386c:	bf88      	it	hi
 800386e:	2300      	movhi	r3, #0
 8003870:	3302      	adds	r3, #2
 8003872:	4403      	add	r3, r0
 8003874:	1a18      	subs	r0, r3, r0
 8003876:	b003      	add	sp, #12
 8003878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800387a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800387e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003882:	e7ed      	b.n	8003860 <__exponent+0x44>
 8003884:	2330      	movs	r3, #48	@ 0x30
 8003886:	3130      	adds	r1, #48	@ 0x30
 8003888:	7083      	strb	r3, [r0, #2]
 800388a:	70c1      	strb	r1, [r0, #3]
 800388c:	1d03      	adds	r3, r0, #4
 800388e:	e7f1      	b.n	8003874 <__exponent+0x58>

08003890 <_printf_float>:
 8003890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003894:	b091      	sub	sp, #68	@ 0x44
 8003896:	460c      	mov	r4, r1
 8003898:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800389c:	4616      	mov	r6, r2
 800389e:	461f      	mov	r7, r3
 80038a0:	4605      	mov	r5, r0
 80038a2:	f000 fcf9 	bl	8004298 <_localeconv_r>
 80038a6:	6803      	ldr	r3, [r0, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	9308      	str	r3, [sp, #32]
 80038ac:	f7fc fc50 	bl	8000150 <strlen>
 80038b0:	2300      	movs	r3, #0
 80038b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80038b4:	f8d8 3000 	ldr.w	r3, [r8]
 80038b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80038ba:	3307      	adds	r3, #7
 80038bc:	f023 0307 	bic.w	r3, r3, #7
 80038c0:	f103 0208 	add.w	r2, r3, #8
 80038c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80038c8:	f8d4 b000 	ldr.w	fp, [r4]
 80038cc:	f8c8 2000 	str.w	r2, [r8]
 80038d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80038d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80038d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80038da:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80038de:	f04f 32ff 	mov.w	r2, #4294967295
 80038e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80038e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80038ea:	4b9c      	ldr	r3, [pc, #624]	@ (8003b5c <_printf_float+0x2cc>)
 80038ec:	f7fd f88e 	bl	8000a0c <__aeabi_dcmpun>
 80038f0:	bb70      	cbnz	r0, 8003950 <_printf_float+0xc0>
 80038f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80038f6:	f04f 32ff 	mov.w	r2, #4294967295
 80038fa:	4b98      	ldr	r3, [pc, #608]	@ (8003b5c <_printf_float+0x2cc>)
 80038fc:	f7fd f868 	bl	80009d0 <__aeabi_dcmple>
 8003900:	bb30      	cbnz	r0, 8003950 <_printf_float+0xc0>
 8003902:	2200      	movs	r2, #0
 8003904:	2300      	movs	r3, #0
 8003906:	4640      	mov	r0, r8
 8003908:	4649      	mov	r1, r9
 800390a:	f7fd f857 	bl	80009bc <__aeabi_dcmplt>
 800390e:	b110      	cbz	r0, 8003916 <_printf_float+0x86>
 8003910:	232d      	movs	r3, #45	@ 0x2d
 8003912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003916:	4a92      	ldr	r2, [pc, #584]	@ (8003b60 <_printf_float+0x2d0>)
 8003918:	4b92      	ldr	r3, [pc, #584]	@ (8003b64 <_printf_float+0x2d4>)
 800391a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800391e:	bf94      	ite	ls
 8003920:	4690      	movls	r8, r2
 8003922:	4698      	movhi	r8, r3
 8003924:	2303      	movs	r3, #3
 8003926:	f04f 0900 	mov.w	r9, #0
 800392a:	6123      	str	r3, [r4, #16]
 800392c:	f02b 0304 	bic.w	r3, fp, #4
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	4633      	mov	r3, r6
 8003934:	4621      	mov	r1, r4
 8003936:	4628      	mov	r0, r5
 8003938:	9700      	str	r7, [sp, #0]
 800393a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800393c:	f000 f9d4 	bl	8003ce8 <_printf_common>
 8003940:	3001      	adds	r0, #1
 8003942:	f040 8090 	bne.w	8003a66 <_printf_float+0x1d6>
 8003946:	f04f 30ff 	mov.w	r0, #4294967295
 800394a:	b011      	add	sp, #68	@ 0x44
 800394c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003950:	4642      	mov	r2, r8
 8003952:	464b      	mov	r3, r9
 8003954:	4640      	mov	r0, r8
 8003956:	4649      	mov	r1, r9
 8003958:	f7fd f858 	bl	8000a0c <__aeabi_dcmpun>
 800395c:	b148      	cbz	r0, 8003972 <_printf_float+0xe2>
 800395e:	464b      	mov	r3, r9
 8003960:	2b00      	cmp	r3, #0
 8003962:	bfb8      	it	lt
 8003964:	232d      	movlt	r3, #45	@ 0x2d
 8003966:	4a80      	ldr	r2, [pc, #512]	@ (8003b68 <_printf_float+0x2d8>)
 8003968:	bfb8      	it	lt
 800396a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800396e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b6c <_printf_float+0x2dc>)
 8003970:	e7d3      	b.n	800391a <_printf_float+0x8a>
 8003972:	6863      	ldr	r3, [r4, #4]
 8003974:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	d13f      	bne.n	80039fc <_printf_float+0x16c>
 800397c:	2306      	movs	r3, #6
 800397e:	6063      	str	r3, [r4, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	9206      	str	r2, [sp, #24]
 800398a:	aa0e      	add	r2, sp, #56	@ 0x38
 800398c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003990:	aa0d      	add	r2, sp, #52	@ 0x34
 8003992:	9203      	str	r2, [sp, #12]
 8003994:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003998:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800399c:	6863      	ldr	r3, [r4, #4]
 800399e:	4642      	mov	r2, r8
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4628      	mov	r0, r5
 80039a4:	464b      	mov	r3, r9
 80039a6:	910a      	str	r1, [sp, #40]	@ 0x28
 80039a8:	f7ff fed4 	bl	8003754 <__cvt>
 80039ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80039ae:	4680      	mov	r8, r0
 80039b0:	2947      	cmp	r1, #71	@ 0x47
 80039b2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80039b4:	d128      	bne.n	8003a08 <_printf_float+0x178>
 80039b6:	1cc8      	adds	r0, r1, #3
 80039b8:	db02      	blt.n	80039c0 <_printf_float+0x130>
 80039ba:	6863      	ldr	r3, [r4, #4]
 80039bc:	4299      	cmp	r1, r3
 80039be:	dd40      	ble.n	8003a42 <_printf_float+0x1b2>
 80039c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80039c4:	fa5f fa8a 	uxtb.w	sl, sl
 80039c8:	4652      	mov	r2, sl
 80039ca:	3901      	subs	r1, #1
 80039cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80039d0:	910d      	str	r1, [sp, #52]	@ 0x34
 80039d2:	f7ff ff23 	bl	800381c <__exponent>
 80039d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80039d8:	4681      	mov	r9, r0
 80039da:	1813      	adds	r3, r2, r0
 80039dc:	2a01      	cmp	r2, #1
 80039de:	6123      	str	r3, [r4, #16]
 80039e0:	dc02      	bgt.n	80039e8 <_printf_float+0x158>
 80039e2:	6822      	ldr	r2, [r4, #0]
 80039e4:	07d2      	lsls	r2, r2, #31
 80039e6:	d501      	bpl.n	80039ec <_printf_float+0x15c>
 80039e8:	3301      	adds	r3, #1
 80039ea:	6123      	str	r3, [r4, #16]
 80039ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d09e      	beq.n	8003932 <_printf_float+0xa2>
 80039f4:	232d      	movs	r3, #45	@ 0x2d
 80039f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039fa:	e79a      	b.n	8003932 <_printf_float+0xa2>
 80039fc:	2947      	cmp	r1, #71	@ 0x47
 80039fe:	d1bf      	bne.n	8003980 <_printf_float+0xf0>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1bd      	bne.n	8003980 <_printf_float+0xf0>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e7ba      	b.n	800397e <_printf_float+0xee>
 8003a08:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a0c:	d9dc      	bls.n	80039c8 <_printf_float+0x138>
 8003a0e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003a12:	d118      	bne.n	8003a46 <_printf_float+0x1b6>
 8003a14:	2900      	cmp	r1, #0
 8003a16:	6863      	ldr	r3, [r4, #4]
 8003a18:	dd0b      	ble.n	8003a32 <_printf_float+0x1a2>
 8003a1a:	6121      	str	r1, [r4, #16]
 8003a1c:	b913      	cbnz	r3, 8003a24 <_printf_float+0x194>
 8003a1e:	6822      	ldr	r2, [r4, #0]
 8003a20:	07d0      	lsls	r0, r2, #31
 8003a22:	d502      	bpl.n	8003a2a <_printf_float+0x19a>
 8003a24:	3301      	adds	r3, #1
 8003a26:	440b      	add	r3, r1
 8003a28:	6123      	str	r3, [r4, #16]
 8003a2a:	f04f 0900 	mov.w	r9, #0
 8003a2e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003a30:	e7dc      	b.n	80039ec <_printf_float+0x15c>
 8003a32:	b913      	cbnz	r3, 8003a3a <_printf_float+0x1aa>
 8003a34:	6822      	ldr	r2, [r4, #0]
 8003a36:	07d2      	lsls	r2, r2, #31
 8003a38:	d501      	bpl.n	8003a3e <_printf_float+0x1ae>
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	e7f4      	b.n	8003a28 <_printf_float+0x198>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e7f2      	b.n	8003a28 <_printf_float+0x198>
 8003a42:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003a46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a48:	4299      	cmp	r1, r3
 8003a4a:	db05      	blt.n	8003a58 <_printf_float+0x1c8>
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	6121      	str	r1, [r4, #16]
 8003a50:	07d8      	lsls	r0, r3, #31
 8003a52:	d5ea      	bpl.n	8003a2a <_printf_float+0x19a>
 8003a54:	1c4b      	adds	r3, r1, #1
 8003a56:	e7e7      	b.n	8003a28 <_printf_float+0x198>
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	bfcc      	ite	gt
 8003a5c:	2201      	movgt	r2, #1
 8003a5e:	f1c1 0202 	rsble	r2, r1, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	e7e0      	b.n	8003a28 <_printf_float+0x198>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	055a      	lsls	r2, r3, #21
 8003a6a:	d407      	bmi.n	8003a7c <_printf_float+0x1ec>
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	4642      	mov	r2, r8
 8003a70:	4631      	mov	r1, r6
 8003a72:	4628      	mov	r0, r5
 8003a74:	47b8      	blx	r7
 8003a76:	3001      	adds	r0, #1
 8003a78:	d12b      	bne.n	8003ad2 <_printf_float+0x242>
 8003a7a:	e764      	b.n	8003946 <_printf_float+0xb6>
 8003a7c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a80:	f240 80dc 	bls.w	8003c3c <_printf_float+0x3ac>
 8003a84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f7fc ff8c 	bl	80009a8 <__aeabi_dcmpeq>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d033      	beq.n	8003afc <_printf_float+0x26c>
 8003a94:	2301      	movs	r3, #1
 8003a96:	4631      	mov	r1, r6
 8003a98:	4628      	mov	r0, r5
 8003a9a:	4a35      	ldr	r2, [pc, #212]	@ (8003b70 <_printf_float+0x2e0>)
 8003a9c:	47b8      	blx	r7
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	f43f af51 	beq.w	8003946 <_printf_float+0xb6>
 8003aa4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003aa8:	4543      	cmp	r3, r8
 8003aaa:	db02      	blt.n	8003ab2 <_printf_float+0x222>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	07d8      	lsls	r0, r3, #31
 8003ab0:	d50f      	bpl.n	8003ad2 <_printf_float+0x242>
 8003ab2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ab6:	4631      	mov	r1, r6
 8003ab8:	4628      	mov	r0, r5
 8003aba:	47b8      	blx	r7
 8003abc:	3001      	adds	r0, #1
 8003abe:	f43f af42 	beq.w	8003946 <_printf_float+0xb6>
 8003ac2:	f04f 0900 	mov.w	r9, #0
 8003ac6:	f108 38ff 	add.w	r8, r8, #4294967295
 8003aca:	f104 0a1a 	add.w	sl, r4, #26
 8003ace:	45c8      	cmp	r8, r9
 8003ad0:	dc09      	bgt.n	8003ae6 <_printf_float+0x256>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	079b      	lsls	r3, r3, #30
 8003ad6:	f100 8102 	bmi.w	8003cde <_printf_float+0x44e>
 8003ada:	68e0      	ldr	r0, [r4, #12]
 8003adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ade:	4298      	cmp	r0, r3
 8003ae0:	bfb8      	it	lt
 8003ae2:	4618      	movlt	r0, r3
 8003ae4:	e731      	b.n	800394a <_printf_float+0xba>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	4652      	mov	r2, sl
 8003aea:	4631      	mov	r1, r6
 8003aec:	4628      	mov	r0, r5
 8003aee:	47b8      	blx	r7
 8003af0:	3001      	adds	r0, #1
 8003af2:	f43f af28 	beq.w	8003946 <_printf_float+0xb6>
 8003af6:	f109 0901 	add.w	r9, r9, #1
 8003afa:	e7e8      	b.n	8003ace <_printf_float+0x23e>
 8003afc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	dc38      	bgt.n	8003b74 <_printf_float+0x2e4>
 8003b02:	2301      	movs	r3, #1
 8003b04:	4631      	mov	r1, r6
 8003b06:	4628      	mov	r0, r5
 8003b08:	4a19      	ldr	r2, [pc, #100]	@ (8003b70 <_printf_float+0x2e0>)
 8003b0a:	47b8      	blx	r7
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	f43f af1a 	beq.w	8003946 <_printf_float+0xb6>
 8003b12:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003b16:	ea59 0303 	orrs.w	r3, r9, r3
 8003b1a:	d102      	bne.n	8003b22 <_printf_float+0x292>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	07d9      	lsls	r1, r3, #31
 8003b20:	d5d7      	bpl.n	8003ad2 <_printf_float+0x242>
 8003b22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b26:	4631      	mov	r1, r6
 8003b28:	4628      	mov	r0, r5
 8003b2a:	47b8      	blx	r7
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	f43f af0a 	beq.w	8003946 <_printf_float+0xb6>
 8003b32:	f04f 0a00 	mov.w	sl, #0
 8003b36:	f104 0b1a 	add.w	fp, r4, #26
 8003b3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b3c:	425b      	negs	r3, r3
 8003b3e:	4553      	cmp	r3, sl
 8003b40:	dc01      	bgt.n	8003b46 <_printf_float+0x2b6>
 8003b42:	464b      	mov	r3, r9
 8003b44:	e793      	b.n	8003a6e <_printf_float+0x1de>
 8003b46:	2301      	movs	r3, #1
 8003b48:	465a      	mov	r2, fp
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	47b8      	blx	r7
 8003b50:	3001      	adds	r0, #1
 8003b52:	f43f aef8 	beq.w	8003946 <_printf_float+0xb6>
 8003b56:	f10a 0a01 	add.w	sl, sl, #1
 8003b5a:	e7ee      	b.n	8003b3a <_printf_float+0x2aa>
 8003b5c:	7fefffff 	.word	0x7fefffff
 8003b60:	08006492 	.word	0x08006492
 8003b64:	08006496 	.word	0x08006496
 8003b68:	0800649a 	.word	0x0800649a
 8003b6c:	0800649e 	.word	0x0800649e
 8003b70:	080064a2 	.word	0x080064a2
 8003b74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b76:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003b7a:	4553      	cmp	r3, sl
 8003b7c:	bfa8      	it	ge
 8003b7e:	4653      	movge	r3, sl
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	4699      	mov	r9, r3
 8003b84:	dc36      	bgt.n	8003bf4 <_printf_float+0x364>
 8003b86:	f04f 0b00 	mov.w	fp, #0
 8003b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b8e:	f104 021a 	add.w	r2, r4, #26
 8003b92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b94:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b96:	eba3 0309 	sub.w	r3, r3, r9
 8003b9a:	455b      	cmp	r3, fp
 8003b9c:	dc31      	bgt.n	8003c02 <_printf_float+0x372>
 8003b9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ba0:	459a      	cmp	sl, r3
 8003ba2:	dc3a      	bgt.n	8003c1a <_printf_float+0x38a>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	07da      	lsls	r2, r3, #31
 8003ba8:	d437      	bmi.n	8003c1a <_printf_float+0x38a>
 8003baa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bac:	ebaa 0903 	sub.w	r9, sl, r3
 8003bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003bb2:	ebaa 0303 	sub.w	r3, sl, r3
 8003bb6:	4599      	cmp	r9, r3
 8003bb8:	bfa8      	it	ge
 8003bba:	4699      	movge	r9, r3
 8003bbc:	f1b9 0f00 	cmp.w	r9, #0
 8003bc0:	dc33      	bgt.n	8003c2a <_printf_float+0x39a>
 8003bc2:	f04f 0800 	mov.w	r8, #0
 8003bc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bca:	f104 0b1a 	add.w	fp, r4, #26
 8003bce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bd0:	ebaa 0303 	sub.w	r3, sl, r3
 8003bd4:	eba3 0309 	sub.w	r3, r3, r9
 8003bd8:	4543      	cmp	r3, r8
 8003bda:	f77f af7a 	ble.w	8003ad2 <_printf_float+0x242>
 8003bde:	2301      	movs	r3, #1
 8003be0:	465a      	mov	r2, fp
 8003be2:	4631      	mov	r1, r6
 8003be4:	4628      	mov	r0, r5
 8003be6:	47b8      	blx	r7
 8003be8:	3001      	adds	r0, #1
 8003bea:	f43f aeac 	beq.w	8003946 <_printf_float+0xb6>
 8003bee:	f108 0801 	add.w	r8, r8, #1
 8003bf2:	e7ec      	b.n	8003bce <_printf_float+0x33e>
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	4631      	mov	r1, r6
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	47b8      	blx	r7
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d1c2      	bne.n	8003b86 <_printf_float+0x2f6>
 8003c00:	e6a1      	b.n	8003946 <_printf_float+0xb6>
 8003c02:	2301      	movs	r3, #1
 8003c04:	4631      	mov	r1, r6
 8003c06:	4628      	mov	r0, r5
 8003c08:	920a      	str	r2, [sp, #40]	@ 0x28
 8003c0a:	47b8      	blx	r7
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	f43f ae9a 	beq.w	8003946 <_printf_float+0xb6>
 8003c12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c14:	f10b 0b01 	add.w	fp, fp, #1
 8003c18:	e7bb      	b.n	8003b92 <_printf_float+0x302>
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c20:	4628      	mov	r0, r5
 8003c22:	47b8      	blx	r7
 8003c24:	3001      	adds	r0, #1
 8003c26:	d1c0      	bne.n	8003baa <_printf_float+0x31a>
 8003c28:	e68d      	b.n	8003946 <_printf_float+0xb6>
 8003c2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c2c:	464b      	mov	r3, r9
 8003c2e:	4631      	mov	r1, r6
 8003c30:	4628      	mov	r0, r5
 8003c32:	4442      	add	r2, r8
 8003c34:	47b8      	blx	r7
 8003c36:	3001      	adds	r0, #1
 8003c38:	d1c3      	bne.n	8003bc2 <_printf_float+0x332>
 8003c3a:	e684      	b.n	8003946 <_printf_float+0xb6>
 8003c3c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003c40:	f1ba 0f01 	cmp.w	sl, #1
 8003c44:	dc01      	bgt.n	8003c4a <_printf_float+0x3ba>
 8003c46:	07db      	lsls	r3, r3, #31
 8003c48:	d536      	bpl.n	8003cb8 <_printf_float+0x428>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4628      	mov	r0, r5
 8003c52:	47b8      	blx	r7
 8003c54:	3001      	adds	r0, #1
 8003c56:	f43f ae76 	beq.w	8003946 <_printf_float+0xb6>
 8003c5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c5e:	4631      	mov	r1, r6
 8003c60:	4628      	mov	r0, r5
 8003c62:	47b8      	blx	r7
 8003c64:	3001      	adds	r0, #1
 8003c66:	f43f ae6e 	beq.w	8003946 <_printf_float+0xb6>
 8003c6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2300      	movs	r3, #0
 8003c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c76:	f7fc fe97 	bl	80009a8 <__aeabi_dcmpeq>
 8003c7a:	b9c0      	cbnz	r0, 8003cae <_printf_float+0x41e>
 8003c7c:	4653      	mov	r3, sl
 8003c7e:	f108 0201 	add.w	r2, r8, #1
 8003c82:	4631      	mov	r1, r6
 8003c84:	4628      	mov	r0, r5
 8003c86:	47b8      	blx	r7
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d10c      	bne.n	8003ca6 <_printf_float+0x416>
 8003c8c:	e65b      	b.n	8003946 <_printf_float+0xb6>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	465a      	mov	r2, fp
 8003c92:	4631      	mov	r1, r6
 8003c94:	4628      	mov	r0, r5
 8003c96:	47b8      	blx	r7
 8003c98:	3001      	adds	r0, #1
 8003c9a:	f43f ae54 	beq.w	8003946 <_printf_float+0xb6>
 8003c9e:	f108 0801 	add.w	r8, r8, #1
 8003ca2:	45d0      	cmp	r8, sl
 8003ca4:	dbf3      	blt.n	8003c8e <_printf_float+0x3fe>
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003cac:	e6e0      	b.n	8003a70 <_printf_float+0x1e0>
 8003cae:	f04f 0800 	mov.w	r8, #0
 8003cb2:	f104 0b1a 	add.w	fp, r4, #26
 8003cb6:	e7f4      	b.n	8003ca2 <_printf_float+0x412>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	4642      	mov	r2, r8
 8003cbc:	e7e1      	b.n	8003c82 <_printf_float+0x3f2>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	464a      	mov	r2, r9
 8003cc2:	4631      	mov	r1, r6
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	47b8      	blx	r7
 8003cc8:	3001      	adds	r0, #1
 8003cca:	f43f ae3c 	beq.w	8003946 <_printf_float+0xb6>
 8003cce:	f108 0801 	add.w	r8, r8, #1
 8003cd2:	68e3      	ldr	r3, [r4, #12]
 8003cd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003cd6:	1a5b      	subs	r3, r3, r1
 8003cd8:	4543      	cmp	r3, r8
 8003cda:	dcf0      	bgt.n	8003cbe <_printf_float+0x42e>
 8003cdc:	e6fd      	b.n	8003ada <_printf_float+0x24a>
 8003cde:	f04f 0800 	mov.w	r8, #0
 8003ce2:	f104 0919 	add.w	r9, r4, #25
 8003ce6:	e7f4      	b.n	8003cd2 <_printf_float+0x442>

08003ce8 <_printf_common>:
 8003ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cec:	4616      	mov	r6, r2
 8003cee:	4698      	mov	r8, r3
 8003cf0:	688a      	ldr	r2, [r1, #8]
 8003cf2:	690b      	ldr	r3, [r1, #16]
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	bfb8      	it	lt
 8003cfa:	4613      	movlt	r3, r2
 8003cfc:	6033      	str	r3, [r6, #0]
 8003cfe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d02:	460c      	mov	r4, r1
 8003d04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d08:	b10a      	cbz	r2, 8003d0e <_printf_common+0x26>
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	6033      	str	r3, [r6, #0]
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	0699      	lsls	r1, r3, #26
 8003d12:	bf42      	ittt	mi
 8003d14:	6833      	ldrmi	r3, [r6, #0]
 8003d16:	3302      	addmi	r3, #2
 8003d18:	6033      	strmi	r3, [r6, #0]
 8003d1a:	6825      	ldr	r5, [r4, #0]
 8003d1c:	f015 0506 	ands.w	r5, r5, #6
 8003d20:	d106      	bne.n	8003d30 <_printf_common+0x48>
 8003d22:	f104 0a19 	add.w	sl, r4, #25
 8003d26:	68e3      	ldr	r3, [r4, #12]
 8003d28:	6832      	ldr	r2, [r6, #0]
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	42ab      	cmp	r3, r5
 8003d2e:	dc2b      	bgt.n	8003d88 <_printf_common+0xa0>
 8003d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	3b00      	subs	r3, #0
 8003d38:	bf18      	it	ne
 8003d3a:	2301      	movne	r3, #1
 8003d3c:	0692      	lsls	r2, r2, #26
 8003d3e:	d430      	bmi.n	8003da2 <_printf_common+0xba>
 8003d40:	4641      	mov	r1, r8
 8003d42:	4638      	mov	r0, r7
 8003d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d48:	47c8      	blx	r9
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	d023      	beq.n	8003d96 <_printf_common+0xae>
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	6922      	ldr	r2, [r4, #16]
 8003d52:	f003 0306 	and.w	r3, r3, #6
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	bf14      	ite	ne
 8003d5a:	2500      	movne	r5, #0
 8003d5c:	6833      	ldreq	r3, [r6, #0]
 8003d5e:	f04f 0600 	mov.w	r6, #0
 8003d62:	bf08      	it	eq
 8003d64:	68e5      	ldreq	r5, [r4, #12]
 8003d66:	f104 041a 	add.w	r4, r4, #26
 8003d6a:	bf08      	it	eq
 8003d6c:	1aed      	subeq	r5, r5, r3
 8003d6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d72:	bf08      	it	eq
 8003d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	bfc4      	itt	gt
 8003d7c:	1a9b      	subgt	r3, r3, r2
 8003d7e:	18ed      	addgt	r5, r5, r3
 8003d80:	42b5      	cmp	r5, r6
 8003d82:	d11a      	bne.n	8003dba <_printf_common+0xd2>
 8003d84:	2000      	movs	r0, #0
 8003d86:	e008      	b.n	8003d9a <_printf_common+0xb2>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	4652      	mov	r2, sl
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	4638      	mov	r0, r7
 8003d90:	47c8      	blx	r9
 8003d92:	3001      	adds	r0, #1
 8003d94:	d103      	bne.n	8003d9e <_printf_common+0xb6>
 8003d96:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9e:	3501      	adds	r5, #1
 8003da0:	e7c1      	b.n	8003d26 <_printf_common+0x3e>
 8003da2:	2030      	movs	r0, #48	@ 0x30
 8003da4:	18e1      	adds	r1, r4, r3
 8003da6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003db0:	4422      	add	r2, r4
 8003db2:	3302      	adds	r3, #2
 8003db4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003db8:	e7c2      	b.n	8003d40 <_printf_common+0x58>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	47c8      	blx	r9
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d0e6      	beq.n	8003d96 <_printf_common+0xae>
 8003dc8:	3601      	adds	r6, #1
 8003dca:	e7d9      	b.n	8003d80 <_printf_common+0x98>

08003dcc <_printf_i>:
 8003dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd0:	7e0f      	ldrb	r7, [r1, #24]
 8003dd2:	4691      	mov	r9, r2
 8003dd4:	2f78      	cmp	r7, #120	@ 0x78
 8003dd6:	4680      	mov	r8, r0
 8003dd8:	460c      	mov	r4, r1
 8003dda:	469a      	mov	sl, r3
 8003ddc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003de2:	d807      	bhi.n	8003df4 <_printf_i+0x28>
 8003de4:	2f62      	cmp	r7, #98	@ 0x62
 8003de6:	d80a      	bhi.n	8003dfe <_printf_i+0x32>
 8003de8:	2f00      	cmp	r7, #0
 8003dea:	f000 80d3 	beq.w	8003f94 <_printf_i+0x1c8>
 8003dee:	2f58      	cmp	r7, #88	@ 0x58
 8003df0:	f000 80ba 	beq.w	8003f68 <_printf_i+0x19c>
 8003df4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003df8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003dfc:	e03a      	b.n	8003e74 <_printf_i+0xa8>
 8003dfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e02:	2b15      	cmp	r3, #21
 8003e04:	d8f6      	bhi.n	8003df4 <_printf_i+0x28>
 8003e06:	a101      	add	r1, pc, #4	@ (adr r1, 8003e0c <_printf_i+0x40>)
 8003e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e0c:	08003e65 	.word	0x08003e65
 8003e10:	08003e79 	.word	0x08003e79
 8003e14:	08003df5 	.word	0x08003df5
 8003e18:	08003df5 	.word	0x08003df5
 8003e1c:	08003df5 	.word	0x08003df5
 8003e20:	08003df5 	.word	0x08003df5
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003df5 	.word	0x08003df5
 8003e2c:	08003df5 	.word	0x08003df5
 8003e30:	08003df5 	.word	0x08003df5
 8003e34:	08003df5 	.word	0x08003df5
 8003e38:	08003f7b 	.word	0x08003f7b
 8003e3c:	08003ea3 	.word	0x08003ea3
 8003e40:	08003f35 	.word	0x08003f35
 8003e44:	08003df5 	.word	0x08003df5
 8003e48:	08003df5 	.word	0x08003df5
 8003e4c:	08003f9d 	.word	0x08003f9d
 8003e50:	08003df5 	.word	0x08003df5
 8003e54:	08003ea3 	.word	0x08003ea3
 8003e58:	08003df5 	.word	0x08003df5
 8003e5c:	08003df5 	.word	0x08003df5
 8003e60:	08003f3d 	.word	0x08003f3d
 8003e64:	6833      	ldr	r3, [r6, #0]
 8003e66:	1d1a      	adds	r2, r3, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6032      	str	r2, [r6, #0]
 8003e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e74:	2301      	movs	r3, #1
 8003e76:	e09e      	b.n	8003fb6 <_printf_i+0x1ea>
 8003e78:	6833      	ldr	r3, [r6, #0]
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	1d19      	adds	r1, r3, #4
 8003e7e:	6031      	str	r1, [r6, #0]
 8003e80:	0606      	lsls	r6, r0, #24
 8003e82:	d501      	bpl.n	8003e88 <_printf_i+0xbc>
 8003e84:	681d      	ldr	r5, [r3, #0]
 8003e86:	e003      	b.n	8003e90 <_printf_i+0xc4>
 8003e88:	0645      	lsls	r5, r0, #25
 8003e8a:	d5fb      	bpl.n	8003e84 <_printf_i+0xb8>
 8003e8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e90:	2d00      	cmp	r5, #0
 8003e92:	da03      	bge.n	8003e9c <_printf_i+0xd0>
 8003e94:	232d      	movs	r3, #45	@ 0x2d
 8003e96:	426d      	negs	r5, r5
 8003e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e9c:	230a      	movs	r3, #10
 8003e9e:	4859      	ldr	r0, [pc, #356]	@ (8004004 <_printf_i+0x238>)
 8003ea0:	e011      	b.n	8003ec6 <_printf_i+0xfa>
 8003ea2:	6821      	ldr	r1, [r4, #0]
 8003ea4:	6833      	ldr	r3, [r6, #0]
 8003ea6:	0608      	lsls	r0, r1, #24
 8003ea8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003eac:	d402      	bmi.n	8003eb4 <_printf_i+0xe8>
 8003eae:	0649      	lsls	r1, r1, #25
 8003eb0:	bf48      	it	mi
 8003eb2:	b2ad      	uxthmi	r5, r5
 8003eb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003eb6:	6033      	str	r3, [r6, #0]
 8003eb8:	bf14      	ite	ne
 8003eba:	230a      	movne	r3, #10
 8003ebc:	2308      	moveq	r3, #8
 8003ebe:	4851      	ldr	r0, [pc, #324]	@ (8004004 <_printf_i+0x238>)
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ec6:	6866      	ldr	r6, [r4, #4]
 8003ec8:	2e00      	cmp	r6, #0
 8003eca:	bfa8      	it	ge
 8003ecc:	6821      	ldrge	r1, [r4, #0]
 8003ece:	60a6      	str	r6, [r4, #8]
 8003ed0:	bfa4      	itt	ge
 8003ed2:	f021 0104 	bicge.w	r1, r1, #4
 8003ed6:	6021      	strge	r1, [r4, #0]
 8003ed8:	b90d      	cbnz	r5, 8003ede <_printf_i+0x112>
 8003eda:	2e00      	cmp	r6, #0
 8003edc:	d04b      	beq.n	8003f76 <_printf_i+0x1aa>
 8003ede:	4616      	mov	r6, r2
 8003ee0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ee4:	fb03 5711 	mls	r7, r3, r1, r5
 8003ee8:	5dc7      	ldrb	r7, [r0, r7]
 8003eea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eee:	462f      	mov	r7, r5
 8003ef0:	42bb      	cmp	r3, r7
 8003ef2:	460d      	mov	r5, r1
 8003ef4:	d9f4      	bls.n	8003ee0 <_printf_i+0x114>
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d10b      	bne.n	8003f12 <_printf_i+0x146>
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	07df      	lsls	r7, r3, #31
 8003efe:	d508      	bpl.n	8003f12 <_printf_i+0x146>
 8003f00:	6923      	ldr	r3, [r4, #16]
 8003f02:	6861      	ldr	r1, [r4, #4]
 8003f04:	4299      	cmp	r1, r3
 8003f06:	bfde      	ittt	le
 8003f08:	2330      	movle	r3, #48	@ 0x30
 8003f0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f12:	1b92      	subs	r2, r2, r6
 8003f14:	6122      	str	r2, [r4, #16]
 8003f16:	464b      	mov	r3, r9
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	f8cd a000 	str.w	sl, [sp]
 8003f20:	aa03      	add	r2, sp, #12
 8003f22:	f7ff fee1 	bl	8003ce8 <_printf_common>
 8003f26:	3001      	adds	r0, #1
 8003f28:	d14a      	bne.n	8003fc0 <_printf_i+0x1f4>
 8003f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2e:	b004      	add	sp, #16
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	f043 0320 	orr.w	r3, r3, #32
 8003f3a:	6023      	str	r3, [r4, #0]
 8003f3c:	2778      	movs	r7, #120	@ 0x78
 8003f3e:	4832      	ldr	r0, [pc, #200]	@ (8004008 <_printf_i+0x23c>)
 8003f40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	6831      	ldr	r1, [r6, #0]
 8003f48:	061f      	lsls	r7, r3, #24
 8003f4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f4e:	d402      	bmi.n	8003f56 <_printf_i+0x18a>
 8003f50:	065f      	lsls	r7, r3, #25
 8003f52:	bf48      	it	mi
 8003f54:	b2ad      	uxthmi	r5, r5
 8003f56:	6031      	str	r1, [r6, #0]
 8003f58:	07d9      	lsls	r1, r3, #31
 8003f5a:	bf44      	itt	mi
 8003f5c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f60:	6023      	strmi	r3, [r4, #0]
 8003f62:	b11d      	cbz	r5, 8003f6c <_printf_i+0x1a0>
 8003f64:	2310      	movs	r3, #16
 8003f66:	e7ab      	b.n	8003ec0 <_printf_i+0xf4>
 8003f68:	4826      	ldr	r0, [pc, #152]	@ (8004004 <_printf_i+0x238>)
 8003f6a:	e7e9      	b.n	8003f40 <_printf_i+0x174>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	f023 0320 	bic.w	r3, r3, #32
 8003f72:	6023      	str	r3, [r4, #0]
 8003f74:	e7f6      	b.n	8003f64 <_printf_i+0x198>
 8003f76:	4616      	mov	r6, r2
 8003f78:	e7bd      	b.n	8003ef6 <_printf_i+0x12a>
 8003f7a:	6833      	ldr	r3, [r6, #0]
 8003f7c:	6825      	ldr	r5, [r4, #0]
 8003f7e:	1d18      	adds	r0, r3, #4
 8003f80:	6961      	ldr	r1, [r4, #20]
 8003f82:	6030      	str	r0, [r6, #0]
 8003f84:	062e      	lsls	r6, r5, #24
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	d501      	bpl.n	8003f8e <_printf_i+0x1c2>
 8003f8a:	6019      	str	r1, [r3, #0]
 8003f8c:	e002      	b.n	8003f94 <_printf_i+0x1c8>
 8003f8e:	0668      	lsls	r0, r5, #25
 8003f90:	d5fb      	bpl.n	8003f8a <_printf_i+0x1be>
 8003f92:	8019      	strh	r1, [r3, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	4616      	mov	r6, r2
 8003f98:	6123      	str	r3, [r4, #16]
 8003f9a:	e7bc      	b.n	8003f16 <_printf_i+0x14a>
 8003f9c:	6833      	ldr	r3, [r6, #0]
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	1d1a      	adds	r2, r3, #4
 8003fa2:	6032      	str	r2, [r6, #0]
 8003fa4:	681e      	ldr	r6, [r3, #0]
 8003fa6:	6862      	ldr	r2, [r4, #4]
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f000 f9ec 	bl	8004386 <memchr>
 8003fae:	b108      	cbz	r0, 8003fb4 <_printf_i+0x1e8>
 8003fb0:	1b80      	subs	r0, r0, r6
 8003fb2:	6060      	str	r0, [r4, #4]
 8003fb4:	6863      	ldr	r3, [r4, #4]
 8003fb6:	6123      	str	r3, [r4, #16]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fbe:	e7aa      	b.n	8003f16 <_printf_i+0x14a>
 8003fc0:	4632      	mov	r2, r6
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	4640      	mov	r0, r8
 8003fc6:	6923      	ldr	r3, [r4, #16]
 8003fc8:	47d0      	blx	sl
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d0ad      	beq.n	8003f2a <_printf_i+0x15e>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	079b      	lsls	r3, r3, #30
 8003fd2:	d413      	bmi.n	8003ffc <_printf_i+0x230>
 8003fd4:	68e0      	ldr	r0, [r4, #12]
 8003fd6:	9b03      	ldr	r3, [sp, #12]
 8003fd8:	4298      	cmp	r0, r3
 8003fda:	bfb8      	it	lt
 8003fdc:	4618      	movlt	r0, r3
 8003fde:	e7a6      	b.n	8003f2e <_printf_i+0x162>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4632      	mov	r2, r6
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	47d0      	blx	sl
 8003fea:	3001      	adds	r0, #1
 8003fec:	d09d      	beq.n	8003f2a <_printf_i+0x15e>
 8003fee:	3501      	adds	r5, #1
 8003ff0:	68e3      	ldr	r3, [r4, #12]
 8003ff2:	9903      	ldr	r1, [sp, #12]
 8003ff4:	1a5b      	subs	r3, r3, r1
 8003ff6:	42ab      	cmp	r3, r5
 8003ff8:	dcf2      	bgt.n	8003fe0 <_printf_i+0x214>
 8003ffa:	e7eb      	b.n	8003fd4 <_printf_i+0x208>
 8003ffc:	2500      	movs	r5, #0
 8003ffe:	f104 0619 	add.w	r6, r4, #25
 8004002:	e7f5      	b.n	8003ff0 <_printf_i+0x224>
 8004004:	080064a4 	.word	0x080064a4
 8004008:	080064b5 	.word	0x080064b5

0800400c <std>:
 800400c:	2300      	movs	r3, #0
 800400e:	b510      	push	{r4, lr}
 8004010:	4604      	mov	r4, r0
 8004012:	e9c0 3300 	strd	r3, r3, [r0]
 8004016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800401a:	6083      	str	r3, [r0, #8]
 800401c:	8181      	strh	r1, [r0, #12]
 800401e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004020:	81c2      	strh	r2, [r0, #14]
 8004022:	6183      	str	r3, [r0, #24]
 8004024:	4619      	mov	r1, r3
 8004026:	2208      	movs	r2, #8
 8004028:	305c      	adds	r0, #92	@ 0x5c
 800402a:	f000 f92d 	bl	8004288 <memset>
 800402e:	4b0d      	ldr	r3, [pc, #52]	@ (8004064 <std+0x58>)
 8004030:	6224      	str	r4, [r4, #32]
 8004032:	6263      	str	r3, [r4, #36]	@ 0x24
 8004034:	4b0c      	ldr	r3, [pc, #48]	@ (8004068 <std+0x5c>)
 8004036:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004038:	4b0c      	ldr	r3, [pc, #48]	@ (800406c <std+0x60>)
 800403a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800403c:	4b0c      	ldr	r3, [pc, #48]	@ (8004070 <std+0x64>)
 800403e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004040:	4b0c      	ldr	r3, [pc, #48]	@ (8004074 <std+0x68>)
 8004042:	429c      	cmp	r4, r3
 8004044:	d006      	beq.n	8004054 <std+0x48>
 8004046:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800404a:	4294      	cmp	r4, r2
 800404c:	d002      	beq.n	8004054 <std+0x48>
 800404e:	33d0      	adds	r3, #208	@ 0xd0
 8004050:	429c      	cmp	r4, r3
 8004052:	d105      	bne.n	8004060 <std+0x54>
 8004054:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800405c:	f000 b990 	b.w	8004380 <__retarget_lock_init_recursive>
 8004060:	bd10      	pop	{r4, pc}
 8004062:	bf00      	nop
 8004064:	08004191 	.word	0x08004191
 8004068:	080041b3 	.word	0x080041b3
 800406c:	080041eb 	.word	0x080041eb
 8004070:	0800420f 	.word	0x0800420f
 8004074:	20000308 	.word	0x20000308

08004078 <stdio_exit_handler>:
 8004078:	4a02      	ldr	r2, [pc, #8]	@ (8004084 <stdio_exit_handler+0xc>)
 800407a:	4903      	ldr	r1, [pc, #12]	@ (8004088 <stdio_exit_handler+0x10>)
 800407c:	4803      	ldr	r0, [pc, #12]	@ (800408c <stdio_exit_handler+0x14>)
 800407e:	f000 b869 	b.w	8004154 <_fwalk_sglue>
 8004082:	bf00      	nop
 8004084:	2000000c 	.word	0x2000000c
 8004088:	08005cf5 	.word	0x08005cf5
 800408c:	2000001c 	.word	0x2000001c

08004090 <cleanup_stdio>:
 8004090:	6841      	ldr	r1, [r0, #4]
 8004092:	4b0c      	ldr	r3, [pc, #48]	@ (80040c4 <cleanup_stdio+0x34>)
 8004094:	b510      	push	{r4, lr}
 8004096:	4299      	cmp	r1, r3
 8004098:	4604      	mov	r4, r0
 800409a:	d001      	beq.n	80040a0 <cleanup_stdio+0x10>
 800409c:	f001 fe2a 	bl	8005cf4 <_fflush_r>
 80040a0:	68a1      	ldr	r1, [r4, #8]
 80040a2:	4b09      	ldr	r3, [pc, #36]	@ (80040c8 <cleanup_stdio+0x38>)
 80040a4:	4299      	cmp	r1, r3
 80040a6:	d002      	beq.n	80040ae <cleanup_stdio+0x1e>
 80040a8:	4620      	mov	r0, r4
 80040aa:	f001 fe23 	bl	8005cf4 <_fflush_r>
 80040ae:	68e1      	ldr	r1, [r4, #12]
 80040b0:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <cleanup_stdio+0x3c>)
 80040b2:	4299      	cmp	r1, r3
 80040b4:	d004      	beq.n	80040c0 <cleanup_stdio+0x30>
 80040b6:	4620      	mov	r0, r4
 80040b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040bc:	f001 be1a 	b.w	8005cf4 <_fflush_r>
 80040c0:	bd10      	pop	{r4, pc}
 80040c2:	bf00      	nop
 80040c4:	20000308 	.word	0x20000308
 80040c8:	20000370 	.word	0x20000370
 80040cc:	200003d8 	.word	0x200003d8

080040d0 <global_stdio_init.part.0>:
 80040d0:	b510      	push	{r4, lr}
 80040d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <global_stdio_init.part.0+0x30>)
 80040d4:	4c0b      	ldr	r4, [pc, #44]	@ (8004104 <global_stdio_init.part.0+0x34>)
 80040d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004108 <global_stdio_init.part.0+0x38>)
 80040d8:	4620      	mov	r0, r4
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	2104      	movs	r1, #4
 80040de:	2200      	movs	r2, #0
 80040e0:	f7ff ff94 	bl	800400c <std>
 80040e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80040e8:	2201      	movs	r2, #1
 80040ea:	2109      	movs	r1, #9
 80040ec:	f7ff ff8e 	bl	800400c <std>
 80040f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80040f4:	2202      	movs	r2, #2
 80040f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040fa:	2112      	movs	r1, #18
 80040fc:	f7ff bf86 	b.w	800400c <std>
 8004100:	20000440 	.word	0x20000440
 8004104:	20000308 	.word	0x20000308
 8004108:	08004079 	.word	0x08004079

0800410c <__sfp_lock_acquire>:
 800410c:	4801      	ldr	r0, [pc, #4]	@ (8004114 <__sfp_lock_acquire+0x8>)
 800410e:	f000 b938 	b.w	8004382 <__retarget_lock_acquire_recursive>
 8004112:	bf00      	nop
 8004114:	20000449 	.word	0x20000449

08004118 <__sfp_lock_release>:
 8004118:	4801      	ldr	r0, [pc, #4]	@ (8004120 <__sfp_lock_release+0x8>)
 800411a:	f000 b933 	b.w	8004384 <__retarget_lock_release_recursive>
 800411e:	bf00      	nop
 8004120:	20000449 	.word	0x20000449

08004124 <__sinit>:
 8004124:	b510      	push	{r4, lr}
 8004126:	4604      	mov	r4, r0
 8004128:	f7ff fff0 	bl	800410c <__sfp_lock_acquire>
 800412c:	6a23      	ldr	r3, [r4, #32]
 800412e:	b11b      	cbz	r3, 8004138 <__sinit+0x14>
 8004130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004134:	f7ff bff0 	b.w	8004118 <__sfp_lock_release>
 8004138:	4b04      	ldr	r3, [pc, #16]	@ (800414c <__sinit+0x28>)
 800413a:	6223      	str	r3, [r4, #32]
 800413c:	4b04      	ldr	r3, [pc, #16]	@ (8004150 <__sinit+0x2c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f5      	bne.n	8004130 <__sinit+0xc>
 8004144:	f7ff ffc4 	bl	80040d0 <global_stdio_init.part.0>
 8004148:	e7f2      	b.n	8004130 <__sinit+0xc>
 800414a:	bf00      	nop
 800414c:	08004091 	.word	0x08004091
 8004150:	20000440 	.word	0x20000440

08004154 <_fwalk_sglue>:
 8004154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004158:	4607      	mov	r7, r0
 800415a:	4688      	mov	r8, r1
 800415c:	4614      	mov	r4, r2
 800415e:	2600      	movs	r6, #0
 8004160:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004164:	f1b9 0901 	subs.w	r9, r9, #1
 8004168:	d505      	bpl.n	8004176 <_fwalk_sglue+0x22>
 800416a:	6824      	ldr	r4, [r4, #0]
 800416c:	2c00      	cmp	r4, #0
 800416e:	d1f7      	bne.n	8004160 <_fwalk_sglue+0xc>
 8004170:	4630      	mov	r0, r6
 8004172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004176:	89ab      	ldrh	r3, [r5, #12]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d907      	bls.n	800418c <_fwalk_sglue+0x38>
 800417c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004180:	3301      	adds	r3, #1
 8004182:	d003      	beq.n	800418c <_fwalk_sglue+0x38>
 8004184:	4629      	mov	r1, r5
 8004186:	4638      	mov	r0, r7
 8004188:	47c0      	blx	r8
 800418a:	4306      	orrs	r6, r0
 800418c:	3568      	adds	r5, #104	@ 0x68
 800418e:	e7e9      	b.n	8004164 <_fwalk_sglue+0x10>

08004190 <__sread>:
 8004190:	b510      	push	{r4, lr}
 8004192:	460c      	mov	r4, r1
 8004194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004198:	f000 f8a4 	bl	80042e4 <_read_r>
 800419c:	2800      	cmp	r0, #0
 800419e:	bfab      	itete	ge
 80041a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80041a2:	89a3      	ldrhlt	r3, [r4, #12]
 80041a4:	181b      	addge	r3, r3, r0
 80041a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80041aa:	bfac      	ite	ge
 80041ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80041ae:	81a3      	strhlt	r3, [r4, #12]
 80041b0:	bd10      	pop	{r4, pc}

080041b2 <__swrite>:
 80041b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b6:	461f      	mov	r7, r3
 80041b8:	898b      	ldrh	r3, [r1, #12]
 80041ba:	4605      	mov	r5, r0
 80041bc:	05db      	lsls	r3, r3, #23
 80041be:	460c      	mov	r4, r1
 80041c0:	4616      	mov	r6, r2
 80041c2:	d505      	bpl.n	80041d0 <__swrite+0x1e>
 80041c4:	2302      	movs	r3, #2
 80041c6:	2200      	movs	r2, #0
 80041c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041cc:	f000 f878 	bl	80042c0 <_lseek_r>
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	4632      	mov	r2, r6
 80041d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041d8:	81a3      	strh	r3, [r4, #12]
 80041da:	4628      	mov	r0, r5
 80041dc:	463b      	mov	r3, r7
 80041de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041e6:	f000 b88f 	b.w	8004308 <_write_r>

080041ea <__sseek>:
 80041ea:	b510      	push	{r4, lr}
 80041ec:	460c      	mov	r4, r1
 80041ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f2:	f000 f865 	bl	80042c0 <_lseek_r>
 80041f6:	1c43      	adds	r3, r0, #1
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	bf15      	itete	ne
 80041fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004202:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004206:	81a3      	strheq	r3, [r4, #12]
 8004208:	bf18      	it	ne
 800420a:	81a3      	strhne	r3, [r4, #12]
 800420c:	bd10      	pop	{r4, pc}

0800420e <__sclose>:
 800420e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004212:	f000 b845 	b.w	80042a0 <_close_r>

08004216 <_vsniprintf_r>:
 8004216:	b530      	push	{r4, r5, lr}
 8004218:	4614      	mov	r4, r2
 800421a:	2c00      	cmp	r4, #0
 800421c:	4605      	mov	r5, r0
 800421e:	461a      	mov	r2, r3
 8004220:	b09b      	sub	sp, #108	@ 0x6c
 8004222:	da05      	bge.n	8004230 <_vsniprintf_r+0x1a>
 8004224:	238b      	movs	r3, #139	@ 0x8b
 8004226:	6003      	str	r3, [r0, #0]
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	b01b      	add	sp, #108	@ 0x6c
 800422e:	bd30      	pop	{r4, r5, pc}
 8004230:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004234:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004238:	bf0c      	ite	eq
 800423a:	4623      	moveq	r3, r4
 800423c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004240:	9302      	str	r3, [sp, #8]
 8004242:	9305      	str	r3, [sp, #20]
 8004244:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004248:	9100      	str	r1, [sp, #0]
 800424a:	9104      	str	r1, [sp, #16]
 800424c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004250:	4669      	mov	r1, sp
 8004252:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004254:	f001 fbd2 	bl	80059fc <_svfiprintf_r>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	bfbc      	itt	lt
 800425c:	238b      	movlt	r3, #139	@ 0x8b
 800425e:	602b      	strlt	r3, [r5, #0]
 8004260:	2c00      	cmp	r4, #0
 8004262:	d0e3      	beq.n	800422c <_vsniprintf_r+0x16>
 8004264:	2200      	movs	r2, #0
 8004266:	9b00      	ldr	r3, [sp, #0]
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e7df      	b.n	800422c <_vsniprintf_r+0x16>

0800426c <vsniprintf>:
 800426c:	b507      	push	{r0, r1, r2, lr}
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	460a      	mov	r2, r1
 8004274:	4601      	mov	r1, r0
 8004276:	4803      	ldr	r0, [pc, #12]	@ (8004284 <vsniprintf+0x18>)
 8004278:	6800      	ldr	r0, [r0, #0]
 800427a:	f7ff ffcc 	bl	8004216 <_vsniprintf_r>
 800427e:	b003      	add	sp, #12
 8004280:	f85d fb04 	ldr.w	pc, [sp], #4
 8004284:	20000018 	.word	0x20000018

08004288 <memset>:
 8004288:	4603      	mov	r3, r0
 800428a:	4402      	add	r2, r0
 800428c:	4293      	cmp	r3, r2
 800428e:	d100      	bne.n	8004292 <memset+0xa>
 8004290:	4770      	bx	lr
 8004292:	f803 1b01 	strb.w	r1, [r3], #1
 8004296:	e7f9      	b.n	800428c <memset+0x4>

08004298 <_localeconv_r>:
 8004298:	4800      	ldr	r0, [pc, #0]	@ (800429c <_localeconv_r+0x4>)
 800429a:	4770      	bx	lr
 800429c:	20000158 	.word	0x20000158

080042a0 <_close_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	2300      	movs	r3, #0
 80042a4:	4d05      	ldr	r5, [pc, #20]	@ (80042bc <_close_r+0x1c>)
 80042a6:	4604      	mov	r4, r0
 80042a8:	4608      	mov	r0, r1
 80042aa:	602b      	str	r3, [r5, #0]
 80042ac:	f7fc ff37 	bl	800111e <_close>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d102      	bne.n	80042ba <_close_r+0x1a>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	b103      	cbz	r3, 80042ba <_close_r+0x1a>
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	20000444 	.word	0x20000444

080042c0 <_lseek_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4604      	mov	r4, r0
 80042c4:	4608      	mov	r0, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	2200      	movs	r2, #0
 80042ca:	4d05      	ldr	r5, [pc, #20]	@ (80042e0 <_lseek_r+0x20>)
 80042cc:	602a      	str	r2, [r5, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f7fc ff49 	bl	8001166 <_lseek>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d102      	bne.n	80042de <_lseek_r+0x1e>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b103      	cbz	r3, 80042de <_lseek_r+0x1e>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	20000444 	.word	0x20000444

080042e4 <_read_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	4604      	mov	r4, r0
 80042e8:	4608      	mov	r0, r1
 80042ea:	4611      	mov	r1, r2
 80042ec:	2200      	movs	r2, #0
 80042ee:	4d05      	ldr	r5, [pc, #20]	@ (8004304 <_read_r+0x20>)
 80042f0:	602a      	str	r2, [r5, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f7fc feda 	bl	80010ac <_read>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	d102      	bne.n	8004302 <_read_r+0x1e>
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	b103      	cbz	r3, 8004302 <_read_r+0x1e>
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	bd38      	pop	{r3, r4, r5, pc}
 8004304:	20000444 	.word	0x20000444

08004308 <_write_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	4604      	mov	r4, r0
 800430c:	4608      	mov	r0, r1
 800430e:	4611      	mov	r1, r2
 8004310:	2200      	movs	r2, #0
 8004312:	4d05      	ldr	r5, [pc, #20]	@ (8004328 <_write_r+0x20>)
 8004314:	602a      	str	r2, [r5, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	f7fc fee5 	bl	80010e6 <_write>
 800431c:	1c43      	adds	r3, r0, #1
 800431e:	d102      	bne.n	8004326 <_write_r+0x1e>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	b103      	cbz	r3, 8004326 <_write_r+0x1e>
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	bd38      	pop	{r3, r4, r5, pc}
 8004328:	20000444 	.word	0x20000444

0800432c <__errno>:
 800432c:	4b01      	ldr	r3, [pc, #4]	@ (8004334 <__errno+0x8>)
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000018 	.word	0x20000018

08004338 <__libc_init_array>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	2600      	movs	r6, #0
 800433c:	4d0c      	ldr	r5, [pc, #48]	@ (8004370 <__libc_init_array+0x38>)
 800433e:	4c0d      	ldr	r4, [pc, #52]	@ (8004374 <__libc_init_array+0x3c>)
 8004340:	1b64      	subs	r4, r4, r5
 8004342:	10a4      	asrs	r4, r4, #2
 8004344:	42a6      	cmp	r6, r4
 8004346:	d109      	bne.n	800435c <__libc_init_array+0x24>
 8004348:	f002 f870 	bl	800642c <_init>
 800434c:	2600      	movs	r6, #0
 800434e:	4d0a      	ldr	r5, [pc, #40]	@ (8004378 <__libc_init_array+0x40>)
 8004350:	4c0a      	ldr	r4, [pc, #40]	@ (800437c <__libc_init_array+0x44>)
 8004352:	1b64      	subs	r4, r4, r5
 8004354:	10a4      	asrs	r4, r4, #2
 8004356:	42a6      	cmp	r6, r4
 8004358:	d105      	bne.n	8004366 <__libc_init_array+0x2e>
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004360:	4798      	blx	r3
 8004362:	3601      	adds	r6, #1
 8004364:	e7ee      	b.n	8004344 <__libc_init_array+0xc>
 8004366:	f855 3b04 	ldr.w	r3, [r5], #4
 800436a:	4798      	blx	r3
 800436c:	3601      	adds	r6, #1
 800436e:	e7f2      	b.n	8004356 <__libc_init_array+0x1e>
 8004370:	08006808 	.word	0x08006808
 8004374:	08006808 	.word	0x08006808
 8004378:	08006808 	.word	0x08006808
 800437c:	0800680c 	.word	0x0800680c

08004380 <__retarget_lock_init_recursive>:
 8004380:	4770      	bx	lr

08004382 <__retarget_lock_acquire_recursive>:
 8004382:	4770      	bx	lr

08004384 <__retarget_lock_release_recursive>:
 8004384:	4770      	bx	lr

08004386 <memchr>:
 8004386:	4603      	mov	r3, r0
 8004388:	b510      	push	{r4, lr}
 800438a:	b2c9      	uxtb	r1, r1
 800438c:	4402      	add	r2, r0
 800438e:	4293      	cmp	r3, r2
 8004390:	4618      	mov	r0, r3
 8004392:	d101      	bne.n	8004398 <memchr+0x12>
 8004394:	2000      	movs	r0, #0
 8004396:	e003      	b.n	80043a0 <memchr+0x1a>
 8004398:	7804      	ldrb	r4, [r0, #0]
 800439a:	3301      	adds	r3, #1
 800439c:	428c      	cmp	r4, r1
 800439e:	d1f6      	bne.n	800438e <memchr+0x8>
 80043a0:	bd10      	pop	{r4, pc}

080043a2 <quorem>:
 80043a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a6:	6903      	ldr	r3, [r0, #16]
 80043a8:	690c      	ldr	r4, [r1, #16]
 80043aa:	4607      	mov	r7, r0
 80043ac:	42a3      	cmp	r3, r4
 80043ae:	db7e      	blt.n	80044ae <quorem+0x10c>
 80043b0:	3c01      	subs	r4, #1
 80043b2:	00a3      	lsls	r3, r4, #2
 80043b4:	f100 0514 	add.w	r5, r0, #20
 80043b8:	f101 0814 	add.w	r8, r1, #20
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043cc:	3301      	adds	r3, #1
 80043ce:	429a      	cmp	r2, r3
 80043d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80043d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043d8:	d32e      	bcc.n	8004438 <quorem+0x96>
 80043da:	f04f 0a00 	mov.w	sl, #0
 80043de:	46c4      	mov	ip, r8
 80043e0:	46ae      	mov	lr, r5
 80043e2:	46d3      	mov	fp, sl
 80043e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80043e8:	b298      	uxth	r0, r3
 80043ea:	fb06 a000 	mla	r0, r6, r0, sl
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	0c02      	lsrs	r2, r0, #16
 80043f2:	fb06 2303 	mla	r3, r6, r3, r2
 80043f6:	f8de 2000 	ldr.w	r2, [lr]
 80043fa:	b280      	uxth	r0, r0
 80043fc:	b292      	uxth	r2, r2
 80043fe:	1a12      	subs	r2, r2, r0
 8004400:	445a      	add	r2, fp
 8004402:	f8de 0000 	ldr.w	r0, [lr]
 8004406:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800440a:	b29b      	uxth	r3, r3
 800440c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004410:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004414:	b292      	uxth	r2, r2
 8004416:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800441a:	45e1      	cmp	r9, ip
 800441c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004420:	f84e 2b04 	str.w	r2, [lr], #4
 8004424:	d2de      	bcs.n	80043e4 <quorem+0x42>
 8004426:	9b00      	ldr	r3, [sp, #0]
 8004428:	58eb      	ldr	r3, [r5, r3]
 800442a:	b92b      	cbnz	r3, 8004438 <quorem+0x96>
 800442c:	9b01      	ldr	r3, [sp, #4]
 800442e:	3b04      	subs	r3, #4
 8004430:	429d      	cmp	r5, r3
 8004432:	461a      	mov	r2, r3
 8004434:	d32f      	bcc.n	8004496 <quorem+0xf4>
 8004436:	613c      	str	r4, [r7, #16]
 8004438:	4638      	mov	r0, r7
 800443a:	f001 f97b 	bl	8005734 <__mcmp>
 800443e:	2800      	cmp	r0, #0
 8004440:	db25      	blt.n	800448e <quorem+0xec>
 8004442:	4629      	mov	r1, r5
 8004444:	2000      	movs	r0, #0
 8004446:	f858 2b04 	ldr.w	r2, [r8], #4
 800444a:	f8d1 c000 	ldr.w	ip, [r1]
 800444e:	fa1f fe82 	uxth.w	lr, r2
 8004452:	fa1f f38c 	uxth.w	r3, ip
 8004456:	eba3 030e 	sub.w	r3, r3, lr
 800445a:	4403      	add	r3, r0
 800445c:	0c12      	lsrs	r2, r2, #16
 800445e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004462:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004466:	b29b      	uxth	r3, r3
 8004468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800446c:	45c1      	cmp	r9, r8
 800446e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004472:	f841 3b04 	str.w	r3, [r1], #4
 8004476:	d2e6      	bcs.n	8004446 <quorem+0xa4>
 8004478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800447c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004480:	b922      	cbnz	r2, 800448c <quorem+0xea>
 8004482:	3b04      	subs	r3, #4
 8004484:	429d      	cmp	r5, r3
 8004486:	461a      	mov	r2, r3
 8004488:	d30b      	bcc.n	80044a2 <quorem+0x100>
 800448a:	613c      	str	r4, [r7, #16]
 800448c:	3601      	adds	r6, #1
 800448e:	4630      	mov	r0, r6
 8004490:	b003      	add	sp, #12
 8004492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	3b04      	subs	r3, #4
 800449a:	2a00      	cmp	r2, #0
 800449c:	d1cb      	bne.n	8004436 <quorem+0x94>
 800449e:	3c01      	subs	r4, #1
 80044a0:	e7c6      	b.n	8004430 <quorem+0x8e>
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	3b04      	subs	r3, #4
 80044a6:	2a00      	cmp	r2, #0
 80044a8:	d1ef      	bne.n	800448a <quorem+0xe8>
 80044aa:	3c01      	subs	r4, #1
 80044ac:	e7ea      	b.n	8004484 <quorem+0xe2>
 80044ae:	2000      	movs	r0, #0
 80044b0:	e7ee      	b.n	8004490 <quorem+0xee>
 80044b2:	0000      	movs	r0, r0
 80044b4:	0000      	movs	r0, r0
	...

080044b8 <_dtoa_r>:
 80044b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044bc:	4614      	mov	r4, r2
 80044be:	461d      	mov	r5, r3
 80044c0:	69c7      	ldr	r7, [r0, #28]
 80044c2:	b097      	sub	sp, #92	@ 0x5c
 80044c4:	4683      	mov	fp, r0
 80044c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80044ca:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80044cc:	b97f      	cbnz	r7, 80044ee <_dtoa_r+0x36>
 80044ce:	2010      	movs	r0, #16
 80044d0:	f000 fe02 	bl	80050d8 <malloc>
 80044d4:	4602      	mov	r2, r0
 80044d6:	f8cb 001c 	str.w	r0, [fp, #28]
 80044da:	b920      	cbnz	r0, 80044e6 <_dtoa_r+0x2e>
 80044dc:	21ef      	movs	r1, #239	@ 0xef
 80044de:	4ba8      	ldr	r3, [pc, #672]	@ (8004780 <_dtoa_r+0x2c8>)
 80044e0:	48a8      	ldr	r0, [pc, #672]	@ (8004784 <_dtoa_r+0x2cc>)
 80044e2:	f001 fc67 	bl	8005db4 <__assert_func>
 80044e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80044ea:	6007      	str	r7, [r0, #0]
 80044ec:	60c7      	str	r7, [r0, #12]
 80044ee:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	b159      	cbz	r1, 800450e <_dtoa_r+0x56>
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	2301      	movs	r3, #1
 80044fa:	4093      	lsls	r3, r2
 80044fc:	604a      	str	r2, [r1, #4]
 80044fe:	608b      	str	r3, [r1, #8]
 8004500:	4658      	mov	r0, fp
 8004502:	f000 fedf 	bl	80052c4 <_Bfree>
 8004506:	2200      	movs	r2, #0
 8004508:	f8db 301c 	ldr.w	r3, [fp, #28]
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	1e2b      	subs	r3, r5, #0
 8004510:	bfaf      	iteee	ge
 8004512:	2300      	movge	r3, #0
 8004514:	2201      	movlt	r2, #1
 8004516:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800451a:	9303      	strlt	r3, [sp, #12]
 800451c:	bfa8      	it	ge
 800451e:	6033      	strge	r3, [r6, #0]
 8004520:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004524:	4b98      	ldr	r3, [pc, #608]	@ (8004788 <_dtoa_r+0x2d0>)
 8004526:	bfb8      	it	lt
 8004528:	6032      	strlt	r2, [r6, #0]
 800452a:	ea33 0308 	bics.w	r3, r3, r8
 800452e:	d112      	bne.n	8004556 <_dtoa_r+0x9e>
 8004530:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004534:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800453c:	4323      	orrs	r3, r4
 800453e:	f000 8550 	beq.w	8004fe2 <_dtoa_r+0xb2a>
 8004542:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004544:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800478c <_dtoa_r+0x2d4>
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8552 	beq.w	8004ff2 <_dtoa_r+0xb3a>
 800454e:	f10a 0303 	add.w	r3, sl, #3
 8004552:	f000 bd4c 	b.w	8004fee <_dtoa_r+0xb36>
 8004556:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800455a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800455e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004562:	2200      	movs	r2, #0
 8004564:	2300      	movs	r3, #0
 8004566:	f7fc fa1f 	bl	80009a8 <__aeabi_dcmpeq>
 800456a:	4607      	mov	r7, r0
 800456c:	b158      	cbz	r0, 8004586 <_dtoa_r+0xce>
 800456e:	2301      	movs	r3, #1
 8004570:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004576:	b113      	cbz	r3, 800457e <_dtoa_r+0xc6>
 8004578:	4b85      	ldr	r3, [pc, #532]	@ (8004790 <_dtoa_r+0x2d8>)
 800457a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004794 <_dtoa_r+0x2dc>
 8004582:	f000 bd36 	b.w	8004ff2 <_dtoa_r+0xb3a>
 8004586:	ab14      	add	r3, sp, #80	@ 0x50
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	ab15      	add	r3, sp, #84	@ 0x54
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	4658      	mov	r0, fp
 8004590:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004594:	f001 f97e 	bl	8005894 <__d2b>
 8004598:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800459c:	4681      	mov	r9, r0
 800459e:	2e00      	cmp	r6, #0
 80045a0:	d077      	beq.n	8004692 <_dtoa_r+0x1da>
 80045a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045a8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80045ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80045b4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80045b8:	9712      	str	r7, [sp, #72]	@ 0x48
 80045ba:	4619      	mov	r1, r3
 80045bc:	2200      	movs	r2, #0
 80045be:	4b76      	ldr	r3, [pc, #472]	@ (8004798 <_dtoa_r+0x2e0>)
 80045c0:	f7fb fdd2 	bl	8000168 <__aeabi_dsub>
 80045c4:	a368      	add	r3, pc, #416	@ (adr r3, 8004768 <_dtoa_r+0x2b0>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f7fb ff85 	bl	80004d8 <__aeabi_dmul>
 80045ce:	a368      	add	r3, pc, #416	@ (adr r3, 8004770 <_dtoa_r+0x2b8>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f7fb fdca 	bl	800016c <__adddf3>
 80045d8:	4604      	mov	r4, r0
 80045da:	4630      	mov	r0, r6
 80045dc:	460d      	mov	r5, r1
 80045de:	f7fb ff11 	bl	8000404 <__aeabi_i2d>
 80045e2:	a365      	add	r3, pc, #404	@ (adr r3, 8004778 <_dtoa_r+0x2c0>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f7fb ff76 	bl	80004d8 <__aeabi_dmul>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4620      	mov	r0, r4
 80045f2:	4629      	mov	r1, r5
 80045f4:	f7fb fdba 	bl	800016c <__adddf3>
 80045f8:	4604      	mov	r4, r0
 80045fa:	460d      	mov	r5, r1
 80045fc:	f7fc fa1c 	bl	8000a38 <__aeabi_d2iz>
 8004600:	2200      	movs	r2, #0
 8004602:	4607      	mov	r7, r0
 8004604:	2300      	movs	r3, #0
 8004606:	4620      	mov	r0, r4
 8004608:	4629      	mov	r1, r5
 800460a:	f7fc f9d7 	bl	80009bc <__aeabi_dcmplt>
 800460e:	b140      	cbz	r0, 8004622 <_dtoa_r+0x16a>
 8004610:	4638      	mov	r0, r7
 8004612:	f7fb fef7 	bl	8000404 <__aeabi_i2d>
 8004616:	4622      	mov	r2, r4
 8004618:	462b      	mov	r3, r5
 800461a:	f7fc f9c5 	bl	80009a8 <__aeabi_dcmpeq>
 800461e:	b900      	cbnz	r0, 8004622 <_dtoa_r+0x16a>
 8004620:	3f01      	subs	r7, #1
 8004622:	2f16      	cmp	r7, #22
 8004624:	d853      	bhi.n	80046ce <_dtoa_r+0x216>
 8004626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800462a:	4b5c      	ldr	r3, [pc, #368]	@ (800479c <_dtoa_r+0x2e4>)
 800462c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f7fc f9c2 	bl	80009bc <__aeabi_dcmplt>
 8004638:	2800      	cmp	r0, #0
 800463a:	d04a      	beq.n	80046d2 <_dtoa_r+0x21a>
 800463c:	2300      	movs	r3, #0
 800463e:	3f01      	subs	r7, #1
 8004640:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004642:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004644:	1b9b      	subs	r3, r3, r6
 8004646:	1e5a      	subs	r2, r3, #1
 8004648:	bf46      	itte	mi
 800464a:	f1c3 0801 	rsbmi	r8, r3, #1
 800464e:	2300      	movmi	r3, #0
 8004650:	f04f 0800 	movpl.w	r8, #0
 8004654:	9209      	str	r2, [sp, #36]	@ 0x24
 8004656:	bf48      	it	mi
 8004658:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800465a:	2f00      	cmp	r7, #0
 800465c:	db3b      	blt.n	80046d6 <_dtoa_r+0x21e>
 800465e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004660:	970e      	str	r7, [sp, #56]	@ 0x38
 8004662:	443b      	add	r3, r7
 8004664:	9309      	str	r3, [sp, #36]	@ 0x24
 8004666:	2300      	movs	r3, #0
 8004668:	930a      	str	r3, [sp, #40]	@ 0x28
 800466a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800466c:	2b09      	cmp	r3, #9
 800466e:	d866      	bhi.n	800473e <_dtoa_r+0x286>
 8004670:	2b05      	cmp	r3, #5
 8004672:	bfc4      	itt	gt
 8004674:	3b04      	subgt	r3, #4
 8004676:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004678:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800467a:	bfc8      	it	gt
 800467c:	2400      	movgt	r4, #0
 800467e:	f1a3 0302 	sub.w	r3, r3, #2
 8004682:	bfd8      	it	le
 8004684:	2401      	movle	r4, #1
 8004686:	2b03      	cmp	r3, #3
 8004688:	d864      	bhi.n	8004754 <_dtoa_r+0x29c>
 800468a:	e8df f003 	tbb	[pc, r3]
 800468e:	382b      	.short	0x382b
 8004690:	5636      	.short	0x5636
 8004692:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004696:	441e      	add	r6, r3
 8004698:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800469c:	2b20      	cmp	r3, #32
 800469e:	bfc1      	itttt	gt
 80046a0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80046a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80046a8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80046ac:	fa24 f303 	lsrgt.w	r3, r4, r3
 80046b0:	bfd6      	itet	le
 80046b2:	f1c3 0320 	rsble	r3, r3, #32
 80046b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80046ba:	fa04 f003 	lslle.w	r0, r4, r3
 80046be:	f7fb fe91 	bl	80003e4 <__aeabi_ui2d>
 80046c2:	2201      	movs	r2, #1
 80046c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80046c8:	3e01      	subs	r6, #1
 80046ca:	9212      	str	r2, [sp, #72]	@ 0x48
 80046cc:	e775      	b.n	80045ba <_dtoa_r+0x102>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e7b6      	b.n	8004640 <_dtoa_r+0x188>
 80046d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80046d4:	e7b5      	b.n	8004642 <_dtoa_r+0x18a>
 80046d6:	427b      	negs	r3, r7
 80046d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80046da:	2300      	movs	r3, #0
 80046dc:	eba8 0807 	sub.w	r8, r8, r7
 80046e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80046e2:	e7c2      	b.n	800466a <_dtoa_r+0x1b2>
 80046e4:	2300      	movs	r3, #0
 80046e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	dc35      	bgt.n	800475a <_dtoa_r+0x2a2>
 80046ee:	2301      	movs	r3, #1
 80046f0:	461a      	mov	r2, r3
 80046f2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80046f6:	9221      	str	r2, [sp, #132]	@ 0x84
 80046f8:	e00b      	b.n	8004712 <_dtoa_r+0x25a>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e7f3      	b.n	80046e6 <_dtoa_r+0x22e>
 80046fe:	2300      	movs	r3, #0
 8004700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004702:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	9308      	str	r3, [sp, #32]
 8004708:	3301      	adds	r3, #1
 800470a:	2b01      	cmp	r3, #1
 800470c:	9307      	str	r3, [sp, #28]
 800470e:	bfb8      	it	lt
 8004710:	2301      	movlt	r3, #1
 8004712:	2100      	movs	r1, #0
 8004714:	2204      	movs	r2, #4
 8004716:	f8db 001c 	ldr.w	r0, [fp, #28]
 800471a:	f102 0514 	add.w	r5, r2, #20
 800471e:	429d      	cmp	r5, r3
 8004720:	d91f      	bls.n	8004762 <_dtoa_r+0x2aa>
 8004722:	6041      	str	r1, [r0, #4]
 8004724:	4658      	mov	r0, fp
 8004726:	f000 fd8d 	bl	8005244 <_Balloc>
 800472a:	4682      	mov	sl, r0
 800472c:	2800      	cmp	r0, #0
 800472e:	d139      	bne.n	80047a4 <_dtoa_r+0x2ec>
 8004730:	4602      	mov	r2, r0
 8004732:	f240 11af 	movw	r1, #431	@ 0x1af
 8004736:	4b1a      	ldr	r3, [pc, #104]	@ (80047a0 <_dtoa_r+0x2e8>)
 8004738:	e6d2      	b.n	80044e0 <_dtoa_r+0x28>
 800473a:	2301      	movs	r3, #1
 800473c:	e7e0      	b.n	8004700 <_dtoa_r+0x248>
 800473e:	2401      	movs	r4, #1
 8004740:	2300      	movs	r3, #0
 8004742:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004744:	9320      	str	r3, [sp, #128]	@ 0x80
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
 800474a:	2200      	movs	r2, #0
 800474c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004750:	2312      	movs	r3, #18
 8004752:	e7d0      	b.n	80046f6 <_dtoa_r+0x23e>
 8004754:	2301      	movs	r3, #1
 8004756:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004758:	e7f5      	b.n	8004746 <_dtoa_r+0x28e>
 800475a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800475c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004760:	e7d7      	b.n	8004712 <_dtoa_r+0x25a>
 8004762:	3101      	adds	r1, #1
 8004764:	0052      	lsls	r2, r2, #1
 8004766:	e7d8      	b.n	800471a <_dtoa_r+0x262>
 8004768:	636f4361 	.word	0x636f4361
 800476c:	3fd287a7 	.word	0x3fd287a7
 8004770:	8b60c8b3 	.word	0x8b60c8b3
 8004774:	3fc68a28 	.word	0x3fc68a28
 8004778:	509f79fb 	.word	0x509f79fb
 800477c:	3fd34413 	.word	0x3fd34413
 8004780:	080064d3 	.word	0x080064d3
 8004784:	080064ea 	.word	0x080064ea
 8004788:	7ff00000 	.word	0x7ff00000
 800478c:	080064cf 	.word	0x080064cf
 8004790:	080064a3 	.word	0x080064a3
 8004794:	080064a2 	.word	0x080064a2
 8004798:	3ff80000 	.word	0x3ff80000
 800479c:	080065e0 	.word	0x080065e0
 80047a0:	08006542 	.word	0x08006542
 80047a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80047a8:	6018      	str	r0, [r3, #0]
 80047aa:	9b07      	ldr	r3, [sp, #28]
 80047ac:	2b0e      	cmp	r3, #14
 80047ae:	f200 80a4 	bhi.w	80048fa <_dtoa_r+0x442>
 80047b2:	2c00      	cmp	r4, #0
 80047b4:	f000 80a1 	beq.w	80048fa <_dtoa_r+0x442>
 80047b8:	2f00      	cmp	r7, #0
 80047ba:	dd33      	ble.n	8004824 <_dtoa_r+0x36c>
 80047bc:	4b86      	ldr	r3, [pc, #536]	@ (80049d8 <_dtoa_r+0x520>)
 80047be:	f007 020f 	and.w	r2, r7, #15
 80047c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047c6:	05f8      	lsls	r0, r7, #23
 80047c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80047d4:	d516      	bpl.n	8004804 <_dtoa_r+0x34c>
 80047d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047da:	4b80      	ldr	r3, [pc, #512]	@ (80049dc <_dtoa_r+0x524>)
 80047dc:	2603      	movs	r6, #3
 80047de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047e2:	f7fb ffa3 	bl	800072c <__aeabi_ddiv>
 80047e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047ea:	f004 040f 	and.w	r4, r4, #15
 80047ee:	4d7b      	ldr	r5, [pc, #492]	@ (80049dc <_dtoa_r+0x524>)
 80047f0:	b954      	cbnz	r4, 8004808 <_dtoa_r+0x350>
 80047f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047fa:	f7fb ff97 	bl	800072c <__aeabi_ddiv>
 80047fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004802:	e028      	b.n	8004856 <_dtoa_r+0x39e>
 8004804:	2602      	movs	r6, #2
 8004806:	e7f2      	b.n	80047ee <_dtoa_r+0x336>
 8004808:	07e1      	lsls	r1, r4, #31
 800480a:	d508      	bpl.n	800481e <_dtoa_r+0x366>
 800480c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004810:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004814:	f7fb fe60 	bl	80004d8 <__aeabi_dmul>
 8004818:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800481c:	3601      	adds	r6, #1
 800481e:	1064      	asrs	r4, r4, #1
 8004820:	3508      	adds	r5, #8
 8004822:	e7e5      	b.n	80047f0 <_dtoa_r+0x338>
 8004824:	f000 80d2 	beq.w	80049cc <_dtoa_r+0x514>
 8004828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800482c:	427c      	negs	r4, r7
 800482e:	4b6a      	ldr	r3, [pc, #424]	@ (80049d8 <_dtoa_r+0x520>)
 8004830:	f004 020f 	and.w	r2, r4, #15
 8004834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	f7fb fe4c 	bl	80004d8 <__aeabi_dmul>
 8004840:	2602      	movs	r6, #2
 8004842:	2300      	movs	r3, #0
 8004844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004848:	4d64      	ldr	r5, [pc, #400]	@ (80049dc <_dtoa_r+0x524>)
 800484a:	1124      	asrs	r4, r4, #4
 800484c:	2c00      	cmp	r4, #0
 800484e:	f040 80b2 	bne.w	80049b6 <_dtoa_r+0x4fe>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1d3      	bne.n	80047fe <_dtoa_r+0x346>
 8004856:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800485a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80b7 	beq.w	80049d0 <_dtoa_r+0x518>
 8004862:	2200      	movs	r2, #0
 8004864:	4620      	mov	r0, r4
 8004866:	4629      	mov	r1, r5
 8004868:	4b5d      	ldr	r3, [pc, #372]	@ (80049e0 <_dtoa_r+0x528>)
 800486a:	f7fc f8a7 	bl	80009bc <__aeabi_dcmplt>
 800486e:	2800      	cmp	r0, #0
 8004870:	f000 80ae 	beq.w	80049d0 <_dtoa_r+0x518>
 8004874:	9b07      	ldr	r3, [sp, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80aa 	beq.w	80049d0 <_dtoa_r+0x518>
 800487c:	9b08      	ldr	r3, [sp, #32]
 800487e:	2b00      	cmp	r3, #0
 8004880:	dd37      	ble.n	80048f2 <_dtoa_r+0x43a>
 8004882:	1e7b      	subs	r3, r7, #1
 8004884:	4620      	mov	r0, r4
 8004886:	9304      	str	r3, [sp, #16]
 8004888:	2200      	movs	r2, #0
 800488a:	4629      	mov	r1, r5
 800488c:	4b55      	ldr	r3, [pc, #340]	@ (80049e4 <_dtoa_r+0x52c>)
 800488e:	f7fb fe23 	bl	80004d8 <__aeabi_dmul>
 8004892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004896:	9c08      	ldr	r4, [sp, #32]
 8004898:	3601      	adds	r6, #1
 800489a:	4630      	mov	r0, r6
 800489c:	f7fb fdb2 	bl	8000404 <__aeabi_i2d>
 80048a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048a4:	f7fb fe18 	bl	80004d8 <__aeabi_dmul>
 80048a8:	2200      	movs	r2, #0
 80048aa:	4b4f      	ldr	r3, [pc, #316]	@ (80049e8 <_dtoa_r+0x530>)
 80048ac:	f7fb fc5e 	bl	800016c <__adddf3>
 80048b0:	4605      	mov	r5, r0
 80048b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80048b6:	2c00      	cmp	r4, #0
 80048b8:	f040 809a 	bne.w	80049f0 <_dtoa_r+0x538>
 80048bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048c0:	2200      	movs	r2, #0
 80048c2:	4b4a      	ldr	r3, [pc, #296]	@ (80049ec <_dtoa_r+0x534>)
 80048c4:	f7fb fc50 	bl	8000168 <__aeabi_dsub>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048d0:	462a      	mov	r2, r5
 80048d2:	4633      	mov	r3, r6
 80048d4:	f7fc f890 	bl	80009f8 <__aeabi_dcmpgt>
 80048d8:	2800      	cmp	r0, #0
 80048da:	f040 828e 	bne.w	8004dfa <_dtoa_r+0x942>
 80048de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048e2:	462a      	mov	r2, r5
 80048e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80048e8:	f7fc f868 	bl	80009bc <__aeabi_dcmplt>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	f040 8127 	bne.w	8004b40 <_dtoa_r+0x688>
 80048f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80048f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80048fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f2c0 8163 	blt.w	8004bc8 <_dtoa_r+0x710>
 8004902:	2f0e      	cmp	r7, #14
 8004904:	f300 8160 	bgt.w	8004bc8 <_dtoa_r+0x710>
 8004908:	4b33      	ldr	r3, [pc, #204]	@ (80049d8 <_dtoa_r+0x520>)
 800490a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800490e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004912:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004916:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004918:	2b00      	cmp	r3, #0
 800491a:	da03      	bge.n	8004924 <_dtoa_r+0x46c>
 800491c:	9b07      	ldr	r3, [sp, #28]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f340 8100 	ble.w	8004b24 <_dtoa_r+0x66c>
 8004924:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004928:	4656      	mov	r6, sl
 800492a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800492e:	4620      	mov	r0, r4
 8004930:	4629      	mov	r1, r5
 8004932:	f7fb fefb 	bl	800072c <__aeabi_ddiv>
 8004936:	f7fc f87f 	bl	8000a38 <__aeabi_d2iz>
 800493a:	4680      	mov	r8, r0
 800493c:	f7fb fd62 	bl	8000404 <__aeabi_i2d>
 8004940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004944:	f7fb fdc8 	bl	80004d8 <__aeabi_dmul>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4620      	mov	r0, r4
 800494e:	4629      	mov	r1, r5
 8004950:	f7fb fc0a 	bl	8000168 <__aeabi_dsub>
 8004954:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004958:	9d07      	ldr	r5, [sp, #28]
 800495a:	f806 4b01 	strb.w	r4, [r6], #1
 800495e:	eba6 040a 	sub.w	r4, r6, sl
 8004962:	42a5      	cmp	r5, r4
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	f040 8116 	bne.w	8004b98 <_dtoa_r+0x6e0>
 800496c:	f7fb fbfe 	bl	800016c <__adddf3>
 8004970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004974:	4604      	mov	r4, r0
 8004976:	460d      	mov	r5, r1
 8004978:	f7fc f83e 	bl	80009f8 <__aeabi_dcmpgt>
 800497c:	2800      	cmp	r0, #0
 800497e:	f040 80f8 	bne.w	8004b72 <_dtoa_r+0x6ba>
 8004982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004986:	4620      	mov	r0, r4
 8004988:	4629      	mov	r1, r5
 800498a:	f7fc f80d 	bl	80009a8 <__aeabi_dcmpeq>
 800498e:	b118      	cbz	r0, 8004998 <_dtoa_r+0x4e0>
 8004990:	f018 0f01 	tst.w	r8, #1
 8004994:	f040 80ed 	bne.w	8004b72 <_dtoa_r+0x6ba>
 8004998:	4649      	mov	r1, r9
 800499a:	4658      	mov	r0, fp
 800499c:	f000 fc92 	bl	80052c4 <_Bfree>
 80049a0:	2300      	movs	r3, #0
 80049a2:	7033      	strb	r3, [r6, #0]
 80049a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80049a6:	3701      	adds	r7, #1
 80049a8:	601f      	str	r7, [r3, #0]
 80049aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8320 	beq.w	8004ff2 <_dtoa_r+0xb3a>
 80049b2:	601e      	str	r6, [r3, #0]
 80049b4:	e31d      	b.n	8004ff2 <_dtoa_r+0xb3a>
 80049b6:	07e2      	lsls	r2, r4, #31
 80049b8:	d505      	bpl.n	80049c6 <_dtoa_r+0x50e>
 80049ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049be:	f7fb fd8b 	bl	80004d8 <__aeabi_dmul>
 80049c2:	2301      	movs	r3, #1
 80049c4:	3601      	adds	r6, #1
 80049c6:	1064      	asrs	r4, r4, #1
 80049c8:	3508      	adds	r5, #8
 80049ca:	e73f      	b.n	800484c <_dtoa_r+0x394>
 80049cc:	2602      	movs	r6, #2
 80049ce:	e742      	b.n	8004856 <_dtoa_r+0x39e>
 80049d0:	9c07      	ldr	r4, [sp, #28]
 80049d2:	9704      	str	r7, [sp, #16]
 80049d4:	e761      	b.n	800489a <_dtoa_r+0x3e2>
 80049d6:	bf00      	nop
 80049d8:	080065e0 	.word	0x080065e0
 80049dc:	080065b8 	.word	0x080065b8
 80049e0:	3ff00000 	.word	0x3ff00000
 80049e4:	40240000 	.word	0x40240000
 80049e8:	401c0000 	.word	0x401c0000
 80049ec:	40140000 	.word	0x40140000
 80049f0:	4b70      	ldr	r3, [pc, #448]	@ (8004bb4 <_dtoa_r+0x6fc>)
 80049f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80049f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049fc:	4454      	add	r4, sl
 80049fe:	2900      	cmp	r1, #0
 8004a00:	d045      	beq.n	8004a8e <_dtoa_r+0x5d6>
 8004a02:	2000      	movs	r0, #0
 8004a04:	496c      	ldr	r1, [pc, #432]	@ (8004bb8 <_dtoa_r+0x700>)
 8004a06:	f7fb fe91 	bl	800072c <__aeabi_ddiv>
 8004a0a:	4633      	mov	r3, r6
 8004a0c:	462a      	mov	r2, r5
 8004a0e:	f7fb fbab 	bl	8000168 <__aeabi_dsub>
 8004a12:	4656      	mov	r6, sl
 8004a14:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a1c:	f7fc f80c 	bl	8000a38 <__aeabi_d2iz>
 8004a20:	4605      	mov	r5, r0
 8004a22:	f7fb fcef 	bl	8000404 <__aeabi_i2d>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a2e:	f7fb fb9b 	bl	8000168 <__aeabi_dsub>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	3530      	adds	r5, #48	@ 0x30
 8004a38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a40:	f806 5b01 	strb.w	r5, [r6], #1
 8004a44:	f7fb ffba 	bl	80009bc <__aeabi_dcmplt>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d163      	bne.n	8004b14 <_dtoa_r+0x65c>
 8004a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a50:	2000      	movs	r0, #0
 8004a52:	495a      	ldr	r1, [pc, #360]	@ (8004bbc <_dtoa_r+0x704>)
 8004a54:	f7fb fb88 	bl	8000168 <__aeabi_dsub>
 8004a58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a5c:	f7fb ffae 	bl	80009bc <__aeabi_dcmplt>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	f040 8087 	bne.w	8004b74 <_dtoa_r+0x6bc>
 8004a66:	42a6      	cmp	r6, r4
 8004a68:	f43f af43 	beq.w	80048f2 <_dtoa_r+0x43a>
 8004a6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a70:	2200      	movs	r2, #0
 8004a72:	4b53      	ldr	r3, [pc, #332]	@ (8004bc0 <_dtoa_r+0x708>)
 8004a74:	f7fb fd30 	bl	80004d8 <__aeabi_dmul>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a82:	4b4f      	ldr	r3, [pc, #316]	@ (8004bc0 <_dtoa_r+0x708>)
 8004a84:	f7fb fd28 	bl	80004d8 <__aeabi_dmul>
 8004a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a8c:	e7c4      	b.n	8004a18 <_dtoa_r+0x560>
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	f7fb fd21 	bl	80004d8 <__aeabi_dmul>
 8004a96:	4656      	mov	r6, sl
 8004a98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a9c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aa2:	f7fb ffc9 	bl	8000a38 <__aeabi_d2iz>
 8004aa6:	4605      	mov	r5, r0
 8004aa8:	f7fb fcac 	bl	8000404 <__aeabi_i2d>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ab4:	f7fb fb58 	bl	8000168 <__aeabi_dsub>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	3530      	adds	r5, #48	@ 0x30
 8004abe:	f806 5b01 	strb.w	r5, [r6], #1
 8004ac2:	42a6      	cmp	r6, r4
 8004ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	d124      	bne.n	8004b18 <_dtoa_r+0x660>
 8004ace:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ad2:	4b39      	ldr	r3, [pc, #228]	@ (8004bb8 <_dtoa_r+0x700>)
 8004ad4:	f7fb fb4a 	bl	800016c <__adddf3>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ae0:	f7fb ff8a 	bl	80009f8 <__aeabi_dcmpgt>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d145      	bne.n	8004b74 <_dtoa_r+0x6bc>
 8004ae8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004aec:	2000      	movs	r0, #0
 8004aee:	4932      	ldr	r1, [pc, #200]	@ (8004bb8 <_dtoa_r+0x700>)
 8004af0:	f7fb fb3a 	bl	8000168 <__aeabi_dsub>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004afc:	f7fb ff5e 	bl	80009bc <__aeabi_dcmplt>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	f43f aef6 	beq.w	80048f2 <_dtoa_r+0x43a>
 8004b06:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004b08:	1e73      	subs	r3, r6, #1
 8004b0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004b0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b10:	2b30      	cmp	r3, #48	@ 0x30
 8004b12:	d0f8      	beq.n	8004b06 <_dtoa_r+0x64e>
 8004b14:	9f04      	ldr	r7, [sp, #16]
 8004b16:	e73f      	b.n	8004998 <_dtoa_r+0x4e0>
 8004b18:	4b29      	ldr	r3, [pc, #164]	@ (8004bc0 <_dtoa_r+0x708>)
 8004b1a:	f7fb fcdd 	bl	80004d8 <__aeabi_dmul>
 8004b1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b22:	e7bc      	b.n	8004a9e <_dtoa_r+0x5e6>
 8004b24:	d10c      	bne.n	8004b40 <_dtoa_r+0x688>
 8004b26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	4b25      	ldr	r3, [pc, #148]	@ (8004bc4 <_dtoa_r+0x70c>)
 8004b2e:	f7fb fcd3 	bl	80004d8 <__aeabi_dmul>
 8004b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b36:	f7fb ff55 	bl	80009e4 <__aeabi_dcmpge>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	f000 815b 	beq.w	8004df6 <_dtoa_r+0x93e>
 8004b40:	2400      	movs	r4, #0
 8004b42:	4625      	mov	r5, r4
 8004b44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b46:	4656      	mov	r6, sl
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	9304      	str	r3, [sp, #16]
 8004b4c:	2700      	movs	r7, #0
 8004b4e:	4621      	mov	r1, r4
 8004b50:	4658      	mov	r0, fp
 8004b52:	f000 fbb7 	bl	80052c4 <_Bfree>
 8004b56:	2d00      	cmp	r5, #0
 8004b58:	d0dc      	beq.n	8004b14 <_dtoa_r+0x65c>
 8004b5a:	b12f      	cbz	r7, 8004b68 <_dtoa_r+0x6b0>
 8004b5c:	42af      	cmp	r7, r5
 8004b5e:	d003      	beq.n	8004b68 <_dtoa_r+0x6b0>
 8004b60:	4639      	mov	r1, r7
 8004b62:	4658      	mov	r0, fp
 8004b64:	f000 fbae 	bl	80052c4 <_Bfree>
 8004b68:	4629      	mov	r1, r5
 8004b6a:	4658      	mov	r0, fp
 8004b6c:	f000 fbaa 	bl	80052c4 <_Bfree>
 8004b70:	e7d0      	b.n	8004b14 <_dtoa_r+0x65c>
 8004b72:	9704      	str	r7, [sp, #16]
 8004b74:	4633      	mov	r3, r6
 8004b76:	461e      	mov	r6, r3
 8004b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b7c:	2a39      	cmp	r2, #57	@ 0x39
 8004b7e:	d107      	bne.n	8004b90 <_dtoa_r+0x6d8>
 8004b80:	459a      	cmp	sl, r3
 8004b82:	d1f8      	bne.n	8004b76 <_dtoa_r+0x6be>
 8004b84:	9a04      	ldr	r2, [sp, #16]
 8004b86:	3201      	adds	r2, #1
 8004b88:	9204      	str	r2, [sp, #16]
 8004b8a:	2230      	movs	r2, #48	@ 0x30
 8004b8c:	f88a 2000 	strb.w	r2, [sl]
 8004b90:	781a      	ldrb	r2, [r3, #0]
 8004b92:	3201      	adds	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e7bd      	b.n	8004b14 <_dtoa_r+0x65c>
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4b09      	ldr	r3, [pc, #36]	@ (8004bc0 <_dtoa_r+0x708>)
 8004b9c:	f7fb fc9c 	bl	80004d8 <__aeabi_dmul>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	460d      	mov	r5, r1
 8004ba8:	f7fb fefe 	bl	80009a8 <__aeabi_dcmpeq>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	f43f aebc 	beq.w	800492a <_dtoa_r+0x472>
 8004bb2:	e6f1      	b.n	8004998 <_dtoa_r+0x4e0>
 8004bb4:	080065e0 	.word	0x080065e0
 8004bb8:	3fe00000 	.word	0x3fe00000
 8004bbc:	3ff00000 	.word	0x3ff00000
 8004bc0:	40240000 	.word	0x40240000
 8004bc4:	40140000 	.word	0x40140000
 8004bc8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004bca:	2a00      	cmp	r2, #0
 8004bcc:	f000 80db 	beq.w	8004d86 <_dtoa_r+0x8ce>
 8004bd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004bd2:	2a01      	cmp	r2, #1
 8004bd4:	f300 80bf 	bgt.w	8004d56 <_dtoa_r+0x89e>
 8004bd8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004bda:	2a00      	cmp	r2, #0
 8004bdc:	f000 80b7 	beq.w	8004d4e <_dtoa_r+0x896>
 8004be0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004be4:	4646      	mov	r6, r8
 8004be6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bea:	2101      	movs	r1, #1
 8004bec:	441a      	add	r2, r3
 8004bee:	4658      	mov	r0, fp
 8004bf0:	4498      	add	r8, r3
 8004bf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bf4:	f000 fc1a 	bl	800542c <__i2b>
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	b15e      	cbz	r6, 8004c14 <_dtoa_r+0x75c>
 8004bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	dd08      	ble.n	8004c14 <_dtoa_r+0x75c>
 8004c02:	42b3      	cmp	r3, r6
 8004c04:	bfa8      	it	ge
 8004c06:	4633      	movge	r3, r6
 8004c08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c0a:	eba8 0803 	sub.w	r8, r8, r3
 8004c0e:	1af6      	subs	r6, r6, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c16:	b1f3      	cbz	r3, 8004c56 <_dtoa_r+0x79e>
 8004c18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 80b7 	beq.w	8004d8e <_dtoa_r+0x8d6>
 8004c20:	b18c      	cbz	r4, 8004c46 <_dtoa_r+0x78e>
 8004c22:	4629      	mov	r1, r5
 8004c24:	4622      	mov	r2, r4
 8004c26:	4658      	mov	r0, fp
 8004c28:	f000 fcbe 	bl	80055a8 <__pow5mult>
 8004c2c:	464a      	mov	r2, r9
 8004c2e:	4601      	mov	r1, r0
 8004c30:	4605      	mov	r5, r0
 8004c32:	4658      	mov	r0, fp
 8004c34:	f000 fc10 	bl	8005458 <__multiply>
 8004c38:	4649      	mov	r1, r9
 8004c3a:	9004      	str	r0, [sp, #16]
 8004c3c:	4658      	mov	r0, fp
 8004c3e:	f000 fb41 	bl	80052c4 <_Bfree>
 8004c42:	9b04      	ldr	r3, [sp, #16]
 8004c44:	4699      	mov	r9, r3
 8004c46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c48:	1b1a      	subs	r2, r3, r4
 8004c4a:	d004      	beq.n	8004c56 <_dtoa_r+0x79e>
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	4658      	mov	r0, fp
 8004c50:	f000 fcaa 	bl	80055a8 <__pow5mult>
 8004c54:	4681      	mov	r9, r0
 8004c56:	2101      	movs	r1, #1
 8004c58:	4658      	mov	r0, fp
 8004c5a:	f000 fbe7 	bl	800542c <__i2b>
 8004c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c60:	4604      	mov	r4, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 81c9 	beq.w	8004ffa <_dtoa_r+0xb42>
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	4658      	mov	r0, fp
 8004c6e:	f000 fc9b 	bl	80055a8 <__pow5mult>
 8004c72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c74:	4604      	mov	r4, r0
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	f300 808f 	bgt.w	8004d9a <_dtoa_r+0x8e2>
 8004c7c:	9b02      	ldr	r3, [sp, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f040 8087 	bne.w	8004d92 <_dtoa_r+0x8da>
 8004c84:	9b03      	ldr	r3, [sp, #12]
 8004c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f040 8083 	bne.w	8004d96 <_dtoa_r+0x8de>
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c96:	0d1b      	lsrs	r3, r3, #20
 8004c98:	051b      	lsls	r3, r3, #20
 8004c9a:	b12b      	cbz	r3, 8004ca8 <_dtoa_r+0x7f0>
 8004c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c9e:	f108 0801 	add.w	r8, r8, #1
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 81aa 	beq.w	8005006 <_dtoa_r+0xb4e>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cb8:	6918      	ldr	r0, [r3, #16]
 8004cba:	f000 fb6b 	bl	8005394 <__hi0bits>
 8004cbe:	f1c0 0020 	rsb	r0, r0, #32
 8004cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc4:	4418      	add	r0, r3
 8004cc6:	f010 001f 	ands.w	r0, r0, #31
 8004cca:	d071      	beq.n	8004db0 <_dtoa_r+0x8f8>
 8004ccc:	f1c0 0320 	rsb	r3, r0, #32
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	dd65      	ble.n	8004da0 <_dtoa_r+0x8e8>
 8004cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd6:	f1c0 001c 	rsb	r0, r0, #28
 8004cda:	4403      	add	r3, r0
 8004cdc:	4480      	add	r8, r0
 8004cde:	4406      	add	r6, r0
 8004ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ce2:	f1b8 0f00 	cmp.w	r8, #0
 8004ce6:	dd05      	ble.n	8004cf4 <_dtoa_r+0x83c>
 8004ce8:	4649      	mov	r1, r9
 8004cea:	4642      	mov	r2, r8
 8004cec:	4658      	mov	r0, fp
 8004cee:	f000 fcb5 	bl	800565c <__lshift>
 8004cf2:	4681      	mov	r9, r0
 8004cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	dd05      	ble.n	8004d06 <_dtoa_r+0x84e>
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4658      	mov	r0, fp
 8004d00:	f000 fcac 	bl	800565c <__lshift>
 8004d04:	4604      	mov	r4, r0
 8004d06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d053      	beq.n	8004db4 <_dtoa_r+0x8fc>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4648      	mov	r0, r9
 8004d10:	f000 fd10 	bl	8005734 <__mcmp>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	da4d      	bge.n	8004db4 <_dtoa_r+0x8fc>
 8004d18:	1e7b      	subs	r3, r7, #1
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	9304      	str	r3, [sp, #16]
 8004d1e:	220a      	movs	r2, #10
 8004d20:	2300      	movs	r3, #0
 8004d22:	4658      	mov	r0, fp
 8004d24:	f000 faf0 	bl	8005308 <__multadd>
 8004d28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d2a:	4681      	mov	r9, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 816c 	beq.w	800500a <_dtoa_r+0xb52>
 8004d32:	2300      	movs	r3, #0
 8004d34:	4629      	mov	r1, r5
 8004d36:	220a      	movs	r2, #10
 8004d38:	4658      	mov	r0, fp
 8004d3a:	f000 fae5 	bl	8005308 <__multadd>
 8004d3e:	9b08      	ldr	r3, [sp, #32]
 8004d40:	4605      	mov	r5, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	dc61      	bgt.n	8004e0a <_dtoa_r+0x952>
 8004d46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	dc3b      	bgt.n	8004dc4 <_dtoa_r+0x90c>
 8004d4c:	e05d      	b.n	8004e0a <_dtoa_r+0x952>
 8004d4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d50:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d54:	e746      	b.n	8004be4 <_dtoa_r+0x72c>
 8004d56:	9b07      	ldr	r3, [sp, #28]
 8004d58:	1e5c      	subs	r4, r3, #1
 8004d5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	bfbf      	itttt	lt
 8004d60:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004d62:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004d64:	1ae3      	sublt	r3, r4, r3
 8004d66:	18d2      	addlt	r2, r2, r3
 8004d68:	bfa8      	it	ge
 8004d6a:	1b1c      	subge	r4, r3, r4
 8004d6c:	9b07      	ldr	r3, [sp, #28]
 8004d6e:	bfbe      	ittt	lt
 8004d70:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004d72:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004d74:	2400      	movlt	r4, #0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	bfb5      	itete	lt
 8004d7a:	eba8 0603 	sublt.w	r6, r8, r3
 8004d7e:	4646      	movge	r6, r8
 8004d80:	2300      	movlt	r3, #0
 8004d82:	9b07      	ldrge	r3, [sp, #28]
 8004d84:	e730      	b.n	8004be8 <_dtoa_r+0x730>
 8004d86:	4646      	mov	r6, r8
 8004d88:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d8a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004d8c:	e735      	b.n	8004bfa <_dtoa_r+0x742>
 8004d8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d90:	e75c      	b.n	8004c4c <_dtoa_r+0x794>
 8004d92:	2300      	movs	r3, #0
 8004d94:	e788      	b.n	8004ca8 <_dtoa_r+0x7f0>
 8004d96:	9b02      	ldr	r3, [sp, #8]
 8004d98:	e786      	b.n	8004ca8 <_dtoa_r+0x7f0>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d9e:	e788      	b.n	8004cb2 <_dtoa_r+0x7fa>
 8004da0:	d09f      	beq.n	8004ce2 <_dtoa_r+0x82a>
 8004da2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004da4:	331c      	adds	r3, #28
 8004da6:	441a      	add	r2, r3
 8004da8:	4498      	add	r8, r3
 8004daa:	441e      	add	r6, r3
 8004dac:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dae:	e798      	b.n	8004ce2 <_dtoa_r+0x82a>
 8004db0:	4603      	mov	r3, r0
 8004db2:	e7f6      	b.n	8004da2 <_dtoa_r+0x8ea>
 8004db4:	9b07      	ldr	r3, [sp, #28]
 8004db6:	9704      	str	r7, [sp, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	dc20      	bgt.n	8004dfe <_dtoa_r+0x946>
 8004dbc:	9308      	str	r3, [sp, #32]
 8004dbe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	dd1e      	ble.n	8004e02 <_dtoa_r+0x94a>
 8004dc4:	9b08      	ldr	r3, [sp, #32]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f47f aebc 	bne.w	8004b44 <_dtoa_r+0x68c>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	2205      	movs	r2, #5
 8004dd0:	4658      	mov	r0, fp
 8004dd2:	f000 fa99 	bl	8005308 <__multadd>
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	4604      	mov	r4, r0
 8004dda:	4648      	mov	r0, r9
 8004ddc:	f000 fcaa 	bl	8005734 <__mcmp>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f77f aeaf 	ble.w	8004b44 <_dtoa_r+0x68c>
 8004de6:	2331      	movs	r3, #49	@ 0x31
 8004de8:	4656      	mov	r6, sl
 8004dea:	f806 3b01 	strb.w	r3, [r6], #1
 8004dee:	9b04      	ldr	r3, [sp, #16]
 8004df0:	3301      	adds	r3, #1
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	e6aa      	b.n	8004b4c <_dtoa_r+0x694>
 8004df6:	9c07      	ldr	r4, [sp, #28]
 8004df8:	9704      	str	r7, [sp, #16]
 8004dfa:	4625      	mov	r5, r4
 8004dfc:	e7f3      	b.n	8004de6 <_dtoa_r+0x92e>
 8004dfe:	9b07      	ldr	r3, [sp, #28]
 8004e00:	9308      	str	r3, [sp, #32]
 8004e02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8104 	beq.w	8005012 <_dtoa_r+0xb5a>
 8004e0a:	2e00      	cmp	r6, #0
 8004e0c:	dd05      	ble.n	8004e1a <_dtoa_r+0x962>
 8004e0e:	4629      	mov	r1, r5
 8004e10:	4632      	mov	r2, r6
 8004e12:	4658      	mov	r0, fp
 8004e14:	f000 fc22 	bl	800565c <__lshift>
 8004e18:	4605      	mov	r5, r0
 8004e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d05a      	beq.n	8004ed6 <_dtoa_r+0xa1e>
 8004e20:	4658      	mov	r0, fp
 8004e22:	6869      	ldr	r1, [r5, #4]
 8004e24:	f000 fa0e 	bl	8005244 <_Balloc>
 8004e28:	4606      	mov	r6, r0
 8004e2a:	b928      	cbnz	r0, 8004e38 <_dtoa_r+0x980>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004e32:	4b83      	ldr	r3, [pc, #524]	@ (8005040 <_dtoa_r+0xb88>)
 8004e34:	f7ff bb54 	b.w	80044e0 <_dtoa_r+0x28>
 8004e38:	692a      	ldr	r2, [r5, #16]
 8004e3a:	f105 010c 	add.w	r1, r5, #12
 8004e3e:	3202      	adds	r2, #2
 8004e40:	0092      	lsls	r2, r2, #2
 8004e42:	300c      	adds	r0, #12
 8004e44:	f000 ffa8 	bl	8005d98 <memcpy>
 8004e48:	2201      	movs	r2, #1
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4658      	mov	r0, fp
 8004e4e:	f000 fc05 	bl	800565c <__lshift>
 8004e52:	462f      	mov	r7, r5
 8004e54:	4605      	mov	r5, r0
 8004e56:	f10a 0301 	add.w	r3, sl, #1
 8004e5a:	9307      	str	r3, [sp, #28]
 8004e5c:	9b08      	ldr	r3, [sp, #32]
 8004e5e:	4453      	add	r3, sl
 8004e60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e62:	9b02      	ldr	r3, [sp, #8]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e6a:	9b07      	ldr	r3, [sp, #28]
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	4648      	mov	r0, r9
 8004e72:	9302      	str	r3, [sp, #8]
 8004e74:	f7ff fa95 	bl	80043a2 <quorem>
 8004e78:	4639      	mov	r1, r7
 8004e7a:	9008      	str	r0, [sp, #32]
 8004e7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e80:	4648      	mov	r0, r9
 8004e82:	f000 fc57 	bl	8005734 <__mcmp>
 8004e86:	462a      	mov	r2, r5
 8004e88:	9009      	str	r0, [sp, #36]	@ 0x24
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	4658      	mov	r0, fp
 8004e8e:	f000 fc6d 	bl	800576c <__mdiff>
 8004e92:	68c2      	ldr	r2, [r0, #12]
 8004e94:	4606      	mov	r6, r0
 8004e96:	bb02      	cbnz	r2, 8004eda <_dtoa_r+0xa22>
 8004e98:	4601      	mov	r1, r0
 8004e9a:	4648      	mov	r0, r9
 8004e9c:	f000 fc4a 	bl	8005734 <__mcmp>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4658      	mov	r0, fp
 8004ea6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ea8:	f000 fa0c 	bl	80052c4 <_Bfree>
 8004eac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004eae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004eb0:	9e07      	ldr	r6, [sp, #28]
 8004eb2:	ea43 0102 	orr.w	r1, r3, r2
 8004eb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eb8:	4319      	orrs	r1, r3
 8004eba:	d110      	bne.n	8004ede <_dtoa_r+0xa26>
 8004ebc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004ec0:	d029      	beq.n	8004f16 <_dtoa_r+0xa5e>
 8004ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dd02      	ble.n	8004ece <_dtoa_r+0xa16>
 8004ec8:	9b08      	ldr	r3, [sp, #32]
 8004eca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004ece:	9b02      	ldr	r3, [sp, #8]
 8004ed0:	f883 8000 	strb.w	r8, [r3]
 8004ed4:	e63b      	b.n	8004b4e <_dtoa_r+0x696>
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	e7bb      	b.n	8004e52 <_dtoa_r+0x99a>
 8004eda:	2201      	movs	r2, #1
 8004edc:	e7e1      	b.n	8004ea2 <_dtoa_r+0x9ea>
 8004ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	db04      	blt.n	8004eee <_dtoa_r+0xa36>
 8004ee4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004eea:	430b      	orrs	r3, r1
 8004eec:	d120      	bne.n	8004f30 <_dtoa_r+0xa78>
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	dded      	ble.n	8004ece <_dtoa_r+0xa16>
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	4658      	mov	r0, fp
 8004ef8:	f000 fbb0 	bl	800565c <__lshift>
 8004efc:	4621      	mov	r1, r4
 8004efe:	4681      	mov	r9, r0
 8004f00:	f000 fc18 	bl	8005734 <__mcmp>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	dc03      	bgt.n	8004f10 <_dtoa_r+0xa58>
 8004f08:	d1e1      	bne.n	8004ece <_dtoa_r+0xa16>
 8004f0a:	f018 0f01 	tst.w	r8, #1
 8004f0e:	d0de      	beq.n	8004ece <_dtoa_r+0xa16>
 8004f10:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f14:	d1d8      	bne.n	8004ec8 <_dtoa_r+0xa10>
 8004f16:	2339      	movs	r3, #57	@ 0x39
 8004f18:	9a02      	ldr	r2, [sp, #8]
 8004f1a:	7013      	strb	r3, [r2, #0]
 8004f1c:	4633      	mov	r3, r6
 8004f1e:	461e      	mov	r6, r3
 8004f20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	2a39      	cmp	r2, #57	@ 0x39
 8004f28:	d052      	beq.n	8004fd0 <_dtoa_r+0xb18>
 8004f2a:	3201      	adds	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e60e      	b.n	8004b4e <_dtoa_r+0x696>
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	dd07      	ble.n	8004f44 <_dtoa_r+0xa8c>
 8004f34:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f38:	d0ed      	beq.n	8004f16 <_dtoa_r+0xa5e>
 8004f3a:	9a02      	ldr	r2, [sp, #8]
 8004f3c:	f108 0301 	add.w	r3, r8, #1
 8004f40:	7013      	strb	r3, [r2, #0]
 8004f42:	e604      	b.n	8004b4e <_dtoa_r+0x696>
 8004f44:	9b07      	ldr	r3, [sp, #28]
 8004f46:	9a07      	ldr	r2, [sp, #28]
 8004f48:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004f4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d028      	beq.n	8004fa4 <_dtoa_r+0xaec>
 8004f52:	4649      	mov	r1, r9
 8004f54:	2300      	movs	r3, #0
 8004f56:	220a      	movs	r2, #10
 8004f58:	4658      	mov	r0, fp
 8004f5a:	f000 f9d5 	bl	8005308 <__multadd>
 8004f5e:	42af      	cmp	r7, r5
 8004f60:	4681      	mov	r9, r0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	f04f 020a 	mov.w	r2, #10
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	4658      	mov	r0, fp
 8004f6e:	d107      	bne.n	8004f80 <_dtoa_r+0xac8>
 8004f70:	f000 f9ca 	bl	8005308 <__multadd>
 8004f74:	4607      	mov	r7, r0
 8004f76:	4605      	mov	r5, r0
 8004f78:	9b07      	ldr	r3, [sp, #28]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	9307      	str	r3, [sp, #28]
 8004f7e:	e774      	b.n	8004e6a <_dtoa_r+0x9b2>
 8004f80:	f000 f9c2 	bl	8005308 <__multadd>
 8004f84:	4629      	mov	r1, r5
 8004f86:	4607      	mov	r7, r0
 8004f88:	2300      	movs	r3, #0
 8004f8a:	220a      	movs	r2, #10
 8004f8c:	4658      	mov	r0, fp
 8004f8e:	f000 f9bb 	bl	8005308 <__multadd>
 8004f92:	4605      	mov	r5, r0
 8004f94:	e7f0      	b.n	8004f78 <_dtoa_r+0xac0>
 8004f96:	9b08      	ldr	r3, [sp, #32]
 8004f98:	2700      	movs	r7, #0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bfcc      	ite	gt
 8004f9e:	461e      	movgt	r6, r3
 8004fa0:	2601      	movle	r6, #1
 8004fa2:	4456      	add	r6, sl
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	4658      	mov	r0, fp
 8004faa:	f000 fb57 	bl	800565c <__lshift>
 8004fae:	4621      	mov	r1, r4
 8004fb0:	4681      	mov	r9, r0
 8004fb2:	f000 fbbf 	bl	8005734 <__mcmp>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	dcb0      	bgt.n	8004f1c <_dtoa_r+0xa64>
 8004fba:	d102      	bne.n	8004fc2 <_dtoa_r+0xb0a>
 8004fbc:	f018 0f01 	tst.w	r8, #1
 8004fc0:	d1ac      	bne.n	8004f1c <_dtoa_r+0xa64>
 8004fc2:	4633      	mov	r3, r6
 8004fc4:	461e      	mov	r6, r3
 8004fc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fca:	2a30      	cmp	r2, #48	@ 0x30
 8004fcc:	d0fa      	beq.n	8004fc4 <_dtoa_r+0xb0c>
 8004fce:	e5be      	b.n	8004b4e <_dtoa_r+0x696>
 8004fd0:	459a      	cmp	sl, r3
 8004fd2:	d1a4      	bne.n	8004f1e <_dtoa_r+0xa66>
 8004fd4:	9b04      	ldr	r3, [sp, #16]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	9304      	str	r3, [sp, #16]
 8004fda:	2331      	movs	r3, #49	@ 0x31
 8004fdc:	f88a 3000 	strb.w	r3, [sl]
 8004fe0:	e5b5      	b.n	8004b4e <_dtoa_r+0x696>
 8004fe2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004fe4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005044 <_dtoa_r+0xb8c>
 8004fe8:	b11b      	cbz	r3, 8004ff2 <_dtoa_r+0xb3a>
 8004fea:	f10a 0308 	add.w	r3, sl, #8
 8004fee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4650      	mov	r0, sl
 8004ff4:	b017      	add	sp, #92	@ 0x5c
 8004ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	f77f ae3d 	ble.w	8004c7c <_dtoa_r+0x7c4>
 8005002:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005004:	930a      	str	r3, [sp, #40]	@ 0x28
 8005006:	2001      	movs	r0, #1
 8005008:	e65b      	b.n	8004cc2 <_dtoa_r+0x80a>
 800500a:	9b08      	ldr	r3, [sp, #32]
 800500c:	2b00      	cmp	r3, #0
 800500e:	f77f aed6 	ble.w	8004dbe <_dtoa_r+0x906>
 8005012:	4656      	mov	r6, sl
 8005014:	4621      	mov	r1, r4
 8005016:	4648      	mov	r0, r9
 8005018:	f7ff f9c3 	bl	80043a2 <quorem>
 800501c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005020:	9b08      	ldr	r3, [sp, #32]
 8005022:	f806 8b01 	strb.w	r8, [r6], #1
 8005026:	eba6 020a 	sub.w	r2, r6, sl
 800502a:	4293      	cmp	r3, r2
 800502c:	ddb3      	ble.n	8004f96 <_dtoa_r+0xade>
 800502e:	4649      	mov	r1, r9
 8005030:	2300      	movs	r3, #0
 8005032:	220a      	movs	r2, #10
 8005034:	4658      	mov	r0, fp
 8005036:	f000 f967 	bl	8005308 <__multadd>
 800503a:	4681      	mov	r9, r0
 800503c:	e7ea      	b.n	8005014 <_dtoa_r+0xb5c>
 800503e:	bf00      	nop
 8005040:	08006542 	.word	0x08006542
 8005044:	080064c6 	.word	0x080064c6

08005048 <_free_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4605      	mov	r5, r0
 800504c:	2900      	cmp	r1, #0
 800504e:	d040      	beq.n	80050d2 <_free_r+0x8a>
 8005050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005054:	1f0c      	subs	r4, r1, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	bfb8      	it	lt
 800505a:	18e4      	addlt	r4, r4, r3
 800505c:	f000 f8e6 	bl	800522c <__malloc_lock>
 8005060:	4a1c      	ldr	r2, [pc, #112]	@ (80050d4 <_free_r+0x8c>)
 8005062:	6813      	ldr	r3, [r2, #0]
 8005064:	b933      	cbnz	r3, 8005074 <_free_r+0x2c>
 8005066:	6063      	str	r3, [r4, #4]
 8005068:	6014      	str	r4, [r2, #0]
 800506a:	4628      	mov	r0, r5
 800506c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005070:	f000 b8e2 	b.w	8005238 <__malloc_unlock>
 8005074:	42a3      	cmp	r3, r4
 8005076:	d908      	bls.n	800508a <_free_r+0x42>
 8005078:	6820      	ldr	r0, [r4, #0]
 800507a:	1821      	adds	r1, r4, r0
 800507c:	428b      	cmp	r3, r1
 800507e:	bf01      	itttt	eq
 8005080:	6819      	ldreq	r1, [r3, #0]
 8005082:	685b      	ldreq	r3, [r3, #4]
 8005084:	1809      	addeq	r1, r1, r0
 8005086:	6021      	streq	r1, [r4, #0]
 8005088:	e7ed      	b.n	8005066 <_free_r+0x1e>
 800508a:	461a      	mov	r2, r3
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	b10b      	cbz	r3, 8005094 <_free_r+0x4c>
 8005090:	42a3      	cmp	r3, r4
 8005092:	d9fa      	bls.n	800508a <_free_r+0x42>
 8005094:	6811      	ldr	r1, [r2, #0]
 8005096:	1850      	adds	r0, r2, r1
 8005098:	42a0      	cmp	r0, r4
 800509a:	d10b      	bne.n	80050b4 <_free_r+0x6c>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	4401      	add	r1, r0
 80050a0:	1850      	adds	r0, r2, r1
 80050a2:	4283      	cmp	r3, r0
 80050a4:	6011      	str	r1, [r2, #0]
 80050a6:	d1e0      	bne.n	800506a <_free_r+0x22>
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4408      	add	r0, r1
 80050ae:	6010      	str	r0, [r2, #0]
 80050b0:	6053      	str	r3, [r2, #4]
 80050b2:	e7da      	b.n	800506a <_free_r+0x22>
 80050b4:	d902      	bls.n	80050bc <_free_r+0x74>
 80050b6:	230c      	movs	r3, #12
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	e7d6      	b.n	800506a <_free_r+0x22>
 80050bc:	6820      	ldr	r0, [r4, #0]
 80050be:	1821      	adds	r1, r4, r0
 80050c0:	428b      	cmp	r3, r1
 80050c2:	bf01      	itttt	eq
 80050c4:	6819      	ldreq	r1, [r3, #0]
 80050c6:	685b      	ldreq	r3, [r3, #4]
 80050c8:	1809      	addeq	r1, r1, r0
 80050ca:	6021      	streq	r1, [r4, #0]
 80050cc:	6063      	str	r3, [r4, #4]
 80050ce:	6054      	str	r4, [r2, #4]
 80050d0:	e7cb      	b.n	800506a <_free_r+0x22>
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	20000450 	.word	0x20000450

080050d8 <malloc>:
 80050d8:	4b02      	ldr	r3, [pc, #8]	@ (80050e4 <malloc+0xc>)
 80050da:	4601      	mov	r1, r0
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	f000 b825 	b.w	800512c <_malloc_r>
 80050e2:	bf00      	nop
 80050e4:	20000018 	.word	0x20000018

080050e8 <sbrk_aligned>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	4e0f      	ldr	r6, [pc, #60]	@ (8005128 <sbrk_aligned+0x40>)
 80050ec:	460c      	mov	r4, r1
 80050ee:	6831      	ldr	r1, [r6, #0]
 80050f0:	4605      	mov	r5, r0
 80050f2:	b911      	cbnz	r1, 80050fa <sbrk_aligned+0x12>
 80050f4:	f000 fe40 	bl	8005d78 <_sbrk_r>
 80050f8:	6030      	str	r0, [r6, #0]
 80050fa:	4621      	mov	r1, r4
 80050fc:	4628      	mov	r0, r5
 80050fe:	f000 fe3b 	bl	8005d78 <_sbrk_r>
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	d103      	bne.n	800510e <sbrk_aligned+0x26>
 8005106:	f04f 34ff 	mov.w	r4, #4294967295
 800510a:	4620      	mov	r0, r4
 800510c:	bd70      	pop	{r4, r5, r6, pc}
 800510e:	1cc4      	adds	r4, r0, #3
 8005110:	f024 0403 	bic.w	r4, r4, #3
 8005114:	42a0      	cmp	r0, r4
 8005116:	d0f8      	beq.n	800510a <sbrk_aligned+0x22>
 8005118:	1a21      	subs	r1, r4, r0
 800511a:	4628      	mov	r0, r5
 800511c:	f000 fe2c 	bl	8005d78 <_sbrk_r>
 8005120:	3001      	adds	r0, #1
 8005122:	d1f2      	bne.n	800510a <sbrk_aligned+0x22>
 8005124:	e7ef      	b.n	8005106 <sbrk_aligned+0x1e>
 8005126:	bf00      	nop
 8005128:	2000044c 	.word	0x2000044c

0800512c <_malloc_r>:
 800512c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005130:	1ccd      	adds	r5, r1, #3
 8005132:	f025 0503 	bic.w	r5, r5, #3
 8005136:	3508      	adds	r5, #8
 8005138:	2d0c      	cmp	r5, #12
 800513a:	bf38      	it	cc
 800513c:	250c      	movcc	r5, #12
 800513e:	2d00      	cmp	r5, #0
 8005140:	4606      	mov	r6, r0
 8005142:	db01      	blt.n	8005148 <_malloc_r+0x1c>
 8005144:	42a9      	cmp	r1, r5
 8005146:	d904      	bls.n	8005152 <_malloc_r+0x26>
 8005148:	230c      	movs	r3, #12
 800514a:	6033      	str	r3, [r6, #0]
 800514c:	2000      	movs	r0, #0
 800514e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005228 <_malloc_r+0xfc>
 8005156:	f000 f869 	bl	800522c <__malloc_lock>
 800515a:	f8d8 3000 	ldr.w	r3, [r8]
 800515e:	461c      	mov	r4, r3
 8005160:	bb44      	cbnz	r4, 80051b4 <_malloc_r+0x88>
 8005162:	4629      	mov	r1, r5
 8005164:	4630      	mov	r0, r6
 8005166:	f7ff ffbf 	bl	80050e8 <sbrk_aligned>
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	4604      	mov	r4, r0
 800516e:	d158      	bne.n	8005222 <_malloc_r+0xf6>
 8005170:	f8d8 4000 	ldr.w	r4, [r8]
 8005174:	4627      	mov	r7, r4
 8005176:	2f00      	cmp	r7, #0
 8005178:	d143      	bne.n	8005202 <_malloc_r+0xd6>
 800517a:	2c00      	cmp	r4, #0
 800517c:	d04b      	beq.n	8005216 <_malloc_r+0xea>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	4639      	mov	r1, r7
 8005182:	4630      	mov	r0, r6
 8005184:	eb04 0903 	add.w	r9, r4, r3
 8005188:	f000 fdf6 	bl	8005d78 <_sbrk_r>
 800518c:	4581      	cmp	r9, r0
 800518e:	d142      	bne.n	8005216 <_malloc_r+0xea>
 8005190:	6821      	ldr	r1, [r4, #0]
 8005192:	4630      	mov	r0, r6
 8005194:	1a6d      	subs	r5, r5, r1
 8005196:	4629      	mov	r1, r5
 8005198:	f7ff ffa6 	bl	80050e8 <sbrk_aligned>
 800519c:	3001      	adds	r0, #1
 800519e:	d03a      	beq.n	8005216 <_malloc_r+0xea>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	442b      	add	r3, r5
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	f8d8 3000 	ldr.w	r3, [r8]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	bb62      	cbnz	r2, 8005208 <_malloc_r+0xdc>
 80051ae:	f8c8 7000 	str.w	r7, [r8]
 80051b2:	e00f      	b.n	80051d4 <_malloc_r+0xa8>
 80051b4:	6822      	ldr	r2, [r4, #0]
 80051b6:	1b52      	subs	r2, r2, r5
 80051b8:	d420      	bmi.n	80051fc <_malloc_r+0xd0>
 80051ba:	2a0b      	cmp	r2, #11
 80051bc:	d917      	bls.n	80051ee <_malloc_r+0xc2>
 80051be:	1961      	adds	r1, r4, r5
 80051c0:	42a3      	cmp	r3, r4
 80051c2:	6025      	str	r5, [r4, #0]
 80051c4:	bf18      	it	ne
 80051c6:	6059      	strne	r1, [r3, #4]
 80051c8:	6863      	ldr	r3, [r4, #4]
 80051ca:	bf08      	it	eq
 80051cc:	f8c8 1000 	streq.w	r1, [r8]
 80051d0:	5162      	str	r2, [r4, r5]
 80051d2:	604b      	str	r3, [r1, #4]
 80051d4:	4630      	mov	r0, r6
 80051d6:	f000 f82f 	bl	8005238 <__malloc_unlock>
 80051da:	f104 000b 	add.w	r0, r4, #11
 80051de:	1d23      	adds	r3, r4, #4
 80051e0:	f020 0007 	bic.w	r0, r0, #7
 80051e4:	1ac2      	subs	r2, r0, r3
 80051e6:	bf1c      	itt	ne
 80051e8:	1a1b      	subne	r3, r3, r0
 80051ea:	50a3      	strne	r3, [r4, r2]
 80051ec:	e7af      	b.n	800514e <_malloc_r+0x22>
 80051ee:	6862      	ldr	r2, [r4, #4]
 80051f0:	42a3      	cmp	r3, r4
 80051f2:	bf0c      	ite	eq
 80051f4:	f8c8 2000 	streq.w	r2, [r8]
 80051f8:	605a      	strne	r2, [r3, #4]
 80051fa:	e7eb      	b.n	80051d4 <_malloc_r+0xa8>
 80051fc:	4623      	mov	r3, r4
 80051fe:	6864      	ldr	r4, [r4, #4]
 8005200:	e7ae      	b.n	8005160 <_malloc_r+0x34>
 8005202:	463c      	mov	r4, r7
 8005204:	687f      	ldr	r7, [r7, #4]
 8005206:	e7b6      	b.n	8005176 <_malloc_r+0x4a>
 8005208:	461a      	mov	r2, r3
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	42a3      	cmp	r3, r4
 800520e:	d1fb      	bne.n	8005208 <_malloc_r+0xdc>
 8005210:	2300      	movs	r3, #0
 8005212:	6053      	str	r3, [r2, #4]
 8005214:	e7de      	b.n	80051d4 <_malloc_r+0xa8>
 8005216:	230c      	movs	r3, #12
 8005218:	4630      	mov	r0, r6
 800521a:	6033      	str	r3, [r6, #0]
 800521c:	f000 f80c 	bl	8005238 <__malloc_unlock>
 8005220:	e794      	b.n	800514c <_malloc_r+0x20>
 8005222:	6005      	str	r5, [r0, #0]
 8005224:	e7d6      	b.n	80051d4 <_malloc_r+0xa8>
 8005226:	bf00      	nop
 8005228:	20000450 	.word	0x20000450

0800522c <__malloc_lock>:
 800522c:	4801      	ldr	r0, [pc, #4]	@ (8005234 <__malloc_lock+0x8>)
 800522e:	f7ff b8a8 	b.w	8004382 <__retarget_lock_acquire_recursive>
 8005232:	bf00      	nop
 8005234:	20000448 	.word	0x20000448

08005238 <__malloc_unlock>:
 8005238:	4801      	ldr	r0, [pc, #4]	@ (8005240 <__malloc_unlock+0x8>)
 800523a:	f7ff b8a3 	b.w	8004384 <__retarget_lock_release_recursive>
 800523e:	bf00      	nop
 8005240:	20000448 	.word	0x20000448

08005244 <_Balloc>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	69c6      	ldr	r6, [r0, #28]
 8005248:	4604      	mov	r4, r0
 800524a:	460d      	mov	r5, r1
 800524c:	b976      	cbnz	r6, 800526c <_Balloc+0x28>
 800524e:	2010      	movs	r0, #16
 8005250:	f7ff ff42 	bl	80050d8 <malloc>
 8005254:	4602      	mov	r2, r0
 8005256:	61e0      	str	r0, [r4, #28]
 8005258:	b920      	cbnz	r0, 8005264 <_Balloc+0x20>
 800525a:	216b      	movs	r1, #107	@ 0x6b
 800525c:	4b17      	ldr	r3, [pc, #92]	@ (80052bc <_Balloc+0x78>)
 800525e:	4818      	ldr	r0, [pc, #96]	@ (80052c0 <_Balloc+0x7c>)
 8005260:	f000 fda8 	bl	8005db4 <__assert_func>
 8005264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005268:	6006      	str	r6, [r0, #0]
 800526a:	60c6      	str	r6, [r0, #12]
 800526c:	69e6      	ldr	r6, [r4, #28]
 800526e:	68f3      	ldr	r3, [r6, #12]
 8005270:	b183      	cbz	r3, 8005294 <_Balloc+0x50>
 8005272:	69e3      	ldr	r3, [r4, #28]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800527a:	b9b8      	cbnz	r0, 80052ac <_Balloc+0x68>
 800527c:	2101      	movs	r1, #1
 800527e:	fa01 f605 	lsl.w	r6, r1, r5
 8005282:	1d72      	adds	r2, r6, #5
 8005284:	4620      	mov	r0, r4
 8005286:	0092      	lsls	r2, r2, #2
 8005288:	f000 fdb2 	bl	8005df0 <_calloc_r>
 800528c:	b160      	cbz	r0, 80052a8 <_Balloc+0x64>
 800528e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005292:	e00e      	b.n	80052b2 <_Balloc+0x6e>
 8005294:	2221      	movs	r2, #33	@ 0x21
 8005296:	2104      	movs	r1, #4
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fda9 	bl	8005df0 <_calloc_r>
 800529e:	69e3      	ldr	r3, [r4, #28]
 80052a0:	60f0      	str	r0, [r6, #12]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e4      	bne.n	8005272 <_Balloc+0x2e>
 80052a8:	2000      	movs	r0, #0
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	6802      	ldr	r2, [r0, #0]
 80052ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052b2:	2300      	movs	r3, #0
 80052b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052b8:	e7f7      	b.n	80052aa <_Balloc+0x66>
 80052ba:	bf00      	nop
 80052bc:	080064d3 	.word	0x080064d3
 80052c0:	08006553 	.word	0x08006553

080052c4 <_Bfree>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	69c6      	ldr	r6, [r0, #28]
 80052c8:	4605      	mov	r5, r0
 80052ca:	460c      	mov	r4, r1
 80052cc:	b976      	cbnz	r6, 80052ec <_Bfree+0x28>
 80052ce:	2010      	movs	r0, #16
 80052d0:	f7ff ff02 	bl	80050d8 <malloc>
 80052d4:	4602      	mov	r2, r0
 80052d6:	61e8      	str	r0, [r5, #28]
 80052d8:	b920      	cbnz	r0, 80052e4 <_Bfree+0x20>
 80052da:	218f      	movs	r1, #143	@ 0x8f
 80052dc:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <_Bfree+0x3c>)
 80052de:	4809      	ldr	r0, [pc, #36]	@ (8005304 <_Bfree+0x40>)
 80052e0:	f000 fd68 	bl	8005db4 <__assert_func>
 80052e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052e8:	6006      	str	r6, [r0, #0]
 80052ea:	60c6      	str	r6, [r0, #12]
 80052ec:	b13c      	cbz	r4, 80052fe <_Bfree+0x3a>
 80052ee:	69eb      	ldr	r3, [r5, #28]
 80052f0:	6862      	ldr	r2, [r4, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052f8:	6021      	str	r1, [r4, #0]
 80052fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	080064d3 	.word	0x080064d3
 8005304:	08006553 	.word	0x08006553

08005308 <__multadd>:
 8005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530c:	4607      	mov	r7, r0
 800530e:	460c      	mov	r4, r1
 8005310:	461e      	mov	r6, r3
 8005312:	2000      	movs	r0, #0
 8005314:	690d      	ldr	r5, [r1, #16]
 8005316:	f101 0c14 	add.w	ip, r1, #20
 800531a:	f8dc 3000 	ldr.w	r3, [ip]
 800531e:	3001      	adds	r0, #1
 8005320:	b299      	uxth	r1, r3
 8005322:	fb02 6101 	mla	r1, r2, r1, r6
 8005326:	0c1e      	lsrs	r6, r3, #16
 8005328:	0c0b      	lsrs	r3, r1, #16
 800532a:	fb02 3306 	mla	r3, r2, r6, r3
 800532e:	b289      	uxth	r1, r1
 8005330:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005334:	4285      	cmp	r5, r0
 8005336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800533a:	f84c 1b04 	str.w	r1, [ip], #4
 800533e:	dcec      	bgt.n	800531a <__multadd+0x12>
 8005340:	b30e      	cbz	r6, 8005386 <__multadd+0x7e>
 8005342:	68a3      	ldr	r3, [r4, #8]
 8005344:	42ab      	cmp	r3, r5
 8005346:	dc19      	bgt.n	800537c <__multadd+0x74>
 8005348:	6861      	ldr	r1, [r4, #4]
 800534a:	4638      	mov	r0, r7
 800534c:	3101      	adds	r1, #1
 800534e:	f7ff ff79 	bl	8005244 <_Balloc>
 8005352:	4680      	mov	r8, r0
 8005354:	b928      	cbnz	r0, 8005362 <__multadd+0x5a>
 8005356:	4602      	mov	r2, r0
 8005358:	21ba      	movs	r1, #186	@ 0xba
 800535a:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <__multadd+0x84>)
 800535c:	480c      	ldr	r0, [pc, #48]	@ (8005390 <__multadd+0x88>)
 800535e:	f000 fd29 	bl	8005db4 <__assert_func>
 8005362:	6922      	ldr	r2, [r4, #16]
 8005364:	f104 010c 	add.w	r1, r4, #12
 8005368:	3202      	adds	r2, #2
 800536a:	0092      	lsls	r2, r2, #2
 800536c:	300c      	adds	r0, #12
 800536e:	f000 fd13 	bl	8005d98 <memcpy>
 8005372:	4621      	mov	r1, r4
 8005374:	4638      	mov	r0, r7
 8005376:	f7ff ffa5 	bl	80052c4 <_Bfree>
 800537a:	4644      	mov	r4, r8
 800537c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005380:	3501      	adds	r5, #1
 8005382:	615e      	str	r6, [r3, #20]
 8005384:	6125      	str	r5, [r4, #16]
 8005386:	4620      	mov	r0, r4
 8005388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800538c:	08006542 	.word	0x08006542
 8005390:	08006553 	.word	0x08006553

08005394 <__hi0bits>:
 8005394:	4603      	mov	r3, r0
 8005396:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800539a:	bf3a      	itte	cc
 800539c:	0403      	lslcc	r3, r0, #16
 800539e:	2010      	movcc	r0, #16
 80053a0:	2000      	movcs	r0, #0
 80053a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053a6:	bf3c      	itt	cc
 80053a8:	021b      	lslcc	r3, r3, #8
 80053aa:	3008      	addcc	r0, #8
 80053ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053b0:	bf3c      	itt	cc
 80053b2:	011b      	lslcc	r3, r3, #4
 80053b4:	3004      	addcc	r0, #4
 80053b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ba:	bf3c      	itt	cc
 80053bc:	009b      	lslcc	r3, r3, #2
 80053be:	3002      	addcc	r0, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	db05      	blt.n	80053d0 <__hi0bits+0x3c>
 80053c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80053c8:	f100 0001 	add.w	r0, r0, #1
 80053cc:	bf08      	it	eq
 80053ce:	2020      	moveq	r0, #32
 80053d0:	4770      	bx	lr

080053d2 <__lo0bits>:
 80053d2:	6803      	ldr	r3, [r0, #0]
 80053d4:	4602      	mov	r2, r0
 80053d6:	f013 0007 	ands.w	r0, r3, #7
 80053da:	d00b      	beq.n	80053f4 <__lo0bits+0x22>
 80053dc:	07d9      	lsls	r1, r3, #31
 80053de:	d421      	bmi.n	8005424 <__lo0bits+0x52>
 80053e0:	0798      	lsls	r0, r3, #30
 80053e2:	bf49      	itett	mi
 80053e4:	085b      	lsrmi	r3, r3, #1
 80053e6:	089b      	lsrpl	r3, r3, #2
 80053e8:	2001      	movmi	r0, #1
 80053ea:	6013      	strmi	r3, [r2, #0]
 80053ec:	bf5c      	itt	pl
 80053ee:	2002      	movpl	r0, #2
 80053f0:	6013      	strpl	r3, [r2, #0]
 80053f2:	4770      	bx	lr
 80053f4:	b299      	uxth	r1, r3
 80053f6:	b909      	cbnz	r1, 80053fc <__lo0bits+0x2a>
 80053f8:	2010      	movs	r0, #16
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	b2d9      	uxtb	r1, r3
 80053fe:	b909      	cbnz	r1, 8005404 <__lo0bits+0x32>
 8005400:	3008      	adds	r0, #8
 8005402:	0a1b      	lsrs	r3, r3, #8
 8005404:	0719      	lsls	r1, r3, #28
 8005406:	bf04      	itt	eq
 8005408:	091b      	lsreq	r3, r3, #4
 800540a:	3004      	addeq	r0, #4
 800540c:	0799      	lsls	r1, r3, #30
 800540e:	bf04      	itt	eq
 8005410:	089b      	lsreq	r3, r3, #2
 8005412:	3002      	addeq	r0, #2
 8005414:	07d9      	lsls	r1, r3, #31
 8005416:	d403      	bmi.n	8005420 <__lo0bits+0x4e>
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	f100 0001 	add.w	r0, r0, #1
 800541e:	d003      	beq.n	8005428 <__lo0bits+0x56>
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	4770      	bx	lr
 8005424:	2000      	movs	r0, #0
 8005426:	4770      	bx	lr
 8005428:	2020      	movs	r0, #32
 800542a:	4770      	bx	lr

0800542c <__i2b>:
 800542c:	b510      	push	{r4, lr}
 800542e:	460c      	mov	r4, r1
 8005430:	2101      	movs	r1, #1
 8005432:	f7ff ff07 	bl	8005244 <_Balloc>
 8005436:	4602      	mov	r2, r0
 8005438:	b928      	cbnz	r0, 8005446 <__i2b+0x1a>
 800543a:	f240 1145 	movw	r1, #325	@ 0x145
 800543e:	4b04      	ldr	r3, [pc, #16]	@ (8005450 <__i2b+0x24>)
 8005440:	4804      	ldr	r0, [pc, #16]	@ (8005454 <__i2b+0x28>)
 8005442:	f000 fcb7 	bl	8005db4 <__assert_func>
 8005446:	2301      	movs	r3, #1
 8005448:	6144      	str	r4, [r0, #20]
 800544a:	6103      	str	r3, [r0, #16]
 800544c:	bd10      	pop	{r4, pc}
 800544e:	bf00      	nop
 8005450:	08006542 	.word	0x08006542
 8005454:	08006553 	.word	0x08006553

08005458 <__multiply>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	4614      	mov	r4, r2
 800545e:	690a      	ldr	r2, [r1, #16]
 8005460:	6923      	ldr	r3, [r4, #16]
 8005462:	460f      	mov	r7, r1
 8005464:	429a      	cmp	r2, r3
 8005466:	bfa2      	ittt	ge
 8005468:	4623      	movge	r3, r4
 800546a:	460c      	movge	r4, r1
 800546c:	461f      	movge	r7, r3
 800546e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005472:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	6861      	ldr	r1, [r4, #4]
 800547a:	eb0a 0609 	add.w	r6, sl, r9
 800547e:	42b3      	cmp	r3, r6
 8005480:	b085      	sub	sp, #20
 8005482:	bfb8      	it	lt
 8005484:	3101      	addlt	r1, #1
 8005486:	f7ff fedd 	bl	8005244 <_Balloc>
 800548a:	b930      	cbnz	r0, 800549a <__multiply+0x42>
 800548c:	4602      	mov	r2, r0
 800548e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005492:	4b43      	ldr	r3, [pc, #268]	@ (80055a0 <__multiply+0x148>)
 8005494:	4843      	ldr	r0, [pc, #268]	@ (80055a4 <__multiply+0x14c>)
 8005496:	f000 fc8d 	bl	8005db4 <__assert_func>
 800549a:	f100 0514 	add.w	r5, r0, #20
 800549e:	462b      	mov	r3, r5
 80054a0:	2200      	movs	r2, #0
 80054a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80054a6:	4543      	cmp	r3, r8
 80054a8:	d321      	bcc.n	80054ee <__multiply+0x96>
 80054aa:	f107 0114 	add.w	r1, r7, #20
 80054ae:	f104 0214 	add.w	r2, r4, #20
 80054b2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80054b6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80054ba:	9302      	str	r3, [sp, #8]
 80054bc:	1b13      	subs	r3, r2, r4
 80054be:	3b15      	subs	r3, #21
 80054c0:	f023 0303 	bic.w	r3, r3, #3
 80054c4:	3304      	adds	r3, #4
 80054c6:	f104 0715 	add.w	r7, r4, #21
 80054ca:	42ba      	cmp	r2, r7
 80054cc:	bf38      	it	cc
 80054ce:	2304      	movcc	r3, #4
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	9b02      	ldr	r3, [sp, #8]
 80054d4:	9103      	str	r1, [sp, #12]
 80054d6:	428b      	cmp	r3, r1
 80054d8:	d80c      	bhi.n	80054f4 <__multiply+0x9c>
 80054da:	2e00      	cmp	r6, #0
 80054dc:	dd03      	ble.n	80054e6 <__multiply+0x8e>
 80054de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d05a      	beq.n	800559c <__multiply+0x144>
 80054e6:	6106      	str	r6, [r0, #16]
 80054e8:	b005      	add	sp, #20
 80054ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ee:	f843 2b04 	str.w	r2, [r3], #4
 80054f2:	e7d8      	b.n	80054a6 <__multiply+0x4e>
 80054f4:	f8b1 a000 	ldrh.w	sl, [r1]
 80054f8:	f1ba 0f00 	cmp.w	sl, #0
 80054fc:	d023      	beq.n	8005546 <__multiply+0xee>
 80054fe:	46a9      	mov	r9, r5
 8005500:	f04f 0c00 	mov.w	ip, #0
 8005504:	f104 0e14 	add.w	lr, r4, #20
 8005508:	f85e 7b04 	ldr.w	r7, [lr], #4
 800550c:	f8d9 3000 	ldr.w	r3, [r9]
 8005510:	fa1f fb87 	uxth.w	fp, r7
 8005514:	b29b      	uxth	r3, r3
 8005516:	fb0a 330b 	mla	r3, sl, fp, r3
 800551a:	4463      	add	r3, ip
 800551c:	f8d9 c000 	ldr.w	ip, [r9]
 8005520:	0c3f      	lsrs	r7, r7, #16
 8005522:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005526:	fb0a c707 	mla	r7, sl, r7, ip
 800552a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800552e:	b29b      	uxth	r3, r3
 8005530:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005534:	4572      	cmp	r2, lr
 8005536:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800553a:	f849 3b04 	str.w	r3, [r9], #4
 800553e:	d8e3      	bhi.n	8005508 <__multiply+0xb0>
 8005540:	9b01      	ldr	r3, [sp, #4]
 8005542:	f845 c003 	str.w	ip, [r5, r3]
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	3104      	adds	r1, #4
 800554a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800554e:	f1b9 0f00 	cmp.w	r9, #0
 8005552:	d021      	beq.n	8005598 <__multiply+0x140>
 8005554:	46ae      	mov	lr, r5
 8005556:	f04f 0a00 	mov.w	sl, #0
 800555a:	682b      	ldr	r3, [r5, #0]
 800555c:	f104 0c14 	add.w	ip, r4, #20
 8005560:	f8bc b000 	ldrh.w	fp, [ip]
 8005564:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005568:	b29b      	uxth	r3, r3
 800556a:	fb09 770b 	mla	r7, r9, fp, r7
 800556e:	4457      	add	r7, sl
 8005570:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005574:	f84e 3b04 	str.w	r3, [lr], #4
 8005578:	f85c 3b04 	ldr.w	r3, [ip], #4
 800557c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005580:	f8be 3000 	ldrh.w	r3, [lr]
 8005584:	4562      	cmp	r2, ip
 8005586:	fb09 330a 	mla	r3, r9, sl, r3
 800558a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800558e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005592:	d8e5      	bhi.n	8005560 <__multiply+0x108>
 8005594:	9f01      	ldr	r7, [sp, #4]
 8005596:	51eb      	str	r3, [r5, r7]
 8005598:	3504      	adds	r5, #4
 800559a:	e79a      	b.n	80054d2 <__multiply+0x7a>
 800559c:	3e01      	subs	r6, #1
 800559e:	e79c      	b.n	80054da <__multiply+0x82>
 80055a0:	08006542 	.word	0x08006542
 80055a4:	08006553 	.word	0x08006553

080055a8 <__pow5mult>:
 80055a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ac:	4615      	mov	r5, r2
 80055ae:	f012 0203 	ands.w	r2, r2, #3
 80055b2:	4607      	mov	r7, r0
 80055b4:	460e      	mov	r6, r1
 80055b6:	d007      	beq.n	80055c8 <__pow5mult+0x20>
 80055b8:	4c25      	ldr	r4, [pc, #148]	@ (8005650 <__pow5mult+0xa8>)
 80055ba:	3a01      	subs	r2, #1
 80055bc:	2300      	movs	r3, #0
 80055be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055c2:	f7ff fea1 	bl	8005308 <__multadd>
 80055c6:	4606      	mov	r6, r0
 80055c8:	10ad      	asrs	r5, r5, #2
 80055ca:	d03d      	beq.n	8005648 <__pow5mult+0xa0>
 80055cc:	69fc      	ldr	r4, [r7, #28]
 80055ce:	b97c      	cbnz	r4, 80055f0 <__pow5mult+0x48>
 80055d0:	2010      	movs	r0, #16
 80055d2:	f7ff fd81 	bl	80050d8 <malloc>
 80055d6:	4602      	mov	r2, r0
 80055d8:	61f8      	str	r0, [r7, #28]
 80055da:	b928      	cbnz	r0, 80055e8 <__pow5mult+0x40>
 80055dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80055e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005654 <__pow5mult+0xac>)
 80055e2:	481d      	ldr	r0, [pc, #116]	@ (8005658 <__pow5mult+0xb0>)
 80055e4:	f000 fbe6 	bl	8005db4 <__assert_func>
 80055e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055ec:	6004      	str	r4, [r0, #0]
 80055ee:	60c4      	str	r4, [r0, #12]
 80055f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80055f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80055f8:	b94c      	cbnz	r4, 800560e <__pow5mult+0x66>
 80055fa:	f240 2171 	movw	r1, #625	@ 0x271
 80055fe:	4638      	mov	r0, r7
 8005600:	f7ff ff14 	bl	800542c <__i2b>
 8005604:	2300      	movs	r3, #0
 8005606:	4604      	mov	r4, r0
 8005608:	f8c8 0008 	str.w	r0, [r8, #8]
 800560c:	6003      	str	r3, [r0, #0]
 800560e:	f04f 0900 	mov.w	r9, #0
 8005612:	07eb      	lsls	r3, r5, #31
 8005614:	d50a      	bpl.n	800562c <__pow5mult+0x84>
 8005616:	4631      	mov	r1, r6
 8005618:	4622      	mov	r2, r4
 800561a:	4638      	mov	r0, r7
 800561c:	f7ff ff1c 	bl	8005458 <__multiply>
 8005620:	4680      	mov	r8, r0
 8005622:	4631      	mov	r1, r6
 8005624:	4638      	mov	r0, r7
 8005626:	f7ff fe4d 	bl	80052c4 <_Bfree>
 800562a:	4646      	mov	r6, r8
 800562c:	106d      	asrs	r5, r5, #1
 800562e:	d00b      	beq.n	8005648 <__pow5mult+0xa0>
 8005630:	6820      	ldr	r0, [r4, #0]
 8005632:	b938      	cbnz	r0, 8005644 <__pow5mult+0x9c>
 8005634:	4622      	mov	r2, r4
 8005636:	4621      	mov	r1, r4
 8005638:	4638      	mov	r0, r7
 800563a:	f7ff ff0d 	bl	8005458 <__multiply>
 800563e:	6020      	str	r0, [r4, #0]
 8005640:	f8c0 9000 	str.w	r9, [r0]
 8005644:	4604      	mov	r4, r0
 8005646:	e7e4      	b.n	8005612 <__pow5mult+0x6a>
 8005648:	4630      	mov	r0, r6
 800564a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800564e:	bf00      	nop
 8005650:	080065ac 	.word	0x080065ac
 8005654:	080064d3 	.word	0x080064d3
 8005658:	08006553 	.word	0x08006553

0800565c <__lshift>:
 800565c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005660:	460c      	mov	r4, r1
 8005662:	4607      	mov	r7, r0
 8005664:	4691      	mov	r9, r2
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	6849      	ldr	r1, [r1, #4]
 800566a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800566e:	68a3      	ldr	r3, [r4, #8]
 8005670:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005674:	f108 0601 	add.w	r6, r8, #1
 8005678:	42b3      	cmp	r3, r6
 800567a:	db0b      	blt.n	8005694 <__lshift+0x38>
 800567c:	4638      	mov	r0, r7
 800567e:	f7ff fde1 	bl	8005244 <_Balloc>
 8005682:	4605      	mov	r5, r0
 8005684:	b948      	cbnz	r0, 800569a <__lshift+0x3e>
 8005686:	4602      	mov	r2, r0
 8005688:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800568c:	4b27      	ldr	r3, [pc, #156]	@ (800572c <__lshift+0xd0>)
 800568e:	4828      	ldr	r0, [pc, #160]	@ (8005730 <__lshift+0xd4>)
 8005690:	f000 fb90 	bl	8005db4 <__assert_func>
 8005694:	3101      	adds	r1, #1
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	e7ee      	b.n	8005678 <__lshift+0x1c>
 800569a:	2300      	movs	r3, #0
 800569c:	f100 0114 	add.w	r1, r0, #20
 80056a0:	f100 0210 	add.w	r2, r0, #16
 80056a4:	4618      	mov	r0, r3
 80056a6:	4553      	cmp	r3, sl
 80056a8:	db33      	blt.n	8005712 <__lshift+0xb6>
 80056aa:	6920      	ldr	r0, [r4, #16]
 80056ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056b0:	f104 0314 	add.w	r3, r4, #20
 80056b4:	f019 091f 	ands.w	r9, r9, #31
 80056b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80056c0:	d02b      	beq.n	800571a <__lshift+0xbe>
 80056c2:	468a      	mov	sl, r1
 80056c4:	2200      	movs	r2, #0
 80056c6:	f1c9 0e20 	rsb	lr, r9, #32
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	fa00 f009 	lsl.w	r0, r0, r9
 80056d0:	4310      	orrs	r0, r2
 80056d2:	f84a 0b04 	str.w	r0, [sl], #4
 80056d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056da:	459c      	cmp	ip, r3
 80056dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80056e0:	d8f3      	bhi.n	80056ca <__lshift+0x6e>
 80056e2:	ebac 0304 	sub.w	r3, ip, r4
 80056e6:	3b15      	subs	r3, #21
 80056e8:	f023 0303 	bic.w	r3, r3, #3
 80056ec:	3304      	adds	r3, #4
 80056ee:	f104 0015 	add.w	r0, r4, #21
 80056f2:	4584      	cmp	ip, r0
 80056f4:	bf38      	it	cc
 80056f6:	2304      	movcc	r3, #4
 80056f8:	50ca      	str	r2, [r1, r3]
 80056fa:	b10a      	cbz	r2, 8005700 <__lshift+0xa4>
 80056fc:	f108 0602 	add.w	r6, r8, #2
 8005700:	3e01      	subs	r6, #1
 8005702:	4638      	mov	r0, r7
 8005704:	4621      	mov	r1, r4
 8005706:	612e      	str	r6, [r5, #16]
 8005708:	f7ff fddc 	bl	80052c4 <_Bfree>
 800570c:	4628      	mov	r0, r5
 800570e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005712:	f842 0f04 	str.w	r0, [r2, #4]!
 8005716:	3301      	adds	r3, #1
 8005718:	e7c5      	b.n	80056a6 <__lshift+0x4a>
 800571a:	3904      	subs	r1, #4
 800571c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005720:	459c      	cmp	ip, r3
 8005722:	f841 2f04 	str.w	r2, [r1, #4]!
 8005726:	d8f9      	bhi.n	800571c <__lshift+0xc0>
 8005728:	e7ea      	b.n	8005700 <__lshift+0xa4>
 800572a:	bf00      	nop
 800572c:	08006542 	.word	0x08006542
 8005730:	08006553 	.word	0x08006553

08005734 <__mcmp>:
 8005734:	4603      	mov	r3, r0
 8005736:	690a      	ldr	r2, [r1, #16]
 8005738:	6900      	ldr	r0, [r0, #16]
 800573a:	b530      	push	{r4, r5, lr}
 800573c:	1a80      	subs	r0, r0, r2
 800573e:	d10e      	bne.n	800575e <__mcmp+0x2a>
 8005740:	3314      	adds	r3, #20
 8005742:	3114      	adds	r1, #20
 8005744:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005748:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800574c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005750:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005754:	4295      	cmp	r5, r2
 8005756:	d003      	beq.n	8005760 <__mcmp+0x2c>
 8005758:	d205      	bcs.n	8005766 <__mcmp+0x32>
 800575a:	f04f 30ff 	mov.w	r0, #4294967295
 800575e:	bd30      	pop	{r4, r5, pc}
 8005760:	42a3      	cmp	r3, r4
 8005762:	d3f3      	bcc.n	800574c <__mcmp+0x18>
 8005764:	e7fb      	b.n	800575e <__mcmp+0x2a>
 8005766:	2001      	movs	r0, #1
 8005768:	e7f9      	b.n	800575e <__mcmp+0x2a>
	...

0800576c <__mdiff>:
 800576c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005770:	4689      	mov	r9, r1
 8005772:	4606      	mov	r6, r0
 8005774:	4611      	mov	r1, r2
 8005776:	4648      	mov	r0, r9
 8005778:	4614      	mov	r4, r2
 800577a:	f7ff ffdb 	bl	8005734 <__mcmp>
 800577e:	1e05      	subs	r5, r0, #0
 8005780:	d112      	bne.n	80057a8 <__mdiff+0x3c>
 8005782:	4629      	mov	r1, r5
 8005784:	4630      	mov	r0, r6
 8005786:	f7ff fd5d 	bl	8005244 <_Balloc>
 800578a:	4602      	mov	r2, r0
 800578c:	b928      	cbnz	r0, 800579a <__mdiff+0x2e>
 800578e:	f240 2137 	movw	r1, #567	@ 0x237
 8005792:	4b3e      	ldr	r3, [pc, #248]	@ (800588c <__mdiff+0x120>)
 8005794:	483e      	ldr	r0, [pc, #248]	@ (8005890 <__mdiff+0x124>)
 8005796:	f000 fb0d 	bl	8005db4 <__assert_func>
 800579a:	2301      	movs	r3, #1
 800579c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80057a0:	4610      	mov	r0, r2
 80057a2:	b003      	add	sp, #12
 80057a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a8:	bfbc      	itt	lt
 80057aa:	464b      	movlt	r3, r9
 80057ac:	46a1      	movlt	r9, r4
 80057ae:	4630      	mov	r0, r6
 80057b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80057b4:	bfba      	itte	lt
 80057b6:	461c      	movlt	r4, r3
 80057b8:	2501      	movlt	r5, #1
 80057ba:	2500      	movge	r5, #0
 80057bc:	f7ff fd42 	bl	8005244 <_Balloc>
 80057c0:	4602      	mov	r2, r0
 80057c2:	b918      	cbnz	r0, 80057cc <__mdiff+0x60>
 80057c4:	f240 2145 	movw	r1, #581	@ 0x245
 80057c8:	4b30      	ldr	r3, [pc, #192]	@ (800588c <__mdiff+0x120>)
 80057ca:	e7e3      	b.n	8005794 <__mdiff+0x28>
 80057cc:	f100 0b14 	add.w	fp, r0, #20
 80057d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80057d4:	f109 0310 	add.w	r3, r9, #16
 80057d8:	60c5      	str	r5, [r0, #12]
 80057da:	f04f 0c00 	mov.w	ip, #0
 80057de:	f109 0514 	add.w	r5, r9, #20
 80057e2:	46d9      	mov	r9, fp
 80057e4:	6926      	ldr	r6, [r4, #16]
 80057e6:	f104 0e14 	add.w	lr, r4, #20
 80057ea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80057ee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	9b01      	ldr	r3, [sp, #4]
 80057f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80057fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80057fe:	b281      	uxth	r1, r0
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	fa1f f38a 	uxth.w	r3, sl
 8005806:	1a5b      	subs	r3, r3, r1
 8005808:	0c00      	lsrs	r0, r0, #16
 800580a:	4463      	add	r3, ip
 800580c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005810:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005814:	b29b      	uxth	r3, r3
 8005816:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800581a:	4576      	cmp	r6, lr
 800581c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005820:	f849 3b04 	str.w	r3, [r9], #4
 8005824:	d8e6      	bhi.n	80057f4 <__mdiff+0x88>
 8005826:	1b33      	subs	r3, r6, r4
 8005828:	3b15      	subs	r3, #21
 800582a:	f023 0303 	bic.w	r3, r3, #3
 800582e:	3415      	adds	r4, #21
 8005830:	3304      	adds	r3, #4
 8005832:	42a6      	cmp	r6, r4
 8005834:	bf38      	it	cc
 8005836:	2304      	movcc	r3, #4
 8005838:	441d      	add	r5, r3
 800583a:	445b      	add	r3, fp
 800583c:	461e      	mov	r6, r3
 800583e:	462c      	mov	r4, r5
 8005840:	4544      	cmp	r4, r8
 8005842:	d30e      	bcc.n	8005862 <__mdiff+0xf6>
 8005844:	f108 0103 	add.w	r1, r8, #3
 8005848:	1b49      	subs	r1, r1, r5
 800584a:	f021 0103 	bic.w	r1, r1, #3
 800584e:	3d03      	subs	r5, #3
 8005850:	45a8      	cmp	r8, r5
 8005852:	bf38      	it	cc
 8005854:	2100      	movcc	r1, #0
 8005856:	440b      	add	r3, r1
 8005858:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800585c:	b199      	cbz	r1, 8005886 <__mdiff+0x11a>
 800585e:	6117      	str	r7, [r2, #16]
 8005860:	e79e      	b.n	80057a0 <__mdiff+0x34>
 8005862:	46e6      	mov	lr, ip
 8005864:	f854 1b04 	ldr.w	r1, [r4], #4
 8005868:	fa1f fc81 	uxth.w	ip, r1
 800586c:	44f4      	add	ip, lr
 800586e:	0c08      	lsrs	r0, r1, #16
 8005870:	4471      	add	r1, lr
 8005872:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005876:	b289      	uxth	r1, r1
 8005878:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800587c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005880:	f846 1b04 	str.w	r1, [r6], #4
 8005884:	e7dc      	b.n	8005840 <__mdiff+0xd4>
 8005886:	3f01      	subs	r7, #1
 8005888:	e7e6      	b.n	8005858 <__mdiff+0xec>
 800588a:	bf00      	nop
 800588c:	08006542 	.word	0x08006542
 8005890:	08006553 	.word	0x08006553

08005894 <__d2b>:
 8005894:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005898:	2101      	movs	r1, #1
 800589a:	4690      	mov	r8, r2
 800589c:	4699      	mov	r9, r3
 800589e:	9e08      	ldr	r6, [sp, #32]
 80058a0:	f7ff fcd0 	bl	8005244 <_Balloc>
 80058a4:	4604      	mov	r4, r0
 80058a6:	b930      	cbnz	r0, 80058b6 <__d2b+0x22>
 80058a8:	4602      	mov	r2, r0
 80058aa:	f240 310f 	movw	r1, #783	@ 0x30f
 80058ae:	4b23      	ldr	r3, [pc, #140]	@ (800593c <__d2b+0xa8>)
 80058b0:	4823      	ldr	r0, [pc, #140]	@ (8005940 <__d2b+0xac>)
 80058b2:	f000 fa7f 	bl	8005db4 <__assert_func>
 80058b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058be:	b10d      	cbz	r5, 80058c4 <__d2b+0x30>
 80058c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	f1b8 0300 	subs.w	r3, r8, #0
 80058ca:	d024      	beq.n	8005916 <__d2b+0x82>
 80058cc:	4668      	mov	r0, sp
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	f7ff fd7f 	bl	80053d2 <__lo0bits>
 80058d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80058d8:	b1d8      	cbz	r0, 8005912 <__d2b+0x7e>
 80058da:	f1c0 0320 	rsb	r3, r0, #32
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	430b      	orrs	r3, r1
 80058e4:	40c2      	lsrs	r2, r0
 80058e6:	6163      	str	r3, [r4, #20]
 80058e8:	9201      	str	r2, [sp, #4]
 80058ea:	9b01      	ldr	r3, [sp, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bf0c      	ite	eq
 80058f0:	2201      	moveq	r2, #1
 80058f2:	2202      	movne	r2, #2
 80058f4:	61a3      	str	r3, [r4, #24]
 80058f6:	6122      	str	r2, [r4, #16]
 80058f8:	b1ad      	cbz	r5, 8005926 <__d2b+0x92>
 80058fa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80058fe:	4405      	add	r5, r0
 8005900:	6035      	str	r5, [r6, #0]
 8005902:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005908:	6018      	str	r0, [r3, #0]
 800590a:	4620      	mov	r0, r4
 800590c:	b002      	add	sp, #8
 800590e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005912:	6161      	str	r1, [r4, #20]
 8005914:	e7e9      	b.n	80058ea <__d2b+0x56>
 8005916:	a801      	add	r0, sp, #4
 8005918:	f7ff fd5b 	bl	80053d2 <__lo0bits>
 800591c:	9b01      	ldr	r3, [sp, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	6163      	str	r3, [r4, #20]
 8005922:	3020      	adds	r0, #32
 8005924:	e7e7      	b.n	80058f6 <__d2b+0x62>
 8005926:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800592a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800592e:	6030      	str	r0, [r6, #0]
 8005930:	6918      	ldr	r0, [r3, #16]
 8005932:	f7ff fd2f 	bl	8005394 <__hi0bits>
 8005936:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800593a:	e7e4      	b.n	8005906 <__d2b+0x72>
 800593c:	08006542 	.word	0x08006542
 8005940:	08006553 	.word	0x08006553

08005944 <__ssputs_r>:
 8005944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	461f      	mov	r7, r3
 800594a:	688e      	ldr	r6, [r1, #8]
 800594c:	4682      	mov	sl, r0
 800594e:	42be      	cmp	r6, r7
 8005950:	460c      	mov	r4, r1
 8005952:	4690      	mov	r8, r2
 8005954:	680b      	ldr	r3, [r1, #0]
 8005956:	d82d      	bhi.n	80059b4 <__ssputs_r+0x70>
 8005958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800595c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005960:	d026      	beq.n	80059b0 <__ssputs_r+0x6c>
 8005962:	6965      	ldr	r5, [r4, #20]
 8005964:	6909      	ldr	r1, [r1, #16]
 8005966:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800596a:	eba3 0901 	sub.w	r9, r3, r1
 800596e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005972:	1c7b      	adds	r3, r7, #1
 8005974:	444b      	add	r3, r9
 8005976:	106d      	asrs	r5, r5, #1
 8005978:	429d      	cmp	r5, r3
 800597a:	bf38      	it	cc
 800597c:	461d      	movcc	r5, r3
 800597e:	0553      	lsls	r3, r2, #21
 8005980:	d527      	bpl.n	80059d2 <__ssputs_r+0x8e>
 8005982:	4629      	mov	r1, r5
 8005984:	f7ff fbd2 	bl	800512c <_malloc_r>
 8005988:	4606      	mov	r6, r0
 800598a:	b360      	cbz	r0, 80059e6 <__ssputs_r+0xa2>
 800598c:	464a      	mov	r2, r9
 800598e:	6921      	ldr	r1, [r4, #16]
 8005990:	f000 fa02 	bl	8005d98 <memcpy>
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800599a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800599e:	81a3      	strh	r3, [r4, #12]
 80059a0:	6126      	str	r6, [r4, #16]
 80059a2:	444e      	add	r6, r9
 80059a4:	6026      	str	r6, [r4, #0]
 80059a6:	463e      	mov	r6, r7
 80059a8:	6165      	str	r5, [r4, #20]
 80059aa:	eba5 0509 	sub.w	r5, r5, r9
 80059ae:	60a5      	str	r5, [r4, #8]
 80059b0:	42be      	cmp	r6, r7
 80059b2:	d900      	bls.n	80059b6 <__ssputs_r+0x72>
 80059b4:	463e      	mov	r6, r7
 80059b6:	4632      	mov	r2, r6
 80059b8:	4641      	mov	r1, r8
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	f000 f9c2 	bl	8005d44 <memmove>
 80059c0:	2000      	movs	r0, #0
 80059c2:	68a3      	ldr	r3, [r4, #8]
 80059c4:	1b9b      	subs	r3, r3, r6
 80059c6:	60a3      	str	r3, [r4, #8]
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	4433      	add	r3, r6
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d2:	462a      	mov	r2, r5
 80059d4:	f000 fa32 	bl	8005e3c <_realloc_r>
 80059d8:	4606      	mov	r6, r0
 80059da:	2800      	cmp	r0, #0
 80059dc:	d1e0      	bne.n	80059a0 <__ssputs_r+0x5c>
 80059de:	4650      	mov	r0, sl
 80059e0:	6921      	ldr	r1, [r4, #16]
 80059e2:	f7ff fb31 	bl	8005048 <_free_r>
 80059e6:	230c      	movs	r3, #12
 80059e8:	f8ca 3000 	str.w	r3, [sl]
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295
 80059f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	e7e9      	b.n	80059ce <__ssputs_r+0x8a>
	...

080059fc <_svfiprintf_r>:
 80059fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a00:	4698      	mov	r8, r3
 8005a02:	898b      	ldrh	r3, [r1, #12]
 8005a04:	4607      	mov	r7, r0
 8005a06:	061b      	lsls	r3, r3, #24
 8005a08:	460d      	mov	r5, r1
 8005a0a:	4614      	mov	r4, r2
 8005a0c:	b09d      	sub	sp, #116	@ 0x74
 8005a0e:	d510      	bpl.n	8005a32 <_svfiprintf_r+0x36>
 8005a10:	690b      	ldr	r3, [r1, #16]
 8005a12:	b973      	cbnz	r3, 8005a32 <_svfiprintf_r+0x36>
 8005a14:	2140      	movs	r1, #64	@ 0x40
 8005a16:	f7ff fb89 	bl	800512c <_malloc_r>
 8005a1a:	6028      	str	r0, [r5, #0]
 8005a1c:	6128      	str	r0, [r5, #16]
 8005a1e:	b930      	cbnz	r0, 8005a2e <_svfiprintf_r+0x32>
 8005a20:	230c      	movs	r3, #12
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295
 8005a28:	b01d      	add	sp, #116	@ 0x74
 8005a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2e:	2340      	movs	r3, #64	@ 0x40
 8005a30:	616b      	str	r3, [r5, #20]
 8005a32:	2300      	movs	r3, #0
 8005a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a36:	2320      	movs	r3, #32
 8005a38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a3c:	2330      	movs	r3, #48	@ 0x30
 8005a3e:	f04f 0901 	mov.w	r9, #1
 8005a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a46:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005be0 <_svfiprintf_r+0x1e4>
 8005a4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a4e:	4623      	mov	r3, r4
 8005a50:	469a      	mov	sl, r3
 8005a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a56:	b10a      	cbz	r2, 8005a5c <_svfiprintf_r+0x60>
 8005a58:	2a25      	cmp	r2, #37	@ 0x25
 8005a5a:	d1f9      	bne.n	8005a50 <_svfiprintf_r+0x54>
 8005a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a60:	d00b      	beq.n	8005a7a <_svfiprintf_r+0x7e>
 8005a62:	465b      	mov	r3, fp
 8005a64:	4622      	mov	r2, r4
 8005a66:	4629      	mov	r1, r5
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f7ff ff6b 	bl	8005944 <__ssputs_r>
 8005a6e:	3001      	adds	r0, #1
 8005a70:	f000 80a7 	beq.w	8005bc2 <_svfiprintf_r+0x1c6>
 8005a74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a76:	445a      	add	r2, fp
 8005a78:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 809f 	beq.w	8005bc2 <_svfiprintf_r+0x1c6>
 8005a84:	2300      	movs	r3, #0
 8005a86:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a8e:	f10a 0a01 	add.w	sl, sl, #1
 8005a92:	9304      	str	r3, [sp, #16]
 8005a94:	9307      	str	r3, [sp, #28]
 8005a96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a9c:	4654      	mov	r4, sl
 8005a9e:	2205      	movs	r2, #5
 8005aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa4:	484e      	ldr	r0, [pc, #312]	@ (8005be0 <_svfiprintf_r+0x1e4>)
 8005aa6:	f7fe fc6e 	bl	8004386 <memchr>
 8005aaa:	9a04      	ldr	r2, [sp, #16]
 8005aac:	b9d8      	cbnz	r0, 8005ae6 <_svfiprintf_r+0xea>
 8005aae:	06d0      	lsls	r0, r2, #27
 8005ab0:	bf44      	itt	mi
 8005ab2:	2320      	movmi	r3, #32
 8005ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ab8:	0711      	lsls	r1, r2, #28
 8005aba:	bf44      	itt	mi
 8005abc:	232b      	movmi	r3, #43	@ 0x2b
 8005abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ac8:	d015      	beq.n	8005af6 <_svfiprintf_r+0xfa>
 8005aca:	4654      	mov	r4, sl
 8005acc:	2000      	movs	r0, #0
 8005ace:	f04f 0c0a 	mov.w	ip, #10
 8005ad2:	9a07      	ldr	r2, [sp, #28]
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ada:	3b30      	subs	r3, #48	@ 0x30
 8005adc:	2b09      	cmp	r3, #9
 8005ade:	d94b      	bls.n	8005b78 <_svfiprintf_r+0x17c>
 8005ae0:	b1b0      	cbz	r0, 8005b10 <_svfiprintf_r+0x114>
 8005ae2:	9207      	str	r2, [sp, #28]
 8005ae4:	e014      	b.n	8005b10 <_svfiprintf_r+0x114>
 8005ae6:	eba0 0308 	sub.w	r3, r0, r8
 8005aea:	fa09 f303 	lsl.w	r3, r9, r3
 8005aee:	4313      	orrs	r3, r2
 8005af0:	46a2      	mov	sl, r4
 8005af2:	9304      	str	r3, [sp, #16]
 8005af4:	e7d2      	b.n	8005a9c <_svfiprintf_r+0xa0>
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	1d19      	adds	r1, r3, #4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	9103      	str	r1, [sp, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bfbb      	ittet	lt
 8005b02:	425b      	neglt	r3, r3
 8005b04:	f042 0202 	orrlt.w	r2, r2, #2
 8005b08:	9307      	strge	r3, [sp, #28]
 8005b0a:	9307      	strlt	r3, [sp, #28]
 8005b0c:	bfb8      	it	lt
 8005b0e:	9204      	strlt	r2, [sp, #16]
 8005b10:	7823      	ldrb	r3, [r4, #0]
 8005b12:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b14:	d10a      	bne.n	8005b2c <_svfiprintf_r+0x130>
 8005b16:	7863      	ldrb	r3, [r4, #1]
 8005b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b1a:	d132      	bne.n	8005b82 <_svfiprintf_r+0x186>
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	3402      	adds	r4, #2
 8005b20:	1d1a      	adds	r2, r3, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	9203      	str	r2, [sp, #12]
 8005b26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b2a:	9305      	str	r3, [sp, #20]
 8005b2c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005be4 <_svfiprintf_r+0x1e8>
 8005b30:	2203      	movs	r2, #3
 8005b32:	4650      	mov	r0, sl
 8005b34:	7821      	ldrb	r1, [r4, #0]
 8005b36:	f7fe fc26 	bl	8004386 <memchr>
 8005b3a:	b138      	cbz	r0, 8005b4c <_svfiprintf_r+0x150>
 8005b3c:	2240      	movs	r2, #64	@ 0x40
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	eba0 000a 	sub.w	r0, r0, sl
 8005b44:	4082      	lsls	r2, r0
 8005b46:	4313      	orrs	r3, r2
 8005b48:	3401      	adds	r4, #1
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b50:	2206      	movs	r2, #6
 8005b52:	4825      	ldr	r0, [pc, #148]	@ (8005be8 <_svfiprintf_r+0x1ec>)
 8005b54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b58:	f7fe fc15 	bl	8004386 <memchr>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d036      	beq.n	8005bce <_svfiprintf_r+0x1d2>
 8005b60:	4b22      	ldr	r3, [pc, #136]	@ (8005bec <_svfiprintf_r+0x1f0>)
 8005b62:	bb1b      	cbnz	r3, 8005bac <_svfiprintf_r+0x1b0>
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	3307      	adds	r3, #7
 8005b68:	f023 0307 	bic.w	r3, r3, #7
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	9303      	str	r3, [sp, #12]
 8005b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b72:	4433      	add	r3, r6
 8005b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b76:	e76a      	b.n	8005a4e <_svfiprintf_r+0x52>
 8005b78:	460c      	mov	r4, r1
 8005b7a:	2001      	movs	r0, #1
 8005b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b80:	e7a8      	b.n	8005ad4 <_svfiprintf_r+0xd8>
 8005b82:	2300      	movs	r3, #0
 8005b84:	f04f 0c0a 	mov.w	ip, #10
 8005b88:	4619      	mov	r1, r3
 8005b8a:	3401      	adds	r4, #1
 8005b8c:	9305      	str	r3, [sp, #20]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b94:	3a30      	subs	r2, #48	@ 0x30
 8005b96:	2a09      	cmp	r2, #9
 8005b98:	d903      	bls.n	8005ba2 <_svfiprintf_r+0x1a6>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0c6      	beq.n	8005b2c <_svfiprintf_r+0x130>
 8005b9e:	9105      	str	r1, [sp, #20]
 8005ba0:	e7c4      	b.n	8005b2c <_svfiprintf_r+0x130>
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005baa:	e7f0      	b.n	8005b8e <_svfiprintf_r+0x192>
 8005bac:	ab03      	add	r3, sp, #12
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf0 <_svfiprintf_r+0x1f4>)
 8005bb6:	a904      	add	r1, sp, #16
 8005bb8:	f7fd fe6a 	bl	8003890 <_printf_float>
 8005bbc:	1c42      	adds	r2, r0, #1
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	d1d6      	bne.n	8005b70 <_svfiprintf_r+0x174>
 8005bc2:	89ab      	ldrh	r3, [r5, #12]
 8005bc4:	065b      	lsls	r3, r3, #25
 8005bc6:	f53f af2d 	bmi.w	8005a24 <_svfiprintf_r+0x28>
 8005bca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bcc:	e72c      	b.n	8005a28 <_svfiprintf_r+0x2c>
 8005bce:	ab03      	add	r3, sp, #12
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	462a      	mov	r2, r5
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	4b06      	ldr	r3, [pc, #24]	@ (8005bf0 <_svfiprintf_r+0x1f4>)
 8005bd8:	a904      	add	r1, sp, #16
 8005bda:	f7fe f8f7 	bl	8003dcc <_printf_i>
 8005bde:	e7ed      	b.n	8005bbc <_svfiprintf_r+0x1c0>
 8005be0:	080066a8 	.word	0x080066a8
 8005be4:	080066ae 	.word	0x080066ae
 8005be8:	080066b2 	.word	0x080066b2
 8005bec:	08003891 	.word	0x08003891
 8005bf0:	08005945 	.word	0x08005945

08005bf4 <__sflush_r>:
 8005bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	0716      	lsls	r6, r2, #28
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	460c      	mov	r4, r1
 8005c00:	d454      	bmi.n	8005cac <__sflush_r+0xb8>
 8005c02:	684b      	ldr	r3, [r1, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	dc02      	bgt.n	8005c0e <__sflush_r+0x1a>
 8005c08:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	dd48      	ble.n	8005ca0 <__sflush_r+0xac>
 8005c0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c10:	2e00      	cmp	r6, #0
 8005c12:	d045      	beq.n	8005ca0 <__sflush_r+0xac>
 8005c14:	2300      	movs	r3, #0
 8005c16:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c1a:	682f      	ldr	r7, [r5, #0]
 8005c1c:	6a21      	ldr	r1, [r4, #32]
 8005c1e:	602b      	str	r3, [r5, #0]
 8005c20:	d030      	beq.n	8005c84 <__sflush_r+0x90>
 8005c22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	0759      	lsls	r1, r3, #29
 8005c28:	d505      	bpl.n	8005c36 <__sflush_r+0x42>
 8005c2a:	6863      	ldr	r3, [r4, #4]
 8005c2c:	1ad2      	subs	r2, r2, r3
 8005c2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c30:	b10b      	cbz	r3, 8005c36 <__sflush_r+0x42>
 8005c32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c34:	1ad2      	subs	r2, r2, r3
 8005c36:	2300      	movs	r3, #0
 8005c38:	4628      	mov	r0, r5
 8005c3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c3c:	6a21      	ldr	r1, [r4, #32]
 8005c3e:	47b0      	blx	r6
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	d106      	bne.n	8005c54 <__sflush_r+0x60>
 8005c46:	6829      	ldr	r1, [r5, #0]
 8005c48:	291d      	cmp	r1, #29
 8005c4a:	d82b      	bhi.n	8005ca4 <__sflush_r+0xb0>
 8005c4c:	4a28      	ldr	r2, [pc, #160]	@ (8005cf0 <__sflush_r+0xfc>)
 8005c4e:	410a      	asrs	r2, r1
 8005c50:	07d6      	lsls	r6, r2, #31
 8005c52:	d427      	bmi.n	8005ca4 <__sflush_r+0xb0>
 8005c54:	2200      	movs	r2, #0
 8005c56:	6062      	str	r2, [r4, #4]
 8005c58:	6922      	ldr	r2, [r4, #16]
 8005c5a:	04d9      	lsls	r1, r3, #19
 8005c5c:	6022      	str	r2, [r4, #0]
 8005c5e:	d504      	bpl.n	8005c6a <__sflush_r+0x76>
 8005c60:	1c42      	adds	r2, r0, #1
 8005c62:	d101      	bne.n	8005c68 <__sflush_r+0x74>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	b903      	cbnz	r3, 8005c6a <__sflush_r+0x76>
 8005c68:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c6c:	602f      	str	r7, [r5, #0]
 8005c6e:	b1b9      	cbz	r1, 8005ca0 <__sflush_r+0xac>
 8005c70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c74:	4299      	cmp	r1, r3
 8005c76:	d002      	beq.n	8005c7e <__sflush_r+0x8a>
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f7ff f9e5 	bl	8005048 <_free_r>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c82:	e00d      	b.n	8005ca0 <__sflush_r+0xac>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4628      	mov	r0, r5
 8005c88:	47b0      	blx	r6
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	1c50      	adds	r0, r2, #1
 8005c8e:	d1c9      	bne.n	8005c24 <__sflush_r+0x30>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0c6      	beq.n	8005c24 <__sflush_r+0x30>
 8005c96:	2b1d      	cmp	r3, #29
 8005c98:	d001      	beq.n	8005c9e <__sflush_r+0xaa>
 8005c9a:	2b16      	cmp	r3, #22
 8005c9c:	d11d      	bne.n	8005cda <__sflush_r+0xe6>
 8005c9e:	602f      	str	r7, [r5, #0]
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	e021      	b.n	8005ce8 <__sflush_r+0xf4>
 8005ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ca8:	b21b      	sxth	r3, r3
 8005caa:	e01a      	b.n	8005ce2 <__sflush_r+0xee>
 8005cac:	690f      	ldr	r7, [r1, #16]
 8005cae:	2f00      	cmp	r7, #0
 8005cb0:	d0f6      	beq.n	8005ca0 <__sflush_r+0xac>
 8005cb2:	0793      	lsls	r3, r2, #30
 8005cb4:	bf18      	it	ne
 8005cb6:	2300      	movne	r3, #0
 8005cb8:	680e      	ldr	r6, [r1, #0]
 8005cba:	bf08      	it	eq
 8005cbc:	694b      	ldreq	r3, [r1, #20]
 8005cbe:	1bf6      	subs	r6, r6, r7
 8005cc0:	600f      	str	r7, [r1, #0]
 8005cc2:	608b      	str	r3, [r1, #8]
 8005cc4:	2e00      	cmp	r6, #0
 8005cc6:	ddeb      	ble.n	8005ca0 <__sflush_r+0xac>
 8005cc8:	4633      	mov	r3, r6
 8005cca:	463a      	mov	r2, r7
 8005ccc:	4628      	mov	r0, r5
 8005cce:	6a21      	ldr	r1, [r4, #32]
 8005cd0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005cd4:	47e0      	blx	ip
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	dc07      	bgt.n	8005cea <__sflush_r+0xf6>
 8005cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cea:	4407      	add	r7, r0
 8005cec:	1a36      	subs	r6, r6, r0
 8005cee:	e7e9      	b.n	8005cc4 <__sflush_r+0xd0>
 8005cf0:	dfbffffe 	.word	0xdfbffffe

08005cf4 <_fflush_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	690b      	ldr	r3, [r1, #16]
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	b913      	cbnz	r3, 8005d04 <_fflush_r+0x10>
 8005cfe:	2500      	movs	r5, #0
 8005d00:	4628      	mov	r0, r5
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	b118      	cbz	r0, 8005d0e <_fflush_r+0x1a>
 8005d06:	6a03      	ldr	r3, [r0, #32]
 8005d08:	b90b      	cbnz	r3, 8005d0e <_fflush_r+0x1a>
 8005d0a:	f7fe fa0b 	bl	8004124 <__sinit>
 8005d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f3      	beq.n	8005cfe <_fflush_r+0xa>
 8005d16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d18:	07d0      	lsls	r0, r2, #31
 8005d1a:	d404      	bmi.n	8005d26 <_fflush_r+0x32>
 8005d1c:	0599      	lsls	r1, r3, #22
 8005d1e:	d402      	bmi.n	8005d26 <_fflush_r+0x32>
 8005d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d22:	f7fe fb2e 	bl	8004382 <__retarget_lock_acquire_recursive>
 8005d26:	4628      	mov	r0, r5
 8005d28:	4621      	mov	r1, r4
 8005d2a:	f7ff ff63 	bl	8005bf4 <__sflush_r>
 8005d2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d30:	4605      	mov	r5, r0
 8005d32:	07da      	lsls	r2, r3, #31
 8005d34:	d4e4      	bmi.n	8005d00 <_fflush_r+0xc>
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	059b      	lsls	r3, r3, #22
 8005d3a:	d4e1      	bmi.n	8005d00 <_fflush_r+0xc>
 8005d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d3e:	f7fe fb21 	bl	8004384 <__retarget_lock_release_recursive>
 8005d42:	e7dd      	b.n	8005d00 <_fflush_r+0xc>

08005d44 <memmove>:
 8005d44:	4288      	cmp	r0, r1
 8005d46:	b510      	push	{r4, lr}
 8005d48:	eb01 0402 	add.w	r4, r1, r2
 8005d4c:	d902      	bls.n	8005d54 <memmove+0x10>
 8005d4e:	4284      	cmp	r4, r0
 8005d50:	4623      	mov	r3, r4
 8005d52:	d807      	bhi.n	8005d64 <memmove+0x20>
 8005d54:	1e43      	subs	r3, r0, #1
 8005d56:	42a1      	cmp	r1, r4
 8005d58:	d008      	beq.n	8005d6c <memmove+0x28>
 8005d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d62:	e7f8      	b.n	8005d56 <memmove+0x12>
 8005d64:	4601      	mov	r1, r0
 8005d66:	4402      	add	r2, r0
 8005d68:	428a      	cmp	r2, r1
 8005d6a:	d100      	bne.n	8005d6e <memmove+0x2a>
 8005d6c:	bd10      	pop	{r4, pc}
 8005d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d76:	e7f7      	b.n	8005d68 <memmove+0x24>

08005d78 <_sbrk_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4d05      	ldr	r5, [pc, #20]	@ (8005d94 <_sbrk_r+0x1c>)
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f7fb f9fc 	bl	8001180 <_sbrk>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_sbrk_r+0x1a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_sbrk_r+0x1a>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	20000444 	.word	0x20000444

08005d98 <memcpy>:
 8005d98:	440a      	add	r2, r1
 8005d9a:	4291      	cmp	r1, r2
 8005d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005da0:	d100      	bne.n	8005da4 <memcpy+0xc>
 8005da2:	4770      	bx	lr
 8005da4:	b510      	push	{r4, lr}
 8005da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005daa:	4291      	cmp	r1, r2
 8005dac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005db0:	d1f9      	bne.n	8005da6 <memcpy+0xe>
 8005db2:	bd10      	pop	{r4, pc}

08005db4 <__assert_func>:
 8005db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005db6:	4614      	mov	r4, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <__assert_func+0x2c>)
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68d8      	ldr	r0, [r3, #12]
 8005dc2:	b954      	cbnz	r4, 8005dda <__assert_func+0x26>
 8005dc4:	4b07      	ldr	r3, [pc, #28]	@ (8005de4 <__assert_func+0x30>)
 8005dc6:	461c      	mov	r4, r3
 8005dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dcc:	9100      	str	r1, [sp, #0]
 8005dce:	462b      	mov	r3, r5
 8005dd0:	4905      	ldr	r1, [pc, #20]	@ (8005de8 <__assert_func+0x34>)
 8005dd2:	f000 f86f 	bl	8005eb4 <fiprintf>
 8005dd6:	f000 f87f 	bl	8005ed8 <abort>
 8005dda:	4b04      	ldr	r3, [pc, #16]	@ (8005dec <__assert_func+0x38>)
 8005ddc:	e7f4      	b.n	8005dc8 <__assert_func+0x14>
 8005dde:	bf00      	nop
 8005de0:	20000018 	.word	0x20000018
 8005de4:	080066fe 	.word	0x080066fe
 8005de8:	080066d0 	.word	0x080066d0
 8005dec:	080066c3 	.word	0x080066c3

08005df0 <_calloc_r>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	fba1 5402 	umull	r5, r4, r1, r2
 8005df6:	b93c      	cbnz	r4, 8005e08 <_calloc_r+0x18>
 8005df8:	4629      	mov	r1, r5
 8005dfa:	f7ff f997 	bl	800512c <_malloc_r>
 8005dfe:	4606      	mov	r6, r0
 8005e00:	b928      	cbnz	r0, 8005e0e <_calloc_r+0x1e>
 8005e02:	2600      	movs	r6, #0
 8005e04:	4630      	mov	r0, r6
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
 8005e08:	220c      	movs	r2, #12
 8005e0a:	6002      	str	r2, [r0, #0]
 8005e0c:	e7f9      	b.n	8005e02 <_calloc_r+0x12>
 8005e0e:	462a      	mov	r2, r5
 8005e10:	4621      	mov	r1, r4
 8005e12:	f7fe fa39 	bl	8004288 <memset>
 8005e16:	e7f5      	b.n	8005e04 <_calloc_r+0x14>

08005e18 <__ascii_mbtowc>:
 8005e18:	b082      	sub	sp, #8
 8005e1a:	b901      	cbnz	r1, 8005e1e <__ascii_mbtowc+0x6>
 8005e1c:	a901      	add	r1, sp, #4
 8005e1e:	b142      	cbz	r2, 8005e32 <__ascii_mbtowc+0x1a>
 8005e20:	b14b      	cbz	r3, 8005e36 <__ascii_mbtowc+0x1e>
 8005e22:	7813      	ldrb	r3, [r2, #0]
 8005e24:	600b      	str	r3, [r1, #0]
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	1e10      	subs	r0, r2, #0
 8005e2a:	bf18      	it	ne
 8005e2c:	2001      	movne	r0, #1
 8005e2e:	b002      	add	sp, #8
 8005e30:	4770      	bx	lr
 8005e32:	4610      	mov	r0, r2
 8005e34:	e7fb      	b.n	8005e2e <__ascii_mbtowc+0x16>
 8005e36:	f06f 0001 	mvn.w	r0, #1
 8005e3a:	e7f8      	b.n	8005e2e <__ascii_mbtowc+0x16>

08005e3c <_realloc_r>:
 8005e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e40:	4680      	mov	r8, r0
 8005e42:	4615      	mov	r5, r2
 8005e44:	460c      	mov	r4, r1
 8005e46:	b921      	cbnz	r1, 8005e52 <_realloc_r+0x16>
 8005e48:	4611      	mov	r1, r2
 8005e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4e:	f7ff b96d 	b.w	800512c <_malloc_r>
 8005e52:	b92a      	cbnz	r2, 8005e60 <_realloc_r+0x24>
 8005e54:	f7ff f8f8 	bl	8005048 <_free_r>
 8005e58:	2400      	movs	r4, #0
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e60:	f000 f841 	bl	8005ee6 <_malloc_usable_size_r>
 8005e64:	4285      	cmp	r5, r0
 8005e66:	4606      	mov	r6, r0
 8005e68:	d802      	bhi.n	8005e70 <_realloc_r+0x34>
 8005e6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e6e:	d8f4      	bhi.n	8005e5a <_realloc_r+0x1e>
 8005e70:	4629      	mov	r1, r5
 8005e72:	4640      	mov	r0, r8
 8005e74:	f7ff f95a 	bl	800512c <_malloc_r>
 8005e78:	4607      	mov	r7, r0
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d0ec      	beq.n	8005e58 <_realloc_r+0x1c>
 8005e7e:	42b5      	cmp	r5, r6
 8005e80:	462a      	mov	r2, r5
 8005e82:	4621      	mov	r1, r4
 8005e84:	bf28      	it	cs
 8005e86:	4632      	movcs	r2, r6
 8005e88:	f7ff ff86 	bl	8005d98 <memcpy>
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4640      	mov	r0, r8
 8005e90:	f7ff f8da 	bl	8005048 <_free_r>
 8005e94:	463c      	mov	r4, r7
 8005e96:	e7e0      	b.n	8005e5a <_realloc_r+0x1e>

08005e98 <__ascii_wctomb>:
 8005e98:	4603      	mov	r3, r0
 8005e9a:	4608      	mov	r0, r1
 8005e9c:	b141      	cbz	r1, 8005eb0 <__ascii_wctomb+0x18>
 8005e9e:	2aff      	cmp	r2, #255	@ 0xff
 8005ea0:	d904      	bls.n	8005eac <__ascii_wctomb+0x14>
 8005ea2:	228a      	movs	r2, #138	@ 0x8a
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	4770      	bx	lr
 8005eac:	2001      	movs	r0, #1
 8005eae:	700a      	strb	r2, [r1, #0]
 8005eb0:	4770      	bx	lr
	...

08005eb4 <fiprintf>:
 8005eb4:	b40e      	push	{r1, r2, r3}
 8005eb6:	b503      	push	{r0, r1, lr}
 8005eb8:	4601      	mov	r1, r0
 8005eba:	ab03      	add	r3, sp, #12
 8005ebc:	4805      	ldr	r0, [pc, #20]	@ (8005ed4 <fiprintf+0x20>)
 8005ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec2:	6800      	ldr	r0, [r0, #0]
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	f000 f83d 	bl	8005f44 <_vfiprintf_r>
 8005eca:	b002      	add	sp, #8
 8005ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ed0:	b003      	add	sp, #12
 8005ed2:	4770      	bx	lr
 8005ed4:	20000018 	.word	0x20000018

08005ed8 <abort>:
 8005ed8:	2006      	movs	r0, #6
 8005eda:	b508      	push	{r3, lr}
 8005edc:	f000 fa06 	bl	80062ec <raise>
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	f7fb f8d8 	bl	8001096 <_exit>

08005ee6 <_malloc_usable_size_r>:
 8005ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eea:	1f18      	subs	r0, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfbc      	itt	lt
 8005ef0:	580b      	ldrlt	r3, [r1, r0]
 8005ef2:	18c0      	addlt	r0, r0, r3
 8005ef4:	4770      	bx	lr

08005ef6 <__sfputc_r>:
 8005ef6:	6893      	ldr	r3, [r2, #8]
 8005ef8:	b410      	push	{r4}
 8005efa:	3b01      	subs	r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	6093      	str	r3, [r2, #8]
 8005f00:	da07      	bge.n	8005f12 <__sfputc_r+0x1c>
 8005f02:	6994      	ldr	r4, [r2, #24]
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	db01      	blt.n	8005f0c <__sfputc_r+0x16>
 8005f08:	290a      	cmp	r1, #10
 8005f0a:	d102      	bne.n	8005f12 <__sfputc_r+0x1c>
 8005f0c:	bc10      	pop	{r4}
 8005f0e:	f000 b931 	b.w	8006174 <__swbuf_r>
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	1c58      	adds	r0, r3, #1
 8005f16:	6010      	str	r0, [r2, #0]
 8005f18:	7019      	strb	r1, [r3, #0]
 8005f1a:	4608      	mov	r0, r1
 8005f1c:	bc10      	pop	{r4}
 8005f1e:	4770      	bx	lr

08005f20 <__sfputs_r>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	4614      	mov	r4, r2
 8005f28:	18d5      	adds	r5, r2, r3
 8005f2a:	42ac      	cmp	r4, r5
 8005f2c:	d101      	bne.n	8005f32 <__sfputs_r+0x12>
 8005f2e:	2000      	movs	r0, #0
 8005f30:	e007      	b.n	8005f42 <__sfputs_r+0x22>
 8005f32:	463a      	mov	r2, r7
 8005f34:	4630      	mov	r0, r6
 8005f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f3a:	f7ff ffdc 	bl	8005ef6 <__sfputc_r>
 8005f3e:	1c43      	adds	r3, r0, #1
 8005f40:	d1f3      	bne.n	8005f2a <__sfputs_r+0xa>
 8005f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f44 <_vfiprintf_r>:
 8005f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f48:	460d      	mov	r5, r1
 8005f4a:	4614      	mov	r4, r2
 8005f4c:	4698      	mov	r8, r3
 8005f4e:	4606      	mov	r6, r0
 8005f50:	b09d      	sub	sp, #116	@ 0x74
 8005f52:	b118      	cbz	r0, 8005f5c <_vfiprintf_r+0x18>
 8005f54:	6a03      	ldr	r3, [r0, #32]
 8005f56:	b90b      	cbnz	r3, 8005f5c <_vfiprintf_r+0x18>
 8005f58:	f7fe f8e4 	bl	8004124 <__sinit>
 8005f5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f5e:	07d9      	lsls	r1, r3, #31
 8005f60:	d405      	bmi.n	8005f6e <_vfiprintf_r+0x2a>
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	059a      	lsls	r2, r3, #22
 8005f66:	d402      	bmi.n	8005f6e <_vfiprintf_r+0x2a>
 8005f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f6a:	f7fe fa0a 	bl	8004382 <__retarget_lock_acquire_recursive>
 8005f6e:	89ab      	ldrh	r3, [r5, #12]
 8005f70:	071b      	lsls	r3, r3, #28
 8005f72:	d501      	bpl.n	8005f78 <_vfiprintf_r+0x34>
 8005f74:	692b      	ldr	r3, [r5, #16]
 8005f76:	b99b      	cbnz	r3, 8005fa0 <_vfiprintf_r+0x5c>
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f000 f938 	bl	80061f0 <__swsetup_r>
 8005f80:	b170      	cbz	r0, 8005fa0 <_vfiprintf_r+0x5c>
 8005f82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f84:	07dc      	lsls	r4, r3, #31
 8005f86:	d504      	bpl.n	8005f92 <_vfiprintf_r+0x4e>
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	b01d      	add	sp, #116	@ 0x74
 8005f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f92:	89ab      	ldrh	r3, [r5, #12]
 8005f94:	0598      	lsls	r0, r3, #22
 8005f96:	d4f7      	bmi.n	8005f88 <_vfiprintf_r+0x44>
 8005f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f9a:	f7fe f9f3 	bl	8004384 <__retarget_lock_release_recursive>
 8005f9e:	e7f3      	b.n	8005f88 <_vfiprintf_r+0x44>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa4:	2320      	movs	r3, #32
 8005fa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005faa:	2330      	movs	r3, #48	@ 0x30
 8005fac:	f04f 0901 	mov.w	r9, #1
 8005fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fb4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006160 <_vfiprintf_r+0x21c>
 8005fb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fbc:	4623      	mov	r3, r4
 8005fbe:	469a      	mov	sl, r3
 8005fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fc4:	b10a      	cbz	r2, 8005fca <_vfiprintf_r+0x86>
 8005fc6:	2a25      	cmp	r2, #37	@ 0x25
 8005fc8:	d1f9      	bne.n	8005fbe <_vfiprintf_r+0x7a>
 8005fca:	ebba 0b04 	subs.w	fp, sl, r4
 8005fce:	d00b      	beq.n	8005fe8 <_vfiprintf_r+0xa4>
 8005fd0:	465b      	mov	r3, fp
 8005fd2:	4622      	mov	r2, r4
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f7ff ffa2 	bl	8005f20 <__sfputs_r>
 8005fdc:	3001      	adds	r0, #1
 8005fde:	f000 80a7 	beq.w	8006130 <_vfiprintf_r+0x1ec>
 8005fe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe4:	445a      	add	r2, fp
 8005fe6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 809f 	beq.w	8006130 <_vfiprintf_r+0x1ec>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ffc:	f10a 0a01 	add.w	sl, sl, #1
 8006000:	9304      	str	r3, [sp, #16]
 8006002:	9307      	str	r3, [sp, #28]
 8006004:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006008:	931a      	str	r3, [sp, #104]	@ 0x68
 800600a:	4654      	mov	r4, sl
 800600c:	2205      	movs	r2, #5
 800600e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006012:	4853      	ldr	r0, [pc, #332]	@ (8006160 <_vfiprintf_r+0x21c>)
 8006014:	f7fe f9b7 	bl	8004386 <memchr>
 8006018:	9a04      	ldr	r2, [sp, #16]
 800601a:	b9d8      	cbnz	r0, 8006054 <_vfiprintf_r+0x110>
 800601c:	06d1      	lsls	r1, r2, #27
 800601e:	bf44      	itt	mi
 8006020:	2320      	movmi	r3, #32
 8006022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006026:	0713      	lsls	r3, r2, #28
 8006028:	bf44      	itt	mi
 800602a:	232b      	movmi	r3, #43	@ 0x2b
 800602c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006030:	f89a 3000 	ldrb.w	r3, [sl]
 8006034:	2b2a      	cmp	r3, #42	@ 0x2a
 8006036:	d015      	beq.n	8006064 <_vfiprintf_r+0x120>
 8006038:	4654      	mov	r4, sl
 800603a:	2000      	movs	r0, #0
 800603c:	f04f 0c0a 	mov.w	ip, #10
 8006040:	9a07      	ldr	r2, [sp, #28]
 8006042:	4621      	mov	r1, r4
 8006044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006048:	3b30      	subs	r3, #48	@ 0x30
 800604a:	2b09      	cmp	r3, #9
 800604c:	d94b      	bls.n	80060e6 <_vfiprintf_r+0x1a2>
 800604e:	b1b0      	cbz	r0, 800607e <_vfiprintf_r+0x13a>
 8006050:	9207      	str	r2, [sp, #28]
 8006052:	e014      	b.n	800607e <_vfiprintf_r+0x13a>
 8006054:	eba0 0308 	sub.w	r3, r0, r8
 8006058:	fa09 f303 	lsl.w	r3, r9, r3
 800605c:	4313      	orrs	r3, r2
 800605e:	46a2      	mov	sl, r4
 8006060:	9304      	str	r3, [sp, #16]
 8006062:	e7d2      	b.n	800600a <_vfiprintf_r+0xc6>
 8006064:	9b03      	ldr	r3, [sp, #12]
 8006066:	1d19      	adds	r1, r3, #4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	9103      	str	r1, [sp, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	bfbb      	ittet	lt
 8006070:	425b      	neglt	r3, r3
 8006072:	f042 0202 	orrlt.w	r2, r2, #2
 8006076:	9307      	strge	r3, [sp, #28]
 8006078:	9307      	strlt	r3, [sp, #28]
 800607a:	bfb8      	it	lt
 800607c:	9204      	strlt	r2, [sp, #16]
 800607e:	7823      	ldrb	r3, [r4, #0]
 8006080:	2b2e      	cmp	r3, #46	@ 0x2e
 8006082:	d10a      	bne.n	800609a <_vfiprintf_r+0x156>
 8006084:	7863      	ldrb	r3, [r4, #1]
 8006086:	2b2a      	cmp	r3, #42	@ 0x2a
 8006088:	d132      	bne.n	80060f0 <_vfiprintf_r+0x1ac>
 800608a:	9b03      	ldr	r3, [sp, #12]
 800608c:	3402      	adds	r4, #2
 800608e:	1d1a      	adds	r2, r3, #4
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	9203      	str	r2, [sp, #12]
 8006094:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006098:	9305      	str	r3, [sp, #20]
 800609a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006164 <_vfiprintf_r+0x220>
 800609e:	2203      	movs	r2, #3
 80060a0:	4650      	mov	r0, sl
 80060a2:	7821      	ldrb	r1, [r4, #0]
 80060a4:	f7fe f96f 	bl	8004386 <memchr>
 80060a8:	b138      	cbz	r0, 80060ba <_vfiprintf_r+0x176>
 80060aa:	2240      	movs	r2, #64	@ 0x40
 80060ac:	9b04      	ldr	r3, [sp, #16]
 80060ae:	eba0 000a 	sub.w	r0, r0, sl
 80060b2:	4082      	lsls	r2, r0
 80060b4:	4313      	orrs	r3, r2
 80060b6:	3401      	adds	r4, #1
 80060b8:	9304      	str	r3, [sp, #16]
 80060ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060be:	2206      	movs	r2, #6
 80060c0:	4829      	ldr	r0, [pc, #164]	@ (8006168 <_vfiprintf_r+0x224>)
 80060c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060c6:	f7fe f95e 	bl	8004386 <memchr>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d03f      	beq.n	800614e <_vfiprintf_r+0x20a>
 80060ce:	4b27      	ldr	r3, [pc, #156]	@ (800616c <_vfiprintf_r+0x228>)
 80060d0:	bb1b      	cbnz	r3, 800611a <_vfiprintf_r+0x1d6>
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	3307      	adds	r3, #7
 80060d6:	f023 0307 	bic.w	r3, r3, #7
 80060da:	3308      	adds	r3, #8
 80060dc:	9303      	str	r3, [sp, #12]
 80060de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e0:	443b      	add	r3, r7
 80060e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e4:	e76a      	b.n	8005fbc <_vfiprintf_r+0x78>
 80060e6:	460c      	mov	r4, r1
 80060e8:	2001      	movs	r0, #1
 80060ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80060ee:	e7a8      	b.n	8006042 <_vfiprintf_r+0xfe>
 80060f0:	2300      	movs	r3, #0
 80060f2:	f04f 0c0a 	mov.w	ip, #10
 80060f6:	4619      	mov	r1, r3
 80060f8:	3401      	adds	r4, #1
 80060fa:	9305      	str	r3, [sp, #20]
 80060fc:	4620      	mov	r0, r4
 80060fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006102:	3a30      	subs	r2, #48	@ 0x30
 8006104:	2a09      	cmp	r2, #9
 8006106:	d903      	bls.n	8006110 <_vfiprintf_r+0x1cc>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0c6      	beq.n	800609a <_vfiprintf_r+0x156>
 800610c:	9105      	str	r1, [sp, #20]
 800610e:	e7c4      	b.n	800609a <_vfiprintf_r+0x156>
 8006110:	4604      	mov	r4, r0
 8006112:	2301      	movs	r3, #1
 8006114:	fb0c 2101 	mla	r1, ip, r1, r2
 8006118:	e7f0      	b.n	80060fc <_vfiprintf_r+0x1b8>
 800611a:	ab03      	add	r3, sp, #12
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	462a      	mov	r2, r5
 8006120:	4630      	mov	r0, r6
 8006122:	4b13      	ldr	r3, [pc, #76]	@ (8006170 <_vfiprintf_r+0x22c>)
 8006124:	a904      	add	r1, sp, #16
 8006126:	f7fd fbb3 	bl	8003890 <_printf_float>
 800612a:	4607      	mov	r7, r0
 800612c:	1c78      	adds	r0, r7, #1
 800612e:	d1d6      	bne.n	80060de <_vfiprintf_r+0x19a>
 8006130:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006132:	07d9      	lsls	r1, r3, #31
 8006134:	d405      	bmi.n	8006142 <_vfiprintf_r+0x1fe>
 8006136:	89ab      	ldrh	r3, [r5, #12]
 8006138:	059a      	lsls	r2, r3, #22
 800613a:	d402      	bmi.n	8006142 <_vfiprintf_r+0x1fe>
 800613c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800613e:	f7fe f921 	bl	8004384 <__retarget_lock_release_recursive>
 8006142:	89ab      	ldrh	r3, [r5, #12]
 8006144:	065b      	lsls	r3, r3, #25
 8006146:	f53f af1f 	bmi.w	8005f88 <_vfiprintf_r+0x44>
 800614a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800614c:	e71e      	b.n	8005f8c <_vfiprintf_r+0x48>
 800614e:	ab03      	add	r3, sp, #12
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	462a      	mov	r2, r5
 8006154:	4630      	mov	r0, r6
 8006156:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <_vfiprintf_r+0x22c>)
 8006158:	a904      	add	r1, sp, #16
 800615a:	f7fd fe37 	bl	8003dcc <_printf_i>
 800615e:	e7e4      	b.n	800612a <_vfiprintf_r+0x1e6>
 8006160:	080066a8 	.word	0x080066a8
 8006164:	080066ae 	.word	0x080066ae
 8006168:	080066b2 	.word	0x080066b2
 800616c:	08003891 	.word	0x08003891
 8006170:	08005f21 	.word	0x08005f21

08006174 <__swbuf_r>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	460e      	mov	r6, r1
 8006178:	4614      	mov	r4, r2
 800617a:	4605      	mov	r5, r0
 800617c:	b118      	cbz	r0, 8006186 <__swbuf_r+0x12>
 800617e:	6a03      	ldr	r3, [r0, #32]
 8006180:	b90b      	cbnz	r3, 8006186 <__swbuf_r+0x12>
 8006182:	f7fd ffcf 	bl	8004124 <__sinit>
 8006186:	69a3      	ldr	r3, [r4, #24]
 8006188:	60a3      	str	r3, [r4, #8]
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	071a      	lsls	r2, r3, #28
 800618e:	d501      	bpl.n	8006194 <__swbuf_r+0x20>
 8006190:	6923      	ldr	r3, [r4, #16]
 8006192:	b943      	cbnz	r3, 80061a6 <__swbuf_r+0x32>
 8006194:	4621      	mov	r1, r4
 8006196:	4628      	mov	r0, r5
 8006198:	f000 f82a 	bl	80061f0 <__swsetup_r>
 800619c:	b118      	cbz	r0, 80061a6 <__swbuf_r+0x32>
 800619e:	f04f 37ff 	mov.w	r7, #4294967295
 80061a2:	4638      	mov	r0, r7
 80061a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	6922      	ldr	r2, [r4, #16]
 80061aa:	b2f6      	uxtb	r6, r6
 80061ac:	1a98      	subs	r0, r3, r2
 80061ae:	6963      	ldr	r3, [r4, #20]
 80061b0:	4637      	mov	r7, r6
 80061b2:	4283      	cmp	r3, r0
 80061b4:	dc05      	bgt.n	80061c2 <__swbuf_r+0x4e>
 80061b6:	4621      	mov	r1, r4
 80061b8:	4628      	mov	r0, r5
 80061ba:	f7ff fd9b 	bl	8005cf4 <_fflush_r>
 80061be:	2800      	cmp	r0, #0
 80061c0:	d1ed      	bne.n	800619e <__swbuf_r+0x2a>
 80061c2:	68a3      	ldr	r3, [r4, #8]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	60a3      	str	r3, [r4, #8]
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	6022      	str	r2, [r4, #0]
 80061ce:	701e      	strb	r6, [r3, #0]
 80061d0:	6962      	ldr	r2, [r4, #20]
 80061d2:	1c43      	adds	r3, r0, #1
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d004      	beq.n	80061e2 <__swbuf_r+0x6e>
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	07db      	lsls	r3, r3, #31
 80061dc:	d5e1      	bpl.n	80061a2 <__swbuf_r+0x2e>
 80061de:	2e0a      	cmp	r6, #10
 80061e0:	d1df      	bne.n	80061a2 <__swbuf_r+0x2e>
 80061e2:	4621      	mov	r1, r4
 80061e4:	4628      	mov	r0, r5
 80061e6:	f7ff fd85 	bl	8005cf4 <_fflush_r>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d0d9      	beq.n	80061a2 <__swbuf_r+0x2e>
 80061ee:	e7d6      	b.n	800619e <__swbuf_r+0x2a>

080061f0 <__swsetup_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4b29      	ldr	r3, [pc, #164]	@ (8006298 <__swsetup_r+0xa8>)
 80061f4:	4605      	mov	r5, r0
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	460c      	mov	r4, r1
 80061fa:	b118      	cbz	r0, 8006204 <__swsetup_r+0x14>
 80061fc:	6a03      	ldr	r3, [r0, #32]
 80061fe:	b90b      	cbnz	r3, 8006204 <__swsetup_r+0x14>
 8006200:	f7fd ff90 	bl	8004124 <__sinit>
 8006204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006208:	0719      	lsls	r1, r3, #28
 800620a:	d422      	bmi.n	8006252 <__swsetup_r+0x62>
 800620c:	06da      	lsls	r2, r3, #27
 800620e:	d407      	bmi.n	8006220 <__swsetup_r+0x30>
 8006210:	2209      	movs	r2, #9
 8006212:	602a      	str	r2, [r5, #0]
 8006214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	81a3      	strh	r3, [r4, #12]
 800621e:	e033      	b.n	8006288 <__swsetup_r+0x98>
 8006220:	0758      	lsls	r0, r3, #29
 8006222:	d512      	bpl.n	800624a <__swsetup_r+0x5a>
 8006224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006226:	b141      	cbz	r1, 800623a <__swsetup_r+0x4a>
 8006228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800622c:	4299      	cmp	r1, r3
 800622e:	d002      	beq.n	8006236 <__swsetup_r+0x46>
 8006230:	4628      	mov	r0, r5
 8006232:	f7fe ff09 	bl	8005048 <_free_r>
 8006236:	2300      	movs	r3, #0
 8006238:	6363      	str	r3, [r4, #52]	@ 0x34
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006240:	81a3      	strh	r3, [r4, #12]
 8006242:	2300      	movs	r3, #0
 8006244:	6063      	str	r3, [r4, #4]
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	f043 0308 	orr.w	r3, r3, #8
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	b94b      	cbnz	r3, 800626a <__swsetup_r+0x7a>
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800625c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006260:	d003      	beq.n	800626a <__swsetup_r+0x7a>
 8006262:	4621      	mov	r1, r4
 8006264:	4628      	mov	r0, r5
 8006266:	f000 f882 	bl	800636e <__smakebuf_r>
 800626a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626e:	f013 0201 	ands.w	r2, r3, #1
 8006272:	d00a      	beq.n	800628a <__swsetup_r+0x9a>
 8006274:	2200      	movs	r2, #0
 8006276:	60a2      	str	r2, [r4, #8]
 8006278:	6962      	ldr	r2, [r4, #20]
 800627a:	4252      	negs	r2, r2
 800627c:	61a2      	str	r2, [r4, #24]
 800627e:	6922      	ldr	r2, [r4, #16]
 8006280:	b942      	cbnz	r2, 8006294 <__swsetup_r+0xa4>
 8006282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006286:	d1c5      	bne.n	8006214 <__swsetup_r+0x24>
 8006288:	bd38      	pop	{r3, r4, r5, pc}
 800628a:	0799      	lsls	r1, r3, #30
 800628c:	bf58      	it	pl
 800628e:	6962      	ldrpl	r2, [r4, #20]
 8006290:	60a2      	str	r2, [r4, #8]
 8006292:	e7f4      	b.n	800627e <__swsetup_r+0x8e>
 8006294:	2000      	movs	r0, #0
 8006296:	e7f7      	b.n	8006288 <__swsetup_r+0x98>
 8006298:	20000018 	.word	0x20000018

0800629c <_raise_r>:
 800629c:	291f      	cmp	r1, #31
 800629e:	b538      	push	{r3, r4, r5, lr}
 80062a0:	4605      	mov	r5, r0
 80062a2:	460c      	mov	r4, r1
 80062a4:	d904      	bls.n	80062b0 <_raise_r+0x14>
 80062a6:	2316      	movs	r3, #22
 80062a8:	6003      	str	r3, [r0, #0]
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80062b2:	b112      	cbz	r2, 80062ba <_raise_r+0x1e>
 80062b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062b8:	b94b      	cbnz	r3, 80062ce <_raise_r+0x32>
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 f830 	bl	8006320 <_getpid_r>
 80062c0:	4622      	mov	r2, r4
 80062c2:	4601      	mov	r1, r0
 80062c4:	4628      	mov	r0, r5
 80062c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ca:	f000 b817 	b.w	80062fc <_kill_r>
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d00a      	beq.n	80062e8 <_raise_r+0x4c>
 80062d2:	1c59      	adds	r1, r3, #1
 80062d4:	d103      	bne.n	80062de <_raise_r+0x42>
 80062d6:	2316      	movs	r3, #22
 80062d8:	6003      	str	r3, [r0, #0]
 80062da:	2001      	movs	r0, #1
 80062dc:	e7e7      	b.n	80062ae <_raise_r+0x12>
 80062de:	2100      	movs	r1, #0
 80062e0:	4620      	mov	r0, r4
 80062e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062e6:	4798      	blx	r3
 80062e8:	2000      	movs	r0, #0
 80062ea:	e7e0      	b.n	80062ae <_raise_r+0x12>

080062ec <raise>:
 80062ec:	4b02      	ldr	r3, [pc, #8]	@ (80062f8 <raise+0xc>)
 80062ee:	4601      	mov	r1, r0
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	f7ff bfd3 	b.w	800629c <_raise_r>
 80062f6:	bf00      	nop
 80062f8:	20000018 	.word	0x20000018

080062fc <_kill_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	2300      	movs	r3, #0
 8006300:	4d06      	ldr	r5, [pc, #24]	@ (800631c <_kill_r+0x20>)
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	4611      	mov	r1, r2
 8006308:	602b      	str	r3, [r5, #0]
 800630a:	f7fa feb4 	bl	8001076 <_kill>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	d102      	bne.n	8006318 <_kill_r+0x1c>
 8006312:	682b      	ldr	r3, [r5, #0]
 8006314:	b103      	cbz	r3, 8006318 <_kill_r+0x1c>
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	bd38      	pop	{r3, r4, r5, pc}
 800631a:	bf00      	nop
 800631c:	20000444 	.word	0x20000444

08006320 <_getpid_r>:
 8006320:	f7fa bea2 	b.w	8001068 <_getpid>

08006324 <__swhatbuf_r>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	460c      	mov	r4, r1
 8006328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800632c:	4615      	mov	r5, r2
 800632e:	2900      	cmp	r1, #0
 8006330:	461e      	mov	r6, r3
 8006332:	b096      	sub	sp, #88	@ 0x58
 8006334:	da0c      	bge.n	8006350 <__swhatbuf_r+0x2c>
 8006336:	89a3      	ldrh	r3, [r4, #12]
 8006338:	2100      	movs	r1, #0
 800633a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800633e:	bf14      	ite	ne
 8006340:	2340      	movne	r3, #64	@ 0x40
 8006342:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006346:	2000      	movs	r0, #0
 8006348:	6031      	str	r1, [r6, #0]
 800634a:	602b      	str	r3, [r5, #0]
 800634c:	b016      	add	sp, #88	@ 0x58
 800634e:	bd70      	pop	{r4, r5, r6, pc}
 8006350:	466a      	mov	r2, sp
 8006352:	f000 f849 	bl	80063e8 <_fstat_r>
 8006356:	2800      	cmp	r0, #0
 8006358:	dbed      	blt.n	8006336 <__swhatbuf_r+0x12>
 800635a:	9901      	ldr	r1, [sp, #4]
 800635c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006360:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006364:	4259      	negs	r1, r3
 8006366:	4159      	adcs	r1, r3
 8006368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800636c:	e7eb      	b.n	8006346 <__swhatbuf_r+0x22>

0800636e <__smakebuf_r>:
 800636e:	898b      	ldrh	r3, [r1, #12]
 8006370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006372:	079d      	lsls	r5, r3, #30
 8006374:	4606      	mov	r6, r0
 8006376:	460c      	mov	r4, r1
 8006378:	d507      	bpl.n	800638a <__smakebuf_r+0x1c>
 800637a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800637e:	6023      	str	r3, [r4, #0]
 8006380:	6123      	str	r3, [r4, #16]
 8006382:	2301      	movs	r3, #1
 8006384:	6163      	str	r3, [r4, #20]
 8006386:	b003      	add	sp, #12
 8006388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800638a:	466a      	mov	r2, sp
 800638c:	ab01      	add	r3, sp, #4
 800638e:	f7ff ffc9 	bl	8006324 <__swhatbuf_r>
 8006392:	9f00      	ldr	r7, [sp, #0]
 8006394:	4605      	mov	r5, r0
 8006396:	4639      	mov	r1, r7
 8006398:	4630      	mov	r0, r6
 800639a:	f7fe fec7 	bl	800512c <_malloc_r>
 800639e:	b948      	cbnz	r0, 80063b4 <__smakebuf_r+0x46>
 80063a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063a4:	059a      	lsls	r2, r3, #22
 80063a6:	d4ee      	bmi.n	8006386 <__smakebuf_r+0x18>
 80063a8:	f023 0303 	bic.w	r3, r3, #3
 80063ac:	f043 0302 	orr.w	r3, r3, #2
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	e7e2      	b.n	800637a <__smakebuf_r+0xc>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	9b01      	ldr	r3, [sp, #4]
 80063c2:	6020      	str	r0, [r4, #0]
 80063c4:	b15b      	cbz	r3, 80063de <__smakebuf_r+0x70>
 80063c6:	4630      	mov	r0, r6
 80063c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063cc:	f000 f81e 	bl	800640c <_isatty_r>
 80063d0:	b128      	cbz	r0, 80063de <__smakebuf_r+0x70>
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f023 0303 	bic.w	r3, r3, #3
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	431d      	orrs	r5, r3
 80063e2:	81a5      	strh	r5, [r4, #12]
 80063e4:	e7cf      	b.n	8006386 <__smakebuf_r+0x18>
	...

080063e8 <_fstat_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	2300      	movs	r3, #0
 80063ec:	4d06      	ldr	r5, [pc, #24]	@ (8006408 <_fstat_r+0x20>)
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	f7fa fe9d 	bl	8001134 <_fstat>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d102      	bne.n	8006404 <_fstat_r+0x1c>
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	b103      	cbz	r3, 8006404 <_fstat_r+0x1c>
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	bf00      	nop
 8006408:	20000444 	.word	0x20000444

0800640c <_isatty_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	2300      	movs	r3, #0
 8006410:	4d05      	ldr	r5, [pc, #20]	@ (8006428 <_isatty_r+0x1c>)
 8006412:	4604      	mov	r4, r0
 8006414:	4608      	mov	r0, r1
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	f7fa fe9b 	bl	8001152 <_isatty>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_isatty_r+0x1a>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_isatty_r+0x1a>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	20000444 	.word	0x20000444

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	bf00      	nop
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
